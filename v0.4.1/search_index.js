var documenterSearchIndex = {"docs":
[{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"DocTestFilters = [r\"≤|<=\", r\" == | = \", r\" ∈ | in \", r\" for all | ∀ \", r\"d|∂\", \n                  r\"E|𝔼\", r\"integral|∫\"]","category":"page"},{"location":"tutorials/quick_start/#Quick-Start-Guide","page":"Quick Start","title":"Quick Start Guide","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Below we exemplify and briefly explain the very basics behind defining and solving  an infinite-dimensional optimization problem in InfiniteOpt. Please refer to the  Guide on our subsequent pages for more complete information. The Basic Usage sections  on the each guide page are good places to start from. Also, the syntax of InfiniteOpt  is inspired by JuMP thus we recommend new users that haven't used JuMP, first  consult their tutorials starting  here.","category":"page"},{"location":"tutorials/quick_start/#Preliminaries","page":"Quick Start","title":"Preliminaries","text":"","category":"section"},{"location":"tutorials/quick_start/#Software-Setup","page":"Quick Start","title":"Software Setup","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"First, we need to make sure everything is installed. This will include:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"installing Julia \ninstalling the InfiniteOpt.jl, JuMP.jl, and Distributions.jl packages\ninstalling wanted optimizers e.g., Ipopt.jl and Clp.jl","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"See Installation for more information.","category":"page"},{"location":"tutorials/quick_start/#Problem-Formulation","page":"Quick Start","title":"Problem Formulation","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now we need to formulate the problem we want to solve mathematically. For example,  let's define a simple optimal control model:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"beginaligned\n\tundersetx_i(t xi) v_i(t xi) y_w(xi) u_i(t)textmin  int_t in mathcalD_t sum_i in I u_i^2(t) dt \n\ttextst  x_i(0 xi) = x0_i  forall i in I xi in mathcalD_xi\n     v_i(0 xi) = v0_i  forall i in I xi in mathcalD_xi \n\t fracpartial x_i(t xi)partial t = v_i(t xi)  forall i in I t in mathcalD_t xi in mathcalD_xi\n     xifracpartial v_i(t xi)partial t = u_i(t)  forall i in I t in mathcalD_t xi in mathcalD_xi\n     y_w(xi) = sum_i in I(x_i(t_w xi) - p_iw)^2  forall w in W xi in mathcalD_xi \n     y_w(xi) geq 0  forall w in W xi in mathcalD_xi \n     mathbbE_xileftsum_w in W y_w(xi) right leq epsilon \n     xi sim mathcalN(mu sigma^2) \n     t in mathcalD_t\nendaligned","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice this model is both dynamic with time t and random with respect to xi.","category":"page"},{"location":"tutorials/quick_start/#Parameter-Specification","page":"Quick Start","title":"Parameter Specification","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Before moving on we'll need to define the necessary constants and problem  parameters. Thus, continuing with our example we define the following in our  Julia session (these could also be put into a script as is shown at the bottom  of this page):","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> μ = 1; σ = 0.2; # set the distribution parameters \n\njulia> x0 = [0, 0]; v0 = [0, 0]; # set the initial conditions\n\njulia> p = [1 4 6 1; 1 3 0 1]; tw = [0, 25, 50, 60]; # set waypoint specifications\n\njulia> I = 1:2; W = 1:4; # set the finite domains","category":"page"},{"location":"tutorials/quick_start/#Model-Definition","page":"Quick Start","title":"Model Definition","text":"","category":"section"},{"location":"tutorials/quick_start/#Model-Initialization","page":"Quick Start","title":"Model Initialization","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"The first thing we need to do is initialize our InfiniteModel and assign an  appropriate optimizer that will be used to solve its transcripted variant. For our  little example let's choose to use Ipopt:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> using InfiniteOpt, Distributions, Ipopt;\n\njulia> model = InfiniteModel(Ipopt.Optimizer)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Learn more about InfiniteModels and optimizers on our  Infinite Models page.","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Before moving on, let's go ahead make a finite parameter via @finite_parameter  for epsilon since this likely a constant we'll want to update repeatedly  (e.g., to determine a tradeoff curve by varying it): ","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @finite_parameter(model, ϵ == 10)\nϵ","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Learn more about finite parameters on our Finite Parameters  page.","category":"page"},{"location":"tutorials/quick_start/#Infinite-Parameters","page":"Quick Start","title":"Infinite Parameters","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"The next thing we need to do is identify the infinite domains our problem contains  and define an infinite parameter(s) for each one via [@infinite_parameter]. For  this problem we have the time domain t in mathcalD_t and the random domain  xi in mathcalD_xi where xi sim mathcalN(mu sigma^2):","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @infinite_parameter(model, t in [0, 60], num_supports = 61, \n                           derivative_method = OrthogonalCollocation(2))\nt\n\njulia> @infinite_parameter(model, ξ ~ Normal(μ, σ^2), num_supports = 10)\nξ","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice we specify the domain/distribution the parameter depends on via in. Here we also specify the number of finite supports we desire for each parameter  that will ultimately be used to reformulate and solve the problem (i.e., discretize).  We also specify the derivative evaluation method associated with t that will be  used evaluate the derivatives numerically. See more information about parameters  on our Infinite Parameters page. Also learn more about  derivative methods on our Derivative Operators page.","category":"page"},{"location":"tutorials/quick_start/#Variables","page":"Quick Start","title":"Variables","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now that we have an InfiniteModel and infinite parameters let's define our  decision variables. First, infinite variables (ones that depend on infinite  parameters) are defined via  @variable  with the addition of the Infinite variable type argument to specify the  infinite parameters it depends on:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @variable(model, x[I], Infinite(t, ξ), start = 0)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{GeneralVariableRef}:\n x[1](t, ξ)\n x[2](t, ξ)\n\njulia> @variable(model, v[I], Infinite(t, ξ), start = 0)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{GeneralVariableRef}:\n v[1](t, ξ)\n v[2](t, ξ)\n\njulia> @variable(model, u[I], Infinite(t), start = 0)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{GeneralVariableRef}:\n u[1](t)\n u[2](t)\n\njulia> @variable(model, y[W] >= 0, Infinite(ξ), start = 0)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:4\nAnd data, a 4-element Vector{GeneralVariableRef}:\n y[1](ξ)\n y[2](ξ)\n y[3](ξ)\n y[4](ξ)","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice that we specifying the initial guess for all of them via start. We also  can symbolically define variable conditions like the lower bound on y.","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"That does it for this example, but other problems might also employ the following:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Finite variables: variables that do not depend on infinite parameters  (defined using @variable)\nSemi-infinite variables: infinite variables where 1 or more parameters are  set a particular point (defined using @variable with the SemiInfinite  variable type argument) \nPoint variables: infinite variables at a particular point (defined using  @variable with the Point variable type argument).","category":"page"},{"location":"tutorials/quick_start/#Objective-and-Constraints","page":"Quick Start","title":"Objective & Constraints","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now that the variables and parameters are ready to go, let's define our problem.  First, we can define the objective using  @objective:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @objective(model, Min, integral(sum(u[i]^2 for i in I), t))\n∫{t ∈ [0, 60]}[u[1](t)² + u[2](t)²]","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice that we also employ integral to define the integral. Note that  objectives must evaluate over all included infinite domains. ","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now let's define the initial conditions using  @constraint  in combination with Restricted Variables which will restrict the domain  of the variables to only be enforced at the initial time:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @constraint(model, [i in I], x[i](0, ξ) == x0[i])\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{InfOptConstraintRef}:\n x[1](0, ξ) = 0.0, ∀ ξ ~ Normal\n x[2](0, ξ) = 0.0, ∀ ξ ~ Normal\n\njulia> @constraint(model, [i in I], v[i](0, ξ) == v0[i])\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{InfOptConstraintRef}:\n v[1](0, ξ) = 0.0, ∀ ξ ~ Normal\n v[2](0, ξ) = 0.0, ∀ ξ ~ Normal","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Note it is important that we include appropriate boundary conditions when using  derivatives in our model. For more information please see  Derivative Operators.","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Next, we can add our model constraints that have derivatives using  @constraint  and deriv:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @constraint(model, c1[i in I], deriv(x[i], t) == v[i])\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{InfOptConstraintRef}:\n c1[1] : ∂/∂t[x[1](t, ξ)] - v[1](t, ξ) = 0.0, ∀ t ∈ [0, 60], ξ ~ Normal\n c1[2] : ∂/∂t[x[2](t, ξ)] - v[2](t, ξ) = 0.0, ∀ t ∈ [0, 60], ξ ~ Normal\n\njulia> @constraint(model, c2[i in I], ξ * deriv(v[i], t) == u[i])\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{InfOptConstraintRef}:\n c2[1] : ξ*∂/∂t[v[1](t, ξ)] - u[1](t) = 0.0, ∀ t ∈ [0, 60], ξ ~ Normal\n c2[2] : ξ*∂/∂t[v[2](t, ξ)] - u[2](t) = 0.0, ∀ t ∈ [0, 60], ξ ~ Normal","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Finally, we can define our last 2 constraints:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @constraint(model, c3[w in W], y[w] == sum((x[i](tw[w], ξ) - p[i, w])^2 for i in I))\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:4\nAnd data, a 4-element Vector{InfOptConstraintRef}:\n c3[1] : -x[1](0, ξ)² - x[2](0, ξ)² + y[1](ξ) + 2 x[1](0, ξ) + 2 x[2](0, ξ) = 2.0, ∀ ξ ~ Normal\n c3[2] : -x[1](25, ξ)² - x[2](25, ξ)² + y[2](ξ) + 8 x[1](25, ξ) + 6 x[2](25, ξ) = 25.0, ∀ ξ ~ Normal\n c3[3] : -x[1](50, ξ)² - x[2](50, ξ)² + y[3](ξ) + 12 x[1](50, ξ) = 36.0, ∀ ξ ~ Normal\n c3[4] : -x[1](60, ξ)² - x[2](60, ξ)² + y[4](ξ) + 2 x[1](60, ξ) + 2 x[2](60, ξ) = 2.0, ∀ ξ ~ Normal\n\njulia> @constraint(model, c4, expect(sum(y[w] for w in W), ξ) <= ϵ)\nc4 : 𝔼{ξ}[y[1](ξ) + y[2](ξ) + y[3](ξ) + y[4](ξ)] - ϵ ≤ 0.0","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice we are able to invoke an expectation simply by calling expect.","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"That's it, now we have our problem defined in InfiniteOpt!","category":"page"},{"location":"tutorials/quick_start/#Solution-and-Queries","page":"Quick Start","title":"Solution & Queries","text":"","category":"section"},{"location":"tutorials/quick_start/#Optimize","page":"Quick Start","title":"Optimize","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now that our model is defined, let's optimize it via optimize!:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> optimize!(model)\n","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"We can check the solution status via  termination_status:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> termination_status(model)\nLOCALLY_SOLVED::TerminationStatusCode = 4","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Thus, our model was solved successfully! For more information please see our  Optimization and Results pages.","category":"page"},{"location":"tutorials/quick_start/#Query-the-Solution","page":"Quick Start","title":"Query the Solution","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Finally, we can query a wide variety of information about our solution. Perhaps  most commonly we'll want to know the objective value and the optimal primal values  of decision variables. This is accomplished via  objective_value and  value:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> opt_obj = objective_value(model);\n\njulia> u_opt = value.(u);","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Note that u_opt will be multi-dimensional combination with the support values used  to transcribe u(t) along the domain of t. We can query those corresponding  support values via supports:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> u_ts = supports.(u)\n1-dimensional DenseAxisArray{Vector{Tuple},1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{Vector{Tuple}}:\n [(0.0,), (1.0,), (2.0,), (3.0,), (4.0,), (5.0,), (6.0,), (7.0,), (8.0,), (9.0,)  …  (51.0,), (52.0,), (53.0,), (54.0,), (55.0,), (56.0,), (57.0,), (58.0,), (59.0,), (60.0,)]\n [(0.0,), (1.0,), (2.0,), (3.0,), (4.0,), (5.0,), (6.0,), (7.0,), (8.0,), (9.0,)  …  (51.0,), (52.0,), (53.0,), (54.0,), (55.0,), (56.0,), (57.0,), (58.0,), (59.0,), (60.0,)]","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Please see the Results page for more information. ","category":"page"},{"location":"tutorials/quick_start/#Summary-Script","page":"Quick Start","title":"Summary Script","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"The example used in the sections above is summarized in the script below:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"using InfiniteOpt, Distributions, Ipopt\n\n# DEFINE THE PROBLEM CONSTANTS\nμ = 1; σ = 0.2\nx0 = [0, 0]; v0 = [0, 0]\np = [1 4 6 1; 1 3 0 1]; tw = [0, 25, 50, 60]\nI = 1:2; W = 1:4\n\n# INITIALIZE THE MODEL\nmodel = InfiniteModel(Ipopt.Optimizer)\n\n# INITIALIZE THE PARAMETERS\n@finite_parameter(model, ϵ == 10)\n@infinite_parameter(model, t in [0, 60], num_supports = 61, \n                    derivative_method = OrthogonalCollocation(2))\n@infinite_parameter(model, ξ ~ Normal(μ, σ^2), num_supports = 10)\n\n# INITIALIZE THE VARIABLES\n@variable(model, x[I], Infinite(t, ξ), start = 0)\n@variable(model, v[I], Infinite(t, ξ), start = 0)\n@variable(model, u[I], Infinite(t), start = 0)\n@variable(model, y[W] >= 0, Infinite(ξ), start = 0)\n\n# SET THE OBJECTIVE\n@objective(model, Min, integral(sum(u[i]^2 for i in I), t))\n\n# SET THE INITIAL CONDITIONS\n@constraint(model, [i in I], x[i](0, ξ) == x0[i])\n@constraint(model, [i in I], v[i](0, ξ) == v0[i])\n\n# SET THE PROBLEM CONSTRAINTS\n@constraint(model, c1[i in I], @deriv(x[i], t) == v[i])\n@constraint(model, c2[i in I], ξ * @deriv(v[i], t) == u[i])\n@constraint(model, c3[w in W], y[w] == sum((x[i](tw[w], ξ) - p[i, w])^2 for i in I))\n@constraint(model, c4, expect(sum(y[w] for w in W), ξ) <= ϵ)\n\n# SOLVE THE MODEL\noptimize!(model)\n\n# GET THE RESULTS\ntermination_status(model)\nopt_obj = objective_value(model)\nu_opt = value.(u)\nu_ts = supports.(u)","category":"page"},{"location":"manual/transcribe/#transcription_manual","page":"Model Transcription","title":"Model Transcription","text":"","category":"section"},{"location":"manual/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"A technical manual for InfiniteOpt.TranscriptionOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/transcribe/#Definition","page":"Model Transcription","title":"Definition","text":"","category":"section"},{"location":"manual/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"InfiniteOpt.TranscriptionOpt.TranscriptionModel\nInfiniteOpt.TranscriptionOpt.TranscriptionData\nInfiniteOpt.TranscriptionOpt.set_parameter_supports\nInfiniteOpt.TranscriptionOpt.transcribe_finite_variables!\nInfiniteOpt.TranscriptionOpt.transcribe_infinite_variables!\nInfiniteOpt.TranscriptionOpt.transcribe_derivative_variables!\nInfiniteOpt.TranscriptionOpt.transcribe_semi_infinite_variables!\nInfiniteOpt.TranscriptionOpt.transcribe_point_variables!\nInfiniteOpt.TranscriptionOpt.transcription_expression\nInfiniteOpt.TranscriptionOpt.transcribe_measures!\nInfiniteOpt.TranscriptionOpt.transcribe_objective!\nInfiniteOpt.TranscriptionOpt.transcribe_constraints!\nInfiniteOpt.TranscriptionOpt.transcribe_derivative_evaluations!\nInfiniteOpt.TranscriptionOpt.build_transcription_model!\nInfiniteOpt.add_point_variable(::JuMP.Model,::InfiniteOpt.GeneralVariableRef,::Vector{Float64},::Val{:TransData})\nInfiniteOpt.add_semi_infinite_variable(::JuMP.Model,::InfiniteOpt.SemiInfiniteVariable,::Val{:TransData})\nInfiniteOpt.build_optimizer_model!(::InfiniteOpt.InfiniteModel,::Val{:TransData})","category":"page"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.TranscriptionModel","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.TranscriptionModel","text":"TranscriptionModel([optimizer_constructor;\n                   caching_mode::MOIU.CachingOptimizerMode = MOIU.AUTOMATIC,\n                   bridge_constraints::Bool = true])::JuMP.Model\n\nReturn a JuMP.Model with TranscriptionData included in the ext data field. Accepts the same arguments as a typical JuMP Model. More detailed variable and constraint naming can be enabled via verbose_naming.\n\nExample\n\njulia> TranscriptionModel()\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.TranscriptionData","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.TranscriptionData","text":"TranscriptionData\n\nA DataType for storing the data mapping an InfiniteOpt.InfiniteModel that has been transcribed to a regular JuMP.Model that contains the transcribed variables. This is stored in the ext field of a JuMP.Model to make what is called a TranscriptionModel via the TranscriptionModel constructor.\n\nFields\n\ninfvar_lookup::Dict{InfiniteOpt.GeneralVariableRef, Dict{Vector{Float64}, Int}}:  A lookup table of infinite variable transcriptions via support value.\ninfvar_mappings::Dict{InfiniteOpt.GeneralVariableRef, Vector{JuMP.VariableRef}}:  Map infinite variables to their transcription variables.\ninfvar_supports::Dict{InfiniteOpt.GeneralVariableRef, Vector{Tuple}}:  Map infinite variables to their support values.\ninfvar_support_labels::Dict{InfiniteOpt.GeneralVariableRef, Vector{Set{DataType}}}:   Map the infinite variables to their support labels.\nfinvar_mappings::Dict{InfiniteOpt.GeneralVariableRef, JuMP.VariableRef}:  Map finite variables to their transcription variables.\nsemi_infinite_vars::Vector{InfiniteOpt.SemiInfiniteVariable{InfiniteOpt.GeneralVariableRef}}:  Store the core semi-infinite variable objects of semi-infinite variables formed on transcription.\nsemi_lookup::Dict{Tuple{InfiniteOpt.GeneralVariableRef, Dict{Int, Float64}}, InfiniteOpt.GeneralVariableRef}:  Lookup which semi-infinite variables have already been added.\nlast_point_index::Int: The last internal point variable index added.\npoint_lookup::Dict{Tuple{InfiniteOpt.GeneralVariableRef, Vector{Float64}}, InfiniteOpt.GeneralVariableRef}:  Lookup which point variables have already been created internally.\nmeasure_lookup::Dict{InfiniteOpt.GeneralVariableRef, Dict{Vector{Float64}, Int}}:  A lookup table of measure transcriptions via support value.\nmeasure_mappings::Dict{InfiniteOpt.GeneralVariableRef, Vector{JuMP.AbstractJuMPScalar}}:  Map measures to transcription expressions.\nmeasure_supports::Dict{InfiniteOpt.GeneralVariableRef, Vector{Tuple}}:  Map measures to their supports values (if the transcribed measure is still infinite).\nmeasure_support_labels::Dict{InfiniteOpt.GeneralVariableRef, Vector{Set{DataType}}}:   Map measures to their support labels if they have any.\nconstr_mappings::Dict{InfiniteOpt.InfOptConstraintRef, Vector{JuMP.ConstraintRef}}:  Map constraints to their transcriptions.\nconstr_supports::Dict{InfiniteOpt.InfOptConstraintRef, Vector{Tuple}}:  Map constraints to their support values.\nconstr_support_labels::Dict{InfiniteOpt.InfOptConstraintRef, Vector{Set{DataType}}}:   Map constraints to their support labels.\nsupports::Tuple: Store the collected parameter supports here.\nsupport_labels::Tuple: Store the collected parameter labels here.\nhas_internal_supports::Bool: Where any internal supports collected?\n\n\n\n\n\n","category":"type"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.set_parameter_supports","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.set_parameter_supports","text":"set_parameter_supports(trans_model::JuMP.Model,\n                       inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nCollect the infinite parameter supports stored in their respective dictionaries form inf_model and process them into a tuple of vectors where each vector contains the collected supports of a particular infinite parameter. These support collections are ordered in accordance with the definition order of the parameters (i.e., their object numbers). A support collection assocciated with an independent will be a Vector{Float64} and a support collection associated with a group of dependent parameters will be a Vector{Vector{Float64}}. Note that each collection vector will include an extra final placeholder element comprised of NaNs for convenience in generating support indices via support_index_iterator. This also gathers the associated support labels. \n\nBefore this is all done, InfiniteOpt.add_generative_supports is invoked as needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_finite_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_finite_variables!","text":"transcribe_finite_variables!(trans_model::JuMP.Model,\n                           inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nCreate a transcription variable (i.e., a JuMP variable) for each FiniteVariable stored in inf_model and add it to trans_model. The variable mapping is also stored in TranscriptionData.finvar_mappings which enables transcription_variable and lookup_by_support.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_infinite_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_infinite_variables!","text":"transcribe_infinite_variables!(trans_model::JuMP.Model,\n                               inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nCreate transcription variables (i.e., JuMP variables) for each InfiniteVariable stored in inf_model and add them to trans_model. The variable mappings are also stored in TranscriptionData.infvar_mappings in accordance with TranscriptionData.infvar_lookup which enable transcription_variable and lookup_by_support. Note that the supports will not be generated until InfiniteOpt.variable_supports is invoked via InfiniteOpt.supports.  Note that TranscriptionData.infvar_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_derivative_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_derivative_variables!","text":"transcribe_derivative_variables!(trans_model::JuMP.Model,\n                                 inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nCreate transcription variables (i.e., JuMP variables) for each Derivative stored in inf_model and add them to trans_model. The variable mappings are also stored in TranscriptionData.infvar_mappings in accordance with TranscriptionData.infvar_lookup which enable transcription_variable and lookup_by_support. Note that the supports will not be generated until InfiniteOpt.variable_supports is invoked via InfiniteOpt.supports. The  futher derivative evaluation constraints are added when  transcribe_derivative_evaluations! is invoked. Note that  TranscriptionData.infvar_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_semi_infinite_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_semi_infinite_variables!","text":"transcribe_semi_infinite_variables!(trans_model::JuMP.Model,\n                              inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nMap each SemiInfiniteVariable in inf_model to transcription variables stored in trans_model. The variable mappings are also stored in TranscriptionData.infvar_mappings in accordance with TranscriptionData.infvar_lookup which enable transcription_variable and lookup_by_support. Note that transcribe_infinite_variables! must be called first. Note that the supports will not be generated until InfiniteOpt.variable_supports is invoked via InfiniteOpt.supports.  Note that TranscriptionData.infvar_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_point_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_point_variables!","text":"transcribe_point_variables!(trans_model::JuMP.Model,\n                           inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nMap each PointVariable in inf_model to a transcription variable stored in trans_model. The variable mapping is also stored in TranscriptionData.finvar_mappings which enables transcription_variable and lookup_by_support. Note that transcribe_infinite_variables! must be called first and that the info constraints associated with the transcription variable will be updated in accordance with the point variable.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_expression","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_expression","text":"transcription_expression(\n    model::JuMP.Model,\n    expr::JuMP.AbstractJuMPScalar;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the transcribed expression(s) corresponding to expr. Errors if expr cannot be transcribed. Also can query via the syntax:\n\ntranscription_expression(expr::JuMP.AbstractJuMPScalar;\n                         [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n                         ndarray::Bool = false])\n\nIf the infinite model contains a built transcription model. By default, this method returns only transcribed expressions associated with public supports. All the  expressions can be returned by setting label = All.\n\nIf expr is infinite and ndarray = true then an n-dimensional array will be  returned in accordance with the infinite parameters that have unique object  numbers. In this case, label will be used to search the intersection of the supports that use the label. This is defers from the default behavior which  considers the union.\n\nExample\n\njulia> transcription_expression(trans_model, my_expr)\nx(support: 1) - y\n\njulia> transcription_expression(my_expr)\nx(support: 1) - y\n\n\n\n\n\ntranscription_expression(trans_model::JuMP.Model, expr, support::Vector{Float64})\n\nGiven the expr from an InfiniteModel, form its transcripted version in accordance with the variable mappings available in trans_model defined at support. This should only be used once all variables and measures have been transcribed (e.g., via transcribe_finite_variables!).\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_measures!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_measures!","text":"transcribe_measures!(trans_model::JuMP.Model,\n                     inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nFor each Measure in inf_model expand it via InfiniteOpt.expand_measure or analytic_expansion as appropriate and transcribe the expanded expression via transcription_expression. Then store the measure to transcripted expression mappings in TranscriptionData.measure_mappings and TranscriptionData.measure_lookup to enable transcription_variable and lookup_by_support. Note that the supports will not be generated until InfiniteOpt.variable_supports is invoked via InfiniteOpt.supports.  Note that TranscriptionData.measure_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_objective!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_objective!","text":"transcribe_objective!(trans_model::JuMP.Model,\n                      inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nForm the transcripted version of the objective stored in inf_model and add it to trans_model. Note that all the variables and measures in inf_model must by transcripted first (e.g., via transcribe_infinite_variables!).\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_constraints!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_constraints!","text":"transcribe_constraints!(trans_model::JuMP.Model,\n                        inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nFor each constraint in inf_model form its transcripted version(s) and add them to trans_model. The mappings are stored in TranscriptionData.constr_mappings and the associated supports are stored in TranscriptionData.constr_supports to enable transcription_constraint and InfiniteOpt.constraint_supports. Note that variable info constraints are simply mapped to the existing info constraints already generated along with the transcription variables. Note that the variables and measures must all first be transcripted (e.g., via transcribe_measures!). Note that  TranscriptionData.constr_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_derivative_evaluations!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_derivative_evaluations!","text":"transcribe_derivative_evaluations!(trans_model::JuMP.Model, \n                                   inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nGenerate the auxiliary derivative evaluation equations and transcribe them  appropriately for all the derivatives in inf_model. These are in turn added to  trans_model. Note that no mapping information is recorded since the InfiniteModel  won't have any constraints that correspond to these equations. Also Note that the variables and measures must all first be transcripted (e.g., via transcribe_derivative_variables!).\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.build_transcription_model!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.build_transcription_model!","text":"build_transcription_model!(trans_model::JuMP.Model,\n                           inf_model::InfiniteOpt.InfiniteModel;\n                           [check_support_dims::Bool = true])::Nothing\n\nGiven an empty trans_model build it using the information stored in inf_model. This is intended for a TranscriptionModel that serves as a internal optimizer model of inf_model. This detail is important to correctly enable internally generated semi-infinite variables during the transcription process such that inf_model is not modified. Note that this will add supports to inf_model via InfiniteOpt.fill_in_supports! for infinite parameters that contain no supports. Also a warning is thrown when the transcription model contains more than 15,000 support points to alert users when they may naively have a few independent supports whose product quickly yields a very large grid. For example having 3 independent parameters with 100 supports each would result in 1,000,000 supports if all three are together in at least 1 constraint. This  behavior can be overcome using dependent parameters. The warning can be turned off  via check_support_dims = false.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.add_point_variable-Tuple{Model, GeneralVariableRef, Vector{Float64}, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.add_point_variable","text":"InfiniteOpt.add_point_variable(model::JuMP.Model,\n                               var::InfiniteOpt.PointVariable,\n                               key::Val{:TransData}\n                               )::InfiniteOpt.GeneralVariableRef\n\nMake a PointVariableRef and map it to the appropriate transcription variable and return the GeneralVariableRef. This is an extension of add_point_variable for TranscriptionOpt.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.add_semi_infinite_variable-Tuple{Model, SemiInfiniteVariable, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.add_semi_infinite_variable","text":"InfiniteOpt.add_semi_infinite_variable(model::JuMP.Model,\n                                 var::InfiniteOpt.SemiInfiniteVariable,\n                                 key::Val{:TransData}\n                                 )::InfiniteOpt.GeneralVariableRef\n\nMake a SemiInfiniteVariableRef and add var to the transcription data  and return the GeneralVariableRef. This is an extension of  add_semi_infinite_variable  for TranscriptionOpt. Note that internal_semi_infinite_variable is also  extended to be able to access the var.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.build_optimizer_model!-Tuple{InfiniteModel, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.build_optimizer_model!","text":"InfiniteOpt.build_optimizer_model!(model::InfiniteOpt.InfiniteModel,\n                                   key::Val{:TransData};\n                                   check_support_dims::Bool = true)::Nothing\n\nTranscribe model and store it as a TranscriptionModel in the model.optimizer_model field which can be accessed with transcription_model. Ths clears the existing TranscriptionModel via InfiniteOpt.clear_optimizer_model_build! and then builds a new one using build_transcription_model!.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#Queries","page":"Model Transcription","title":"Queries","text":"","category":"section"},{"location":"manual/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"InfiniteOpt.TranscriptionOpt.is_transcription_model\nInfiniteOpt.TranscriptionOpt.transcription_data\nInfiniteOpt.TranscriptionOpt.has_internal_supports\nInfiniteOpt.TranscriptionOpt.transcription_model\nInfiniteOpt.TranscriptionOpt.transcription_variable(::JuMP.Model,::InfiniteOpt.GeneralVariableRef)\nInfiniteOpt.optimizer_model_variable(::InfiniteOpt.GeneralVariableRef,::Val{:TransData})\nInfiniteOpt.variable_supports(::JuMP.Model,::Union{InfiniteOpt.InfiniteVariableRef, InfiniteOpt.SemiInfiniteVariableRef},::Val{:TransData})\nInfiniteOpt.TranscriptionOpt.lookup_by_support(::JuMP.Model,::InfiniteOpt.GeneralVariableRef,::Vector)\nInfiniteOpt.internal_semi_infinite_variable(::InfiniteOpt.SemiInfiniteVariableRef,::Val{:TransData})\nInfiniteOpt.TranscriptionOpt.transcription_expression(::JuMP.Model,::Union{JuMP.GenericAffExpr, JuMP.GenericQuadExpr})\nInfiniteOpt.optimizer_model_expression(::Union{JuMP.GenericAffExpr, JuMP.GenericQuadExpr},::Val{:TransData})\nInfiniteOpt.expression_supports(::JuMP.Model,::Union{JuMP.GenericAffExpr, JuMP.GenericQuadExpr}, ::Val{:TransData})\nInfiniteOpt.TranscriptionOpt.transcription_constraint(::JuMP.Model,::InfiniteOpt.InfOptConstraintRef)\nInfiniteOpt.optimizer_model_constraint(::InfiniteOpt.InfOptConstraintRef,::Val{:TransData})\nInfiniteOpt.constraint_supports(::JuMP.Model,::InfiniteOpt.InfOptConstraintRef,::Val{:TransData})\nInfiniteOpt.TranscriptionOpt.parameter_supports(::JuMP.Model)","category":"page"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.is_transcription_model","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.is_transcription_model","text":"is_transcription_model(model::JuMP.Model)::Bool\n\nReturn true if model is a TranscriptionModel or false otherwise.\n\nExample\n\njulia> is_transcription_model(model)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_data","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_data","text":"transcription_data(model::JuMP.Model)::TranscriptionData\n\nReturn the TranscriptionData from a TranscriptionModel. Errors if it is not a TranscriptionModel.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.has_internal_supports","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.has_internal_supports","text":"has_internal_supports(model::JuMP.Model)::Bool\n\nReturn a Bool whether model has any internal supports that were collected.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_model","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_model","text":"transcription_model(model::InfiniteOpt.InfiniteModel)::JuMP.Model\n\nReturn the transcription model stored in model if that is what is stored in model.optimizer_model.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_variable-Tuple{Model, GeneralVariableRef}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_variable","text":"transcription_variable(model::JuMP.Model,\n    vref::InfiniteOpt.GeneralVariableRef;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n     ndarray::Bool = false])\n\nReturn the transcribed variable reference(s) corresponding to vref. Errors if no transcription variable is found. Also can query via the syntax:\n\ntranscription_variable(vref::InfiniteOpt.GeneralVariableRef; \n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n     ndarray::Bool = false])\n\nIf the infinite model contains a built transcription model. By default, this method returns only transcribed variables associated with public supports. All the  variables can be returned by setting label = All. \n\nIf vref is infinite and ndarray = true then an n-dimensional array will be  returned in accordance with the infinite parameters that have unique object  numbers. In this case, label will be used to search the intersection of variable  supports that use the label. This is defers from the default behavior which  considers the union.\n\nExample\n\njulia> transcription_variable(trans_model, infvar)\n2-element Array{VariableRef,1}:\n infvar(support: 1)\n infvar(support: 2)\n\njulia> transcription_variable(trans_model, hdvar)\nhdvar\n\njulia> transcription_variable(infvar)\n2-element Array{VariableRef,1}:\n infvar(support: 1)\n infvar(support: 2)\n\njulia> transcription_variable(hdvar)\nhdvar\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.optimizer_model_variable-Tuple{GeneralVariableRef, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.optimizer_model_variable","text":"InfiniteOpt.optimizer_model_variable(vref::InfiniteOpt.GeneralVariableRef,\n    ::Val{:TransData};\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nProper extension of InfiniteOpt.optimizer_model_variable for TranscriptionModels. This simply dispatches to transcription_variable.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.variable_supports-Tuple{Model, Union{InfiniteVariableRef, SemiInfiniteVariableRef}, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.variable_supports","text":"InfiniteOpt.variable_supports(model::JuMP.Model,\n    vref::InfiniteOpt.DecisionVariableRef,\n    key::Val{:TransData} = Val(:TransData);\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the support alias mapping associated with vref in the transcription model. Errors if vref does not have transcripted variables. See transcription_variable  for an explanation of ndarray.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.lookup_by_support-Tuple{Model, GeneralVariableRef, Vector{T} where T}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.lookup_by_support","text":"lookup_by_support(model::JuMP.Model,\n                  vref::InfiniteOpt.GeneralVariableRef,\n                  support::Vector)\n\nReturn the transcription expression of vref defined at its support. This is intended as a helper method for automated transcription.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.internal_semi_infinite_variable-Tuple{SemiInfiniteVariableRef, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.internal_semi_infinite_variable","text":"InfiniteOpt.internal_semi_infinite_variable(\n    vref::InfiniteOpt.SemiInfiniteVariableRef,\n    ::Val{:TransData}\n    )::InfiniteOpt.SemiInfiniteVariable{InfiniteOpt.GeneralVariableRef}\n\nReturn the internal semi-infinite variable associated with vref, assuming it was added internally during measure expansion at the transcription step. This extends InfiniteOpt.internal_semi_infinite_variable as described in its docstring. Errors, if no such variable can be found.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_expression-Tuple{Model, Union{GenericAffExpr, GenericQuadExpr}}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_expression","text":"transcription_expression(\n    model::JuMP.Model,\n    expr::JuMP.AbstractJuMPScalar;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the transcribed expression(s) corresponding to expr. Errors if expr cannot be transcribed. Also can query via the syntax:\n\ntranscription_expression(expr::JuMP.AbstractJuMPScalar;\n                         [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n                         ndarray::Bool = false])\n\nIf the infinite model contains a built transcription model. By default, this method returns only transcribed expressions associated with public supports. All the  expressions can be returned by setting label = All.\n\nIf expr is infinite and ndarray = true then an n-dimensional array will be  returned in accordance with the infinite parameters that have unique object  numbers. In this case, label will be used to search the intersection of the supports that use the label. This is defers from the default behavior which  considers the union.\n\nExample\n\njulia> transcription_expression(trans_model, my_expr)\nx(support: 1) - y\n\njulia> transcription_expression(my_expr)\nx(support: 1) - y\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.optimizer_model_expression-Tuple{Union{GenericAffExpr, GenericQuadExpr}, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.optimizer_model_expression","text":"InfiniteOpt.optimizer_model_expression(expr::JuMP.AbstractJuMPScalar,\n    ::Val{:TransData};\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nProper extension of InfiniteOpt.optimizer_model_expression for TranscriptionModels. This simply dispatches to transcription_expression.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.expression_supports-Tuple{Model, Union{GenericAffExpr, GenericQuadExpr}, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.expression_supports","text":"InfiniteOpt.expression_supports(model::JuMP.Model,\n    expr::JuMP.AbstractJuMPScalar,\n    key::Val{:TransData} = Val(:TransData);\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the support alias mappings associated with expr. Errors if expr cannot be transcribed.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_constraint-Tuple{Model, InfOptConstraintRef}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_constraint","text":"transcription_constraint(model::JuMP.Model,\n    cref::InfiniteOpt.InfOptConstraintRef;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the transcribed constraint reference(s) corresponding to cref. Errors if cref has not been transcribed. Also can query via the syntax:\n\ntranscription_constraint(cref::InfiniteOpt.InfOptConstraintRef;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nIf the infinite model contains a built transcription model. By default, this method returns only transcribed constraints associated with public supports. All the  constraints can be returned by setting label = All.\n\nIf cref is infinite and ndarray = true then an n-dimensional array will be  returned in accordance with the infinite parameters that have unique object  numbers. In this case, label will be used to search the intersection of the supports that use the label. This is defers from the default behavior which  considers the union.\n\nExample\n\njulia> transcription_constraint(trans_model, fin_con)\nfin_con : x(support: 1) - y <= 3.0\n\njulia> transcription_constraint(fin_con)\nfin_con : x(support: 1) - y <= 3.0\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.optimizer_model_constraint-Tuple{InfOptConstraintRef, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.optimizer_model_constraint","text":"InfiniteOpt.optimizer_model_constraint(\n    cref::InfiniteOpt.InfOptConstraintRef,\n    ::Val{:TransData};\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel\n    ndarray::Bool = false])\n\nProper extension of InfiniteOpt.optimizer_model_constraint for TranscriptionModels. This simply dispatches to transcription_constraint.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.constraint_supports-Tuple{Model, InfOptConstraintRef, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.constraint_supports","text":"InfiniteOpt.constraint_supports(model::JuMP.Model,\n    cref::InfiniteOpt.InfOptConstraintRef,\n    key::Val{:TransData} = Val(:TransData);\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the support alias mappings associated with cref. Errors if cref is not transcribed.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.parameter_supports-Tuple{Model}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.parameter_supports","text":"parameter_supports(model::JuMP.Model)::Tuple\n\nReturn the collected parameter support tuple that is stored in TranscriptionData.supports.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#Utilities","page":"Model Transcription","title":"Utilities","text":"","category":"section"},{"location":"manual/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"InfiniteOpt.TranscriptionOpt.support_index_iterator\nInfiniteOpt.TranscriptionOpt.index_to_support\nInfiniteOpt.TranscriptionOpt.index_to_labels\nInfiniteOpt.TranscriptionOpt.make_ndarray","category":"page"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.support_index_iterator","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.support_index_iterator","text":"support_index_iterator(model::JuMP.Model, [obj_nums::Vector{Int}])::CartesianIndices\n\nReturn the CartesianIndices that determine the indices of the unique combinations of TranscriptionData.supports stored in model. If obj_nums is specified, then the indices will only include the tuple elements uses indices are included in the object numbers obj_nums and all others will be assigned the last index which should correspond to an appropriately sized placeholder comprised of NaNs. Note this method assumes that set_parameter_supports has already been called and that the last elements of each support vector contains a placeholder value.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.index_to_support","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.index_to_support","text":"index_to_support(model::JuMP.Model, index::CartesianIndex)::Vector{Float64}\n\nGiven a particular support index generated via support_index_iterator using model, return the corresponding support from TranscriptionData.supports using placeholder NaNs as appropriate for tuple elements that are unneeded.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.index_to_labels","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.index_to_labels","text":"index_to_labels(model::JuMP.Model, index::CartesianIndex)::Set{DataType}\n\nGiven a particular support index generated via support_index_iterator using model, return the corresponding support label set from TranscriptionData.support_labels.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.make_ndarray","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.make_ndarray","text":"make_narray(model::JuMP.Model, \n            ref::Union{JuMP.AbstractJuMPScalar, InfiniteOpt.InfOptConstraintRef}, \n            info::Vector, \n            label::Type{<:InfiniteOpt.AbstractSupportLabel})::Array\n\nTake the resultsinfo associated with ref and rearrange them into an  n-dimensional array where the axes correspond to the infinite parameter dependencies  in accordance with their creation. Note that this works by querying the object  numbers. Thus, independent infinite parameters will each get their own dimension  (even if they are defined at the same time in an array) and each dependent infinite  parameter group will have its own dimension. \n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#expr_manual","page":"Expressions","title":"Expressions","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"A technical manual for variable expressions in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/expression/#par_func_manual","page":"Expressions","title":"Parameter Functions","text":"","category":"section"},{"location":"manual/expression/#Definition","page":"Expressions","title":"Definition","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"@parameter_function\nparameter_function\nbuild_parameter_function\nParameterFunction\nadd_parameter_function\nParameterFunctionData\nParameterFunctionIndex\nParameterFunctionRef","category":"page"},{"location":"manual/expression/#InfiniteOpt.@parameter_function","page":"Expressions","title":"InfiniteOpt.@parameter_function","text":"@parameter_function(model::InfiniteModel, func_expr, kwargs...)\n\nAdd an anonymous parameter function to the model model described by the keyword arguments kw_args and returns the object reference.\n\n@parameter_function(model::InfiniteModel, var_expr == func_expr, kwargs...)\n\nAdd a parameter function to model described by the expression var_expr, the function expression func_expr, and the keyword arguments kwargs. The  expression var_expr is used to define the parameter function references of the  form varname[...] where the indexing matches the container syntax of other  macros.\n\nThe expression func_expr determines the concrete Julia function that defines the  behavior of parameter function and also specifies the infinite parameters it  depends on. The accepted forms are:\n\nfunc(params...): where func is the function that takes supports of the  infinite parameters params as input and outputs a scalar value.\n(params...) -> my_func_expr: where params are the infinite parameters and  my_func_expr is the source code of the anonymous function.\n\nThe recognized keyword arguments in kwargs are the following:\n\nbase_name: Sets the name prefix used to generate object names. It corresponds to the object name for scalar parameter function, otherwise, the object names are set to base_name[...] for each index ... of the axes axes.\ncontainer: Specify the container type. Defaults to :Auto.\n\nExamples\n\njulia> @parameter_function(model, sin(t))\nsin(t)\n\njulia> func_vect = [sin, cos];\n\njulia> @parameter_function(model, [i = 1:2] == func_vect[i](t))\n2-element Array{GeneralVariableRef,1}:\n sin(t)\n cos(t)\n\njulia> f(t_val, x_vals) = t_val + sum(x_vals)\nf (generic function with 1 method)\n\njulia> @parameter_function(model, pf == f(t, x))\npf(t, x)\n\njulia> g(t_val, a; b = 0) = t_val + a + b\ng (generic function with 1 method)\n\njulia> @parameter_function(model, pf2[i = 1:2] == t -> g(t, i, b = 2 * i ))\n2-element Array{GeneralVariableRef,1}:\n pf2[1](t)\n pf2[2](t)\n\n\n\n\n\n","category":"macro"},{"location":"manual/expression/#InfiniteOpt.parameter_function","page":"Expressions","title":"InfiniteOpt.parameter_function","text":"parameter_function(func::Function, \n                   pref_inputs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}, Tuple}; \n                   [name::String = [the name of `func`]]\n                   )::GeneralVariableRef\n\nMake a parameter function and return a GeneralVariableRef that can be  embedded in InfiniteOpt expressions. This serves as a convenient wrapper for  build_parameter_function and add_parameter_function. For an  even more convenient definition method see @parameter_function.\n\nHere func denotes the function that will take a support of infinite parameters as  input (formatted like pref_inputs) and will return a scalar value. Specifically,  func should be of the form:\n\nfunc(paramvals...)::Float64\n\nwhere the formatting of paramvals is analagous to point variables (and will be  based on the tuple of infinite parameter references given in parameter_refs). Moreover, func must be a function that returns a scalar numeric value. \n\nErrors if func will not take a support formatted like pref_inputs in  combination with the fargs and fkwargs specified. Also errors if pref_inputs  follow an invalid input format.\n\nExample\n\njulia> p_func = parameter_function(sin, t)\nsin(t)\n\njulia> p_func3 = parameter_function((t_supp) -> 2 * sin(2 * t_supp), t, name = \"mysin\")\nmysin(t)\n\njulia> p_func4 = parameter_function(t, name = \"mysin\") do t_supp\n                    if t_supp <= 5\n                        return sin(t_supp)\n                    else \n                        return 2 * sin(2 * t_supp)\n                    end\n                 end\n\nmysin(t)\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.build_parameter_function","page":"Expressions","title":"InfiniteOpt.build_parameter_function","text":"build_parameter_function(\n    _error::Function, \n    func::Function, \n    parameter_refs::Union{GeneralVariableRef, AbstractArray{<:GeneralVariableRef}, Tuple}\n    )::ParameterFunction\n\nBuild an ParameterFunction object that employs a parameter function  func that takes instances of the infinite parameter(s) as input. This can  ultimately by incorporated into expressions to enable nonlinear infinite parameter  behavior and/or incorporate data over infinite domains.\n\nHere func should be of the form:\n\nfunc(paramvals...)::Float64\n\nwhere the formatting of paramvals is analagous to point variables (and will be  based on the tuple of infinite parameter references given in parameter_refs). \n\nErrors if the infinite parameter tuple is formatted incorrectly. The allowed  format follows that of infinite variables. Also errors if the function doesn't  accept a support realization of the parameter_refs as input.\n\nExample\n\njulia> f = build_parameter_function(error, sin, t);\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.ParameterFunction","page":"Expressions","title":"InfiniteOpt.ParameterFunction","text":"ParameterFunction{F <: Function, VT <: VectorTuple}\n\nA DataType for storing known functions of infinite parameters. These equate to arbitrary  functions that take support instances of infinite parameters parameter_refs in  as input and compute a scalar value as output via func. These can then can  incorporated in expressions via ParameterFunctionRefs.\n\nFields\n\nfunc::F: The function the takes infinite parameters as input and provide a            scalar number as output.\nparameter_refs::VT: The infinite parameter references that serve as                                   inputs to func. Their formatting is analagous                                   to those of infinite variables. \nparameter_nums::Vector{Int}: The parameter numbers of parameter_refs.\nobject_nums::Vector{Int}: The parameter object numbers associated with parameter_refs.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.add_parameter_function","page":"Expressions","title":"InfiniteOpt.add_parameter_function","text":"add_parameter_function(model::InfiniteModel, pfunc::ParameterFunction, \n                       [name::String])::GeneralVariableRef\n\nAdd an ParameterFunction pfunc to the model using name for  printing and return a GeneralVariableRef such that it can be embedded in  expressions. Errors if the parameter function pfunc points to do not belong to  model. Note that pfunc should be created using build_parameter_function.\n\nExample\n\njulia> f = build_parameter_function(error, sin, t);\n\njulia> fref = add_parameter_function(model, f)\nsin(t)\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.ParameterFunctionData","page":"Expressions","title":"InfiniteOpt.ParameterFunctionData","text":"ParameterFunctionData{F <: ParameterFunction} <: AbstractDataObject\n\nA mutable DataType for storing ParameterFunctions and their data.\n\nFields\n\nfunc::F: The parameter function.\nname::String: The name used for printing.\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nconstraint_indices::Vector{InfOptConstraintIndex}: Indices of dependent constraints.\nsemi_infinite_var_indices::Vector{SemiInfiniteVariableIndex}: Indices of dependent semi-infinite variables.\nderivative_indices::Vector{DerivativeIndex}: Indices of dependent derivatives.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.ParameterFunctionIndex","page":"Expressions","title":"InfiniteOpt.ParameterFunctionIndex","text":"ParameterFunctionIndex <: ObjectIndex\n\nA DataType for storing the index of a ParameterFunction.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.ParameterFunctionRef","page":"Expressions","title":"InfiniteOpt.ParameterFunctionRef","text":"ParameterFunctionRef <: DispatchVariableRef\n\nA DataType for infinite parameter function references.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::ParameterFunctionIndex: Index of the infinite parameter function.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#Queries","page":"Expressions","title":"Queries","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"JuMP.name(::ParameterFunctionRef)\nraw_function(::ParameterFunctionRef)\ncall_function\nparameter_refs(::ParameterFunctionRef)\nparameter_list(::ParameterFunctionRef)\nraw_parameter_refs(::ParameterFunctionRef)\nis_used(::ParameterFunctionRef)\nused_by_semi_infinite_variable(::ParameterFunctionRef)\nused_by_derivative(::ParameterFunctionRef)\nused_by_measure(::ParameterFunctionRef)\nused_by_constraint(::ParameterFunctionRef)","category":"page"},{"location":"manual/expression/#JuMP.name-Tuple{ParameterFunctionRef}","page":"Expressions","title":"JuMP.name","text":"JuMP.name(fref::ParameterFunctionRef)::String\n\nExtend JuMP.name to return the base name of fref.\n\nExample\n\njulia> name(fref)\n\"func_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_function-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.raw_function","text":"raw_function(fref::ParameterFunctionRef)::Function\n\nReturns the raw function behind fref that takes a particular support of fref's  infinite parameters as input. \n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.call_function","page":"Expressions","title":"InfiniteOpt.call_function","text":"call_function(fref::ParameterFunctionRef, support...)::Float64\n\nSafely evaluates the raw_function of fref at a particular support support point that matches the format of the infinite parameter tuple given when the fref  was defined. This is essentially equivalent to raw_function(fref)(supps...). \n\n\n\n\n\ncall_function(fref::GeneralVariableRef, support...)::Float64\n\nCall the parameter function of fref at support. An ArgumentError is thrown if fref is not a parameter function.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.parameter_refs-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(fref::ParameterFunctionRef)::Tuple\n\nReturn the parameter references associated with fref. This is formatted as a Tuple of containing the parameter references as they inputted to define fref.\n\nExample\n\njulia> parameter_refs(p_func)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_list-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.parameter_list","text":"parameter_list(fref::ParameterFunctionRef)::Vector{GeneralVariableRef}\n\nReturn a vector of the parameter references that fref depends on. This is primarily an internal method where parameter_refs is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_parameter_refs-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refs(fref::ParameterFunctionRef)::VectorTuple\n\nReturn the raw VectorTuple of the  parameter references that fref depends on. This is primarily an internal method  where parameter_refs  is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.is_used-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.is_used","text":"is_used(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used in the model.\n\nExample\n\njulia> is_used(fref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_semi_infinite_variable-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.used_by_semi_infinite_variable","text":"used_by_semi_infinite_variable(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used by a semi-infinite infinite variable.\n\nExample\n\njulia> used_by_semi_infinite_variable(fref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_derivative-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.used_by_derivative","text":"used_by_derivative(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used by a derivative.\n\nExample\n\njulia> used_by_derivative(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_measure-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used by a measure.\n\nExample\n\njulia> used_by_measure(fref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_constraint-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used by a constraint.\n\nExample\n\njulia> used_by_constraint(fref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#Modification","page":"Expressions","title":"Modification","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"JuMP.set_name(::ParameterFunctionRef, ::String)\nJuMP.delete(::InfiniteModel, ::ParameterFunctionRef)","category":"page"},{"location":"manual/expression/#JuMP.set_name-Tuple{ParameterFunctionRef, String}","page":"Expressions","title":"JuMP.set_name","text":"JuMP.set_name(fref::ParameterFunctionRef, name::String)::Nothing\n\nExtend JuMP.set_name to set the name of a parameter function.\n\nExample\n\njulia> set_name(fref, \"func_name\")\n\njulia> name(fref)\n\"func_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete-Tuple{InfiniteModel, ParameterFunctionRef}","page":"Expressions","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, fref::ParameterFunctionRef)::Nothing\n\nExtend JuMP.delete to delete parameter functions and their dependencies. Errors  if fref is invalid, meaning it has already been deleted or it belongs to  another model.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#Expression-Methods","page":"Expressions","title":"Expression Methods","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"parameter_refs(::Union{JuMP.GenericAffExpr, JuMP.GenericQuadExpr})","category":"page"},{"location":"manual/expression/#InfiniteOpt.parameter_refs-Tuple{Union{GenericAffExpr, GenericQuadExpr}}","page":"Expressions","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(expr)::Tuple\n\nReturn the tuple of parameter references that determine the infinite dependencies of expr.\n\nExample\n\njulia> parameter_refs(my_expr)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#GeneralVariableRef-User-Methods","page":"Expressions","title":"GeneralVariableRef User Methods","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"GeneralVariableRef\nDispatchVariableRef\nFiniteRef\nJuMP.owner_model(::GeneralVariableRef)\nJuMP.owner_model(::DispatchVariableRef)\nJuMP.index(::GeneralVariableRef)\nJuMP.index(::DispatchVariableRef)\ndispatch_variable_ref(::GeneralVariableRef)\ndispatch_variable_ref\nJuMP.name(::GeneralVariableRef)\nJuMP.set_name(::GeneralVariableRef, ::String)\nJuMP.is_valid(::InfiniteModel,::GeneralVariableRef)\nJuMP.is_valid(::InfiniteModel, ::DispatchVariableRef)\nused_by_infinite_variable(::GeneralVariableRef)\nused_by_point_variable(::GeneralVariableRef)\nused_by_semi_infinite_variable(::GeneralVariableRef)\nused_by_derivative(::GeneralVariableRef)\nused_by_measure(::GeneralVariableRef)\nused_by_objective(::GeneralVariableRef)\nused_by_constraint(::GeneralVariableRef)\nis_used(::GeneralVariableRef)\nhas_derivative_constraints(::GeneralVariableRef)\nparameter_value(::GeneralVariableRef)\nJuMP.set_value(::GeneralVariableRef, ::Real)\ninfinite_domain(::GeneralVariableRef)\ninfinite_domain(::AbstractArray{<:GeneralVariableRef})\nset_infinite_domain(::GeneralVariableRef, ::InfiniteScalarDomain)\nset_infinite_domain(::AbstractArray{<:GeneralVariableRef}, ::InfiniteArrayDomain)\nnum_supports(::GeneralVariableRef)\nnum_supports(::AbstractArray{<:GeneralVariableRef})\nhas_supports(::GeneralVariableRef)\nhas_supports(::AbstractArray{<:GeneralVariableRef})\nsupports(::GeneralVariableRef)\nsupports(::AbstractArray{<:GeneralVariableRef})\nset_supports(::GeneralVariableRef,::Union{Real, Vector{<:Real}})\nset_supports(::AbstractArray{<:GeneralVariableRef},::Union{Array{<:Real, 2}, Vector{<:AbstractArray{<:Real}}})\nadd_supports(::GeneralVariableRef,::Union{Real, Vector{<:Real}})\nadd_supports(::AbstractArray{<:GeneralVariableRef},::Union{Array{<:Real, 2}, Vector{<:AbstractArray{<:Real}}})\ndelete_supports(::GeneralVariableRef)\ndelete_supports(::AbstractArray{<:GeneralVariableRef})\nfill_in_supports!(::GeneralVariableRef)\nfill_in_supports!(::AbstractArray{<:GeneralVariableRef})\nraw_parameter_refs(::GeneralVariableRef)\nparameter_refs(::GeneralVariableRef)\nparameter_list(::GeneralVariableRef)\nraw_function(::GeneralVariableRef)\ninfinite_variable_ref(::GeneralVariableRef)\neval_supports(::GeneralVariableRef)\nraw_parameter_values(::GeneralVariableRef)\nparameter_values(::GeneralVariableRef)\nsignificant_digits(::GeneralVariableRef)\nmeasure_function(::GeneralVariableRef)\nmeasure_data(::GeneralVariableRef)\nis_analytic(::GeneralVariableRef)\nderivative_argument(::GeneralVariableRef)\noperator_parameter(::GeneralVariableRef)\nderivative_method(::GeneralVariableRef)\nevaluate(::GeneralVariableRef)\nderivative_constraints(::GeneralVariableRef)\ndelete_derivative_constraints(::GeneralVariableRef)\nInfiniteOpt.add_generative_supports(::GeneralVariableRef)\nset_derivative_method(::GeneralVariableRef, ::AbstractDerivativeMethod)\nhas_generative_supports(::GeneralVariableRef)\nhas_internal_supports(::GeneralVariableRef)\nJuMP.delete(::InfiniteModel, ::GeneralVariableRef)\nJuMP.delete(::InfiniteModel,::AbstractArray{<:GeneralVariableRef})\nJuMP.has_lower_bound(::GeneralVariableRef)\nJuMP.lower_bound(::GeneralVariableRef)\nJuMP.set_lower_bound(::GeneralVariableRef,::Real)\nJuMP.LowerBoundRef(::GeneralVariableRef)\nJuMP.delete_lower_bound(::GeneralVariableRef)\nJuMP.has_upper_bound(::GeneralVariableRef)\nJuMP.upper_bound(::GeneralVariableRef)\nJuMP.set_upper_bound(::GeneralVariableRef,::Real)\nJuMP.UpperBoundRef(::GeneralVariableRef)\nJuMP.delete_upper_bound(::GeneralVariableRef)\nJuMP.is_fixed(::GeneralVariableRef)\nJuMP.fix_value(::GeneralVariableRef)\nJuMP.fix(::GeneralVariableRef, ::Real)\nJuMP.FixRef(::GeneralVariableRef)\nJuMP.unfix(::GeneralVariableRef)\nJuMP.start_value(::GeneralVariableRef)\nJuMP.set_start_value(::GeneralVariableRef, ::Real)\nstart_value_function(::GeneralVariableRef)\nset_start_value_function(::GeneralVariableRef, ::Any)\nreset_start_value_function(::GeneralVariableRef)\nJuMP.is_binary(::GeneralVariableRef)\nJuMP.set_binary(::GeneralVariableRef)\nJuMP.BinaryRef(::GeneralVariableRef)\nJuMP.unset_binary(::GeneralVariableRef)\nJuMP.is_integer(::GeneralVariableRef)\nJuMP.set_integer(::GeneralVariableRef)\nJuMP.IntegerRef(::GeneralVariableRef)\nJuMP.unset_integer(::GeneralVariableRef)","category":"page"},{"location":"manual/expression/#InfiniteOpt.GeneralVariableRef","page":"Expressions","title":"InfiniteOpt.GeneralVariableRef","text":"GeneralVariableRef <: JuMP.AbstractVariableRef\n\nA DataType that serves as the principal variable reference in InfiniteOpt for building variable expressions. It contains the needed information to create a variable type specifc reference (e.g., InfiniteVariableRef) via dispatch_variable_ref to obtain the correct subtype of DispatchVariableRef based off of index_type. This allows us to construct expressions using concrete containers unlike previous versions of InfiniteOpt which provides us a significant performance boost.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nraw_index::Int64: The raw index to be used in the index_type constructor.\nindex_type::DataType: The concrete AbstractInfOptIndex type/constructor.\nparam_index::Int: The index of a parameter in DependentParameters. This is ignored for other variable types.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.DispatchVariableRef","page":"Expressions","title":"InfiniteOpt.DispatchVariableRef","text":"DispatchVariableRef <: JuMP.AbstractVariableRef\n\nAn abstract type for variable references that are created from GeneralVariableRefs and are used to dispatch to the appropriate methods for that particular variable/parameter/measure type.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.FiniteRef","page":"Expressions","title":"InfiniteOpt.FiniteRef","text":"FiniteRef <: DispatchVariableRef\n\nAn abstract type for variable references that are finite.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#JuMP.owner_model-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.owner_model","text":"JuMP.owner_model(vref::GeneralVariableRef)::InfiniteModel\n\nExtend JuMP.owner_model to return the model where vref is stored.\n\nExample\n\njulia> owner_model(vref)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariable: 1\nDerivatives: 0\nMeasures: 0\n`FiniteVariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 1 constraint\n`FiniteVariableRef`-in-`MathOptInterface.LessThan{Float64}`: 1 constraint\nNames registered in the model: vref\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.owner_model-Tuple{DispatchVariableRef}","page":"Expressions","title":"JuMP.owner_model","text":"JuMP.owner_model(vref::DispatchVariableRef)::InfiniteModel\n\nExtend JuMP.owner_model to return the model where vref is stored.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.index-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.index","text":"JuMP.index(vref::GeneralVariableRef)::AbstractInfOptIndex\n\nExtend JuMP.index to return the appropriate index of vref.\n\nExample\n\njulia> index(vref)\nFiniteVariableIndex(1)\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.index-Tuple{DispatchVariableRef}","page":"Expressions","title":"JuMP.index","text":"JuMP.index(vref::DispatchVariableRef)::AbstractInfOptIndex\n\nExtend JuMP.index to return the appropriate index of vref.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.dispatch_variable_ref-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.dispatch_variable_ref","text":"dispatch_variable_ref(vef::GeneralVariableRef)::DispatchVariableRef\n\nReturn the concrete DispatchVariableRef this associated with vref. This relies on dispatch_variable_ref being extended for the index type, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.dispatch_variable_ref","page":"Expressions","title":"InfiniteOpt.dispatch_variable_ref","text":"dispatch_variable_ref(model::InfiniteModel, index::AbstractInfOptIndex)\n\nReturn the variable reference associated the type of index. This needs to be defined for each variable reference type.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#JuMP.name-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.name","text":"JuMP.name(vref::GeneralVariableRef)::String\n\nExtend JuMP.name to return the name of vref. It relies on JuMP.name being  defined for the underlying DispatchVariableRef, otherwise an ArgumentError  is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_name-Tuple{GeneralVariableRef, String}","page":"Expressions","title":"JuMP.set_name","text":"JuMP.set_name(vref::GeneralVariableRef, name::String)::Nothing\n\nExtend JuMP.set_name to set the name of vref. It relies on JuMP.set_name  being defined for the underlying DispatchVariableRef, otherwise an  ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_valid-Tuple{InfiniteModel, GeneralVariableRef}","page":"Expressions","title":"JuMP.is_valid","text":"JuMP.is_valid(model::InfiniteModel, vref::GeneralVariableRef)::Bool\n\nExtend JuMP.is_valid to return Bool if vref is a valid reference.\n\nExample\n\njulia> is_valid(model, vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_valid-Tuple{InfiniteModel, DispatchVariableRef}","page":"Expressions","title":"JuMP.is_valid","text":"JuMP.is_valid(model::InfiniteModel, vref::DispatchVariableRef)::Bool\n\nExtend JuMP.is_valid to return Bool if vref is a valid reference.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_infinite_variable-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_infinite_variable","text":"used_by_infinite_variable(vref::GeneralVariableRef)::Bool\n\nDefine used_by_infinite_variable for general variable references. It relies on used_by_infinite_variable being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_point_variable-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_point_variable","text":"used_by_point_variable(vref::GeneralVariableRef)::Bool\n\nDefine used_by_point_variable for general variable references. It relies on used_by_point_variable being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_semi_infinite_variable-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_semi_infinite_variable","text":"used_by_semi_infinite_variable(vref::GeneralVariableRef)::Bool\n\nDefine used_by_semi_infinite_variable for general variable references. It relies on used_by_semi_infinite_variable being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_derivative-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_derivative","text":"used_by_derivative(vref::GeneralVariableRef)::Bool\n\nDefine used_by_derivative for general variable references. It relies on used_by_derivative being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_measure-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(vref::GeneralVariableRef)::Bool\n\nDefine used_by_measure for general variable references. It relies on used_by_measure being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_objective-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_objective","text":"used_by_objective(vref::GeneralVariableRef)::Bool\n\nDefine used_by_objective for general variable references. It relies on used_by_objective being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_constraint-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(vref::GeneralVariableRef)::Bool\n\nDefine used_by_constraint for general variable references. It relies on used_by_constraint being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.is_used-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.is_used","text":"is_used(vref::GeneralVariableRef)::Bool\n\nDefine is_used for general variable references. It relies on is_used being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_derivative_constraints-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.has_derivative_constraints","text":"has_derivative_constraints(vref::GeneralVariableRef)::Bool\n\nDefine has_derivative_constraints for general variable references. It relies on has_derivative_constraints being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_value-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.parameter_value","text":"parameter_value(prefs; [kwargs...])\n\nDefine parameter_value for general variable references. It relies on parameter_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_value-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.set_value","text":"JuMP.set_value(vref::DispatchVariableRef, value::Real)::Nothing\n\nExtend JuMP.set_value to set the value of vref. It relies on JuMP.set_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.infinite_domain-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(prefs; [kwargs...])\n\nDefine infinite_domain for general variable references. It relies on infinite_domain being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.infinite_domain-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(prefs; [kwargs...])\n\nDefine infinite_domain for general variable references. It relies on infinite_domain being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_infinite_domain-Tuple{GeneralVariableRef, InfiniteScalarDomain}","page":"Expressions","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(pref::GeneralVariableRef, domain::InfiniteScalarDomain)::Nothing\n\nSpecify the scalar infinite domain of the infinite parameter pref to domain. Note this will reset/delete all the supports contained in the underlying parameter object. Also, errors if pref is used by a measure. An ArgumentError is thrown if pref is not an infinite parameter.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_infinite_domain-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}, InfiniteArrayDomain}","page":"Expressions","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(prefs::AbstractArray{<:GeneralVariableRef},\n                 domain::InfiniteArrayDomain)::Nothing\n\nSpecify the multi-dimensional infinite domain of the dependent infinite parameters prefs to domain. Note this will reset/delete all the supports contained in the underlying DependentParameters object. This will error if the not all of the dependent infinite parameters are included or if any of them are used by measures. An ArgumentError is thrown if prefs are not dependent infinite parameters.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.num_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.num_supports","text":"num_supports(prefs; [kwargs...])\n\nDefine num_supports for general variable references. It relies on num_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.num_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.num_supports","text":"num_supports(prefs; [kwargs...])\n\nDefine num_supports for general variable references. It relies on num_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.has_supports","text":"has_supports(prefs; [kwargs...])\n\nDefine has_supports for general variable references. It relies on has_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.has_supports","text":"has_supports(prefs; [kwargs...])\n\nDefine has_supports for general variable references. It relies on has_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.supports","text":"supports(expr::JuMP.AbstractJuMPScalar; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel,\n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the support associated with expr. Errors if expr is not associated with the constraint mappings stored in optimizer_model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of expression_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  expressions are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(cref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\nsupports(prefs; [kwargs...])\n\nDefine supports for general variable references. It relies on supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.supports","text":"supports(prefs; [kwargs...])\n\nDefine supports for general variable references. It relies on supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_supports-Tuple{GeneralVariableRef, Union{Real, Vector{var\"#s40\"} where var\"#s40\"<:Real}}","page":"Expressions","title":"InfiniteOpt.set_supports","text":"set_supports(pref::GeneralVariableRef, supports::Union{Real, Vector{<:Real}};\n             [force::Bool = false])::Nothing\n\nSet the support points associated with a single infinite parameter pref. An ArgumentError is thrown if pref is not an independent infinite parameter.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}, Union{Matrix{var\"#s39\"} where var\"#s39\"<:Real, Vector{var\"#s38\"} where var\"#s38\"<:(AbstractArray{var\"#s37\", N} where {var\"#s37\"<:Real, N})}}","page":"Expressions","title":"InfiniteOpt.set_supports","text":"set_supports(\n    prefs::Union{Vector{GeneralVariableRef}, AbstractArray{<:GeneralVariableRef}},\n    supports::Union{Array{<:Real, 2}, Vector{<:AbstractArray{<:Real}}};\n    [force::Bool = false]\n    )::Nothing\n\nSet the support points associated with dependent infinite parameters prefs. An ArgumentError is thrown if prefs is are not dependent infinite parameters.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.add_supports-Tuple{GeneralVariableRef, Union{Real, Vector{var\"#s40\"} where var\"#s40\"<:Real}}","page":"Expressions","title":"InfiniteOpt.add_supports","text":"add_supports(pref::GeneralVariableRef,\n             supports::Union{Real, Vector{<:Real}})::Nothing\n\nAdd the support points supports to a single infinite parameter pref. An ArgumentError is thrown if pref is not an independent infinite parameter.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.add_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}, Union{Matrix{var\"#s39\"} where var\"#s39\"<:Real, Vector{var\"#s38\"} where var\"#s38\"<:(AbstractArray{var\"#s37\", N} where {var\"#s37\"<:Real, N})}}","page":"Expressions","title":"InfiniteOpt.add_supports","text":"add_supports(\n    prefs::Union{Vector{GeneralVariableRef}, AbstractArray{<:GeneralVariableRef}},\n    supports::Union{Array{<:Real, 2}, Vector{<:AbstractArray{<:Real}}}\n    )::Nothing\n\nAdd the support points supports to the dependent infinite parameters prefs. An ArgumentError is thrown if prefs is are not dependent infinite parameters.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.delete_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.delete_supports","text":"delete_supports(prefs; [kwargs...])\n\nDefine delete_supports for general variable references. It relies on delete_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.delete_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.delete_supports","text":"delete_supports(prefs; [kwargs...])\n\nDefine delete_supports for general variable references. It relies on delete_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.fill_in_supports!-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(prefs; [kwargs...])\n\nDefine fill_in_supports! for general variable references. It relies on fill_in_supports! being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.fill_in_supports!-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(prefs; [kwargs...])\n\nDefine fill_in_supports! for general variable references. It relies on fill_in_supports! being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_parameter_refs-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refsc(vref::GeneralVariableRef)\n\nDefine raw_parameter_refs for general variable references. It relies on raw_parameter_refs being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_refs-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.parameter_refs","text":"parameter_refsc(vref::GeneralVariableRef)\n\nDefine parameter_refs for general variable references. It relies on parameter_refs being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_list-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.parameter_list","text":"parameter_listc(vref::GeneralVariableRef)\n\nDefine parameter_list for general variable references. It relies on parameter_list being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_function-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.raw_function","text":"raw_function(prefs; [kwargs...])\n\nDefine raw_function for general variable references. It relies on raw_function being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.infinite_variable_ref-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.infinite_variable_ref","text":"infinite_variable_refc(vref::GeneralVariableRef)\n\nDefine infinite_variable_ref for general variable references. It relies on infinite_variable_ref being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.eval_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.eval_supports","text":"eval_supportsc(vref::GeneralVariableRef)\n\nDefine eval_supports for general variable references. It relies on eval_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_parameter_values-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.raw_parameter_values","text":"raw_parameter_valuesc(vref::GeneralVariableRef)\n\nDefine raw_parameter_values for general variable references. It relies on raw_parameter_values being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_values-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.parameter_values","text":"parameter_valuesc(vref::GeneralVariableRef)\n\nDefine parameter_values for general variable references. It relies on parameter_values being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.significant_digits-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.significant_digits","text":"significant_digits(prefs; [kwargs...])\n\nDefine significant_digits for general variable references. It relies on significant_digits being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.measure_function-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.measure_function","text":"measure_function(mref::GeneralVariableRef)\n\nDefine measure_function for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.measure_data-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.measure_data","text":"measure_data(mref::GeneralVariableRef)\n\nDefine measure_data for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.is_analytic-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.is_analytic","text":"is_analytic(mref::GeneralVariableRef)\n\nDefine is_analytic for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.derivative_argument-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.derivative_argument","text":"derivative_argument(dref::GeneralVariableRef)\n\nDefine derivative_argument for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.operator_parameter-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.operator_parameter","text":"operator_parameter(dref::GeneralVariableRef)\n\nDefine operator_parameter for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.derivative_method-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.derivative_method","text":"derivative_method(prefs; [kwargs...])\n\nDefine derivative_method for general variable references. It relies on derivative_method being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.evaluate-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.evaluate","text":"evaluate(dref::GeneralVariableRef)\n\nDefine evaluate for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.derivative_constraints-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.derivative_constraints","text":"derivative_constraints(dref::GeneralVariableRef)\n\nDefine derivative_constraints for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.delete_derivative_constraints-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.delete_derivative_constraints","text":"delete_derivative_constraints(dref::GeneralVariableRef)\n\nDefine delete_derivative_constraints for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.add_generative_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.add_generative_supports","text":"add_generative_supports(prefs; [kwargs...])\n\nDefine add_generative_supports for general variable references. It relies on add_generative_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_derivative_method-Tuple{GeneralVariableRef, AbstractDerivativeMethod}","page":"Expressions","title":"InfiniteOpt.set_derivative_method","text":"set_derivative_method(pref::GeneralVariableRef,\n                      method::AbstractDerivativeMethod\n                      )::Nothing\n\nSpecify the numerical derivative evaluation technique associated with pref. An ArgumentError is thrown if pref is not an infinite parameter.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_generative_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.has_generative_supports","text":"has_generative_supports(prefs; [kwargs...])\n\nDefine has_generative_supports for general variable references. It relies on has_generative_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_internal_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.has_internal_supports","text":"has_internal_supports(prefs; [kwargs...])\n\nDefine has_internal_supports for general variable references. It relies on has_internal_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete-Tuple{InfiniteModel, GeneralVariableRef}","page":"Expressions","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, vref::GeneralVariableRef)::Nothing\n\nExtend JuMP.delete to delete vref and its dependencies. It relies on  JuMP.delete being defined for the underlying DispatchVariableRef, otherwise  an ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete-Tuple{InfiniteModel, AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel,\n            prefs::AbstractArray{<:GeneralVariableRef})::Nothing\n\nExtend JuMP.delete to delete a group of dependent infinite parameters and their dependencies. An ArgumentError is thrown if prefs are not dependent infinite parameters.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.has_lower_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(vref::GeneralVariableRef)\n\nDefine JuMP.has_lower_bound for general variable references. It relies on JuMP.has_lower_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.lower_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.lower_bound","text":"JuMP.lower_bound(vref::GeneralVariableRef)\n\nDefine JuMP.lower_bound for general variable references. It relies on JuMP.lower_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_lower_bound-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(vref::GeneralVariableRef, value::Real)::Nothing\n\nDefine JuMP.set_lower_bound for general variable references. It relies on JuMP.set_lower_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.LowerBoundRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.LowerBoundRef","text":"JuMP.LowerBoundRef(vref::GeneralVariableRef)\n\nDefine JuMP.LowerBoundRef for general variable references. It relies on JuMP.LowerBoundRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete_lower_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.delete_lower_bound","text":"JuMP.delete_lower_bound(vref::GeneralVariableRef)\n\nDefine JuMP.delete_lower_bound for general variable references. It relies on JuMP.delete_lower_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.has_upper_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(vref::GeneralVariableRef)\n\nDefine JuMP.has_upper_bound for general variable references. It relies on JuMP.has_upper_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.upper_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.upper_bound","text":"JuMP.upper_bound(vref::GeneralVariableRef)\n\nDefine JuMP.upper_bound for general variable references. It relies on JuMP.upper_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_upper_bound-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(vref::GeneralVariableRef, value::Real)::Nothing\n\nDefine JuMP.set_upper_bound for general variable references. It relies on JuMP.set_upper_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.UpperBoundRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.UpperBoundRef","text":"JuMP.UpperBoundRef(vref::GeneralVariableRef)\n\nDefine JuMP.UpperBoundRef for general variable references. It relies on JuMP.UpperBoundRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete_upper_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.delete_upper_bound","text":"JuMP.delete_upper_bound(vref::GeneralVariableRef)\n\nDefine JuMP.delete_upper_bound for general variable references. It relies on JuMP.delete_upper_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_fixed-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.is_fixed","text":"JuMP.is_fixed(vref::GeneralVariableRef)\n\nDefine JuMP.is_fixed for general variable references. It relies on JuMP.is_fixed being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.fix_value-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.fix_value","text":"JuMP.fix_value(vref::GeneralVariableRef)\n\nDefine JuMP.fix_value for general variable references. It relies on JuMP.fix_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.fix-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.fix","text":"JuMP.fix(vref::GeneralVariableRef, value::Real; force::Bool = false)::Nothing\n\nDefine JuMP.fix for general variable references. It relies on JuMP.fix being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.FixRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.FixRef","text":"JuMP.FixRef(vref::GeneralVariableRef)\n\nDefine JuMP.FixRef for general variable references. It relies on JuMP.FixRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.unfix-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.unfix","text":"JuMP.unfix(vref::GeneralVariableRef)\n\nDefine JuMP.unfix for general variable references. It relies on JuMP.unfix being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.start_value-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.start_value","text":"JuMP.start_value(vref::GeneralVariableRef)\n\nDefine JuMP.start_value for general variable references. It relies on JuMP.start_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_start_value-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.set_start_value","text":"JuMP.set_start_value(vref::GeneralVariableRef, value::Real)::Nothing\n\nDefine JuMP.set_start_value for general variable references. It relies on JuMP.set_start_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.start_value_function-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.start_value_function","text":"start_value_functionc(vref::GeneralVariableRef)\n\nDefine start_value_function for general variable references. It relies on start_value_function being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_start_value_function-Tuple{GeneralVariableRef, Any}","page":"Expressions","title":"InfiniteOpt.set_start_value_function","text":"set_start_value_function(vref::GeneralVariableRef, start::Union{Real, Function})::Nothing\n\nSet the start value function of vref. It relies on set_start_value_function being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.reset_start_value_function-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.reset_start_value_function","text":"reset_start_value_functionc(vref::GeneralVariableRef)\n\nDefine reset_start_value_function for general variable references. It relies on reset_start_value_function being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_binary-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.is_binary","text":"JuMP.is_binary(vref::GeneralVariableRef)\n\nDefine JuMP.is_binary for general variable references. It relies on JuMP.is_binary being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_binary-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.set_binary","text":"JuMP.set_binary(vref::GeneralVariableRef)\n\nDefine JuMP.set_binary for general variable references. It relies on JuMP.set_binary being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.BinaryRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.BinaryRef","text":"JuMP.BinaryRef(vref::GeneralVariableRef)\n\nDefine JuMP.BinaryRef for general variable references. It relies on JuMP.BinaryRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.unset_binary-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.unset_binary","text":"JuMP.unset_binary(vref::GeneralVariableRef)\n\nDefine JuMP.unset_binary for general variable references. It relies on JuMP.unset_binary being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_integer-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.is_integer","text":"JuMP.is_integer(vref::GeneralVariableRef)\n\nDefine JuMP.is_integer for general variable references. It relies on JuMP.is_integer being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_integer-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.set_integer","text":"JuMP.set_integer(vref::GeneralVariableRef)\n\nDefine JuMP.set_integer for general variable references. It relies on JuMP.set_integer being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.IntegerRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.IntegerRef","text":"JuMP.IntegerRef(vref::GeneralVariableRef)\n\nDefine JuMP.IntegerRef for general variable references. It relies on JuMP.IntegerRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.unset_integer-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.unset_integer","text":"JuMP.unset_integer(vref::GeneralVariableRef)\n\nDefine JuMP.unset_integer for general variable references. It relies on JuMP.unset_integer being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#Developer-Internal-Methods","page":"Expressions","title":"Developer Internal Methods","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"InfiniteOpt._add_data_object\nInfiniteOpt._data_dictionary\nInfiniteOpt._data_object\nInfiniteOpt._delete_data_object\nInfiniteOpt._core_variable_object\nInfiniteOpt._core_variable_object(::GeneralVariableRef)\nInfiniteOpt._set_core_variable_object\nInfiniteOpt._infinite_variable_dependencies\nInfiniteOpt._infinite_variable_dependencies(::GeneralVariableRef)\nInfiniteOpt._semi_infinite_variable_dependencies\nInfiniteOpt._semi_infinite_variable_dependencies(::GeneralVariableRef)\nInfiniteOpt._point_variable_dependencies\nInfiniteOpt._point_variable_dependencies(::GeneralVariableRef)\nInfiniteOpt._derivative_dependencies\nInfiniteOpt._derivative_dependencies(::GeneralVariableRef)\nInfiniteOpt._measure_dependencies\nInfiniteOpt._measure_dependencies(::GeneralVariableRef)\nInfiniteOpt._generative_measures\nInfiniteOpt._generative_measures(::GeneralVariableRef)\nInfiniteOpt._constraint_dependencies\nInfiniteOpt._constraint_dependencies(::GeneralVariableRef)\nInfiniteOpt._derivative_constraint_dependencies\nInfiniteOpt._derivative_constraint_dependencies(::GeneralVariableRef)\nInfiniteOpt._parameter_number\nInfiniteOpt._parameter_number(::GeneralVariableRef)\nInfiniteOpt._object_number\nInfiniteOpt._object_number(::GeneralVariableRef)","category":"page"},{"location":"manual/expression/#InfiniteOpt._add_data_object","page":"Expressions","title":"InfiniteOpt._add_data_object","text":"_add_data_object(model::InfiniteModel, object::AbstractDataObject)::ObjectIndex\n\nAdd object to the appropriate CleverDict in model and return the its index. This needs to be defined for the type of object. These definitions need to use MOIUC.add_item to add the object to the CleverDict.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._data_dictionary","page":"Expressions","title":"InfiniteOpt._data_dictionary","text":"_data_dictionary(vref::DispatchVariableRef)::MOIUC.CleverDict\n\nReturn the CleverDict that stores data objects for the type of vref. This needs to be defined for the type of vref.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._data_object","page":"Expressions","title":"InfiniteOpt._data_object","text":"_data_object(vref::DispatchVariableRef)::AbstractDataObject\n\nReturn the data object associated with vref, in other words the object its index points to in the InfiniteModel. This needs to be defined for the type of vref. This should use _data_dictionary to access the CleverDict that the object is stored in.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._delete_data_object","page":"Expressions","title":"InfiniteOpt._delete_data_object","text":"_delete_data_object(vref::DispatchVariableRef)::Nothing\n\nDelete the concrete AbstractDataObject associated with vref.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._core_variable_object","page":"Expressions","title":"InfiniteOpt._core_variable_object","text":"_core_variable_object(vref::DispatchVariableRef)::Union{InfOptParameter, InfOptVariable, Measure}\n\nReturn the core object that vref points to. This needs to be extended for type of vref. This should use _data_object to access the data object where the variable object is stored.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._core_variable_object-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._core_variable_object","text":"_core_variable_object(vref::GeneralVariableRef)::Union{InfOptParameter, InfOptVariable, Measure}\n\nReturn the core object that vref points to. This is enabled with appropriate definitions of _core_variable_object for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._set_core_variable_object","page":"Expressions","title":"InfiniteOpt._set_core_variable_object","text":"_set_core_variable_object(vref::DispatchVariableRef, object)::Nothing\n\nSets the core object that vref points to object. This needs to be extended for types of vref and object. This should use _data_object to access the data object where the variable object is stored.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._infinite_variable_dependencies","page":"Expressions","title":"InfiniteOpt._infinite_variable_dependencies","text":"_infinite_variable_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._infinite_variable_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._infinite_variable_dependencies","text":"_infinite_variable_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _infinite_variable_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._semi_infinite_variable_dependencies","page":"Expressions","title":"InfiniteOpt._semi_infinite_variable_dependencies","text":"_semi_infinite_variable_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._semi_infinite_variable_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._semi_infinite_variable_dependencies","text":"_semi_infinite_variable_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _semi_infinite_variable_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._point_variable_dependencies","page":"Expressions","title":"InfiniteOpt._point_variable_dependencies","text":"_point_variable_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._point_variable_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._point_variable_dependencies","text":"_point_variable_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _point_variable_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._derivative_dependencies","page":"Expressions","title":"InfiniteOpt._derivative_dependencies","text":"_derivative_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._derivative_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._derivative_dependencies","text":"_derivative_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _derivative_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._measure_dependencies","page":"Expressions","title":"InfiniteOpt._measure_dependencies","text":"_measure_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._measure_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._measure_dependencies","text":"_measure_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _measure_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._generative_measures","page":"Expressions","title":"InfiniteOpt._generative_measures","text":"_generative_measures(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._generative_measures-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._generative_measures","text":"_generative_measures(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _generative_measures for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._constraint_dependencies","page":"Expressions","title":"InfiniteOpt._constraint_dependencies","text":"_constraint_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._constraint_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._constraint_dependencies","text":"_constraint_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _constraint_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._derivative_constraint_dependencies","page":"Expressions","title":"InfiniteOpt._derivative_constraint_dependencies","text":"_derivative_constraint_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._derivative_constraint_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._derivative_constraint_dependencies","text":"_derivative_constraint_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _derivative_constraint_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._parameter_number","page":"Expressions","title":"InfiniteOpt._parameter_number","text":"_parameter_number(pref::DispatchVariableRef)::Int\n\nReturn the parameter creation number for pref assuming it is an infinite parameter. This needs to be defined for the type of pref. This should use the _data_object to get the number.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._parameter_number-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._parameter_number","text":"_parameter_number(pref::GeneralVariableRef)::Int\n\nReturn the parameter creation number for pref assuming it is an infinite parameter. It relies on _parameter_number being properly defined for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._object_number","page":"Expressions","title":"InfiniteOpt._object_number","text":"_object_number(pref::DispatchVariableRef)::Int\n\nReturn the object number for pref assuming it is an infinite parameter. This needs to be defined for the type of pref. This should use the _data_object to get the number.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._object_number-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._object_number","text":"_object_number(pref::GeneralVariableRef)::Int\n\nReturn the object number for pref assuming it is an infinite parameter. It relies on _object_number being properly defined for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Optimal Control/pandemic_control.jl\"","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Pandemic-Control","page":"Pandemic Control","title":"Pandemic Control","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"A stochastic optimal control problem were we seek to control the spread of a contagion with uncertain parameters.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Problem-Statement-and-Model","page":"Pandemic Control","title":"Problem Statement and Model","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"We wish to determine optimal social distancing policy to control spread of a contagion and minimize the economic impact of doing so. We'll model the spread of the virus through a given population using the SEIR Model which considers 4 population subsets that follow:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"textSusceptible rightarrow textExposed rightarrow textInfectious rightarrow textRecovered","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"This model is formalized as:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"begingathered\nfracds(t)dt = (u(t) - 1)beta si(t) \nfracde(t)dt = (1 - u(t))beta si(t) - xi e(t) \nfracdi(t)dt = xi e(t) - gamma i(t)\nfracdr(t)dt = gamma i(t) \nsi(t) = s(t) i(t)\nendgathered","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"where s(t) is the susceptible population, e(t) is the exposed population, i(t) is the infectious population, r(t) is the recovered population, and u(t) in 0 1 is the enforced population isolation (social distancing). The other values denote model parameters that will be specific to the contagion in question.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"For our case study, we'll consider the incubation constant xi to be an uncertain parameter xi sim mathcalU(underlinexi overlinexi). This introduces to infinite dependencies into our model: time t and uncertain incubation xi. Moreover we'll seek to minimize the isolation measures u(t) that are implemented while limiting the amount of infected individuals i(t) to be below a threshold i_max. Thus, the optimization problem becomes:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"beginaligned\nmin_  int_t in mathcalD_t u(t) dt \n textst  fracpartial s(t xi)partial t = (u(t) - 1)beta si(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial e(t xi)partial t = (1 - u(t))beta si(t xi) - xi e(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial i(t xi)partial t = xi e(t xi) - gamma i(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial r(t xi)partial t = gamma i(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n si(t xi) = s(t xi) i(t xi)  forall forall t in mathcalD_t xi in mathcalD_xi \n s(0 xi) = s_0 e(0 xi) = e_0 i(0 xi) = i_0 r(0 xi) = r_0  forall xi in mathcalD_xi \n i(t xi) leq i_max  forall t in mathcalD_t xi in mathcalD_xi \n u(t) in 0 08 \n xi sim mathcalU(underlinexi overlinexi)\nendaligned","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Notice that the SEIR model variables now all depend on both t and xi, except u(t) which means we need to decide our policy before knowing the true value of xi.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Modeling-in-InfiniteOpt","page":"Pandemic Control","title":"Modeling in InfiniteOpt","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Traditional modeling frameworks like JuMP cannot be used to solve this model directly because it is infinite, contains partial difference equations, and contains a time expectation. We would first have to transform it into a transcripted (discretized) variant by applying all the necessary techniques (e.g., orthogonal collocation over finite elements, trapezoid rule, etc.) which is very combersome and nontrivial in this case.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"However, we can directly model the above form in InfiniteOpt and it will take care of the rest! Let's get started by importing the needed packages and specifying the model parameters that we'll need.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"using InfiniteOpt, Ipopt, Distributions, Plots\n\n# Set the SEIR parameters\nγ = 0.303\nβ = 0.727\nN = 1e5\nξ_min = 0.1\nξ_max = 0.6\n\n# Set the domain information\ni_max = 0.02\nϵ = 0.005\nt0 = 0\ntf = 200\nextra_ts = [0.001, 0.002, 0.004, 0.008, 0.02, 0.04, 0.08, 0.2, 0.4, 0.8]\nnum_samples = 5\n\n# Set the intial condition values\ne0 = 1 / N\ni0 = 0\nr0 = 0\ns0 = 1 - 1 / N;\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Model-Initialization","page":"Pandemic Control","title":"Model Initialization","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Now let's setup our infinite model and select Ipopt as our optimizer that will be used to solve it. This is accomplished making an InfiniteModel:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"model = InfiniteModel(Ipopt.Optimizer);\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Infinite-Parameter-Definition","page":"Pandemic Control","title":"Infinite Parameter Definition","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"We now need to define the infinite parameters t in t_0 t_f and xi sim mathcalU(underlinexi overlinexi). This is accomplished with @infinite_parameter. We'll also include the following specifications:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"use 51 equidistant time points\nspecify that orgothonal collocation using 2 nodes should be used for time derivatives\nspecify that the number of random scenarios should equal num_samples\nadd extra_ts as extra time points","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"@infinite_parameter(model, t ∈ [t0, tf], num_supports = 51,\n                    derivative_method = OrthogonalCollocation(2))\n@infinite_parameter(model, ξ ~ Uniform(ξ_min, ξ_max), num_supports = num_samples)\nadd_supports(t, extra_ts)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Infinite-Variable-Definition","page":"Pandemic Control","title":"Infinite Variable Definition","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"With our infinite parameters defined, we can now define our infinite variables:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"s(t xi) geq 0\ne(t xi) geq 0\ni(t xi) geq 0\nr(t xi) geq 0\nsi(t xi)\n0 leq u(t) leq 08","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"@variable(model, s ≥ 0, Infinite(t, ξ))\n@variable(model, e ≥ 0, Infinite(t, ξ))\n@variable(model, i ≥ 0, Infinite(t, ξ))\n@variable(model, r ≥ 0, Infinite(t, ξ))\n@variable(model, si, Infinite(t, ξ))\n@variable(model, 0 ≤ u ≤ 0.8, Infinite(t), start = 0.2)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"u(t)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Objective-Definition","page":"Pandemic Control","title":"Objective Definition","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Now its time to add the objective min  int_t in mathcalD_t u(t) dt using @objective:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"@objective(model, Min, ∫(u, t))","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"∫{t ∈ [0, 200]}[u(t)]","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Constraint-Definition","page":"Pandemic Control","title":"Constraint Definition","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"The last step now to defining our model is to define the constraints using @constraint. This will involve defining the initial conditions:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"s(0 xi) = s_0 e(0 xi) = e_0 i(0 xi) = i_0 r(0 xi) = r_0  forall xi in mathcalD_xi","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"the model equations:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"beginaligned\n fracpartial s(t xi)partial t = (u(t) - 1)beta si(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial e(t xi)partial t = (1 - u(t))beta si(t xi) - xi e(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial i(t xi)partial t = xi e(t xi) - gamma i(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial r(t xi)partial t = gamma i(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n si(t xi) = s(t xi) i(t xi)  forall forall t in mathcalD_t xi in mathcalD_xi \nendaligned","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"and the infection limit constraint:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"i(t xi) leq i_max  forall t in mathcalD_t xi in mathcalD_xi","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"# Define the initial conditions\n@constraint(model, s(0, ξ) == s0)\n@constraint(model, e(0, ξ) == e0)\n@constraint(model, i(0, ξ) == i0)\n@constraint(model, r(0, ξ) == r0)\n\n# Define the SEIR equations\n@constraint(model, s_constr, ∂(s, t) == -(1 - u) * β * si)\n@constraint(model, e_constr, ∂(e, t) == (1 - u) * β * si - ξ * e)\n@constraint(model, i_constr, ∂(i, t) == ξ * e - γ * i)\n@constraint(model, r_constr, ∂(r, t) == γ * i)\n@constraint(model, si == s * i)\n\n# Define the infection rate limit\n@constraint(model, imax_constr, i ≤ i_max)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"imax_constr : i(t, ξ) ≤ 0.02, ∀ t ∈ [0, 200], ξ ~ Uniform","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Display-the-Infinite-Model","page":"Pandemic Control","title":"Display the Infinite Model","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Let's display model now that it is fully defined:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"print(model)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Min ∫{t ∈ [0, 200]}[u(t)]\nSubject to\n s(t, ξ) ≥ 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n e(t, ξ) ≥ 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n i(t, ξ) ≥ 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n r(t, ξ) ≥ 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n u(t) ≥ 0.0, ∀ t ∈ [0, 200]\n u(t) ≤ 0.8, ∀ t ∈ [0, 200]\n s(0, ξ) = 0.99999, ∀ ξ ~ Uniform\n e(0, ξ) = 1.0e-5, ∀ ξ ~ Uniform\n i(0, ξ) = 0.0, ∀ ξ ~ Uniform\n r(0, ξ) = 0.0, ∀ ξ ~ Uniform\n s_constr : -0.727 si(t, ξ)*u(t) + ∂/∂t[s(t, ξ)] + 0.727 si(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n e_constr : 0.727 si(t, ξ)*u(t) + ξ*e(t, ξ) + ∂/∂t[e(t, ξ)] - 0.727 si(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n i_constr : -e(t, ξ)*ξ + ∂/∂t[i(t, ξ)] + 0.303 i(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n r_constr : ∂/∂t[r(t, ξ)] - 0.303 i(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n -i(t, ξ)*s(t, ξ) + si(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n imax_constr : i(t, ξ) ≤ 0.02, ∀ t ∈ [0, 200], ξ ~ Uniform\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Optimize-the-Model","page":"Pandemic Control","title":"Optimize the Model","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Let's solve our model and find the optimal policy. All we have to do is invoke optimize! and the model will automatically be transformed solved behind the scenes:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"optimize!(model)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"This is Ipopt version 3.13.4, running with linear solver mumps.\nNOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n\nNumber of nonzeros in equality constraint Jacobian...:     8805\nNumber of nonzeros in inequality constraint Jacobian.:      305\nNumber of nonzeros in Lagrangian Hessian.............:      915\n\nTotal number of variables............................:     2806\n                     variables with only lower bounds:     1220\n                variables with lower and upper bounds:       61\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:     2745\nTotal number of inequality constraints...............:      305\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:      305\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  4.0000000e+01 9.90e-01 4.00e+00  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1  1.2133698e+00 6.32e-01 2.47e+02  -1.0 9.90e-01    -  1.10e-02 3.62e-01f  1\n   2  1.4983271e+00 6.11e-01 2.40e+02  -1.0 7.49e-01    -  2.29e-01 3.25e-02f  1\n   3  2.8943680e+00 4.90e-01 2.02e+02  -1.0 6.11e-01    -  8.62e-01 1.99e-01f  1\n   4  2.8973644e+00 4.89e-01 2.00e+03  -1.0 5.54e-01    -  7.29e-02 1.33e-03h  1\n   5  3.5862378e+00 4.75e-01 6.31e+02  -1.0 4.19e+00    -  5.21e-04 2.88e-02h  1\n   6  3.6139816e+00 4.74e-01 6.23e+02  -1.0 5.01e+00    -  4.67e-03 9.83e-04h  1\n   7  3.7876815e+00 4.71e-01 6.43e+02  -1.0 3.90e+00    -  4.33e-03 7.76e-03h  1\n   8  4.4053669e+00 4.59e-01 3.31e+03  -1.0 3.86e+00    -  7.05e-03 2.56e-02h  1\n   9  4.8325839e+00 4.51e-01 3.33e+03  -1.0 3.52e+00    -  2.88e-02 1.74e-02h  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  10  5.0182899e+00 4.48e-01 3.33e+03  -1.0 3.08e+00    -  7.46e-03 6.65e-03h  1\n  11  5.3543635e+00 4.43e-01 3.25e+03  -1.0 5.04e+00    -  4.20e-03 9.81e-03h  1\n  12  6.0629684e+00 4.32e-01 3.19e+03  -1.0 2.36e+00    -  2.79e-02 2.52e-02h  1\n  13  7.5546829e+00 4.11e-01 2.93e+03  -1.0 2.24e+00    -  1.25e-02 4.93e-02h  1\n  14  8.4159224e+00 4.00e-01 2.85e+03  -1.0 1.99e+00    -  1.92e-02 2.70e-02h  1\n  15  1.1108121e+01 3.70e-01 2.59e+03  -1.0 1.81e+00    -  2.31e-02 7.35e-02h  1\n  16  1.2115483e+01 3.60e-01 2.53e+03  -1.0 1.43e+00    -  4.30e-02 2.77e-02h  1\n  17  2.0133265e+01 2.87e-01 2.11e+03  -1.0 1.41e+00    -  2.01e-02 2.03e-01h  1\n  18  3.3835993e+01 1.56e-01 9.08e+02  -1.0 6.55e-01    -  4.70e-02 4.57e-01h  1\n  19  4.1660769e+01 7.74e-02 5.71e+02  -1.0 4.64e-01    -  2.49e-01 5.03e-01h  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  20  4.7786979e+01 2.87e-02 1.81e+03  -1.0 3.52e-01    -  7.49e-02 6.29e-01h  1\n  21  5.0233907e+01 1.60e-02 1.01e+03  -1.0 3.49e-01    -  2.43e-01 4.42e-01h  1\n  22  5.1360041e+01 1.01e-02 6.38e+02  -1.0 4.97e-01    -  2.46e-01 3.66e-01h  1\n  23  5.3495083e+01 5.51e-03 7.67e+02  -1.0 5.29e-01    -  2.83e-01 4.57e-01h  1\n  24  5.4707476e+01 4.38e-03 6.49e+02  -1.0 4.80e-01    -  2.41e-01 2.06e-01h  1\n  25  5.5763155e+01 3.39e-03 5.00e+02  -1.0 9.67e-01    -  2.04e-01 2.26e-01h  1\n  26  5.6917753e+01 2.66e-03 4.68e+02  -1.0 4.81e-01    -  1.78e-01 2.14e-01h  1\n  27  5.8453625e+01 1.89e-03 7.68e+02  -1.0 2.67e-01    -  1.27e-01 2.92e-01h  1\n  28  5.9935751e+01 1.26e-03 1.49e+03  -1.0 3.95e-01    -  1.44e-01 3.30e-01h  1\n  29  6.0928979e+01 9.67e-04 1.51e+03  -1.0 3.19e-01    -  1.89e-01 2.36e-01h  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  30  6.1977065e+01 7.50e-04 1.63e+03  -1.0 2.51e-01    -  1.79e-01 2.24e-01h  1\n  31  6.3603098e+01 4.90e-04 3.85e+03  -1.0 2.69e-01    -  1.35e-01 3.47e-01h  1\n  32  6.5154979e+01 3.04e-04 6.52e+03  -1.0 3.19e-01    -  1.74e-01 3.79e-01h  1\n  33  6.6185185e+01 2.24e-04 6.02e+03  -1.0 4.58e-01    -  2.27e-01 2.66e-01h  1\n  34  6.6901134e+01 1.87e-04 1.48e+03  -1.0 3.91e-01    -  2.58e-01 1.65e-01h  1\n  35  6.8490066e+01 1.31e-04 8.03e+03  -1.0 4.38e-01    -  1.59e-01 2.99e-01H  1\n  36  6.9996747e+01 7.95e-05 8.09e+03  -1.0 2.86e-01    -  4.00e-01 4.49e-01H  1\n  37  7.1300053e+01 7.35e-05 2.08e+04  -1.0 3.21e-01    -  4.19e-01 5.47e-01H  1\n  38  7.2179654e+01 5.26e-05 5.40e+04  -1.0 2.73e-01    -  6.75e-01 8.50e-01H  1\n  39  7.2601821e+01 3.42e-06 1.08e+03  -1.0 1.45e-01    -  1.00e+00 1.00e+00H  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  40  7.1371230e+01 8.15e-05 5.87e+03  -1.7 9.28e-02    -  9.53e-01 9.52e-01f  1\n  41  7.0246537e+01 1.47e-04 2.39e+03  -1.7 1.61e-01    -  1.00e+00 9.36e-01f  1\n  42  7.0298679e+01 1.38e-05 1.04e+01  -1.7 6.66e-02    -  1.00e+00 1.00e+00f  1\n  43  6.9705725e+01 1.56e-05 2.85e+05  -3.8 1.13e-01    -  7.78e-01 6.35e-01f  1\n  44  6.9353670e+01 1.27e-05 2.36e+04  -3.8 1.94e-01    -  7.54e-01 8.18e-01f  1\n  45  6.9290565e+01 1.60e-06 2.86e+02  -3.8 2.15e-01    -  8.59e-01 8.85e-01f  1\n  46  6.9284012e+01 4.82e-08 6.61e+00  -3.8 2.02e-01    -  1.00e+00 1.00e+00f  1\n  47  6.9283976e+01 2.09e-10 8.39e-03  -3.8 5.99e-02    -  1.00e+00 1.00e+00h  1\n  48  6.9276342e+01 2.36e-09 1.57e+03  -5.7 1.16e-01    -  8.47e-01 9.53e-01f  1\n  49  6.9275893e+01 1.27e-11 3.80e-03  -5.7 8.28e-02    -  1.00e+00 1.00e+00f  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  50  6.9275892e+01 1.94e-16 6.74e-08  -5.7 4.27e-04    -  1.00e+00 1.00e+00h  1\n  51  6.9275791e+01 3.91e-13 5.92e-01  -8.6 3.65e-03    -  9.97e-01 1.00e+00f  1\n  52  6.9275791e+01 1.11e-16 2.33e-10  -8.6 1.70e-05    -  1.00e+00 1.00e+00h  1\n\nNumber of Iterations....: 52\n\n                                   (scaled)                 (unscaled)\nObjective...............:   6.9275790998035603e+01    6.9275790998035603e+01\nDual infeasibility......:   2.3283064365386963e-10    2.3283064365386963e-10\nConstraint violation....:   1.1102230246251565e-16    1.1102230246251565e-16\nComplementarity.........:   2.5059567217454749e-09    2.5059567217454749e-09\nOverall NLP error.......:   2.5059567217454749e-09    2.5059567217454749e-09\n\n\nNumber of objective function evaluations             = 58\nNumber of objective gradient evaluations             = 53\nNumber of equality constraint evaluations            = 58\nNumber of inequality constraint evaluations          = 58\nNumber of equality constraint Jacobian evaluations   = 53\nNumber of inequality constraint Jacobian evaluations = 53\nNumber of Lagrangian Hessian evaluations             = 52\nTotal CPU secs in IPOPT (w/o function evaluations)   =      0.899\nTotal CPU secs in NLP function evaluations           =      0.067\n\nEXIT: Optimal Solution Found.\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Retrieve-and-Plot-the-Results","page":"Pandemic Control","title":"Retrieve and Plot the Results","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Now we can retrieve the optimal results and plot them to visualize the optimal policy. Note that the values of infinite variables will be returned as arrays corresponding to how the supports were used to discretize our model. We can retrieve our values using value.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Get the results:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"r_opt = value(r, ndarray = true) * 100 # make the population fractions into percentages\ns_opt = value(s, ndarray = true) * 100\ni_opt = value(i, ndarray = true) * 100\ne_opt = value(e, ndarray = true) * 100\nu_opt = value(u)\nobj_opt = objective_value(model)\nts = value(t)\nξs = value(ξ);\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Plot the values of r(t xi) and s(t xi) over time with confidence bounds:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"r_mean = mean(r_opt, dims = 2)\nr_std = std(r_opt, dims = 2)\nplot(ts, r_mean, label = \"r(t, ξ)\", linecolor = :red, background_color = :transparent)\nplot!(ts, r_mean + r_std, linecolor = :red, linestyle = :dash, linealpha = 0.4, label = \"\")\nplot!(ts, r_mean - r_std, linecolor = :red, linestyle = :dash, linealpha = 0.4, label = \"\")\n\ns_mean = mean(s_opt, dims = 2)\ns_std = std(s_opt, dims = 2)\nplot!(ts, s_mean, label = \"s(t, ξ)\", linecolor = :blue)\nplot!(ts, s_mean + s_std, linecolor = :blue, linestyle = :dash, linealpha = 0.4, label = \"\")\nplot!(ts, s_mean - s_std, linecolor = :blue, linestyle = :dash, linealpha = 0.4, label = \"\")\nylabel!(\"Pop. (%)\")\nxlabel!(\"Time (Days)\")","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"(Image: )","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Plot the values of i(t xi) and e(t xi) over time with confidence bounds:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"i_mean = mean(i_opt, dims = 2)\ni_std = std(i_opt, dims = 2)\nplot(ts, i_mean, label = \"i(t, ξ)\", linecolor = :green, background_color = :transparent)\nplot!(ts, i_mean + i_std, linecolor = :green, linestyle = :dash, linealpha = 0.4, label = \"\")\nplot!(ts, i_mean - i_std, linecolor = :green, linestyle = :dash, linealpha = 0.4, label = \"\")\n\ne_mean = mean(e_opt, dims = 2)\ne_std = std(e_opt, dims = 2)\nplot!(ts, e_mean, label = \"e(t, ξ)\", linecolor = :purple)\nplot!(ts, e_mean + e_std, linecolor = :purple, linestyle = :dash, linealpha = 0.4, label = \"\")\nplot!(ts, e_mean - e_std, linecolor = :purple, linestyle = :dash, linealpha = 0.4, label = \"\")\nylabel!(\"Pop. (%)\")\nxlabel!(\"Time (Days)\")","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"(Image: )","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Plot the values of u(t) over time:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"plot(ts, u_opt, linecolor = :orange, label = \"u(t)\", ylims = (-0.02, 1.02),\n     background_color = :transparent)\nxlabel!(\"Time (Days)\")\nylabel!(\"Distancing Ratio\")","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"(Image: )","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Maintenance-Tests","page":"Pandemic Control","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"using Test\n@test termination_status(model) == MOI.LOCALLY_SOLVED\n@test has_values(model)\n@test u_opt isa Vector{<:Real}","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Test Passed","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"This page was generated using Literate.jl.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"DocTestFilters = [r\"≤|<=\", r\"≥|>=\", r\" == | = \", r\" ∈ | in \", \n                  r\"MathOptInterface|MOI\", r\" for all | ∀ \"]","category":"page"},{"location":"guide/constraint/#constr_docs","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"A guide for constraints in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/constraint/#Overview","page":"Constraints","title":"Overview","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Constraints are a key part of infinite dimensional problems and serve  as a fundamental utility of InfiniteOpt. In particular, InfiniteOpt supports  finite constraints that entail finite variables and/or measures that fully remove any  infinite parameter dependencies (e.g., first stage constraints), infinite  constraints that are enforced over the entire domain of its infinite parameter  dependencies (e.g., path constraints), and restricted constraints which  are enforced over some specified sub-domain of its infinite parameter  dependencies (e.g., boundary conditions). This page will highlight how to  implement these types of constraints in InfiniteOpt.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nNonlinear constraints as defined by JuMP.@NLconstraint are not currently  supported by InfiniteOpt. See Nonlinear Expressions for more  information and possible workarounds. ","category":"page"},{"location":"guide/constraint/#Basic-Usage","page":"Constraints","title":"Basic Usage","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Principally, the  @constraint  macro is used to define constraints. First, let's setup an infinite model with  variables that we can add constraints to:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @infinite_parameter(model, x[1:2] in [-2, 2]);\n\njulia> @variable(model, ya, Infinite(t, x));\n\njulia> @variable(model, yb, Infinite(t));\n\njulia> @variable(model, z[1:2]);","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nUnlike previous versions, InfiniteOpt now supports all of the constraints  offered by JuMP, including vector and semi-definite constraints! Please  see JuMP's constraint documentation  for a thorough explanation of the supported types and syntax.","category":"page"},{"location":"guide/constraint/#Scalar-Constraints","page":"Constraints","title":"Scalar Constraints","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Scalar constraints use scalar functions of variables. For example, let's define  the constraint  z^2 + 2y_a(t x) leq 0  forall t in 0 10 x in -2 2^2  using @constraint:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, c1, sum(z[i]^2 for i = 1:2) + 2ya <= 0)\nc1 : z[1]² + z[2]² + 2 ya(t, x) ≤ 0.0, ∀ t ∈ [0, 10], x[1] ∈ [-2, 2], x[2] ∈ [-2, 2]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Thus, we added an infinite constraint (which infinite with respect to t and x)  to model and stored the corresponding constraint reference to c1. Note that   this is enforced over the full infinite domains of the infinite parameters t  and x which are implicitly used by c1. For scalar constraints like this one,  the allowed constraint operators are ==, <=, ≤, >=, and ≥.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nLinear algebra constraints can also be used when defining constraints  when . is added in front of the constraint operators (e.g., .<=). This  behavior is further explained in  JuMP's constraint documentation. ","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Similarly, we can define an array of constraints with varied indexes by including  an additional argument before the constraint expression. For example,  let's define 3z_i - 14 = 0  forall i in 12:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, c2[i = 1:2], 3z[i] - 14 == 0)\n2-element Vector{InfOptConstraintRef}:\n c2[1] : 3 z[1] = 14.0\n c2[2] : 3 z[2] = 14.0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Thus, we added two constraints to model and stored a vector of the corresponding  constraint references to the Julia variable c2. To learn more about building  containers of constraints please see  JuMP's constraint container documentation.","category":"page"},{"location":"guide/constraint/#Multi-Dimensional-Constraints","page":"Constraints","title":"Multi-Dimensional Constraints","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Building upon JuMP we support a variety of multi-dimensional constraint types.  For example, we can define the vector constraint:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> A = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> b = [5, 6]\n2-element Vector{Int64}:\n 5\n 6\n\njulia> @constraint(model, A * z - b in MOI.Nonnegatives(2))\n[z[1] + 2 z[2] - 5, 3 z[1] + 4 z[2] - 6] ∈ MathOptInterface.Nonnegatives(2)","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"See JuMP's constraint documentation  for a thorough tutorial on the accepted syntax and constraint types.","category":"page"},{"location":"guide/constraint/#Restricted-Constraints","page":"Constraints","title":"Restricted Constraints","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Restricted constraints entail an infinite domain (determined by the infinite  parameters they explicitly/implicitly depend on) that is restricted to a certain  sub-domain. Such constraints are common for enforcing initial/boundary conditions  and for enforcing path constraints over a certain sub-domain.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"warning: Warning\nPrevious versions of InfiniteOpt referred to restricted constraints as  \"bounded constraints\" and used @BDconstraint to define them. This has been  deprecated in favor of the more intuitive domain restricted nomenclature.# Old syntax\n@BDconstraint(model, name_expr(restricts...), constr_expr)\n\n# New syntax\n@constraint(model, name_expr, constr_expr, DomainRestrictions(restricts...))","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"These types of constraints are defined adding DomainRestrictions. For  example, let's add the initial condition y_b(0) = 0:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, initial, yb == 0, DomainRestrictions(t => 0))\ninitial : yb(t) = 0.0, ∀ t = 0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Thus, we have added a constraint to model defined over the sub-domain t = 0  in accordance with the initial condition.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"tip: Tip\nBoundary conditions can often be more efficiently defined using  Restricted Variables. For example, the above initial condition  can be expressed:julia> @constraint(model, yb(0) == 0)\nyb(0) = 0.0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"More complex sub-domains can be specified by simply adding more restrictions. To  illustrate this, let's define the constraint  2y_b^2(t x) + z_1 geq 3  forall t = 0  x in -1 1^2:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, 2ya^2 + z[1] >= 3, DomainRestrictions(t => 0, x => [-1, 1]))\n2 ya(t, x)² + z[1] ≥ 3.0, ∀ t = 0, x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Now we have added constraints to our model and it is ready to be solved!","category":"page"},{"location":"guide/constraint/#Data-Structure","page":"Constraints","title":"Data Structure","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Here we detail the data structures used to store constraints in InfiniteOpt.  In general, constraints in JuMP are of the form: function in set where  function corresponds to a JuMP expression and set corresponds to a MOI  set. This leads to the following data structures:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Constraint Type Function Type Set Type\nScalar JuMP.AbstractJuMPScalar MOI.AbstractScalarSet\nVector Vector{<:JuMP.AbstractJuMPScalar} MOI.AbstractVectorSet\nMatrix Matrix{<:JuMP.AbstractJuMPScalar} MOI.AbstractVectorSet via vectorization","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"The above combos are then stored in  JuMP.ScalarConstraints  and `JuMP.VectorConstraints. ","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Restricted constraints are built upon this data structure where the underlying  constraint is created in the same manner. Then the specified  DomainRestrictions are added by creating a  DomainRestrictedConstraint which stores the JuMP.AbstractConstraint  and the restrictions.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"These constraint objects are what store constraints in InfiniteModels. And  these are pointed to by InfOptConstraintRefs.","category":"page"},{"location":"guide/constraint/#Definition","page":"Constraints","title":"Definition","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"In this section, we describe the ins and outs of defining constraints. Note that  this process is analogous to the manner in which variables are defined and added  to the model.","category":"page"},{"location":"guide/constraint/#Manual-Definition","page":"Constraints","title":"Manual Definition","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Defining a constraint principally involves the following steps:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Define the constraint information (i.e., function, set, and domain restrictions)\nConstruct a concrete subtype of JuMP.AbstractConstraint to store the  constraint information\nAdd the AbstractConstraint object to an InfiniteModel and assign a name\nCreate an InfOptConstraintRef that points to the constraint object  stored in the model.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"The constraint objects are specified via JuMP.build_constraint which requires  that the user provides a function, set, and optionally include domain  restrictions. For example, let's build a scalar constraint  3y_a(t x) - y_b^2(t) leq 0  forall t in 0 10 x in -2 2^2 over  its full infinite domain (i.e., have no DomainRestrictions):","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> constr = build_constraint(error, 3ya - yb^2, MOI.LessThan(0.0));","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Now the built constraint object can be added to the infinite model via  add_constraint. Let's do so with our example and assign it the name of  c3 (note that adding a name is optional):","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> cref = add_constraint(model, constr, \"c3\")\nc3 : -yb(t)² + 3 ya(t, x) ≤ 0.0, ∀ t ∈ [0, 10], x[1] ∈ [-2, 2], x[2] ∈ [-2, 2]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Thus, we have made our constraint and added it model and now have a constraint  reference cref that we can use to access it.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"The @constraint  and @SDconstraint  macros automate the above steps.","category":"page"},{"location":"guide/constraint/#Macro-Definition","page":"Constraints","title":"Macro Definition","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"As mentioned above in the Basic Usage section, the  @constraint  macro should be used to define constraints with the syntax:  @constraint(model::InfiniteModel, [container/name_expr], constr_expr, [rs::DomainRestrictions]).","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"The second argument is optional and is used to assign a name and/or define  indexing variables to be used in the constraint expr. When a name is provided it  is registered and cannot be used again for another constraint or variable name.  The indexing expression can be used to produce an array of constraints as shown  below (notice this is equivalent to looping over individual @constraint calls):","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> crefs = @constraint(model, [i = 1:2], 2z[i] - yb == 0)\n2-element Vector{InfOptConstraintRef}:\n 2 z[1] - yb(t) = 0.0, ∀ t ∈ [0, 10]\n 2 z[2] - yb(t) = 0.0, ∀ t ∈ [0, 10]\n\njulia> crefs = Vector{InfOptConstraintRef}(undef, 2);\n\njulia> for i = 1:2\n           crefs[i] = @constraint(model, 2z[i] - yb == 0)\n       end\n\njulia> crefs\n2-element Vector{InfOptConstraintRef}:\n 2 z[1] - yb(t) = 0.0, ∀ t ∈ [0, 10]\n 2 z[2] - yb(t) = 0.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Please refer to  JuMP's constraint container documentation  for a thorough tutorial on creating containers of constraints.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Any constraint type supported by JuMP can be specified in the constr_expr  argument. This includes a wealth of constraint types including:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Variable constraints\nScalar constraints\nVector constraints\nConic constraints \nIndicator constraints\nSemi-definite constraints","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"For example, we could define the following semi-definite constraint using  @SDconstraint:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @SDconstraint(model, [yb 2yb; 3yb 4yb] >= ones(2, 2))\n[yb(t) - 1    2 yb(t) - 1;\n 3 yb(t) - 1  4 yb(t) - 1] ∈ PSDCone(), ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"See JuMP's constraint documentation  for a thorough tutorial on the accepted syntax and constraint types.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Finally, restrictions on the inherent infinite domain of a constraint can be  specified via DomainRestrictions with the rs argument. The accepted  syntax is DomainRestrictions(restricts...) where each argument of restricts  can be any of the following forms:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"pref => value\npref => [lb, ub]\npref => IntervalDomain(lb, ub)\nprefs => value\nprefs => [lb, ub]\nprefs => IntervalDomain(lb, ub).","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Note that pref and prefs must correspond to infinite parameters.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"For example, we can define the constraint y_a^2(t x) + z_i leq 1 and  restrict the infinite domain of x_i to be 0 1:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, [i = 1:2], ya^2 + z[i] <= 1, DomainRestrictions(x[i] => [0, 1]))\n2-element Vector{InfOptConstraintRef}:\n ya(t, x)² + z[1] ≤ 1.0, ∀ t ∈ [0, 10], x[1] ∈ [0, 1], x[2] ∈ [-2, 2]\n ya(t, x)² + z[2] ≤ 1.0, ∀ t ∈ [0, 10], x[1] ∈ [-2, 2], x[2] ∈ [0, 1]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"tip: Tip\nWhere possible, using Restricted Variables will tend to be more  performant than using DomainRestrictions instead.","category":"page"},{"location":"guide/constraint/#Queries","page":"Constraints","title":"Queries","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"In this section, we describe a variety of methods to extract constraint information.","category":"page"},{"location":"guide/constraint/#Basic","page":"Constraints","title":"Basic","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"A number of constraint properties can be extracted via constraint references.  Principally, the validity, name, model, index, and constraint object can be queried  via is_valid,  name,  owner_model,  index,  and constraint_object, respectively. These methods all constitute   extensions of JuMP methods and follow exactly the same behavior. Let's try  them out with the following example:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> is_valid(model, c1) # check if contained in model\ntrue\n\njulia> name(c1) # get the name\n\"c1\"\n\njulia> m = owner_model(c1); # get the model it is added to\n\njulia> index(c1) # get the constraint's index\nInfOptConstraintIndex(1)\n\njulia> constr = constraint_object(c1); # get the raw constraint datatype","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Also, constraint_by_name can be used to retrieve a constraint reference  if only the name is known and its name is unique. For example, let's extract the  reference for \"c1\":","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> cref = constraint_by_name(model, \"c1\")\nc1 : z[1]² + z[2]² + 2 ya(t, x) ≤ 0.0, ∀ t ∈ [0, 10], x[1] ∈ [-2, 2], x[2] ∈ [-2, 2]","category":"page"},{"location":"guide/constraint/#Domain-Restrictions","page":"Constraints","title":"Domain Restrictions","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"As explained above, restricted constraints serve as a key capability of  InfiniteOpt. Information about domain restrictions can be obtained via  has_domain_restrictions and domain_restrictions which indicate  if a constraint is restricted and what its DomainRestrictions are,  respectively. These are exemplified below:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> has_domain_restrictions(c1) # check if constraint is bounded\nfalse\n\njulia> has_domain_restrictions(initial)\ntrue\n\njulia> domain_restrictions(initial)\nSubdomain restrictions (1): t = 0","category":"page"},{"location":"guide/constraint/#General","page":"Constraints","title":"General","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Constraints can be defined in a number of ways symbolically that differ from  how it is actually stored in the model. This principally occurs since like terms  and constants are combined together where possible with the variable terms on the  left hand side and the constant on the right hand side. For instance, the  constraint 2y_b(t) + 3y_b(t) - 2 leq 1 + z_1 would be normalized   5y_b(t) - z_1 leq 3. In accordance with this behavior,   normalized_rhs and normalized_coefficient  can be used to query the normalized right hand side and the coefficient of a  particular variable reference, respectively. Let's employ the above example to  illustrate this:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, constr, 2yb + 3yb - 2 <= 1 + z[1])\nconstr : 5 yb(t) - z[1] ≤ 3.0, ∀ t ∈ [0, 10]\n\njulia> normalized_rhs(constr)\n3.0\n\njulia> normalized_coefficient(constr, yb)\n5.0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"There also exist a number of methods for querying an infinite model about what  constraints it contains.  list_of_constraint_types can be used query what types of constraints   have been added to a model. This is provided as a list of tuples where the first  element is the expression type and the second element is the set type (recall  that constraints are stored in the form func-in-set). Thus, for our current  model we obtain:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> list_of_constraint_types(model)\n4-element Vector{Tuple{DataType,DataType}}:\n (GenericQuadExpr{Float64, GeneralVariableRef}, MathOptInterface.LessThan{Float64})\n (GenericQuadExpr{Float64, GeneralVariableRef}, MathOptInterface.GreaterThan{Float64})\n (GenericAffExpr{Float64, GeneralVariableRef}, MathOptInterface.LessThan{Float64})\n (GenericAffExpr{Float64, GeneralVariableRef}, MathOptInterface.EqualTo{Float64})","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"This information is useful when used in combination with the  num_constraints and all_constraints methods which can take  the expression type and/or the set type as inputs. Here num_constraints  provides the number of constraints that match a certain type  and all_constraints  returns a list of constraint references matching the criteria provided. These have  been extended beyond JuMP functionality such additional methods have been  provided for the cases in which one wants to query solely off of set or off  expression type. Let's illustrate this with num_constraints:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> num_constraints(model) # total number of constraints\n16\n\njulia> num_constraints(model, GenericQuadExpr{Float64, GeneralVariableRef})\n5\n\njulia> num_constraints(model, MOI.LessThan{Float64})\n5\n\njulia> num_constraints(model, GenericQuadExpr{Float64, GeneralVariableRef},\n                       MOI.LessThan{Float64})\n4                   ","category":"page"},{"location":"guide/constraint/#Modification","page":"Constraints","title":"Modification","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"In this section, we highlight a number of methods that can be used to modify  existing constraints.","category":"page"},{"location":"guide/constraint/#Deletion","page":"Constraints","title":"Deletion","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"All constraints in InfiniteOpt can be removed in like manner to typical JuMP  constraints with the appropriate extension of  delete. This will  remove the corresponding constraint object from the model. However, please note  any registered names will remain registered in the infinite model. This means  that a constraint with a registered name cannot be repeatedly added and removed  using the same name. To exemplify this, let's delete the constraint c1:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> delete(model, c1)","category":"page"},{"location":"guide/constraint/#General-2","page":"Constraints","title":"General","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"There also are a number of ways to modify information and characteristics of  constraints. First, set_name  can be used to specify a new name for a particular constraint. For instance,  let's update the name of initial to \"init_cond\":","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> set_name(initial, \"init_cond\")\n\njulia> initial\ninit_cond : yb(t) = 0.0, ∀ t = 0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"We can also update the normalized right hand side constant value or normalized  left hand side variable coefficient value using  set_normalized_rhs and set_normalized_coefficient,  respectively. Let's again consider the constraint 5y_b(t) - z_1 leq 3 as an  example. Let's change the constant term to -1 and the y_b(t) coefficient to 2.5:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> set_normalized_rhs(constr, -1)\n\njulia> set_normalized_coefficient(constr, yb, 2.5)\n\njulia> constr\nconstr : 2.5 yb(t) - z[1] ≤ -1.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nIn some cases, it may be more convenient to dynamically modify coefficients  and other values via the use of finite parameters. This provides an avenue  to update parameters without having to be concerned about the normalized form.  For more information, see the Finite Parameters page. ","category":"page"},{"location":"guide/constraint/#Domain-Restrictions-2","page":"Constraints","title":"Domain Restrictions","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Domain Restrictions can be added to, modified, or removed from any constraint in  InfiniteOpt. Principally, this is accomplished via   add_domain_restrictions, set_domain_restrictions,  and delete_domain_restrictions.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nPrevious versions of InfiniteOpt used @[set/add]_parameter_bounds which  have been deprecated in favor of using DomainRestrictions with the  the methods described used in this section.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"First, domain restrictions can be added to a constraint via  add_domain_restrictions. For example, let's add the bound  t in 0 1 to constr:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> add_domain_restrictions(constr, DomainRestrictions(t => [0, 1]))\n\njulia> constr\nconstr : 2.5 yb(t) - z[1] ≤ -1.0, ∀ t ∈ [0, 1]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"In similar manner, set_domain_restrictions can be employed to specify  what restrictions a constraint has (overwriting any existing ones if forced). It   follows the same syntax, so let's use it to change the bounds on t to t = 0:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> set_domain_restrictions(constr, DomainRestrictions(t => 0), force = true)\n\njulia> constr\nconstr : 2.5 yb(t) - z[1] ≤ -1.0, ∀ t = 0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Finally, constraint restrictions can be deleted via  delete_domain_restrictions. Now let's delete the domain restrictions  associated with our example:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> delete_domain_restrictions(constr)\n\njulia> constr\nconstr : 2.5 yb(t) - z[1] ≤ -1.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"manual/measure/#measure_manual","page":"Measures","title":"Measure Operators","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"A technical manual for measures in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/measure/#Measure-Data","page":"Measures","title":"Measure Data","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"AbstractMeasureData\nDiscreteMeasureData(::GeneralVariableRef, ::Vector{<:Real}, ::Vector{<:Real})\nDiscreteMeasureData(::AbstractArray{GeneralVariableRef}, ::Vector{<:Real}, ::Vector{<:AbstractArray{<:Real}})\nDiscreteMeasureData\nFunctionalDiscreteMeasureData(::GeneralVariableRef,::Function,::Int,::Type{<:AbstractSupportLabel})\nFunctionalDiscreteMeasureData(::AbstractArray{GeneralVariableRef},::Function,::Int,::Type{<:AbstractSupportLabel})\nFunctionalDiscreteMeasureData\nparameter_refs(::AbstractMeasureData)\nsupport_label(::AbstractMeasureData)\ngenerative_support_info(::AbstractMeasureData)\nJuMP.lower_bound(::AbstractMeasureData)\nJuMP.upper_bound(::AbstractMeasureData)\nsupports(::AbstractMeasureData)\nnum_supports(::AbstractMeasureData)\nmin_num_supports(::AbstractMeasureData)\ncoefficient_function(::AbstractMeasureData)\ncoefficients(::AbstractMeasureData)\nweight_function(::AbstractMeasureData)\ndefault_weight","category":"page"},{"location":"manual/measure/#InfiniteOpt.AbstractMeasureData","page":"Measures","title":"InfiniteOpt.AbstractMeasureData","text":"AbstractMeasureData\n\nAn abstract type to define data for measures to define the behavior of Measure.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.DiscreteMeasureData-Tuple{GeneralVariableRef, Vector{var\"#s40\"} where var\"#s40\"<:Real, Vector{var\"#s39\"} where var\"#s39\"<:Real}","page":"Measures","title":"InfiniteOpt.DiscreteMeasureData","text":"DiscreteMeasureData(pref::GeneralVariableRef,\n    coefficients::Vector{<:Real},\n    supports::Vector{<:Real};\n    [label::Type{<:AbstractSupportLabel} = generate_unique_label(),\n    weight_function::Function = [`default_weight`](@ref),\n    lower_bound::Real = NaN,\n    upper_bound::Real = NaN,\n    is_expect::Bool = false]\n    )::DiscreteMeasureData\n\nReturns a 1-dimensional DiscreteMeasureData object that can be utilized to define measures using measure. This accepts input for a scalar (single) infinite parameter. A description of the other arguments is provided in the documentation for DiscreteMeasureData. Errors if supports are out bounds or an unequal number of supports and coefficients are given. Note that by default a unique label is generated via generate_unique_label to ensure the supports can be located in the infinite parameter support storage. Advanced implementations, may choose a different behavior but should do so with caution.\n\nExample\n\njulia> data = DiscreteMeasureData(pref, [0.5, 0.5], [1, 2]);\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.DiscreteMeasureData-Tuple{AbstractArray{GeneralVariableRef, N} where N, Vector{var\"#s40\"} where var\"#s40\"<:Real, Vector{var\"#s39\"} where var\"#s39\"<:(AbstractArray{var\"#s38\", N} where {var\"#s38\"<:Real, N})}","page":"Measures","title":"InfiniteOpt.DiscreteMeasureData","text":"DiscreteMeasureData(prefs::AbstractArray{GeneralVariableRef},\n    coefficients::Vector{<:Real},\n    supports::Vector{<:AbstractArray{<:Real}};\n    label::Type{<:AbstractSupportLabel} = generate_unique_label(),\n    weight_function::Function = [`default_weight`](@ref),\n    lower_bounds::AbstractArray{<:Real} = [NaN...],\n    upper_bounds::AbstractArray{<:Real} = [NaN...],\n    is_expect::Bool = false\n    )::DiscreteMeasureData\n\nReturns a DiscreteMeasureData object that can be utilized to define measures using measure. This accepts input for an array (multi) parameter. The inner arrays in the supports vector need to match the formatting of the array used for parameter_refs. A description of the other arguments is provided in the documentation for DiscreteMeasureData. Errors if supports are out bounds, an unequal number of supports and coefficients are given, the array formats do not match, or if mixed infinite parameter types are given. Note that by default a unique label is generated via generate_unique_label to ensure the supports can be located in the infinite parameter support storage. Advanced implementations, may choose a different behavior but should do so with caution.\n\nExample\n\njulia> data = DiscreteMeasureData(prefs, [0.5, 0.5], [[1, 1], [2, 2]]);\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.DiscreteMeasureData","page":"Measures","title":"InfiniteOpt.DiscreteMeasureData","text":"DiscreteMeasureData{P <: Union{JuMP.AbstractVariableRef,\n                    Vector{<:JuMP.AbstractVariableRef}},\n                    N, B <: Union{Float64, Vector{Float64}},\n                    F <: Function\n                    } <: AbstractMeasureData\n\nA DataType for immutable measure abstraction data where the abstraction is of the form: measure = int_tau in T f(tau) w(tau) dtau approx sum_i = 1^N alpha_i f(tau_i) w(tau_i). The supports and coefficients are immutable (i.e., they will not change even if supports are changed for the underlying infinite parameter.) This type can be used for both 1-dimensional and multi-dimensional measures.\n\nFields\n\nparameter_refs::P: The infinite parameter(s) over which the integration occurs.                      These can be comprised of multiple independent parameters,                      but dependent parameters cannot be mixed with other types.\ncoefficients::Vector{Float64}: Coefficients alpha_i for the above                                  measure abstraction.\nsupports::Array{Float64, N}: Supports points tau_i. This is a Vector                                if only one parameter is given, otherwise it is                                a Matrix where the supports are stored column-wise.\nlabel::DataType: Label for the support points tau_i when stored in the                  infinite parameter(s), stemming from AbstractSupportLabel.\nweight_function::F: Weighting function w must map an individual                              support value to a Real scalar value.\nlower_bounds::B: Lower bound in accordance with T, this denotes the                   intended interval of the measure and should be NaN if ignored\nupper_bounds::B: Same as above but the upper bound.\nis_expect::Bool: Is this data associated with an expectation call?\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.FunctionalDiscreteMeasureData-Tuple{GeneralVariableRef, Function, Int64, Type{var\"#s40\"} where var\"#s40\"<:AbstractSupportLabel}","page":"Measures","title":"InfiniteOpt.FunctionalDiscreteMeasureData","text":"FunctionalDiscreteMeasureData(pref::GeneralVariableRef,\n    coeff_func::Function,\n    min_num_supports::Int,\n    label::Type{<:AbstractSupportLabel};\n    [weight_function::Function = [`default_weight`](@ref),\n    lower_bound::Real = NaN,\n    upper_bound::Real = NaN,\n    is_expect::Bool = false,\n    generative_support_info::AbstractGenerativeInfo = NoGenerativeSupports()]\n    )::FunctionalDiscreteMeasureData\n\nReturns a 1-dimensional FunctionalDiscreteMeasureData object that can be utilized to define measures using measure. This accepts input for a scalar (single) infinite parameter. A description of the other arguments is provided in the documentation for FunctionalDiscreteMeasureData. Errors if pref is not an infinite parameter. Built-in choices for label include:\n\nAll: Use all of the supports stored in pref\nMCSample: Use Monte Carlo samples associated with pref\nWeightedSample: Use weighted Monte Carlo samples associated with pref\nUniformGrid: Use uniform grid points associated with pref.\n\nExample\n\njulia> data = FunctionalDiscreteMeasureData(pref, my_func, 20, UniformGrid);\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.FunctionalDiscreteMeasureData-Tuple{AbstractArray{GeneralVariableRef, N} where N, Function, Int64, Type{var\"#s40\"} where var\"#s40\"<:AbstractSupportLabel}","page":"Measures","title":"InfiniteOpt.FunctionalDiscreteMeasureData","text":"FunctionalDiscreteMeasureData(prefs::AbstractArray{GeneralVariableRef},\n    coeff_func::Function,\n    min_num_supports::Int,\n    label::Type{<:AbstractSupportLabel};\n    [weight_function::Function = [`default_weight`](@ref),\n    lower_bounds::AbstractArray{<:Real} = [NaN...],\n    upper_bounds::AbstractArray{<:Real} = [NaN...],\n    is_expect::Bool = false]\n    )::FunctionalDiscreteMeasureData\n\nReturns a multi-dimensional FunctionalDiscreteMeasureData object that can be utilized to define measures using measure. This accepts input for an array of infinite parameters. A description of the other arguments is provided in the documentation for FunctionalDiscreteMeasureData. Errors if prefs are not infinite parameters or if the mixed parameter types are provided. Built-in choices for label include:\n\nAll: Use all of the supports stored in prefs\nMCSample: Use Monte Carlo samples associated with prefs\nWeightedSample: Use weighted Monte Carlo samples associated with prefs\nUniformGrid: Use uniform grid points associated with prefs.\n\nExample\n\njulia> data = FunctionalDiscreteMeasureData(prefs, my_func, 20, MCSample);\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.FunctionalDiscreteMeasureData","page":"Measures","title":"InfiniteOpt.FunctionalDiscreteMeasureData","text":"FunctionalDiscreteMeasureData{P <: Union{JuMP.AbstractVariableRef,\n                              Vector{<:JuMP.AbstractVariableRef}},\n                              B <: Union{Float64, Vector{Float64}},\n                              I <: AbstractGenerativeInfo,\n                              F1 <: Function,\n                              F2 <: Function\n                              } <: AbstractMeasureData\n\nA DataType for mutable measure abstraction data where the abstraction is of the form: measure = int_tau in T f(tau) w(tau) dtau approx sum_i = 1^N alpha_i f(tau_i) w(tau_i). This abstraction is equivalent to that of DiscreteMeasureData, but the difference is that the supports are not fully known at the time of measure creation. Thus, functions are stored that will be used to generate the concrete support points tau_i and their coefficients alpha_i when the measure is evaluated (expanded). These supports are identified/generated in accordance with the label with a gaurantee that at least num_supports are generated. For example, if label = MCSample and num_supports = 100 then the measure will use all of the supports stored in the parameter_refs with the label MCSample and will ensure there are at least 100 are generated. This type can be used for both 1-dimensional and multi-dimensional measures.\n\nFor 1-dimensional measures over independent infinite parameters, the  generative_supp_info specifies the info needed to make generative supports based  on those with that exist with label. Note that only 1 kind of generative  supports are allowed for each infinite parameter.\n\nFields\n\nparameter_refs::P: The infinite parameter(s) over which the integration occurs.                    These can be comprised of multiple independent parameters,                    but dependent parameters cannot be mixed with other types.\ncoeff_function::F1: Coefficient generation function making alpha_i                             for the above measure abstraction. It should take                             all the supports as input (formatted as an Array)                             and return the corresponding vector of coefficients.\nmin_num_supports::Int: Specifies the minimum number of supports tau_i                      desired in association with parameter_refs and label.\nlabel::DataType: Label for the support points tau_i which are/will be                  stored in the infinite parameter(s), stemming from AbstractSupportLabel.\ngenerative_supp_info::I: Information needed to generate supports based on other   existing ones.\nweight_function::F2: Weighting function w must map an individual                             support value to a Real scalar value.\nlower_bounds::B: Lower bounds in accordance with T, this denotes the                 intended interval of the measure and should be NaN if ignored\nupper_bounds::B: Same as above but the upper bounds.\nis_expect::Bool: Is this data associated with an expectation call?\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.parameter_refs-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(data::AbstractMeasureData)::Union{GeneralVariableRef,\n                                                 AbstractArray{GeneralVariableRef}}\n\nReturn the infinite parameter reference(s) in data. This is intended as an internal function to be used with measure addition. User-defined measure data types will need to extend this function otherwise an error is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.support_label-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.support_label","text":"support_label(data::AbstractMeasureData)::Type{<:AbstractSupportLabel}\n\nReturn the label stored in data associated with its supports. This is intended as en internal method for measure creation and ensures any new supports are added to parameters with such a label. User-defined measure data types should extend this functionif supports are used, otherwise an error is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.generative_support_info-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.generative_support_info","text":"generative_support_info(data::AbstractMeasureData)::AbstractGenerativeInfo\n\nReturn the generative support creation info that corresponds to data. This is  intended as an internal method and only needs to be extended for user-defined  measure data types that use generative supports.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#JuMP.lower_bound-Tuple{AbstractMeasureData}","page":"Measures","title":"JuMP.lower_bound","text":"JuMP.lower_bound(data::AbstractMeasureData)::Union{Float64, Vector{Float64}}\n\nReturn the lower bound associated with data that defines its domain. This is intended as an internal method, but may be useful for extensions. User-defined measure data types should extend this function if desired, otherwise NaN is returned\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#JuMP.upper_bound-Tuple{AbstractMeasureData}","page":"Measures","title":"JuMP.upper_bound","text":"JuMP.upper_bound(data::AbstractMeasureData)::Union{Float64, Vector{Float64}}\n\nReturn the lower bound associated with data that defines its domain. This is intended as an internal method, but may be useful for extensions. User-defined measure data types should extend this function if desired, otherwise NaN is returned.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.supports-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.supports","text":"supports(data::AbstractMeasureData)::Array{Float64}\n\nReturn the supports associated with data and its infinite parameters. This is intended as en internal method for measure creation and ensures any new supports are added to parameters. User-defined measure data types should extend this function if appropriate, otherwise an empty vector is returned.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.num_supports-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.num_supports","text":"num_supports(data::AbstractMeasureData)::Int\n\nReturn the number supports associated with data and its infinite parameters. This is intended as an internal method for measure creation. User-defined measure data types should extend this function if appropriate, otherwise 0 is returned.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.min_num_supports-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.min_num_supports","text":"min_num_supports(data::AbstractMeasureData)::Int\n\nReturn the minimum number of supports associated with data. By fallback, this will just return num_supports(data). This is primarily intended for internal queries of FunctionalDiscreteMeasureData, but can be extended for other measure data types if needed.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.coefficient_function-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.coefficient_function","text":"coefficient_function(data::AbstractMeasureData)::Function\n\nReturn the coefficient function stored in data associated with its expansion abstraction is there is such a function. This is intended as an internal method for measure creation. User-defined measure data types should extend this function if appropriate, otherwise an error is thrown for unsupported types.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.coefficients-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.coefficients","text":"coefficients(data::AbstractMeasureData)::Vector{<:Real}\n\nReturn the coefficients associated with data associated with its expansion abstraction. This is intended as en internal method for measure creation. User-defined measure data types should extend this function if appropriate, otherwise an empty vector is returned.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.weight_function-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.weight_function","text":"weight_function(data::AbstractMeasureData)::Function\n\nReturn the weight function stored in data associated with its expansion abstraction. This is intended as en internal method for measure creation. User-defined measure data types should extend this function if appropriate, otherwise an error is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.default_weight","page":"Measures","title":"InfiniteOpt.default_weight","text":"default_weight(t) = 1\n\nDefault weight function for DiscreteMeasureData and FunctionalDiscreteMeasureData. Returns 1 regardless of the input value.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#Definition","page":"Measures","title":"Definition","text":"","category":"section"},{"location":"manual/measure/#General","page":"Measures","title":"General","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"measure\n@measure\nbuild_measure\nMeasure\nadd_measure\nInfiniteOpt.add_supports_to_parameters(::AbstractMeasureData)\nMeasureIndex\nMeasureData\nMeasureRef","category":"page"},{"location":"manual/measure/#InfiniteOpt.measure","page":"Measures","title":"InfiniteOpt.measure","text":"measure(expr::JuMP.AbstractJuMPScalar,\n        data::AbstractMeasureData;\n        [name::String = \"measure\"])::GeneralVariableRef\n\nReturn a measure reference that evaluates expr using according to data. The measure data data determines how the measure is to be evaluated. Typically, the DiscreteMeasureData and the FunctionalDiscreteMeasureData constructors can be used to for data. The variable expression expr can contain InfiniteOpt variables, infinite parameters, other measure references (meaning measures can be nested), and constants. Typically, this is called inside of JuMP.@expression, JuMP.@objective, and JuMP.@constraint in a manner similar  to sum. Note measures are not explicitly evaluated until  build_optimizer_model! is called or unless they are expanded via  expand or expand_all_measures!.\n\nExample\n\njulia> tdata = DiscreteMeasureData(t, [0.5, 0.5], [1, 2]);\n\njulia> xdata = DiscreteMeasureData(xs, [0.5, 0.5], [[-1, -1], [1, 1]]);\n\njulia> constr_RHS = @expression(model, measure(g - s + 2, tdata) + s^2)\nmeasure{t}[g(t) - s + 2] + s²\n\njulia> @objective(model, Min, measure(g - 1  + measure(T, xdata), tdata))\nmeasure{xs}[g(t) - 1 + measure{xs}[T(t, x)]]\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.@measure","page":"Measures","title":"InfiniteOpt.@measure","text":"@measure(expr::JuMP.AbstractJuMPScalar,\n         data::AbstractMeasureData;\n         [name::String = \"measure\"])::GeneralVariableRef\n\nAn efficient wrapper for measure, please see its doc string for more information.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.build_measure","page":"Measures","title":"InfiniteOpt.build_measure","text":"build_measure(expr::JuMP.AbstractJuMPScalar,\n              data::AbstractMeasureData)::Measure\n\nBuild and return a Measure given the expression to be measured expr using measure data data. This principally serves as an internal method for measure definition. Errors if the supports associated with data violate an finite variable parameter bounds of finite variables that are included in the measure.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.Measure","page":"Measures","title":"InfiniteOpt.Measure","text":"Measure{T <: JuMP.AbstractJuMPScalar, V <: AbstractMeasureData}\n\nA DataType for measure abstractions. The abstraction is determined by data and is enacted on func when the measure is evaluated (expended).\n\nFields\n\nfunc::T The InfiniteOpt expression to be measured.\ndata::V Data of the abstraction as described in a AbstractMeasureData           concrete subtype.\nobject_nums::Vector{Int}: The parameter object numbers of the evaluated                             measure expression (i.e., the object numbers of                             func excluding those that belong to data).\nparameter_nums::Vector{Int}: The parameter numbers that parameterize the                                evaluated measure expression. (i.e., the                                parameter numbers of func excluding those                                that belong to data).\nconstant_func::Bool: Indicates if func is not parameterized by the infinite                        parameters in data. (i.e., do the object numbers of                        func and data have no intersection?) This is useful                        to enable analytic evaluations if possible.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.add_measure","page":"Measures","title":"InfiniteOpt.add_measure","text":"add_measure(model::InfiniteModel, meas::Measure,\n            name::String = \"measure\")::GeneralVariableRef\n\nAdd a measure to model and return the corresponding measure reference. This operates in a manner similar to JuMP.add_variable. Note this intended as an internal method.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.add_supports_to_parameters-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.add_supports_to_parameters","text":"add_supports_to_parameters(data::AbstractMeasureData)::Nothing\n\nAdd supports as appropriate with data to the underlying infinite parameters. This is an internal method with by add_measure and should be defined for user-defined measure data types.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureIndex","page":"Measures","title":"InfiniteOpt.MeasureIndex","text":"MeasureIndex <: ObjectIndex\n\nA DataType for storing the index of a Measure.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureData","page":"Measures","title":"InfiniteOpt.MeasureData","text":"MeasureData{M <: Measure} <: AbstractDataObject\n\nA mutable DataType for storing Measures and their data.\n\nFields\n\nmeasure::M: The measure structure.\nname::String: The base name used for printing name(meas_expr d(par)).\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nconstraint_indices::Vector{InfOptConstraintIndex}: Indices of dependent constraints.\nderivative_indices::Vector{DerivativeIndex}: Indices of dependent derivatives.\nin_objective::Bool: Is this used in objective?\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureRef","page":"Measures","title":"InfiniteOpt.MeasureRef","text":"MeasureRef <: DispatchVariableRef\n\nA DataType for referring to measure abstractions.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::MeasureIndex: Index of the measure in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#Integrals","page":"Measures","title":"Integrals","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"InfiniteOpt.MeasureToolbox.integral(::JuMP.AbstractJuMPScalar,::InfiniteOpt.GeneralVariableRef,::Real,::Real)\nInfiniteOpt.MeasureToolbox.∫(::JuMP.AbstractJuMPScalar,::InfiniteOpt.GeneralVariableRef,::Real,::Real)\nInfiniteOpt.MeasureToolbox.uni_integral_defaults\nInfiniteOpt.MeasureToolbox.set_uni_integral_defaults\nInfiniteOpt.MeasureToolbox.clear_uni_integral_defaults\nInfiniteOpt.MeasureToolbox.integral(::JuMP.AbstractJuMPScalar,::AbstractArray{InfiniteOpt.GeneralVariableRef},::Union{Real, AbstractArray{<:Real}},::Union{Real, AbstractArray{<:Real}})\nInfiniteOpt.MeasureToolbox.∫(::JuMP.AbstractJuMPScalar,::AbstractArray{InfiniteOpt.GeneralVariableRef},::Union{Real, AbstractArray{<:Real}},::Union{Real, AbstractArray{<:Real}})\nInfiniteOpt.MeasureToolbox.multi_integral_defaults\nInfiniteOpt.MeasureToolbox.set_multi_integral_defaults\nInfiniteOpt.MeasureToolbox.clear_multi_integral_defaults\nInfiniteOpt.MeasureToolbox.@integral\nInfiniteOpt.MeasureToolbox.@∫\nInfiniteOpt.MeasureToolbox.AbstractIntegralMethod\nInfiniteOpt.MeasureToolbox.Automatic\nInfiniteOpt.MeasureToolbox.AbstractUnivariateMethod\nInfiniteOpt.MeasureToolbox.UniTrapezoid\nInfiniteOpt.MeasureToolbox.UniMCSampling\nInfiniteOpt.MeasureToolbox.UniIndepMCSampling\nInfiniteOpt.MeasureToolbox.Quadrature\nInfiniteOpt.MeasureToolbox.GaussHermite\nInfiniteOpt.MeasureToolbox.GaussLegendre\nInfiniteOpt.MeasureToolbox.GaussRadau\nInfiniteOpt.MeasureToolbox.GaussLobatto\nInfiniteOpt.MeasureToolbox.GaussJacobi\nInfiniteOpt.MeasureToolbox.FEGaussLobatto\nInfiniteOpt.MeasureToolbox.GaussChebyshev\nInfiniteOpt.MeasureToolbox.GaussLaguerre\nInfiniteOpt.MeasureToolbox.AbstractMultivariateMethod\nInfiniteOpt.MeasureToolbox.MultiMCSampling\nInfiniteOpt.MeasureToolbox.MultiIndepMCSampling\nInfiniteOpt.MeasureToolbox.generate_integral_data","category":"page"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.integral-Tuple{AbstractJuMPScalar, GeneralVariableRef, Real, Real}","page":"Measures","title":"InfiniteOpt.MeasureToolbox.integral","text":"integral(expr::JuMP.AbstractJuMPScalar,\n         pref::GeneralVariableRef,\n         [lower_bound::Real = lower_bound(pref),\n         upper_bound::Real = upper_bound(pref);\n         kwargs...])::GeneralVariableRef\n\nReturns a measure reference that evaluates the integral of expr with respect to infinite parameter pref from lower_bound to upper_bound. This thus considers integrals of the form: int_p in P expr(p) w(p) dp where p is an infinite parameter and w is the weight function is 1 by default. This function provides a high-level interface that ultimately constructs an appropriate concrete form of AbstractMeasureData via generate_integral_data in accordance with the keyword arugment eval_method that is then used with measure. Note that it is preferred to call @integral when expr is not just a single variable reference. Errors for bad bound input.\n\nThe keyword arguments are as follows:\n\neval_method::AbstractUnivariateMethod: Used to determine the   numerical evaluation scheme. Possible choices include:\nAutomatic()\nUniTrapezoid()\nUniMCSampling()\nUniIndepMCSampling()\nQuadrature()\nGaussHermite()\nGaussLegendre()\nFEGaussLobatto()\nGaussLageurre()\nGaussLobatto()\nGaussChebyshev(order)\nGaussRadau()\nGaussJacobi(α, β)\nnum_supports: The minimum number of supports to be generated (if used by   eval_method)\nweight_func: w(p) above with parameter value inputs and scalar output\n\nSee set_uni_integral_defaults to update the default keyword argument values for all one-dimensional integral calls.\n\nExample\n\njulia> @infinite_parameter(model, x in [0, 1])\nx\n\njulia> @variable(model, f, Infinite(x))\nf(x)\n\njulia> int = integral(f, x)\n∫{x ∈ [0, 1]}[f(x)]\n\njulia> expand(int)\n0.2 f(0.8236475079774124) + 0.2 f(0.9103565379264364) + 0.2 f(0.16456579813368521) + 0.2 f(0.17732884646626457) + 0.2 f(0.278880109331201)\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.∫-Tuple{AbstractJuMPScalar, GeneralVariableRef, Real, Real}","page":"Measures","title":"InfiniteOpt.MeasureToolbox.∫","text":"∫(expr::JuMP.AbstractJuMPScalar,\n  pref::GeneralVariableRef,\n  [lower_bound::Real = NaN,\n  upper_bound::Real = NaN;\n  kwargs...])::GeneralVariableRef\n\nA convenient wrapper for integral. The ∫ unicode symbol is produced  via \\int.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.uni_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.uni_integral_defaults","text":"uni_integral_defaults()::Dict{Symbol, Any}\n\nGet the default keyword argument values for defining one-dimensional integrals.\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.set_uni_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.set_uni_integral_defaults","text":"set_uni_integral_defaults(; kwargs...)::Nothing\n\nSet the default keyword argument settings for one-dimensional integrals. The keyword arguments of this function will be recorded in the default keyword argument dictionary. These will determine the default keyword argument values when calling integral with a single infinite parameter.\n\nExample\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\njulia> set_uni_integral_defaults(num_supports = 5, eval_method = Quadrature(),\n                                 new_kwarg = true)\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 3 entries:\n  :new_kwarg             => true\n  :num_supports          => 5\n  :eval_method           => Quadrature()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.clear_uni_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.clear_uni_integral_defaults","text":"clear_uni_integral_defaults()::Nothing\n\nClears and resets the keyword argument defaults for univariate integrals to their  default state. \n\nExample\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 3 entries:\n  :new_kwarg             => true\n  :num_supports          => 5\n  :eval_method           => Quadrature()\n\njulia> clear_uni_integral_defaults()\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.integral-Tuple{AbstractJuMPScalar, AbstractArray{GeneralVariableRef, N} where N, Union{Real, AbstractArray{var\"#s40\", N} where {var\"#s40\"<:Real, N}}, Union{Real, AbstractArray{var\"#s39\", N} where {var\"#s39\"<:Real, N}}}","page":"Measures","title":"InfiniteOpt.MeasureToolbox.integral","text":"integral(expr::JuMP.AbstractJuMPScalar,\n         prefs::AbstractArray{GeneralVariableRef},\n         [lower_bounds::Union{Real, AbstractArray{<:Real}} = [lower_bound(pref)...],\n         upper_bounds::Union{Real, AbstractArray{<:Real}} = [upper_bound(pref)...];\n         kwargs...])::GeneralVariableRef\n\nReturns a measure reference that evaluates the integral of expr with respect to infinite parameters prefs from lower_bounds to upper_bounds. This thus considers integrals of the form: int_p in P expr(p) w(p) dp where p is an infinite parameter and w is the weight function is 1 by default. This function provides a high-level interface that ultimately constructs an appropriate concrete form of AbstractMeasureData via generate_integral_data in accordance with the keyword arugment eval_method that is then used with measure. Note that it is preferred to call @integral when expr is not just a single variable reference. Errors when the container types and dimensions do not match or the bounds are invalid.\n\nThe keyword arguments are as follows:\n\neval_method::AbstractMultivariateMethod: Used to determine the   numerical evaluation scheme. Possible choices include:\nAutomatic()\nMultiMCSampling()\nMultiIndepMCSampling()\nnum_supports: The minimum number of supports to be generated (if used by   eval_method)\nweight_func: w(p) above with parameter value inputs and scalar output\n\nSee set_multi_integral_defaults to update the default keyword argument values for all multi-dimensional integral calls.\n\nExample\n\njulia> @infinite_parameter(model, x[1:2] in [0, 1], independent = true);\n\njulia> @variable(model, f, Infinite(x));\n\njulia> int = integral(f, x)\n∫{x ∈ [0, 1]^2}[f(x)]\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.∫-Tuple{AbstractJuMPScalar, AbstractArray{GeneralVariableRef, N} where N, Union{Real, AbstractArray{var\"#s40\", N} where {var\"#s40\"<:Real, N}}, Union{Real, AbstractArray{var\"#s39\", N} where {var\"#s39\"<:Real, N}}}","page":"Measures","title":"InfiniteOpt.MeasureToolbox.∫","text":"∫(expr::JuMP.AbstractJuMPScalar,\n  prefs::AbstractArray{GeneralVariableRef},\n  [lower_bounds::Union{Real, AbstractArray{<:Real}} = NaN,\n  upper_bounds::Union{Real, AbstractArray{<:Real}} = NaN;\n  kwargs...])::GeneralVariableRef\n\nA convenient wrapper for integral. The unicode symbol ∫ is produced  via \\int.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.multi_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.multi_integral_defaults","text":"multi_integral_defaults()::Dict{Symbol, Any}\n\nGet the default keyword argument values for defining multi-dimensional integrals.\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.set_multi_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.set_multi_integral_defaults","text":"set_multi_integral_defaults(; kwargs...)::Nothing\n\nSet the default keyword argument settings for multi-dimesnional integrals. The keyword arguments of this function will be recorded in the default keyword argument dictionary. These will determine the default keyword argument values when calling integral with an array of infinite parameters.\n\nExample\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\njulia> set_multi_integral_defaults(num_supports = 5, new_kwarg = true)\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 3 entries:\n  :new_kwarg             => true\n  :num_supports          => 5\n  :eval_method           => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.clear_multi_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.clear_multi_integral_defaults","text":"clear_multi_integral_defaults()::Nothing\n\nClears and resets the keyword argument defaults for multivariate integrals to their  default state. \n\nExample\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 3 entries:\n  :new_kwarg             => true\n  :num_supports          => 5\n  :eval_method           => Automatic()\n\njulia> clear_multi_integral_defaults()\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@integral","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@integral","text":"@integral(expr::JuMP.AbstractJuMPScalar,\n          prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}},\n          [lower_bounds::Union{Real, AbstractArray{<:Real}} = default_bounds,\n          upper_bounds::Union{Real, AbstractArray{<:Real}} = default_bounds;\n          kwargs...])::GeneralVariableRef\n\nAn efficient wrapper for integral and integral. Please see the above doc strings for more information.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@∫","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@∫","text":"@∫(expr::JuMP.AbstractJuMPScalar,\n   prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}},\n   [lower_bounds::Union{Real, AbstractArray{<:Real}} = default_bounds,\n   upper_bounds::Union{Real, AbstractArray{<:Real}} = default_bounds;\n   kwargs...])::GeneralVariableRef\n\nA convenient wrapper for @integral. The unicode symbol ∫ is produced  via \\int.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.AbstractIntegralMethod","page":"Measures","title":"InfiniteOpt.MeasureToolbox.AbstractIntegralMethod","text":"AbstractIntegralMethod\n\nAn abstract type for integral evaluation methods use in combination with integral and generate_integral_data.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.Automatic","page":"Measures","title":"InfiniteOpt.MeasureToolbox.Automatic","text":"Automatic <: AbstractIntegralMethod\n\nAn integral evaluation type for automically selecting an appropriate integral evaluation method. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.AbstractUnivariateMethod","page":"Measures","title":"InfiniteOpt.MeasureToolbox.AbstractUnivariateMethod","text":"AbstractUnivariateMethod <: AbstractIntegralMethod\n\nAn abstract type for integral evaluation methods for 1-dimensional integrals.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.UniTrapezoid","page":"Measures","title":"InfiniteOpt.MeasureToolbox.UniTrapezoid","text":"UniTrapezoid <: AbstractUnivariateMethod\n\nAn integral evalution method that uses the trapezoid rule to in combination with all parameter supports available when the integral is expanded and/or when the infinite model is optimized, whichever comes first. Note this method will ignore the num_supports keyword argument. The upper and lower bounds of the integral  will automatically be added as supports. Note this is valid only for finite integral domains. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.UniMCSampling","page":"Measures","title":"InfiniteOpt.MeasureToolbox.UniMCSampling","text":"UniMCSampling <: AbstractUnivariateMethod\n\nAn integral evaluation method that uses uniform Monte Carlo sampling to approximate the integral. This variant will add more supports to the model as needed to satisfy num_supports and it will include all supports with the MCSample label up till the integral is expanded and/or when the infinite model is optimized, whichever comes first. Note this is valid only for finite integral domains. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.UniIndepMCSampling","page":"Measures","title":"InfiniteOpt.MeasureToolbox.UniIndepMCSampling","text":"UniIndepMCSampling <: AbstractUnivariateMethod\n\nAn integral evaluation method that uses uniform Monte Carlo sampling to approximate the integral similar to UniMCSampling. However, this variant will generate its own set of supports and ignore all other supports with the MCSample label. Note this is valid only for finite integral domains. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.Quadrature","page":"Measures","title":"InfiniteOpt.MeasureToolbox.Quadrature","text":"Quadrature <: AbstractUnivariateMethod\n\nA general integral evaluation method that will automatically select the appropriate quadrature method to approximate the integral. Please note that this will generate a unique set of parameter supports and will ignore existing supports when the integral is evaluated and thus should be used with caution. However, this method is able to handle infinite and semi-infinite integral domains. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussHermite","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussHermite","text":"GaussHermite <: AbstractUnivariateMethod\n\nAn integral evaulation method that uses Gauss-Hermite quadrature to evaluate integrals. This is valid for infinite integral domains.  It will take this form:\n\nint_-^ f(x) e^-x^2 approx sum_i=1^n alpha_i f(x_i)\n\nUsing the weight function: w(x) = e^-x^2\n\nNote this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussLegendre","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussLegendre","text":"GaussLegendre <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Legendre quadrature to evaluate integrals. This is valid for finite integral domains. Note this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussRadau","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussRadau","text":"GaussRadau <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Radau quadrature to evaluate integrals. This is valid for finite integral domains. Note this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussLobatto","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussLobatto","text":"GaussLobatto <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Lobatto quadrature to evaluate integrals. This is valid for finite integral domains. Note this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussJacobi","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussJacobi","text":"GaussJacobi <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Jacobi quadrature to evaluate integrals. It will take this form:\n\nint_-1^1 f(x) (1-x)^alpha (1+x)^beta dx approx sum_i=1^n alpha_i f(x_i)\n\nWhere, \n\n(1-x)^alpha (1+x)^beta \n\nis the weight function. This is valid for finite integral domains. This requires the user to input the alpha and beta shape parameters for their function. This will then generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters. If α or β is < -1, an error will be returned.  \n\nFields\n\nα::Float64: Shape parameter that must be > -1\nβ::Float64: Shape parameter that must be > -1\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.FEGaussLobatto","page":"Measures","title":"InfiniteOpt.MeasureToolbox.FEGaussLobatto","text":"FEGaussLobatto <: AbstractUnivariateMethod\n\nIntegral evaluation method that allows for the user to specify supports to be included in quadrature evaluation. The upper and lower bounds of the integral will automatically  be added as supports. This method uses Gauss Lobatto quadrature to decompose the overall Integral into smaller integrals that span the user defined supports as follows:\n\nint_x_1^x_3 f(x) dx = int_x_1^x_2 f(x) dx + int_x_2^x_3 f(x) dx\n\nwhere the integrals are evaluated using Gauss Lobatto quadrature:\n\nint f(x) dx approx sum_i=1^n alpha_i f(x_i)\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussChebyshev","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussChebyshev","text":"GaussChebyshev <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Chebyshev quadrature to evaluate integrals. This is valid for finite integral domains. This requires the user to input the order of Guass-Chebyshev Quadrature they want to use.  If the order is not between 1 and 4 an error will be returned.  The integral evaluated is as follows:\n\nint_-1^1 f(x) w(x) approx sum_i=1^n alpha_i f(x_i)\n\nThe weight functions are as follows: \n\n1st order: w(x)  =  frac1sqrt1-x^2\n2nd order: w(x) = sqrt1-x^2\n3rd order: w(x) = sqrt(1+x)(1-x)\n4th order: w(x) = sqrt(1-x)(1+x)\n\nThis will then generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters.\n\nFields\n\norder::Int: Specifies the order of Gauss-Chebyshev Quadrature. Must be between 1 and 4.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussLaguerre","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussLaguerre","text":"GaussLaguerre <: AbstractUnivariateMethod\n\nAn integral evaulation method that uses Gauss-Laguerre quadrature to evaluate integrals. This is valid for semi-infinite integral domains. \n\nThis method evaluates the following integral:\n\nint_0^+ f(x) e^-x approx sum_i=1^n alpha_i f(x_i)\n\nUsing the weight function:\n\nw(x) = e^-x\n\nNote this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.AbstractMultivariateMethod","page":"Measures","title":"InfiniteOpt.MeasureToolbox.AbstractMultivariateMethod","text":"AbstractMultivariateMethod <: AbstractIntegralMethod\n\nAn abstract type for integral evaluation methods for multi-dimensional integrals.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.MultiMCSampling","page":"Measures","title":"InfiniteOpt.MeasureToolbox.MultiMCSampling","text":"MultiMCSampling <: AbstractMultivariateMethod\n\nAn integral evaluation method that uses uniform Monte Carlo sampling to approximate the integral. This variant will add more supports to the model as needed to satisfy num_supports and it will include all supports with the MCSample label up till the integral is expanded and/or when the infinite model is optimized, whichever comes first. Note this is valid only for finite integral domains. If an array of independent infinite parameters is specified, they must use the same amount of supports. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.MultiIndepMCSampling","page":"Measures","title":"InfiniteOpt.MeasureToolbox.MultiIndepMCSampling","text":"MultiIndepMCSampling <: AbstractMultivariateMethod\n\nAn integral evaluation method that uses uniform Monte Carlo sampling to approximate the integral similar to MultiMCSampling. However, this variant will generate its own set of supports and ignore all other supports with the MCSample label. Note this is valid only for finite integral domains. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.generate_integral_data","page":"Measures","title":"InfiniteOpt.MeasureToolbox.generate_integral_data","text":"generate_integral_data(\n    prefs::Union{InfiniteOpt.GeneralVariableRef, Vector{InfiniteOpt.GeneralVariableRef}},\n    lower_bounds::Union{Real, Vector{<:Real}},\n    upper_bounds::Union{Real, Vector{<:Real}},\n    method::V; [num_supports::Int = InfiniteOpt.DefaultNumSupports,\n    weight_func::Function = InfiniteOpt.default_weight,\n    extra_kwargs...]\n    )::InfiniteOpt.AbstractMeasureData where {V <: AbstractIntegralMethod}\n\nGenerate the appropriate concrete realization of AbstractMeasureData using method. Here prefs, lower_bounds, and upper_bounds will always have a 1 to 1 correspondence when this is called from integral. Please refer to the method docstrings for an explanation of each one.\n\nUser-defined method extensions should first define a concrete method type inheriting from AbstractUnivariateMethod or AbstractMultivariateMethod as appropriate and then implement extend this method using that type for method.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#Expectations","page":"Measures","title":"Expectations","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"InfiniteOpt.MeasureToolbox.expect\nInfiniteOpt.MeasureToolbox.@expect\nInfiniteOpt.MeasureToolbox.𝔼\nInfiniteOpt.MeasureToolbox.@𝔼\nInfiniteOpt.MeasureToolbox.generate_expect_data","category":"page"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.expect","page":"Measures","title":"InfiniteOpt.MeasureToolbox.expect","text":"expect(expr::JuMP.AbstractJuMPScalar,\n       prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef};\n       [num_supports::Int = DefaultNumSupports])::GeneralVariableRef\n\nMakes a measure for expr based on its expectation with respect to prefs. For  prefs with distribution domains this is essentially equivalent to \n\n1/total_num_supports * support_sum(expr, prefs, label = WeightedSample)\n\nThus, for these domain types it only considers supports that are added to prefs  via generation on creation (i.e., specifying the num_supports keyword when  creating prefs). For incorporating other supports consider  calling integral and using the weight_func argument to specify the  probability density function.\n\nFor a single infinite parameter defined over a bounded interval domain the syntax  becomes:\n\n    expect(expr::JuMP.AbstractJuMPScalar,\n           prefs::GeneralVariableRef;\n           [num_supports::Int = DefaultNumSupports,\n           pdf::Function = (supp) -> 1 / (ub - lb)])::GeneralVariableRef\n\nThe behavior with the default pdf is equivalent to evaluating the mean value  theorem for integrals for expr with respect to pref using  UniTrapezoid. Other density functions can be given via pdf. Errors  if the interval domain is not bounded.\n\nNote that num_supports should be 0 if a single dependent parameter is given. Also, note that it is preferred to call @expect when expr is not just a single variable reference.\n\nExample\n\njulia> @infinite_parameter(model, x ~ Normal(), num_supports = 2)\nx\n\njulia> @variable(model, f, Infinite(x))\nf(x)\n\njulia> meas = expect(f, x)\n𝔼{x}[f(x)]\n\njulia> expand(meas)\n0.5 f(0.6791074260357777) + 0.5 f(0.8284134829000359)\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@expect","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@expect","text":"@expect(expr::JuMP.AbstractJuMPScalar,\n        prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef};\n        [num_supports::Int = DefaultNumSupports, \n        kwargs...]\n        )::GeneralVariableRef\n\nAn efficient wrapper for expect. Please see its doc string more information.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.𝔼","page":"Measures","title":"InfiniteOpt.MeasureToolbox.𝔼","text":"𝔼(expr::JuMP.AbstractJuMPScalar,\n  prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}};\n  [num_supports::Int = DefaultNumSupports, \n  kwargs...]\n  )::GeneralVariableRef)\n\nA convenient wrapper for expect. The unicode symbol 𝔼 is produced by  \\bbE.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@𝔼","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@𝔼","text":"@𝔼(expr::JuMP.AbstractJuMPScalar,\n   prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef};\n   [num_supports::Int = DefaultNumSupports],\n   kwargs...)::GeneralVariableRef\n\nA convenient wrapper for @expect. The unicode symbol 𝔼 is produced by  \\bbE.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.generate_expect_data","page":"Measures","title":"InfiniteOpt.MeasureToolbox.generate_expect_data","text":"generate_expect_data(domain::AbstractInfiniteDomain, \n                     prefs::Union{GeneralVariableRef, Vector{GeneralVariableRef}}, \n                     num_supports::Int; \n                     [kwargs...])::AbstractMeasureData\n\nGenerate a concrete instance of AbstractMeasureData in accordance with the  domain and infinite parameter(s) prefs given for computing the expectation.  This is intended as an internal method, but should be extended for user defined  infinite domain types.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#Support-Sum","page":"Measures","title":"Support Sum","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"InfiniteOpt.MeasureToolbox.@support_sum\nInfiniteOpt.MeasureToolbox.support_sum","category":"page"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@support_sum","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@support_sum","text":"@support_sum(expr::JuMP.AbstractJuMPScalar,\n             prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}};\n             label = All\n             )::GeneralVariableRef\n\nAn efficient wrapper for support_sum please see its doc string for more information.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.support_sum","page":"Measures","title":"InfiniteOpt.MeasureToolbox.support_sum","text":"support_sum(expr::JuMP.AbstractJuMPScalar,\n            params::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}};\n            label = All\n            )::GeneralVariableRef\n\nCreates a measure that represents the sum of the expression over a parameter(s) using all of its supports corresponding to label. Also, note that it is  preferred to call @support_sum when expr is not just a  single variable reference.\n\nExample\n\njulia> @infinite_parameter(model, x in [0, 1], supports = [0.3, 0.7])\nx\n\njulia> @variable(model, f, Infinite(x))\nf(x)\n\njulia> meas = support_sum(f, x)\nsupport_sum{x}[f(x)]\n\njulia> expand(meas)\nf(0.3) + f(0.7)\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#Queries","page":"Measures","title":"Queries","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"JuMP.name(::MeasureRef)\nnum_measures\nall_measures\nmeasure_function\nmeasure_data\nis_analytic\nparameter_refs(::MeasureRef)\nis_used(::MeasureRef)\nused_by_constraint(::MeasureRef)\nused_by_measure(::MeasureRef)\nused_by_objective(::MeasureRef)","category":"page"},{"location":"manual/measure/#JuMP.name-Tuple{MeasureRef}","page":"Measures","title":"JuMP.name","text":"JuMP.name(mref::MeasureRef)::String\n\nExtend JuMP.name to return the name associated with a measure reference.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.num_measures","page":"Measures","title":"InfiniteOpt.num_measures","text":"num_measures(model::InfiniteModel)::Int\n\nReturn the number of measures defined in model.\n\nExample\n\njulia> num_measures(model)\n2\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.all_measures","page":"Measures","title":"InfiniteOpt.all_measures","text":"all_measures(model::InfiniteModel)::Vector{GeneralVariableRef}\n\nReturn the list of all measures added to model.\n\nExamples\n\njulia> all_measures(model)\n2-element Array{GeneralVariableRef,1}:\n ∫{t ∈ [0, 6]}[w(t, x)]\n 𝔼{x}[w(t, x)]\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.measure_function","page":"Measures","title":"InfiniteOpt.measure_function","text":"measure_function(mref::MeasureRef)::JuMP.AbstractJuMPScalar\n\nReturn the function associated with mref.\n\nExample\n\njulia> measure_function(meas)\ny(x, t) + 2\n\n\n\n\n\nmeasure_function(mref::GeneralVariableRef)\n\nDefine measure_function for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.measure_data","page":"Measures","title":"InfiniteOpt.measure_data","text":"measure_data(mref::MeasureRef)::AbstractMeasureData\n\nReturn the measure data associated with mref.\n\nExample\n\njulia> data = measure_data(meas);\n\njulia> typeof(data)\nFunctionalDiscreteMeasureData{Vector{GeneralVariableRef},Vector{Float64}}\n\n\n\n\n\nmeasure_data(mref::GeneralVariableRef)\n\nDefine measure_data for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.is_analytic","page":"Measures","title":"InfiniteOpt.is_analytic","text":"is_analytic(mref::MeasureRef)::Bool\n\nReturn if mref is evaluated analytically.\n\nExample\n\njulia> is_analytic(meas)\nfalse\n\n\n\n\n\nis_analytic(mref::GeneralVariableRef)\n\nDefine is_analytic for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.parameter_refs-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(mref::MeasureRef)::Tuple\n\nReturn the tuple of infinite parameters that the measured expression associated mref depends on once the measure has been evaluated. Note that this will correspond to the parameter dependencies of the measure function excluding those included in the measure data.\n\nExample\n\njulia> parameter_refs(meas)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.is_used-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.is_used","text":"is_used(mref::MeasureRef)::Bool\n\nReturn a Bool indicating if mref is used in the model.\n\nExample\n\njulia> is_used(mref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.used_by_constraint-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(mref::MeasureRef)::Bool\n\nReturn a Bool indicating if mref is used by a constraint.\n\nExample\n\njulia> used_by_constraint(mref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.used_by_measure-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(mref::MeasureRef)::Bool\n\nReturn a Bool indicating if mref is used by a measure.\n\nExample\n\njulia> used_by_measure(mref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.used_by_objective-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.used_by_objective","text":"used_by_objective(mref::MeasureRef)::Bool\n\nReturn a Bool indicating if mref is used by the objective.\n\nExample\n\njulia> used_by_objective(mref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#Modification","page":"Measures","title":"Modification","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"JuMP.set_name(::MeasureRef, ::String)\nJuMP.delete(::InfiniteModel, ::MeasureRef)","category":"page"},{"location":"manual/measure/#JuMP.set_name-Tuple{MeasureRef, String}","page":"Measures","title":"JuMP.set_name","text":"JuMP.set_name(mref::MeasureRef, name::String)::Nothing\n\nExtend JuMP.set_name to specify the name of a measure reference.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#JuMP.delete-Tuple{InfiniteModel, MeasureRef}","page":"Measures","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, mref::MeasureRef)::Nothing\n\nExtend JuMP.delete to delete measures. Errors if measure is invalid, meaning it does not belong to the model or it has already been deleted.\n\nExample\n\njulia> print(model)\nMin ∫{t ∈ [0, 6]}[g(t)] + z\nSubject to\n z ≥ 0.0\n ∫{t ∈ [0, 6]}[g(t)] = 0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n g(0.5) = 0\n\njulia> delete(model, meas)\n\njulia> print(model)\nMin z\nSubject to\n z ≥ 0.0\n 0 = 0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n g(0.5) = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#Expansion","page":"Measures","title":"Expansion","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"expand\nexpand_all_measures!\nInfiniteOpt.expand_measure\nInfiniteOpt.analytic_expansion\nInfiniteOpt.expand_measures\nmake_point_variable_ref\nmake_semi_infinite_variable_ref\nadd_point_variable(::JuMP.Model, ::Any, ::Any, ::Any)\nadd_semi_infinite_variable(::JuMP.Model, ::Any, ::Any)\ninternal_semi_infinite_variable","category":"page"},{"location":"manual/measure/#InfiniteOpt.expand","page":"Measures","title":"InfiniteOpt.expand","text":"expand(mref::MeasureRef)::JuMP.AbstractJuMPScalar\n\nReturn a JuMP scalar function containing the explicit expansion of the measure mref. This expansion is done according to the measure data. Note that variables are added to the model as necessary to accomodate the expansion (i.e., point variables and semi-infinite variables are made as needed). Errors if expansion is undefined for the measure data and/or the measure expression. If desired this can be used in combination with measure to expand measures on the fly.\n\nThis is useful for extensions that employ a custom optimizer model since it can be used evaluate measures before expressions are translated to the new model. This method can also be extended to handle custom measure data types by extending expand_measure. Optionally, analytic_expansion can also be extended which is triggered by is_analytic for such types if analytic expansion is possible in certain cases.\n\nExample\n\njulia> tdata = DiscreteMeasureData(t, [0.5, 0.5], [0, 1])\n\njulia> expr = expand(measure(g + z + T - h - 2, tdata))\n0.5 g(0) + 0.5 g(1) + z + 0.5 T(0, x) + 0.5 T(1, x) - h(x) - 2\n\n\n\n\n\nexpand(mref::GeneralVariableRef)\n\nDefine expand for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.expand_all_measures!","page":"Measures","title":"InfiniteOpt.expand_all_measures!","text":"expand_all_measures!(model::InfiniteModel)::Nothing\n\nExpand all of the measures used in the objective and/or constraints of model. The objective and constraints are updated accordingly. Note that variables are added to the model as necessary to accomodate the expansion (i.e., point variables and semi-infinite variables are made as needed). Errors if expansion is undefined for the measure data and/or the measure expression.\n\nThis is useful for extensions that employ a custom optimizer model since it can be used evaluate measures before model is translated into the new model. This method can also be extended to handle custom measure data types by extending expand_measure. Note that this method leverages expand_measure via expand_measures. Optionally, analytic_expansion can also be extended which is triggered by is_analytic for such types if analytic expansion is possible in certain cases.\n\nExample\n\njulia> print(model)\nMin integral{t ∈ [0, 6]}[g(t)*t] + z\nSubject to\n T(t, x) ≥ 0.0, ∀ t ∈ [0, 6], xi ∈ [-1, 1]\n z ≥ 0.0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n integral{t ∈ [0, 6]}[T(t, x)] ≥ 0.0, ∀ x ∈ [-1, 1]\n\njulia> expand_all_measures!(model)\n\njulia> print(model)\nMin 3 g(6) + z\nSubject to\n T(t, x) ≥ 0.0, ∀ t ∈ [0, 6], xi ∈ [-1, 1]\n z ≥ 0.0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n 0.5 T(0, x) + 0.5 T(6, xi) ≥ 0.0, ∀ x ∈ [-1, 1]\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.expand_measure","page":"Measures","title":"InfiniteOpt.expand_measure","text":"expand_measure(expr, data::AbstractMeasureData,\n               write_model::JuMP.AbstractModel)::JuMP.AbstractJuMPScalar\n\nReturn the finite reformulation of a measure containing a variable/parameter expression expr with measure data data. Here write_model is the target model where this expanded expression will be used. Thus, any variables that need to be created will be added to write_model. The methods make_point_variable_ref and make_semi_infinite_variable_ref should be used as appropriate to create these variables. Note this is intended as an internal function, but will need to be extended for unsupported expr types and for user-defined measure data types. Principally, this is leveraged to enable the user methods expand and expand_all_measures!.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.analytic_expansion","page":"Measures","title":"InfiniteOpt.analytic_expansion","text":"analytic_expansion(expr, data::AbstractMeasureData,\n                   write_model::JuMP.AbstractModel)::JuMP.AbstractJuMPScalar\n\nAnalytically, evaluate measure in the simple case where the measure expression expr doesn't depend on data and thus expr can be treated as a constant in conjunction with an analytic result of the data. This is intended as an internal method that is used by expand and expand_measures. For unrecognized data types, expand_measure is called instead. User defined measure data type may choose to extend this method if desired. This is triggered when is_analytic(mref) = true.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.expand_measures","page":"Measures","title":"InfiniteOpt.expand_measures","text":"expand_measures(expr, write_model::JuMP.AbstractModel)::JuMP.AbstractJuMPScalar\n\nExpand all MeasureRefs in expr in-place via expand_measure and return the expanded expression. This is an internal method used by expand_all_measures! and TranscriptionOpt but can be useful for user-defined optimizer model extensions that add implement add_point_variable/add_semi_infinite_variable in combination  with expand_measure. write_model is the model that the measure variables are  added to as described in expand_measure.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.make_point_variable_ref","page":"Measures","title":"InfiniteOpt.make_point_variable_ref","text":"make_point_variable_ref(write_model::Union{InfiniteModel, JuMP.Model},\n                        ivref::GeneralVariableRef,\n                        support::Vector{Float64}\n                        )::GeneralVariableRef\n\nMake a point variable for infinite variable/derivative ivref at support, add it to the write_model, and return the GeneralVariableRef. This is an internal method for point variables produced by expanding measures via expand_measure. This is also useful for those writing extension optimizer models and wish to expand measures without modifiying the InfiniteModel. In such cases, write_model should be the optimizer model and  add_point_variable  should be extended appropriately for point variables. Errors if write_model is an optimizer model and add_point_variable is not properly extended. \n\nNote this is also accomodates infinite parameter functions, in which case the  infinite parameter function is called with the support as input. \n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.make_semi_infinite_variable_ref","page":"Measures","title":"InfiniteOpt.make_semi_infinite_variable_ref","text":"make_semi_infinite_variable_ref(write_model::Union{InfiniteModel, JuMP.Model},\n                                ivref::GeneralVariableRef,\n                                indices::Vector{Int},\n                                values::Vector{Float64}\n                                )::GeneralVariableRef\n\nMake a semi-infinite variable for infinite variable/derivative/parameter  function ivref at support, add it to the write_model, and return the  GeneralVariableRef. This is an internal method for semi-infinite variables  produced by expanding measures via expand_measure. This is also useful  for those writing extension optimizer models and wish to expand measures without  modifiying the InfiniteModel. In such cases, write_model should be the  optimizer model and  add_semi_infinite_variable  should be extended appropriately for semi-infinite variables. Errors if  write_model is an optimizer model and add_semi_infinite_variable is not  properly extended. Note this is only intended for optimizer models that are  currently stored in InfiniteModel.optimizer_model.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.add_point_variable-Tuple{Model, Any, Any, Any}","page":"Measures","title":"InfiniteOpt.add_point_variable","text":"add_point_variable(model::JuMP.Model, ivref::GeneralVariableRef, \n                   support::Vector{Float64}, key::Val{:ext_key_name}\n                   )::GeneralVariableRef\n\nAdd a point variable (defined by restricting ivref to support) to the  optimizer model model (with key) and return the correct InfiniteOpt  variable reference. This is an internal method used by  make_point_variable_ref to make point variables when the write_model  is an optimizer model. This is useful for extensions that wish to expand  measures, but without changing the original InfiniteModel. An error is thrown  for unextended optimizer model types.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.add_semi_infinite_variable-Tuple{Model, Any, Any}","page":"Measures","title":"InfiniteOpt.add_semi_infinite_variable","text":"add_semi_infinite_variable(model::JuMP.Model, var::SemiInfiniteVariable, \n                           key::Val{:ext_key_name})::GeneralVariableRef\n\nAdd a semi-infinite variable var to the optimizer model model (with key)  and return the correct InfiniteOpt variable reference. This is an internal  method used by make_semi_infinite_variable_ref to make semi-infinite  variables when the write_model is an optimizer model. This is useful for  extensions that wish to expand measures, but without changing the original  InfiniteModel. An error is thrown for optimizer model types. Note if this is  extended, than internal_semi_infinite_variable should also be extended  in order to direct semi-infinite variables references to the underlying  SemiInfiniteVariable.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.internal_semi_infinite_variable","page":"Measures","title":"InfiniteOpt.internal_semi_infinite_variable","text":"internal_semi_infinite_variable(vref::SemiInfiniteVariableRef,\n                                key::Val{:my_ext_key})::SemiInfiniteVariable\n\nReturn the semi-infinite variable object of vref assuming it is an internal variable made during measure expansion within an optimizer model. This will apply to optimizer model extensions that utilize add_measure_variable in combination with expand_measure.\n\n\n\n\n\n","category":"function"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Optimal Control/hovercraft.jl\"","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Hovercraft-Path-Planning","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"In this case study, we seek to determine an optimal control policy for the trajectory of a hovercraft that travels to a set of dynamic waypoints while trying to minimize the thrust input.","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Formulation","page":"Hovercraft Path Planning","title":"Formulation","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"The corresponding dynamic optimization problem is expressed:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"beginaligned\n\tundersetx(t) v(t) u(t)textmin  int_t in T u(t)_2^2 dt  \n\ttextst  v(0) = v0\n\t fracdxdt = v(t)  t in T\n     fracdvdt = u(t)  t in T\n     x(t_i) = xw_i  i in I\nendaligned","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"where x(t) is the Cartesian position, v(t) is the velocity, u(t) is the thrust input, xw_i  i in I are the waypoints, and T is the time horizon.","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Model-Definition","page":"Hovercraft Path Planning","title":"Model Definition","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Let's implement this in InfiniteOpt and first import the packages we need:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"using InfiniteOpt, Ipopt","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Next we'll specify our waypoint data:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"xw = [1 4 6 1; 1 3 0 1] # positions\ntw = [0, 25, 50, 60];    # times\n","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"We initialize the infinite model and opt to use the Ipopt solver:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"m = InfiniteModel(optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0));\n","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Let's specify our infinite parameter which is time t in 0 60:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@infinite_parameter(m, t in [0, 60], num_supports = 61)","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"t","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Now let's specify the decision variables:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@variables(m, begin\n    # state variables\n    x[1:2], Infinite(t)\n    v[1:2], Infinite(t)\n    # control variables\n    u[1:2], Infinite(t), (start = 0)\nend)","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Specify the objective:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@objective(m, Min, ∫(u[1]^2 + u[2]^2, t))","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"∫{t ∈ [0, 60]}[u[1](t)² + u[2](t)²]","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Set the initial conditions with respect to the velocity:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@constraint(m, [i = 1:2], v[i](0) == 0)","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"2-element Vector{InfOptConstraintRef}:\n v[1](0) = 0.0\n v[2](0) = 0.0","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Define the point physics ODEs which serve as our system model:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@constraint(m, [i = 1:2], ∂(x[i], t) == v[i])\n@constraint(m, [i = 1:2], ∂(v[i], t) == u[i])","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"2-element Vector{InfOptConstraintRef}:\n ∂/∂t[v[1](t)] - u[1](t) = 0.0, ∀ t ∈ [0, 60]\n ∂/∂t[v[2](t)] - u[2](t) = 0.0, ∀ t ∈ [0, 60]","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Ensure we hit all the waypoints:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@constraint(m, [i = 1:2, j = eachindex(tw)], x[i](tw[j]) == xw[i, j])","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"2×4 Matrix{InfOptConstraintRef}:\n x[1](0) = 1.0  x[1](25) = 4.0  x[1](50) = 6.0  x[1](60) = 1.0\n x[2](0) = 1.0  x[2](25) = 3.0  x[2](50) = 0.0  x[2](60) = 1.0","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Problem-Solution","page":"Hovercraft Path Planning","title":"Problem Solution","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Optimize the model:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"optimize!(m)","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Extract the results:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"x_opt = value.(x);\n","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Plot the results:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"using Plots\nscatter(xw[1,:], xw[2,:], label = \"Waypoints\", background_color = :transparent)\nplot!(x_opt[1], x_opt[2], label = \"Trajectory\")\nxlabel!(\"x_1\")\nylabel!(\"x_2\")","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"(Image: )","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"That's it, now we have our optimal trajectory!","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Maintenance-Tests","page":"Hovercraft Path Planning","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"using Test\n@test termination_status(m) == MOI.LOCALLY_SOLVED\n@test has_values(m)\n@test x_opt isa Vector{<:Vector{<:Real}}","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Test Passed","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"This page was generated using Literate.jl.","category":"page"},{"location":"install/#Installation-Guide","page":"Installation","title":"Installation Guide","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"A complete guide to installing all that is necessary to use InfiniteOpt.jl.","category":"page"},{"location":"install/#Install-Julia","page":"Installation","title":"Install Julia","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"InfiniteOpt is a Julia package. Thus, we first need have an installation of Julia to get started. An appropriate download can be found here. We recommend using  VSCode to edit and run Julia scripts.  Alternatively, users with a limited programming background might find it easier  to install and use JuliaPro  (however this may introduce performance degradations and compatibility issues).","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"note: Note\nThis version of InfiniteOpt requires that Julia 1.0 or newer be used.","category":"page"},{"location":"install/#Install-Packages","page":"Installation","title":"Install Packages","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Now that Julia has been installed we can add the needed packages. Open up a Julia terminal and enter the package manager:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> ]\n\n(v1.6) pkg>","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"tip: Tip\nWe recommend you create a Pkg environment for each project you use InfiniteOpt for, instead of adding lots of packages to the global environment. The Pkg manager documentation has more information on this topic.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Use the add command in the package to manager to add the following packages:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Distributions (required for stochastic programming)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"For example, to install Distributions we would enter:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add Distributions","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Now let's install InfiniteOpt:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add InfiniteOpt","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"info: Info\nInstallation troubles? Check the Common Installation Problems section below.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Alternatively, we can install the current experimental version of  InfiniteOpt via:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add https://github.com/pulsipher/InfiniteOpt.jl","category":"page"},{"location":"install/#Install-Optimization-Solvers","page":"Installation","title":"Install Optimization Solvers","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"InfiniteOpt relies on solvers to solve optimization problems. Many solvers are not native to Julia and might require commercial licenses. A list of currently supported solvers and their corresponding Julia packages is provided in Supported Optimizers.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"For example, we can install Ipopt which is an open-source nonlinear solver:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add Ipopt","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Now Ipopt can be used as the optimizer (solver) for an infinite model by running:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> using InfiniteOpt, Ipopt\n\njulia> model = InfiniteModel(Ipopt.Optimizer)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Most solver packages follow the ModuleName.Optimizer naming convention, but this may not always be the case. See Infinite Models for more information on defining infinite models and specifying solvers.","category":"page"},{"location":"install/#Common-Installation-Problems","page":"Installation","title":"Common Installation Problems","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"tip: Tip\nWhen in doubt, run import Pkg; Pkg.update() to see if updating your packages fixes the issue. Remember you will need to exit Julia and start a new session for the changes to take effect.","category":"page"},{"location":"install/#Check-the-version-of-your-packages","page":"Installation","title":"Check the version of your packages","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Each package is versioned with a three-part number of the form vX.Y.Z. You can check which versions you have installed with:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> ]\n\n(v1.6) pkg> status","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"This should almost always be the most-recent release. You can check the releases of a package by going to the relevant Github page, and navigating to the \"releases\" page. For example, the list of JuMP releases is available at: https://github.com/pulsipher/InfiniteOpt.jl/releases.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"If you need to ask question for help, please include the output of status!","category":"page"},{"location":"install/#Unsatisfiable-requirements-detected","page":"Installation","title":"Unsatisfiable requirements detected","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Did you get an error like  Unsatisfiable requirements detected for package InfiniteOpt? The Pkg  documentation has a  section on how to understand and manage these conflicts.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Typically, these conflicts can be resolved by using  package environments.","category":"page"},{"location":"install/#Installing-new-packages-can-make-InfiniteOpt-downgrade-to-an-earlier-version","page":"Installation","title":"Installing new packages can make InfiniteOpt downgrade to an earlier version","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Another common issue is that after adding a new package, code that previously  worked no longer runs.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"This usually happens because the new package is not compatible with the latest version of InfiniteOpt. Therefore, the package manager downgrades InfiniteOpt  to an earlier version!","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Thus, please Pay careful attention to the output of the package manager when  adding new packages, especially when you see a package being downgraded!","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"DocTestFilters = [r\"≤|<=\", r\"≥|>=\", r\" == | = \", r\" ∈ | in \", \n                  r\"MathOptInterface|MOI\", r\" for all | ∀ \", r\"d|∂\", \n                  r\"E|𝔼\", r\"integral|∫\"]","category":"page"},{"location":"develop/extensions/#Extensions","page":"Extensions","title":"Extensions","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Here we provide guidance to various ways InfiniteOpt can be extended.","category":"page"},{"location":"develop/extensions/#Overview","page":"Extensions","title":"Overview","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Extendibility is one of the core ideas of InfiniteOpt so that it can serve as a  convenient tool for those developing and implementing advanced techniques for  infinite dimensional optimization problems. Thus, InfiniteOpt is developed in  a modular manner to readily accommodate user-defined functionality and/or to  serve as useful base in writing a JuMP extension. Admittedly, this modularity  is not perfect and comments/suggestions are welcomed to help us improve this.","category":"page"},{"location":"develop/extensions/#Infinite-Domains","page":"Extensions","title":"Infinite Domains","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Infinite domains are used to characterize the behavior of infinite parameters and  used to govern the behavior of supports in InfiniteOpt. Here we walk through  how user-defined domains can be added to various degrees of functionality. A  template is provided in  ./test/extensions/infinite_domain.jl.  The extension steps employed are:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define the new struct infinite domain type (only thing required as bare minimum)\nExtend InfiniteOpt.supports_in_domain (enables error checking of supports)\nExtend InfiniteOpt.generate_support_values (enables support generation via num_supports keyword arguments)\nIf a lower bound and upper bound can be reported, extend JuMP lower bound and upper bound methods (enables automatic bound detection in integral)\nExtend InfiniteOpt.MeasureToolbox.generate_expect_data (enables the use of expect) ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"As an example, let's create a univariate disjoint interval domain as an infinite  domain type. This corresponds to the domain lb_1 ub_1 cup lb_2 ub_2  where ub_1 leq lb_2. First, we need to create the DataType with  inheritance from InfiniteScalarDomain:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt\n\nstruct DisjointDomain <: InfiniteOpt.InfiniteScalarDomain\n    lb1::Float64\n    ub1::Float64\n    lb2::Float64\n    ub2::Float64\n    # constructor\n    function DisjointDomain(lb1::Number, ub1::Number, lb2::Number, ub2::Number)\n        if lb1 > ub1 || lb2 > ub2 || ub1 > lb2\n            error(\"Invalid bounds\")\n        end\n        return new(convert(Float64, lb1), convert(Float64, ub1),\n                   convert(Float64, lb2), convert(Float64, ub2))\n    end\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Notice that we also define the constructor function to error check and convert as  needed (this is recommended, but not required). For basic functionality this is  all we have to do to add a domain in InfiniteOpt.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We can now define infinite parameters using this domain via  @infinite_parameter both anonymously and explicitly:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> model = InfiniteModel();\n\njulia> t = @infinite_parameter(model, domain = DisjointDomain(0, 1, 3, 4), base_name = \"t\")\nt\n\njulia> @infinite_parameter(model, t in DisjointDomain(0, 1, 3, 4))\nt","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Once defined (without further extension), these parameters can be used as normal  with the following limitations:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Supports must be specified manually (num_supports is not enabled)\nSupports will not be checked if they are in the domain of the infinite domain\nDomain bounds cannot be queried.\nThe DiscreteMeasureData or FunctionalDiscreteMeasureData  must be provided explicitly to evaluate measures","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"However, all of these limitations except for the last one can be eliminated by  extending a few functions as outlined above. To address the last one, we need  to extend generate_integral_data. See [Measure Evaluation Techniques]  for details. ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"To enable support domain checking which is useful to avoid strange bugs, we will  extend InfiniteOpt.supports_in_domain. This returns a Bool to  indicate if a vector of supports are in the domain:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.supports_in_domain(\n    supports::Union{Number, Vector{<:Number}},\n    domain::DisjointDomain\n    )::Bool\n    return all((domain.lb1 .<= supports .<= domain.ub1) .| (domain.lb2 .<= supports .<= domain.ub2))\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now the checks are enabled, so the following would yield an error because the  support is not in the domain domain:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> @infinite_parameter(model, domain = DisjointDomain(0, 1, 3, 4), supports = 2)\nERROR: At none:1: `@infinite_parameter(model, domain = DisjointDomain(0, 1, 3, 4), supports = 2)`: Supports violate the domain bounds.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"To enable automatic support generation via the num_supports keyword and with  functions such as fill_in_supports!, we will extend  InfiniteOpt.generate_support_values:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"struct DisjointGrid <: InfiniteOpt.PublicLabel end\n\nfunction InfiniteOpt.generate_support_values(\n    domain::DisjointDomain;\n    num_supports::Int = InfiniteOpt.DefaultNumSupports,\n    sig_digits::Int = InfiniteOpt.DefaultSigDigits\n    )::Tuple{Vector{Float64}, DataType}\n    length_ratio = (domain.ub1 - domain.lb1) / (domain.ub1 - domain.lb1 + domain.ub2 - domain.lb2)\n    num_supports1 = Int64(ceil(length_ratio * num_supports))\n    num_supports2 = num_supports - num_supports1\n    supports1 = collect(range(domain.lb1, stop = domain.ub1, length = num_supports1))\n    supports2 = collect(range(domain.lb2, stop = domain.ub2, length = num_supports2))\n    return round.([supports1; supports2], sigdigits = sig_digits), DisjointGrid\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now automatic support generation is enabled, for example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> par = @infinite_parameter(model, domain = DisjointDomain(0, 2, 3, 4), num_supports = 10)\nnoname\n\njulia> supports(par)\n10-element Vector{Float64}:\n 0.0\n 0.333333333333\n 0.666666666667\n 1.0\n 1.33333333333\n 1.66666666667\n 2.0\n 3.0\n 3.5\n 4.0","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We can extend the appropriate JuMP upper and lower bound functions  if desired which are:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"JuMP.has_lower_bound\nJuMP.lower_bound\nJuMP.set_lower_bound\nJuMP.has_upper_bound\nJuMP.upper_bound\nJuMP.set_upper_bound","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"However, if we want has_lower_bound = false and has_upper_bound = false then  no extension is needed. For our current example we won't do this since lower  and upper bounds aren't exactly clear for a disjoint interval. Please refer to  the template in ./InfiniteOpt/test/extensions/infinite_domain.jl to see how  this is done.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Finally, we can optionally enable the use of expect taken with respect  to infinite parameters with this new domain type by extending  InfiniteOpt.MeasureToolbox.generate_expect_data:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.MeasureToolbox.generate_expect_data(domain::DisjointDomain, \n    pref::GeneralVariableRef, \n    num_supports::Int; \n    kwargs...\n    )\n    for (k, _) in kwargs\n        error(\"Keyword argument `$k` not supported for expectations over \",\n              \"disjoint domains.\")\n    end\n    coeff_func = (supps) -> ones(size(supps)[end]) ./ size(supps)[end] \n    return InfiniteOpt.FunctionalDiscreteMeasureData(pref, coeff_func, 0, All)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"The above implementation simply sums over all the supports associated with pref  and divides by the total number. Now we can use expect:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> @variable(model, y, Infinite(t))\ny(t)\n\njulia> expect(y, t)\n𝔼{t}[y(t)]","category":"page"},{"location":"develop/extensions/#Derivative-Evaluation-Methods","page":"Extensions","title":"Derivative Evaluation Methods","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Derivative evaluation methods are used to dictate how we form the auxiliary  derivative evaluation equations (derivative constraints) when we evaluate  derivatives in InfiniteOpt. Users may wish to implement their own methods beyond  the finite difference and orthogonal collocation ones we natively provide. Thus,  we provide an API to do just this. A complete template is provided in  ./test/extensions/derivative_method.jl  to help streamline this process. The extension steps are:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define the new method struct that inherits from the correct  AbstractDerivativeMethod subtype\nExtend InfiniteOpt.generative_support_info  if the method is a GenerativeDerivativeMethod\nExtend InfiniteOpt.evaluate_derivative.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"To exemplify this process let's implement explicit Euler which is already  implemented via FiniteDifference(Forward()), but let's make our own anyway for  the sake of example. For a first order derivative fracd y(t)dt explicit  Euler is expressed:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"y(t_n+1) = y(t_n) + (t_n+1 - t_n)fracd y(t_n)dt  forall n = 0 1 dots k-1","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Let's get started with step 1 and define our new method struct:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt\n\nstruct ExplicitEuler <: NonGenerativeDerivativeMethod end","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Notice that our method ExplicitEuler inherits from  NonGenerativeDerivativeMethod since explicit Euler uses the existing  support scheme without adding any additional supports. If our desired method  needed to add additional supports (e.g., orthogonal collocation over finite  elements) then we would need to have used GenerativeDerivativeMethod.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Since, this is a NonGenerativeDerivativeMethod we skip step 2. This is  however exemplified in the extension template.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now we just need to do step 3 which is to extend  InfiniteOpt.evaluate_derivative. This function generates all the  expressions necessary to build the derivative evaluation equations (derivative  constraints). We assume these relations to be of the form h = 0 where h  is a vector of expressions and is what the output of  InfiniteOpt.evaluate_derivative should be. Thus, mathematically h should  be of the form:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"beginaligned\n y(t_1) - y(0) - (t_1 - t_0)fracd y(0)dt \n vdots \n y(t_n+1) - y(t_n) - (t_n+1 - t_n)fracd y(t_n)dt \n vdots \n y(t_k) - y(k-1) - (t_k - t_k-1)fracd y(k-1)dt \nendaligned","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"With this in mind let's now extend InfiniteOpt.evaluate_derivative:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.evaluate_derivative(\n    dref::GeneralVariableRef, \n    method::ExplicitEuler,\n    write_model::JuMP.AbstractModel\n    )::Vector{JuMP.AbstractJuMPScalar}\n    # get the basic derivative information \n    vref = derivative_argument(dref)\n    pref = operator_parameter(dref)\n    # generate the derivative expressions h_i corresponding to the equations of \n    # the form h_i = 0\n    supps = supports(pref, label = All)\n    exprs = Vector{JuMP.AbstractJuMPScalar}(undef, length(supps) - 1)\n    for i in eachindex(exprs)\n        d = InfiniteOpt.make_reduced_expr(dref, pref, supps[i], write_model)\n        v1 = InfiniteOpt.make_reduced_expr(vref, pref, supps[i], write_model)\n        v2 = InfiniteOpt.make_reduced_expr(vref, pref, supps[i + 1], write_model)\n        change = supps[i + 1] - supps[i]\n        exprs[i] = JuMP.@expression(write_model, v2 - v1 - change * d)\n    end\n    return exprs\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We used InfiniteOpt.make_reduced_expr as a convenient helper function  to generate the semi-infinite variables/expressions we need to generate at each  support point. Also note that InfiniteOpt.add_generative_supports needs  to be included for GenerativeDerivativeMethods, but is not necessary in this  example.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now that we have have completed all the necessary steps, let's try it out! ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10], num_supports = 3, \n                           derivative_method = ExplicitEuler());\n\njulia> @variable(model, y, Infinite(t));\n\njulia> dy = deriv(y, t);\n\njulia> evaluate(dy)\n\njulia> derivative_constraints(dy)\n2-element Vector{InfOptConstraintRef}:\n y(5) - y(0) - 5 ∂/∂t[y(t)](0) = 0.0\n y(10) - y(5) - 5 ∂/∂t[y(t)](5) = 0.0","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We implemented explicit Euler and it works! Now go and extend away!","category":"page"},{"location":"develop/extensions/#Measure-Evaluation-Techniques","page":"Extensions","title":"Measure Evaluation Techniques","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Measure evaluation methods are used to dictate how to evaluate measures. Users  may wish to apply evaluation methods other than Monte Carlo sampling and/or  Gaussian quadrature methods. To create multiple measures using the same new  evaluation methods, users may want to embed the new evaluation method under the  integral function that does not require explicit construction of  AbstractMeasureData.","category":"page"},{"location":"develop/extensions/#Creating-a-DiscreteMeasureData-Object","page":"Extensions","title":"Creating a DiscreteMeasureData Object","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"The basic way to do that is to write a function that creates  DiscreteMeasureData object and pass the object to measure.  For instance, let's consider defining a function that enables the definition of a  uniform grid for a univariate or multivariate infinite parameter in  IntervalDomain. The function, denoted uniform_grid, generates uniform  grid points as supports for univariate parameter and each component of  independent multivariate parameter. The univariate version of this function  can be defined as follows:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function uniform_grid(\n    param::GeneralVariableRef, \n    lb::Real, \n    ub::Real, \n    num_supports::Int\n    )::DiscreteMeasureData\n    increment = (ub - lb) / (num_supports - 1)\n    supps = [lb + (i - 1) * increment for i in 1:num_supports]\n    coeffs = ones(num_supports) / num_supports * (ub - lb)\n    return DiscreteMeasureData(param, coeffs, supps, lower_bound = lb, upper_bound = ub)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"It is necessary to pass the infinite parameter reference since the  construction of measure data object needs parameter information. Now let's  apply the new uniform_grid function to infinite parameters in  intervals. We consider a time parameter t and 2D spatial parameter x, and  two variables f(t) and g(x) parameterized by t and x, respectively:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> m = InfiniteModel();\n\njulia> @infinite_parameter(m, t in [0, 5]);\n\njulia> @variable(m, y, Infinite(t));","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now we can use uniform_grid to construct a DiscreteMeasureData and  create a measure using the measure data, as shown below:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> tdata = uniform_grid(t, 0, 5, 6);\n\njulia> y_meas = measure(y, tdata)\nmeasure{t ∈ [0, 5]}[y(t)]\n\njulia> expand(y_meas)\n0.8333333333333333 y(0) + 0.8333333333333333 y(1) + 0.8333333333333333 y(2) + 0.8333333333333333 y(3) + 0.8333333333333333 y(4) + 0.8333333333333333 y(5)","category":"page"},{"location":"develop/extensions/#Integral-Evaluation-Methods","page":"Extensions","title":"Integral Evaluation Methods","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For integrals, we can implement a new approximation method via the extension of  InfiniteOpt.MeasureToolbox.generate_integral_data. This will  allow users to use their custom measure evaluation methods in the  integral function that does not explicitly require a measure data  object. A template for how such an extension is accomplished is provided in  ./test/extensions/measure_eval.jl. In general, such an extension can be created as follows: ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define a new empty struct (e.g. my_new_fn) that dispatches your function\nExtend InfiniteOpt.MeasureToolbox.generate_integral_data,  where method is of the type my_new_fn, and domain needs to be a subtype  of AbstractInfiniteDomain that you wish to apply the new evaluation  method to.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Note that this procedure can be used to generate new measure evaluation methods  not only for existing infinite domains, but also for user-defined infinite  domains. ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For example, an extension of  InfiniteOpt.MeasureToolbox.generate_integral_data that implements  uniform grid for univariate and multivariate parameters in  IntervalDomain can be created as follows:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"struct UnifGrid <: InfiniteOpt.MeasureToolbox.AbstractUnivariateMethod end\n\nfunction InfiniteOpt.MeasureToolbox.generate_integral_data(\n    pref::InfiniteOpt.GeneralVariableRef,\n    lower_bound::Real,\n    upper_bound::Real,\n    method::UnifGrid;\n    num_supports::Int = InfiniteOpt.DefaultNumSupports,\n    weight_func::Function = InfiniteOpt.default_weight\n    )::InfiniteOpt.DiscreteMeasureData\n    increment = (upper_bound - lower_bound) / (num_supports - 1)\n    supports = [lower_bound + (i - 1) * increment for i in 1:num_supports]\n    coeffs = ones(num_supports) / num_supports * (upper_bound - lower_bound)\n    return InfiniteOpt.DiscreteMeasureData(\n        pref, coeffs, supports,\n        weight_function = weight_func,\n        lower_bound = lower_bound, \n        upper_bound = upper_bound)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Also notice that users are free to pass keyword arguments for their new  functions in addition to the required positional arguments. This might be needed  in case if the new evaluation method requires additional information not  captured in the default positional arguments. For example, the multivariate  parameter version above needs to know if the multivariate parameter is  independent in order to throw a warning when needed.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We create measure for y using the uniform_grid method:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> y_int = integral(y, t, num_supports = 6, eval_method = UnifGrid())\n∫{t ∈ [0, 5]}[y(t)]\n\njulia> expand(y_int)\n0.8333333333333333 y(0) + 0.8333333333333333 y(1) + 0.8333333333333333 y(2) + 0.8333333333333333 y(3) + 0.8333333333333333 y(4) + 0.8333333333333333 y(5)","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Here we go! We can freely use UnifGrid for infinite parameters residing in  IntervalDomains now.","category":"page"},{"location":"develop/extensions/#meas_data_ext","page":"Extensions","title":"Measure Data","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Measures are used to evaluate over infinite domains. Users may wish to employ  measure abstractions that cannot be readily represented with coefficients and  discretized supports, and thus may wish to extend InfiniteOpt's  measure framework to accommodate other paradigms. This can be accomplished by   implementing a user-defined measure data structure that inherits from  AbstractMeasureData. A template for how such an extension is  accomplished is provided in  ./test/extensions/measure_data.jl.  The extension steps employed are:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define the new data struct inheriting from AbstractMeasureData (required)\nExtend InfiniteOpt.parameter_refs (required)\nExtend InfiniteOpt.expand_measure (required)\nExtend InfiniteOpt.supports (required if parameter supports are employed in any way)\nExtend InfiniteOpt.add_supports_to_parameters (required if parameter supports are employed in measure evaluation)\nExtend InfiniteOpt.coefficients (useful getter method if applicable)\nExtend InfiniteOpt.weight_function (useful getter method if applicable)\nExtend InfiniteOpt.support_label (needed to enable deletion if supports are added.)\nExtend InfiniteOpt.generative_support_info (Needed if the measure will cause the creation of generative supports)\nMake simple measure constructor wrapper of measure to ease definition.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"To illustrate how this process can be done, let's consider extending InfiniteOpt  to include measure support for assessing the variance of random expressions. The  variance of an expression f(x xi) where x in mathbbR^n are finite  variables and xi in mathbbR^m are random infinite parameters is defined:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"mathbbVf(x xi) = mathbbEleft(f(x xi) - mathbbEf(x xi))^2 right","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Note, we could just accomplish this by nested use of expect, but we  implement this example to illustrate the mechanics of extension.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"First, let's define our new struct inheriting from AbstractMeasureData:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt, Distributions\n\nstruct DiscreteVarianceData <: AbstractMeasureData\n    parameter_refs::Union{GeneralVariableRef, Vector{GeneralVariableRef}}\n    supports::Vector\n    label::DataType\n    # constructor\n    function DiscreteVarianceData(\n        parameter_refs::Union{GeneralVariableRef, AbstractArray{<:GeneralVariableRef}},\n        supports::Vector,\n        label::DataType = InfiniteOpt.generate_unique_label()\n        )\n        # convert input as necessary to proper array format\n        if parameter_refs isa AbstractArray\n            parameter_refs = convert(Vector, parameter_refs)\n            supports = [convert(Vector, arr) for arr in supports]\n        end\n        return new(parameter_refs, supports, label)\n    end\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We have defined our data type, so let's extend the measure data query  methods to enable its definition. These include:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"parameter_refs\nsupports\nsupport_label","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.parameter_refs(data::DiscreteVarianceData)\n    return data.parameter_refs\nend\n\nfunction InfiniteOpt.supports(data::DiscreteVarianceData)::Vector\n    return data.supports\nend\n\nfunction InfiniteOpt.support_label(data::DiscreteVarianceData)::DataType\n    return data.label\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We also need to extend InfiniteOpt.add_supports_to_parameters  since support points will be used for measure evaluation later:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.add_supports_to_parameters(data::DiscreteVarianceData)::Nothing\n    pref = parameter_refs(data)\n    supps = supports(data)\n    label = support_label(data)\n    add_supports(pref, supps, label = label)\n    return\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Note that extending supports is not needed for abstractions that don't involve  discretization of the infinite parameter(s), such as the case for certain  outer approximation techniques. Our extension is now sufficiently constructed to  allow us to define out the new variance measure via measure. For  example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"# Setup the infinite model\nmodel = InfiniteModel()\n@infinite_parameter(model, xi ~ Normal(), num_supports = 2) # few for simplicity\n@variable(model, y, Infinite(xi))\n@variable(model, z)\n\n# Define out new variance measure\ndata = DiscreteVarianceData(xi, supports(xi))\nmref = measure(2y + z, data, name = \"Var\")\n\n# output\nVar{xi}[2 y(xi) + z]","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Thus, we can define measure references that employ this our new data type.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We can define variance measures now, but now let's extend  expand_measure so that they can be expanded into finite expressions:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.expand_measure(\n    expr::JuMP.AbstractJuMPScalar,\n    data::DiscreteVarianceData,\n    write_model::JuMP.AbstractModel\n    )::JuMP.AbstractJuMPScalar\n    # define the expectation data\n    expect_data = DiscreteMeasureData(\n                      data.parameter_refs,\n                      1 / length(data.supports) * ones(length(data.supports)),\n                      data.supports, is_expect = true, label = data.label)\n    # define the mean\n    mean = measure(expr, expect_data)\n    # return the expansion of the variance using the data mean\n    return expand_measure((copy(expr) - mean)^2, expect_data, write_model)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Notice that we reformulated our abstraction in terms of measures with  DiscreteMeasureData so that we could leverage the existing  expand_measure library. Now, new the measure type can be expanded and  moreover infinite models using this new type can be optimized. Let's try  expanding the measure we already defined:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> expand(mref)\ny(-0.556026876146)² + 0 z*y(-0.556026876146) - 2 y(-0.44438335711)*y(-0.556026876146) + 0 z² + 0 z*y(-0.44438335711) + y(-0.44438335711)²","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Finally, as per recommendation let's make a wrapper method to make defining  variance measures more convenient:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function variance(\n    expr::Union{JuMP.GenericAffExpr, GeneralVariableRef},\n    params::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}};\n    name::String = \"Var\", \n    num_supports::Int = 10,\n    use_existing::Bool = false\n    )::GeneralVariableRef\n    # get the supports\n    if use_existing\n        supps = supports.(params)\n    else\n        supps = generate_support_values(infinite_domain(first(params)),\n                                        num_supports = num_supports)\n    end\n    # make the data\n    data = DiscreteVarianceData(params, supps)\n    # built the measure\n    return measure(expr, data, name = name)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Notice in this case that we only permit linear expressions for expr since  it will be squared by our new measure and we currently only support quadratic  expressions. (This could be overcome by defining a place holder variable  for expr.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now let's use our constructor to repeat the above measure example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> expand(variance(2y + z, xi, use_existing = true))\ny(-0.556026876146)² + 0 z*y(-0.556026876146) - 2 y(-0.44438335711)*y(-0.556026876146) + 0 z² + 0 z*y(-0.44438335711) + y(-0.44438335711)²","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We have done it! Now go and extend away!","category":"page"},{"location":"develop/extensions/#Generative-Support-Information","page":"Extensions","title":"Generative Support Information","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"As discussed in the Generative Supports section, generative  supports help enable measure and/or derivative evaluation techniques that require  the creation of generative supports (e.g., orthogonal collocation). Natively, we  provide UniformGenerativeInfo to help accomplish this which works for  creating generative supports uniformly over finite elements as is the case for  orthogonal collocation (note this includes scaling them as need to the size of  each finite element). However, more complex generative support schemes can be  enabled by defining a new concrete AbstractGenerativeInfo subtype. This  section will detail how this can be accomplished in InfiniteOpt. A template for  implementing this is provided in  ./test/extensions/generative_info.jl.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"A new generative support information type can be created via the following:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define a concrete subtype of AbstractGenerativeInfo (required)\nMake a unique support label that inherits InternalLabel (recommended)\nExtend InfiniteOpt.support_label (required)\nExtend InfiniteOpt.make_generative_supports (required).","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For the sake of example, let's suppose we want to make a method that generates a  certain amount of random supports for each finite element. First, let's define  our struct RandomGenerativeInfo:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt, Random\n\nstruct RandomGenerativeInfo <: InfiniteOpt.AbstractGenerativeInfo\n    amount::Int # amount of random supports per finite element\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"With that done, let's define a unique support label RandomInternal for these  types of supports and extend support_label:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"struct RandomInternal <: InternalLabel end\n\nfunction InfiniteOpt.support_label(info::RandomGenerativeInfo)::Type{RandomInternal}\n    return RandomInternal\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Finally, let's extend make_generative_supports to create a vector of the  generative supports based on a RandomGenerativeInfo and the existing model  supports which are passed in the function as input:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.make_generative_supports(info::RandomGenerativeInfo, pref, supps)::Vector{Float64}\n    num_existing = length(supps)\n    num_existing <= 1 && error(\"`$pref` doesn't have enough supports.\")\n    num_internal = info.attr\n    gen_supps = Float64[]\n    for i = 1:num_existing-1 \n        lb = supps[i]\n        ub = supps[i+1]\n        append!(gen_supps, rand(num_internal) * (ub - lb) .+ lb)\n    end\n    return gen_supps\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Our extension is done and now RandomGenerativeInfo can be incorporated by a  GenerativeDerivativeMethod we create or an AbstractMeasureData object of our  choice like FunctionalDiscreteMeasureData. ","category":"page"},{"location":"develop/extensions/#extend_optimizer_model","page":"Extensions","title":"Optimizer Models","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"InfiniteOpt provides a convenient interface and abstraction for modeling  infinite-dimensional optimization problems. By default, InfiniteModels are  reformulated into a solvable JuMP.Model (referred to as an optimizer model)  via TranscriptionOpt which discretizes the model in accordance with the  infinite parameter supports. However, users may wish to employ some other  reformulation method to produce the optimizer model. This section will explain  how this can be done in InfiniteOpt. A template for implementing this  extension is provided in  ./test/extensions/optimizer_model.jl.  Our default sub-module InfiniteOpt.TranscriptionOpt also serves as a good  example.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"A new reformulation method and its corresponding optimizer model can be  extended using the following steps:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define a mutable struct for variable/constraint mappings and other needed info (required)\nDefine a JuMP.Model constructor that uses (1.) in Model.ext[:my_ext_key] (recommended)\nExtend build_optimizer_model! to in accordance with the new optimizer model (required)\nExtend optimizer_model_variable if possible (enables result queries)\nExtend optimizer_model_expression if possible (enables result queries)\nExtend optimizer_model_constraint if possible (enables result queries)\nExtend InfiniteOpt.variable_supports if appropriate\nExtend InfiniteOpt.expression_supports if appropriate\nExtend InfiniteOpt.constraint_supports if appropriate\nIf steps 4-6 are skipped then extend the following:\nInfiniteOpt.map_value (enables JuMP.value)\nInfiniteOpt.map_optimizer_index (enables JuMP.optimizer_index)\nInfiniteOpt.map_dual (enables JuMP.dual)\nInfiniteOpt.map_shadow_price (enables JuMP.shadow_price)\nExtend InfiniteOpt.add_point_variable and   InfiniteOpt.add_semi_infinite_variable to use   expand_measure without modifying the infinite model.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For the sake of example, let's suppose we want to define a reformulation method  for InfiniteModels that are 2-stage stochastic programs (i.e., only  DistributionDomains are used, infinite variables are random 2nd stage variables,  and finite variables are 1st stage variables). In particular, let's make a simple  method that replaces the infinite parameters with their mean values, giving us  the deterministic mean-valued problem.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"First, let's define the mutable struct that will be used to store our variable  and constraint mappings. This case it is quite simple since our deterministic  model will have a 1-to-1 mapping:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt, Distributions\n\nmutable struct DeterministicData\n    # variable and constraint mapping\n    infvar_to_detvar::Dict{GeneralVariableRef, VariableRef}\n    infconstr_to_detconstr::Dict{InfOptConstraintRef, ConstraintRef}\n    # constructor\n    function DeterministicData()\n        return new(Dict{GeneralVariableRef, VariableRef}(),\n                   Dict{InfOptConstraintRef, ConstraintRef}())\n    end\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now let's define a constructor for optimizer models that will use  DeterministicData and let's define a method to access that data:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"const DetermKey = :DetermData\n\nfunction DeterministicModel(args...; kwargs...)::Model\n    # initialize the JuMP Model\n    model = Model(args...; kwargs...)\n    model.ext[DetermKey] = DeterministicData()\n    return model\nend\n\nfunction deterministic_data(model::Model)::DeterministicData\n    haskey(model.ext, DetermKey) || error(\"Model is not a DeterministicModel.\")\n    return model.ext[DetermKey]\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"note: Note\nThe use of an extension key such as DetermKey is required since it used to  dispatch reformulation and querying methods making optimizer model  extensions possible.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"With the constructor we can now specify that a given InfiniteModel uses a  DeterministicModel instead of a TranscriptionModel using the OptimizerModel  keyword argument or via set_optimizer_model:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using Ipopt\n\n# Make model using Ipopt and DeterministicModels\nmodel = InfiniteModel(optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0),\n                      OptimizerModel = DeterministicModel)\n\n# Or equivalently\nmodel = InfiniteModel()\nset_optimizer_model(model, DeterministicModel())\nset_optimizer(model, optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0))","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now model uses a DeterministicModel as its optimizer model! With that we can build our InfiniteModel as normal, for example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"@infinite_parameter(model, ξ ~ Uniform())\n@variable(model, y[1:2] >= 0, Infinite(ξ))\n@variable(model, z)\n@objective(model, Min, z + expect(y[1] + y[2], ξ))\n@constraint(model, 2y[1] - z <= 42)\n@constraint(model, y[2]^2 + ξ == 2)\nprint(model)\n\n# output\nMin z + 𝔼{ξ}[y[1](ξ) + y[2](ξ)]\nSubject to\n y[1](ξ) ≥ 0.0, ∀ ξ ~ Uniform\n y[2](ξ) ≥ 0.0, ∀ ξ ~ Uniform\n 2 y[1](ξ) - z ≤ 42.0, ∀ ξ ~ Uniform\n y[2](ξ)² + ξ = 2.0, ∀ ξ ~ Uniform","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We have defined our InfiniteModel, but now we need to specify how to  reformulate it into a DeterministicModel. This is accomplished by extending  build_optimizer_model!. This will enable the use of optimize!. First,  let's define an internal function _make_expression that will use dispatch to  convert and InfiniteOpt expression into a JuMP expression using the mappings  stored in opt_model in its DeterministicData:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"## Make dispatch methods for converting InfiniteOpt expressions\n# GeneralVariableRef\nfunction _make_expression(opt_model::Model, expr::GeneralVariableRef)\n    return _make_expression(opt_model, expr, index(expr))\nend\n# IndependentParameterRef\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef, \n    ::IndependentParameterIndex\n    )\n    return mean(infinite_domain(expr).distribution) # assuming univariate\nend\n# FiniteParameterRef\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef, \n    ::FiniteParameterIndex\n    )\n    return parameter_value(expr)\nend\n# DependentParameterRef\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef, \n    ::DependentParameterIndex\n    )\n    return mean(infinite_domain(expr).distribution) # assuming valid dist.\nend\n# DecisionVariableRef\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef, \n    ::Union{InfiniteVariableIndex, FiniteVariableIndex}\n    )\n    return deterministic_data(opt_model).infvar_to_detvar[expr]\nend\n# MeasureRef --> assume is expectation\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef,\n    ::MeasureIndex\n    )\n    return _make_expression(opt_model, measure_function(expr))\nend\n# AffExpr\nfunction _make_expression(opt_model::Model, expr::GenericAffExpr)\n    return @expression(opt_model, sum(c * _make_expression(opt_model, v) \n                       for (c, v) in linear_terms(expr)) + constant(expr))\nend\n# QuadExpr\nfunction _make_expression(opt_model::Model, expr::GenericQuadExpr)\n    return @expression(opt_model, sum(c * _make_expression(opt_model, v1) * \n                       _make_expression(opt_model, v2) for (c, v1, v2) in quad_terms(expr)) + \n                       _make_expression(opt_model, expr.aff))\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For simplicity in example, above we assume that only DistributionDomains are  used, there are not any PointVariableRefs, and all MeasureRefs correspond to  expectations. Naturally, a full extension should include checks to enforce that  such assumptions hold.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now let's extend build_optimizer_model! for DeterministicModels.  Such extensions should build an optimizer model in place and in general should  employ the following: ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"clear_optimizer_model_build!\nset_optimizer_model_ready.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"In place builds without the use of clear_optimizer_model_build! are also  possible, but will require some sort of active mapping scheme to update in  accordance with the InfiniteModel in the case that the  optimizer model is built more than once. Thus, for simplicity we extend  build_optimizer_model! below using an initial clearing scheme:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.build_optimizer_model!(\n    model::InfiniteModel,\n    key::Val{DetermKey}\n    )::Nothing\n    # TODO check that `model` is a stochastic model\n    # clear the model for a build/rebuild\n    determ_model = InfiniteOpt.clear_optimizer_model_build!(model)\n\n    # add variables\n    for vref in all_variables(model)\n        dvref = dispatch_variable_ref(vref)\n        if dvref isa InfiniteVariableRef # have to handle the infinite variable functional start value\n            inf_var = InfiniteOpt._core_variable_object(dvref)\n            info = InfiniteOpt.TranscriptionOpt._format_infinite_info(inf_var, zeros(length(raw_parameter_refs(dvref))))\n        else\n            info = InfiniteOpt._variable_info(dvref)\n        end\n        new_vref = add_variable(determ_model, ScalarVariable(info),\n                                name(dvref)) # TODO update infinite variable names\n        deterministic_data(determ_model).infvar_to_detvar[vref] = new_vref\n    end\n\n    # add the objective\n    set_objective(determ_model, objective_sense(model),\n                   _make_expression(determ_model, objective_function(model)))\n\n    # add the constraints\n    for cref in all_constraints(model)\n        if !InfiniteOpt._is_info_constraint(cref)\n            constr = constraint_object(cref)\n            new_constr = build_constraint(error, _make_expression(determ_model, constr.func),\n                                          constr.set)\n            new_cref = add_constraint(determ_model, new_constr, name(cref))\n            deterministic_data(determ_model).infconstr_to_detconstr[cref] = new_cref\n        end\n    end\n\n    # update the status\n    set_optimizer_model_ready(model, true)\n    return\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now we can build our optimizer model to obtain a DeterministicModel which can  be leveraged to call optimize!","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"optimize!(model)\nprint(optimizer_model(model))\n\n# output\nMin z + y[1] + y[2]\nSubject to\n 2 y[1] - z ≤ 42.0\n y[2]² = 1.5\n y[1] ≥ 0.0\n y[2] ≥ 0.0","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Note that better variable naming could be used with the reformulated infinite  variables. Moreover, in general extensions of build_optimizer_model!  should account for the possibility that InfiniteModel contains constraints wiht  DomainRestrictions as accessed via domain_restrictions.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now that we have optimized out InfiniteModel via the use the of a  DeterministicModel, we probably will want to access the results. All queries  are enabled when we extend optimizer_model_variable,  optimizer_model_expression, and optimizer_model_constraint  to return the variable(s)/expression(s)/constraint(s) in the  optimizer model corresponding to their InfiniteModel counterparts. These will  use the mutable struct of mapping data and should error if no mapping can be  found, Let's continue our example using DeterministicModels:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.optimizer_model_variable(\n    vref::GeneralVariableRef,\n    key::Val{DetermKey}\n    )\n    model = optimizer_model(JuMP.owner_model(vref))\n    map_dict = deterministic_data(model).infvar_to_detvar\n    haskey(map_dict, vref) || error(\"Variable $vref not used in the optimizer model.\")\n    return map_dict[vref]\nend\n\nfunction InfiniteOpt.optimizer_model_expression(\n    expr::JuMP.AbstractJuMPScalar,\n    key::Val{DetermKey}\n    )\n    model = optimizer_model(JuMP.owner_model(vref))\n    return _make_expression(model, expr)\nend\n\nfunction InfiniteOpt.optimizer_model_constraint(\n    cref::InfOptConstraintRef,\n    key::Val{DetermKey}\n    )\n    model = optimizer_model(JuMP.owner_model(cref))\n    map_dict = deterministic_data(model).infconstr_to_detconstr\n    haskey(map_dict, cref) || error(\"Constraint $cref not used in the optimizer model.\")\n    return map_dict[cref]\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"With these extensions we can now access all the result queries. For example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> termination_status(model)\nLOCALLY_SOLVED::TerminationStatusCode = 4\n\njulia> result_count(model)\n1\n\njulia> value.(y)\n2-element Vector{Float64}:\n 0.0\n 1.224744871391589\n\njulia> optimizer_index(z)\nMathOptInterface.VariableIndex(3)","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"note: Note\nIf optimizer_model_variable, optimizer_model_expression,  and/or optimizer_model_constraint cannot be extended due to the  nature of the reformulation then please refer to step 10 of the extension  steps listed at the beginning of this section.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Furthermore, if appropriate for the given reformulation the following should be  extended:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"InfiniteOpt.variable_supports to enable supports on variables)\nInfiniteOpt.expression_supports to enable supports on expressions)\nInfiniteOpt.constraint_supports to enable supports on constraints)","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"That's it!","category":"page"},{"location":"develop/extensions/#Wrapper-Packages","page":"Extensions","title":"Wrapper Packages","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"InfiniteOpt provides a convenient modular interface for defining infinite  dimensional optimization problems, implementing many tedious JuMP extensions  such as facilitating mixed variable expressions. Thus, InfiniteOpt can serve  as a base package for specific types of infinite dimensional problems and/or  solution techniques. These extension packages can implement any of the extensions  shown above and likely will want to introduce wrapper functions and macros to  use package specific terminology (e.g., using random variables instead of  infinite variables).","category":"page"},{"location":"guide/domains/#infinite_domains_docs","page":"Infinite Domains","title":"Infinite Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"A guide for infinite domains in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"note: Note\nPrevious versions of InfiniteOpt referred to infinite domains as infinite  sets. Hence, all of the methods and datatypes have been updated accordingly. ","category":"page"},{"location":"guide/domains/#Basic-Usage","page":"Infinite Domains","title":"Basic Usage","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Interval domains are what characterize the behavior of infinite parameters in  InfiniteOpt, since they comprise the domains of infinite parameters. However,  most users will not need to work directly with infinite domains and can instead  focus on the use of infinite parameters as defined via @infinite_parameter  and as discussed on the Infinite Parameters page.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"However, for convenience below we summary the infinite domains associated with  InfiniteOpt:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Domain Type Domain Type\nIntervalDomain lb ub InfiniteScalarDomain\nUniDistributionDomain sim mathcalD subseteq mathbbR InfiniteScalarDomain\nMultiDistributionDomain sim mathcalD subseteq mathbbR^n InfiniteArrayDomain\nCollectionDomain Combination of Univariate Domains InfiniteArrayDomain","category":"page"},{"location":"guide/domains/#Infinite-Domain-Classes","page":"Infinite Domains","title":"Infinite Domain Classes","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"The domain of a given infinite parameter(s) is described by an infinite domain (domain)  inherited from AbstractInfiniteDomain. InfiniteOpt natively supports  two domain sub-groups, namely InfiniteScalarDomains and InfiniteArrayDomains.  These correspond to a single independent infinite parameter and a dependent multi-dimensional  group of infinite parameters, respectively. We describe each group's natively  supported domains below.","category":"page"},{"location":"guide/domains/#Univariate-Domains","page":"Infinite Domains","title":"Univariate Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Univariate infinite domains (i.e., InfiniteScalarDomains) are one-dimensional  domains (subseteq mathbbR) that describe the behavior of one single independent  infinite parameter (i.e., infinite parameters made using independent = true). The  two natively supported concrete types are IntervalDomains and UniDistributionDomains.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"IntervalDomains describe a continuous interval from some lower bound up to  some upper bound. Where the range is inclusive of the bounds. Such domains often  arise for parameters that pertain to time and/or spatial position. For example,  to define a position interval -2 2 we would use:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> domain = IntervalDomain(-2, 2)\n[-2, 2]","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Note that (semi-)infinite bounds are acceptable, as shown in the following example:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> infinite_domain = IntervalDomain(-Inf, Inf)\n[-Inf, Inf]","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"UniDistributionDomains pertain to the co-domain of a univariate distribution.  In other words, these correspond to the underlying distributions that characterize  uncertain scalar parameters. These domains are compatible with any univariate  distribution native to Distributions.jl. For example, let's make a UniDistributionDomain that depends on a Beta distribution:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> using Distributions;\n\njulia> domain = UniDistributionDomain(Beta(2,2))\nBeta{Float64}(α=2.0, β=2.0)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"User-defined distributions are also permissible so long as they are created in accordance with Distributions.jl.","category":"page"},{"location":"guide/domains/#Multivariate-Domains","page":"Infinite Domains","title":"Multivariate Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Multivariate infinite domains (i.e., [InfiniteArrayDomain])(@ref)s are multi-dimensional  domains that define the behavior of a group of dependent infinite parameters  (i.e., an array of infinite parameters where independent = false). This is a  unique feature to InfiniteOpt that enables a much richer set of possibilities  for modeling infinite domain. Natively two domain types are supported:  MultiDistributionDomains and CollectionDomains. ","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"MultiDistributionDomains correspond to the co-domain of a multi-variate  (or matrix-variate) distribution which characterizes the behavior of multi-dimensional  uncertain parameters. Again, these correspond to any appropriate distribution  defined in Distributions.jl. For example, we can make a MultiDistributionDomain  that depends on a 2D normal distribution as follows:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> using Distributions;\n\njulia> dist = MvNormal([0., 0.], [1. 0.; 0. 2.]);\n\njulia> domain = MultiDistributionDomain(dist)\nFullNormal(\ndim: 2\nμ: [0.0, 0.0]\nΣ: [1.0 0.0; 0.0 2.0]\n)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"note: Note\nThe dimensions (shape) of a chosen distribution used in an MultiDistriubtionDomain  must match those of the corresponding infinite parameter array.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Finally, CollectionDomains are a dependent collection of InfiniteScalarDomains that correspond to a group of infinite parameters that are treated dependently.  This can be useful when the user wishes to have complete control over how the  supports are generated for a group independent parameters where the default  combinatorial approach in not wanted. For example, let's make a set of IntervalDomains:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> domain = CollectionDomain([IntervalDomain(-2, 2), IntervalDomain(-1, 4)])\nCollectionDomain with 2 domains:\n [-2, 2]\n [-1, 4]","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Now we could use this domain in define a two-dimensional infinite parameter of which  we can have the freedom to define a non-combinatorial support grid.","category":"page"},{"location":"guide/domains/#Bound-Query/Modification-Methods-for-Infinite-Domains","page":"Infinite Domains","title":"Bound Query/Modification Methods for Infinite Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Once an infinite domain is created, one can query the lower bound and upper bound of the domain  similar to how one queries the bounds of a JuMP variable. Thus, the functions  JuMP.has_lower_bound, JuMP.has_upper_bound, JuMP.lower_bound, JuMP.upper_bound  are all applicable to infinite domains mentioned above. For example, for an IntervalDomain [-2, 2] we can query the bound information as follows:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> domain = IntervalDomain(-2, 2);\n\njulia> has_lower_bound(domain)\ntrue\n\njulia> has_upper_bound(domain)\ntrue\n\njulia> lower_bound(domain)\n-2.0\n\njulia> upper_bound(domain)\n2.0","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"In addition, we can also apply JuMP.set_lower_bound and JuMP.set_upper_bound  to IntervalDomains to generate a new domain with updated bounds. Note that this will not modify the original domain. For example, we can change the bounds of the set [-2, 2] as follows:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> set_lower_bound(domain, -1)\n[-1, 2]\n\njulia> set_upper_bound(domain, 1)\n[-2, 1]","category":"page"},{"location":"guide/domains/#Support-Generation-for-Infinite-Domains","page":"Infinite Domains","title":"Support Generation for Infinite Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"InfiniteOpt provides a systematic interface to generate support points for  infinite domains. This is crucial as support generation decides how each  infinite-dimensional parameter, which is subject to certain infinite domain, is  discretized later in the transcription stage. The interface will allow users to  automatically generate support points using our default methods. Later we will  also show that users can  also input support points manually for an infinite  parameter. Please note that these methods are called by the  @infinite_parameter macro when the num_supports keyword is used.  Thus, users typically will not need to use this interface directly.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"In InfiniteOpt supports can be generated via generate_supports  function. For example, let's generate 5 equidistant support points for the  IntervalDomain [-2, 2]:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> supps, label = generate_supports(domain, num_supports = 5)\n([-2.0, -1.0, 0.0, 1.0, 2.0], UniformGrid)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Note that the number of supports generated is specified via num_supports  keyword argument, which will take a default value of 10 if not specified. The  function generate_supports returns a vector of the supports generated, and a  label that denotes the underlying method. In this case the label returned is  UniformGrid, which is the default support generation method for  IntervalDomains. Another support generation method implemented for  IntervalDomains is MCSample, which is to sample from a uniform distribution  over the interval. To use this method, users need to specify a second positional  argument, as shown in the following example:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> generate_supports(domain, MCSample, num_supports = 5, sig_digits = 5)\n([1.2946, 1.6414, -1.3417, -1.2907, -0.88448], MCSample)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"In this case, the returned label is MCSample, instead of UniformGrid.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"generate_supports can also be applied to DistributionDomains. The default  (and currently only) method implemented for DistributionDomains is  WeightedSample, which generates Monte Carlo samples that are weighted based on  the underlying probability density function of the distribution. For example, a  domain of support points for a 2D normal distribution can be generated as  follows:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> dist = MvNormal([0., 0.], [1. 0.;0. 2.]);\n\njulia> domain = MultiDistributionDomain(dist);\n\njulia> supps, label = generate_supports(domain, num_supports = 3)\n([0.679107426036 -0.353007400301 0.586617074633; 1.17155358277 -0.190712174623 0.420496392851], WeightedSample)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"For those who are interested in coding up their own support generation functions,  generate_supports is an interface that calls the proper  generate_support_values function based on the type of domain and value  of method. Therefore, to use custom support generation methods, users can  implement extensions for generate_support_values with a different  method label from the existing methods. See Extensions for full details.","category":"page"},{"location":"guide/domains/#User-Defined-Domains","page":"Infinite Domains","title":"User Defined Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Furthermore, custom infinite domains that inherit AbstractInfiniteDomain can  also be defined. See Extensions for more information.","category":"page"},{"location":"manual/constraint/#constr_manual","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"A technical manual for constraints in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/constraint/#Definition","page":"Constraints","title":"Definition","text":"","category":"section"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"Note that constraints are defined principally with  JuMP.@constraint  which originates from JuMP.jl. Below we show build methods for  DomainRestrictedConstraints, but any JuMP.AbstractConstraint can be used.","category":"page"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"DomainRestrictions\nJuMP.build_constraint(::Function, ::Any, ::Any, ::DomainRestrictions)\nDomainRestrictedConstraint\nJuMP.add_constraint(::InfiniteModel, ::JuMP.AbstractConstraint, ::String)\nConstraintData\nInfOptConstraintIndex\nInfOptConstraintRef","category":"page"},{"location":"manual/constraint/#InfiniteOpt.DomainRestrictions","page":"Constraints","title":"InfiniteOpt.DomainRestrictions","text":"DomainRestrictions{P <: GeneralVariableRef}\n\nA DataType for storing interval domains that constrain particular infinite  parameters to a subdomain relative to their full domain. This is used to define subdomains of DomainRestrictedConstraints. Note that the GeneralVariableRef must pertain to infinite parameters.\n\nThe constructor syntax is\n\nDomainRestrictions(restrictions...)\n\nwhere each argument of restrictions is one of the following forms:\n\npref => value\npref => [lb, ub]\npref => IntervalDomain(lb, ub)\nprefs => value\nprefs => [lb, ub]\nprefs => IntervalDomain(lb, ub).\n\nNote that pref and prefs must correspond to infinite parameters. \n\nFields\n\nintervals::Dict{GeneralVariableRef, IntervalDomain}: A dictionary of interval bounds on infinite parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#JuMP.build_constraint-Tuple{Function, Any, Any, DomainRestrictions}","page":"Constraints","title":"JuMP.build_constraint","text":"JuMP.build_constraint(_error::Function, func, set,\n                      restrictions::DomainRestrictions{GeneralVariableRef}\n                      )::DomainRestrictedConstraint\n\nExtend JuMP.buid_constraint to handle including restrictions to its inherit  infinite parameter domains in addition to the traditional func in set setup.  This returns a DomainRestrictedConstraint that can then  be added via JuMP.add_constraint. Errors if the restrictions are incompadible  with infinite parameter domains. \n\nExample\n\njulia> restrictions = DomainRestrictions(t => 0)\nSubdomain restrictions (1): t = 0\n\njulia> con = build_constraint(error, y + 2, MOI.LessThan(0.0), restrictions);\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.DomainRestrictedConstraint","page":"Constraints","title":"InfiniteOpt.DomainRestrictedConstraint","text":"DomainRestrictedConstraint{C <: JuMP.AbstractConstraint, \n                           P <: GeneralVariableRef\n                           } <: JuMP.AbstractConstraint\n\nA DataType for creating a constraint with enforced DomainRestrictions. For  example this may pertain to a boundary condition.\n\nFields\n\nconstraint::C: The optimization constraint.\nrestrictions::DomainRestrictions{P}: The restrictions that determine the   sub-domain of the constraint.\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#JuMP.add_constraint-Tuple{InfiniteModel, AbstractConstraint, String}","page":"Constraints","title":"JuMP.add_constraint","text":"JuMP.add_constraint(model::InfiniteModel, c::JuMP.AbstractConstraint,\n                    [name::String = \"\"])::InfOptConstraintRef\n\nExtend JuMP.add_constraint to add a constraint c to an infinite model model with name name. Returns an appropriate constraint reference whose type depends on what variables are used to define the constraint. Errors if any  variables do not belong to model. This is primarily used as an internal method for the constraint macros.\n\nExample\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @variable(model, g, Infinite(t));\n\njulia> @variable(model, x);\n\njulia> constr = build_constraint(error, g + x, MOI.EqualTo(42));\n\njulia> cref = add_constraint(model, constr, \"name\")\nname : g(t) + x = 42.0, ∀ t ∈ [0, 10]\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.ConstraintData","page":"Constraints","title":"InfiniteOpt.ConstraintData","text":"ConstraintData{C <: JuMP.AbstractConstraint} <: AbstractDataObject\n\nA mutable DataType for storing constraints and their data.\n\nFields\n\nconstraint::C: The constraint.\nobject_nums::Vector{Int}: The object numbers of the parameter objects that the                             constraint depends on.\nname::String: The name used for printing.\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nis_info_constraint::Bool: Is this is constraint based on variable info   (e.g., lower bound)\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#InfiniteOpt.InfOptConstraintIndex","page":"Constraints","title":"InfiniteOpt.InfOptConstraintIndex","text":"InOptConstraintIndex <: ObjectIndex\n\nA DataType for storing the index of a constraint.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#InfiniteOpt.InfOptConstraintRef","page":"Constraints","title":"InfiniteOpt.InfOptConstraintRef","text":"InfOptConstraintRef\n\nA DataType for constraints that are in InfiniteModels\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::InfOptConstraintIndex: Index of the constraint in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#Queries","page":"Constraints","title":"Queries","text":"","category":"section"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"JuMP.owner_model(::InfOptConstraintRef)\nJuMP.index(::InfOptConstraintRef)\nJuMP.constraint_object(::InfOptConstraintRef)\nJuMP.name(::InfOptConstraintRef)\nJuMP.constraint_by_name(::InfiniteModel, ::String)\nJuMP.list_of_constraint_types(::InfiniteModel)\nJuMP.num_constraints(::InfiniteModel, ::Any, ::Any)\nJuMP.all_constraints(::InfiniteModel, ::Any, ::Any)\nJuMP.is_valid(::InfiniteModel, ::InfOptConstraintRef)\nparameter_refs(::InfOptConstraintRef)\nhas_domain_restrictions\ndomain_restrictions\nJuMP.normalized_rhs(::InfOptConstraintRef)\nJuMP.normalized_coefficient(::InfOptConstraintRef, ::GeneralVariableRef)","category":"page"},{"location":"manual/constraint/#JuMP.owner_model-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.owner_model","text":"JuMP.owner_model(cref::InfOptConstraintRef)::InfiniteModel\n\nExtend JuMP.owner_model to return the infinite model associated with cref.\n\nExample\n\njulia> model = owner_model(cref)\nAn InfiniteOpt Model\nMinimization problem with:\nFinite Parameters: 0\nInfinite Parameters: 3\nVariables: 3\nDerivatives: 0\nMeasures: 0\nObjective function type: GeneralVariableRef\n`GenericAffExpr{Float64,GeneralVariableRef}`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\nNames registered in the model: g, t, h, x\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.index-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.index","text":"JuMP.index(cref::InfOptConstraintRef)::InfOptConstraintIndex\n\nExtend JuMP.index to return the index of an InfiniteOpt constraint cref.\n\nExample\n\njulia> index(cref)\nInfOptConstraintIndex(2)\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.constraint_object-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.constraint_object","text":"JuMP.constraint_object(cref::InfOptConstraintRef)::JuMP.AbstractConstraint\n\nExtend JuMP.constraint_object to return the constraint object associated with  cref.\n\nExample\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @variable(model, x <= 1);\n\njulia> cref = UpperBoundRef(x);\n\njulia> obj = constraint_object(cref)\nScalarConstraint{GeneralVariableRef,MathOptInterface.LessThan{Float64}}(x,\nMathOptInterface.LessThan{Float64}(1.0))\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.name-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.name","text":"JuMP.name(cref::InfOptConstraintRef)::String\n\nExtend JuMP.name to return the name of an InfiniteOpt constraint.\n\nExample\n\njulia> name(cref)\n\"constr_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.constraint_by_name-Tuple{InfiniteModel, String}","page":"Constraints","title":"JuMP.constraint_by_name","text":"JuMP.constraint_by_name(model::InfiniteModel,\n                        name::String)::Union{InfOptConstraintRef, Nothing}\n\nExtend JuMP.constraint_by_name to return the constraint reference associated with name if one exists or returns nothing. Errors if more than one constraint uses the same name.\n\nExample\n\njulia> constraint_by_name(model, \"constr_name\")\nconstr_name : x + pt = 3.0\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.list_of_constraint_types-Tuple{InfiniteModel}","page":"Constraints","title":"JuMP.list_of_constraint_types","text":"JuMP.list_of_constraint_types(model::InfiniteModel)::Vector{Tuple{DataType, DataType}}\n\nExtend JuMP.list_of_constraint_types to return a list of tuples that contain  all the used combinations of function types and set types in the model.\n\nExample\n\njulia> all_constraints(model)\n3-element Array{Tuple{DataType,DataType},1}:\n (GeneralVariableRef, MathOptInterface.LessThan{Float64})\n (GeneralVariableRef, MathOptInterface.GreaterThan{Float64})\n (GeneralVariableRef, MathOptInterface.Integer)\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.num_constraints-Tuple{InfiniteModel, Any, Any}","page":"Constraints","title":"JuMP.num_constraints","text":"JuMP.num_constraints(model::InfiniteModel, [function_type], [set_type])::Int\n\nExtend JuMP.num_constraints to return the number of constraints with a  partiuclar function type and set type.\n\nExample\n\njulia> num_constraints(model, FiniteVariableRef, MOI.LessThan)\n1\n\njulia> num_constraints(model, FiniteVariableRef)\n3\n\njulia> num_constraints(model, MOI.LessThan)\n2\n\njulia> num_constraints(model)\n4\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.all_constraints-Tuple{InfiniteModel, Any, Any}","page":"Constraints","title":"JuMP.all_constraints","text":"JuMP.all_constraints(model::InfiniteModel, [function_type], [set_type])::Vector{InfOptConstraintRef}\n\nExtend JuMP.all_constraints to return a list of all the constraints with a  particular function type and set type.\n\nExample\n\njulia> all_constraints(model, GeneralVariableRef, MOI.LessThan)\n1-element Array{InfOptConstraintRef,1}:\n x ≤ 1.0\n\njulia> all_constraints(model, GeneralVariableRef)\n3-element Array{InfOptConstraintRef,1}:\n x ≥ 0.0\n x ≤ 3.0\n x integer\n\njulia> all_constraints(model, MOI.GreaterThan)\n3-element Array{InfOptConstraintRef,1}:\n x ≥ 0.0\n g(t) ≥ 0.0, ∀ t ∈ [0, 6]\n g(0.5) ≥ 0.0\n\njulia> all_constraints(model)\n5-element Array{InfOptConstraintRef,1}:\n x ≥ 0.0\n x ≤ 3.0\n x integer\n g(t) ≥ 0.0, ∀ t ∈ [0, 6]\n g(0.5) ≥ 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.is_valid-Tuple{InfiniteModel, InfOptConstraintRef}","page":"Constraints","title":"JuMP.is_valid","text":"JuMP.is_valid(model::InfiniteModel, cref::InfOptConstraintRef)::Bool\n\nExtend JuMP.is_valid to return Bool whether an InfiniteOpt constraint  reference is valid.\n\nExample\n\njulia> is_valid(model, cref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.parameter_refs-Tuple{InfOptConstraintRef}","page":"Constraints","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(cref::InfOptConstraintRef)::Tuple\n\nReturn the tuple of infinite parameter references that determine the infinite dependencies of cref.\n\nExample\n\njulia> parameter_refs(cref)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.has_domain_restrictions","page":"Constraints","title":"InfiniteOpt.has_domain_restrictions","text":"has_domain_restrictions(cref::InfOptConstraintRef)::Bool\n\nReturn a Bool indicating if cref is limited to a sub-domain as defined by a DomainRestrictions object.\n\nExample\n\njulia> has_domain_restrictions(cref)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#InfiniteOpt.domain_restrictions","page":"Constraints","title":"InfiniteOpt.domain_restrictions","text":"domain_restrictions(cref::InfOptConstraintRef)::DomainRestrictions{GeneralVariableRef}\n\nReturn the DomainRestrictions object associated with the constraint cref.\n\nExample\n\njulia> domain_restrictions(cref)\nSubdomain restrictions (1): t ∈ [0, 2]\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#JuMP.normalized_rhs-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.normalized_rhs","text":"JuMP.normalized_rhs(cref::InfOptConstraintRef)::Float64\n\nReturn the right-hand side term of cref after JuMP has converted the constraint into its normalized form.\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.normalized_coefficient-Tuple{InfOptConstraintRef, GeneralVariableRef}","page":"Constraints","title":"JuMP.normalized_coefficient","text":"JuMP.normalized_coefficient(cref::InfOptConstraintRef,\n                            variable::GeneralVariableRef)::Float64\n\nReturn the coefficient associated with variable in constraint after JuMP has normalized the constraint into its standard form.\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#Modification","page":"Constraints","title":"Modification","text":"","category":"section"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"JuMP.set_name(::InfOptConstraintRef, ::String)\nset_domain_restrictions\nadd_domain_restrictions\ndelete_domain_restrictions\nJuMP.set_normalized_rhs(::InfOptConstraintRef, ::Real)\nJuMP.add_to_function_constant(::InfOptConstraintRef, ::Real)\nJuMP.set_normalized_coefficient(::InfOptConstraintRef, ::GeneralVariableRef, ::Real)\nJuMP.delete(::InfiniteModel, ::InfOptConstraintRef)","category":"page"},{"location":"manual/constraint/#JuMP.set_name-Tuple{InfOptConstraintRef, String}","page":"Constraints","title":"JuMP.set_name","text":"JuMP.set_name(cref::InfOptConstraintRef, name::String)::Nothing\n\nExtend JuMP.set_name to specify the name of a constraint cref.\n\nExample\n\njulia> set_name(cref, \"new_name\")\n\njulia> name(cref)\n\"new_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.set_domain_restrictions","page":"Constraints","title":"InfiniteOpt.set_domain_restrictions","text":"set_domain_restrictions(cref::InfOptConstraintRef,\n                     restrictions:DomainRestrictions{GeneralVariableRef};\n                     [force::Bool = false])::Nothing\n\nSpecify a new DomainRestrictions object restrictions for the  constraint cref. Errors if cref already has restrictions and force = false.  Where possible it is recommended to use add_domain_restrictions instead.  \n\nExample\n\njulia> set_domain_restrictions(cref, DomainRestrictions(t => [0, 2]))\n\njulia> domain_restrictions(cref)\nSubdomain restrictions (1): t ∈ [0, 2]\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#InfiniteOpt.add_domain_restrictions","page":"Constraints","title":"InfiniteOpt.add_domain_restrictions","text":"add_domain_restrictions(cref::InfOptConstraintRef,\n                     new_restrictions::DomainRestrictions{GeneralVariableRef}\n                     )::Nothing\n\nAdd additional domain restrictions to cref such that it is defined over the sub-domain based on pref from lower to upper.\n\njulia> add_domain_restrictions(cref, DomainRestrictions(t => [0, 2]))\n\njulia> domain_restrictions(cref)\nSubdomain restrictions (1): t ∈ [0, 2]\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#InfiniteOpt.delete_domain_restrictions","page":"Constraints","title":"InfiniteOpt.delete_domain_restrictions","text":"delete_domain_restrictions(cref::InfOptConstraintRef)::Nothing\n\nDelete all the domain restrictions of the constraint cref. Note any restrictions that are needed for finite variables inside in cref will be unaffected.\n\nExample\n\njulia> @constraint(model, c1, y <= 42, DomainRestrictions(x => 0))\nc1 : y(x) ≤ 42, ∀ x[1] = 0, x[2] = 0\n\njulia> delete_domain_restrictions(c1)\n\njulia> c1\nc1 : y(x) ≤ 42, ∀ x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#JuMP.set_normalized_rhs-Tuple{InfOptConstraintRef, Real}","page":"Constraints","title":"JuMP.set_normalized_rhs","text":"JuMP.set_normalized_rhs(cref::InfOptConstraintRef, value::Real)::Nothing\n\nSet the right-hand side term of constraint to value. Note that prior to this step, JuMP will aggregate all constant terms onto the right-hand side of the constraint. For example, given a constraint 2x + 1 <= 2, set_normalized_rhs(con, 4) will create the constraint 2x <= 4, not 2x + 1 <= 4.\n\njulia> @constraint(model, con, 2x + 1 <= 2)\ncon : 2 x ≤ 1.0\n\njulia> set_normalized_rhs(con, 4)\n\njulia> con\ncon : 2 x ≤ 4.0\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.add_to_function_constant-Tuple{InfOptConstraintRef, Real}","page":"Constraints","title":"JuMP.add_to_function_constant","text":"JuMP.add_to_function_constant(cref::InfOptConstraintRef, value::Real)::Nothing\n\nAdd value to the function constant term. Note that for scalar constraints, JuMP will aggregate all constant terms onto the right-hand side of the constraint so instead of modifying the function, the set will be translated by -value. For example, given a constraint 2x <= 3, add_to_function_constant(c, 4) will modify it to 2x <= -1. ```\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.set_normalized_coefficient-Tuple{InfOptConstraintRef, GeneralVariableRef, Real}","page":"Constraints","title":"JuMP.set_normalized_coefficient","text":"JuMP.set_normalized_coefficient(cref::InfOptConstraintRef,\n                                variable::GeneralVariableRef,\n                                value::Real)::Nothing\n\nSet the coefficient of variable in the constraint constraint to value. Note that prior to this step, JuMP will aggregate multiple terms containing the same variable. For example, given a constraint 2x + 3x <= 2, set_normalized_coefficient(con, x, 4) will create the constraint 4x <= 2.\n\njulia> con\ncon : 5 x ≤ 2.0\n\njulia> set_normalized_coefficient(con, x, 4)\n\njulia> con\ncon : 4 x ≤ 2.0\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.delete-Tuple{InfiniteModel, InfOptConstraintRef}","page":"Constraints","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, cref::InfOptConstraintRef)::Nothing\n\nExtend JuMP.delete to delete an InfiniteOpt constraint and all associated  information. Errors if cref is invalid.\n\nExample\n\njulia> print(model)\nMin measure(g(t)*t) + z\nSubject to\n z ≥ 0.0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n\njulia> delete(model, cref)\n\njulia> print(model)\nMin measure(g(t)*t) + z\nSubject to\n z ≥ 0.0\n\n\n\n\n\n","category":"method"},{"location":"guide/model/#infinite_model_docs","page":"Infinite Models","title":"Infinite Models","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"A guide for creating infinite models and understanding how they work. See the  respective technical manual for more details.","category":"page"},{"location":"guide/model/#Overview","page":"Infinite Models","title":"Overview","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Infinite models are expressed via the InfiniteModel datatype which is at the core of InfiniteOpt. These model objects are designed to emulate the behavior of Model  objects in JuMP. These data objects store the parameters, variables, measures, objective, constraints, and all other data used in InfiniteOpt. This differs from JuMP models which store such information in a MathOptInterface model backend.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"note: Note\nInfiniteOpt's InfiniteModels are intended to be used for  infinite-dimensional optimization problems. Finite problems (e.g.,  directly modeling a discrete time model) should instead be modeled using  Model's in JuMP.","category":"page"},{"location":"guide/model/#Basic-Usage","page":"Infinite Models","title":"Basic Usage","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Infinite models can be initialized with no arguments by default:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt\n\njulia> model = InfiniteModel()\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"The optimizer that will be used to solve the model can also be specified at model definition:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt, Ipopt\n\njulia> model = InfiniteModel(Ipopt.Optimizer)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Note that any optimizer currently supported by JuMP v0.19.0 or newer is supported for use in InfiniteOpt. For completeness, the table of currently supported optimizers is provided below in Supported Optimizers.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"We can also specify optimizer attributes via optimizer_with_attributes which allows us to append as many attributes as we like, for example:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt, Ipopt\n\njulia> model = InfiniteModel(optimizer_with_attributes(Ipopt.Optimizer,\n                                                       \"output_level\" => 0))\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Now you have an initialized InfiniteModel that is ready for your mathematical model to be defined and optimized!","category":"page"},{"location":"guide/model/#Advanced-Definition-Information","page":"Infinite Models","title":"Advanced Definition Information","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"As you may have noticed in the above examples, InfiniteModels contain an optimizer model backend which simply corresponds to a JuMP.Model that will be used to store and optimize the reformulation of the infinite mathematical model stored in InfiniteModel. It also will contain a mapping between its optimization model and that of the InfiniteModel (e.g., a mapping between the variables and constraints). By default, InfiniteModels use a TranscriptionModel optimizer model backend which will store a transcribed (discretized) version of the infinite model. More information on the internal use of TranscriptionModels is provided in Model Transcription.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"All the arguments used with the InfiniteModel constructor (e.g., the optimizer) are simply passed on and stored in the optimizer model backend. Thus, any argument supported by JuMP.Model can be passed on to the optimizer model by including it in the InfiniteModel constructor. For example, we can specify the caching_mode keyword argument in the InfiniteModel call to use in the definition of the optimizer model:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt, Ipopt\n\njulia> model = InfiniteModel(Ipopt.Optimizer,\n                             caching_mode = MOIU.MANUAL)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: MANUAL\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Notice that the model mode of the optimizer model is now MANUAL.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Moreover, alternative optimizer model types (i.e., not a TranscriptionModel) can be  specified via the OptimizerModel keyword argument when initializing the  InfiniteModel. Thus, to redundantly specify a TranscriptionModel we would call:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt\n\njulia> model = InfiniteModel(OptimizerModel = TranscriptionModel)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"More information on implementing custom optimizer models is located on the  Extensions page.","category":"page"},{"location":"guide/model/#Supported-Optimizers","page":"Infinite Models","title":"Supported Optimizers","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"InfiniteOpt can use any optimizer that is supported by JuMP v0.19.0 or newer  (i.e., has a MathOptInterface implementation). Please refer to JuMP's current solver documentation  to learn what solvers are supported and how to install them.","category":"page"},{"location":"guide/model/#Object-Dictionaries","page":"Infinite Models","title":"Object Dictionaries","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Like JuMP.Models, InfiniteModels register the name symbols of macro defined  objects. This enables us to access such objects by indexing the InfiniteModel  with the appropriate symbol. This is particularly useful for function defined  models. For example:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> function make_model(num_supports)\n        model = InfiniteModel()\n        @infinite_parameter(model, t ∈ [0, 10], num_supports = num_supports)\n        @variable(model, y >= 42, Infinite(t))\n        @objective(model, Min, ∫(y, t))\n        return model\n       end\nmake_model (generic function with 1 method)\n\njulia> model1 = make_model(2); model2 = make_model(4);\n\njulia> y1 = model1[:y]\ny(t)","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Note that when macro defined objects are deleted from an InfiniteModel that the  corresponding symbols in the object dictionary are not removed by default. This  can be accomplished by use of  JuMP.unregister  (please click on its link for usage information).","category":"page"},{"location":"guide/finite_parameter/#finite_param_docs","page":"Finite Parameters","title":"Finite Parameters","text":"","category":"section"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"A guide for the definition and use of finite parameters in InfiniteOpt. See  the respective technical manual for more details.","category":"page"},{"location":"guide/finite_parameter/#Overview","page":"Finite Parameters","title":"Overview","text":"","category":"section"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"Often a mathematical model needs to be optimized several times in accordance with a set of fixed parameter values. In such cases, it is typically preferable to modify these values in place without having to redefine the entire model. This ability is provided in InfiniteOpt via @finite_parameter which permits users to define finite parameters whose values can later be modified as needed. Furthermore, at the optimization step these parameters are replaced with their numeric values. Thus, not adding unnecessary decision variables as is typically done in JuMP models using JuMP.fix on placeholder variables.  ","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"note: Note\nThe syntax of @finite_parameter has changed with from previous  versions for enhanced long term support. Please consult the documentation  below for the updated syntax.","category":"page"},{"location":"guide/finite_parameter/#Basic-Usage","page":"Finite Parameters","title":"Basic Usage","text":"","category":"section"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"Once an InfiniteModel model has been defined we can add a finite parameter via @finite_parameter. For example, let's define a maximum cost parameter called max_cost with an initial value of 42:","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"julia> @finite_parameter(model, max_cost == 42)\nmax_cost","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"Notice that a Julia variable called max_cost is returned that contains a GeneralVariableRef that points to the finite parameter we have just created. An array of parameters can also be defined following standard JuMP macro syntax:","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"julia> values = [2, 3.2, 1];\n\njulia> @finite_parameter(model, params[i = 1:3] == values[i])\n3-element Vector{GeneralVariableRef}:\n params[1]\n params[2]\n params[3]","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"The @finite_parameter macro emulates all typical JuMP functionality and can define anonymous parameters, use JuMP containers and more. We refer to its documentation below to learn more. Once a finite parameter is defined the corresponding GeneralVariableRef can be used in expressions, objectives, measures, and constraints just like infinite parameters.","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"The value of a finite parameter can be checked using parameter_value and can modified using set_value. For example, let's update the value of max_cost to be now be 10.2:","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"julia> parameter_value(max_cost)\n42.0\n\njulia> set_value(max_cost, 10.2)\n\njulia> parameter_value(max_cost)\n10.2","category":"page"},{"location":"guide/finite_parameter/#Advanced-Details","page":"Finite Parameters","title":"Advanced Details","text":"","category":"section"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"The ability to implement finite parameters stems from its ability to support  mixed variable types using by using the GeneralVariableRef buffer. As such,  finite parameters will be treated as variables until the model is transcribed.  For example, this means that the expression max_cost * x will be treated as a  quadratic expression when it is expressed in its InfiniteOpt form, however it is  converted into the appropriate affine expression when transcripted. ","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"note: Note\nIn previous versions finite parameters were just special cases of infinite  parameters. However, they now have their own distinct underlying data structure. ","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"warning: Warning\nInfiniteOpt's implementation of finite parameters should not be a reason to  use InfiniteOpt to model non-infinite-dimensional problems, since the added  overhead will make it slower than just iteratively building JuMP models. For  this behavior, we recommend looking into using ParameterJuMP.","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"DocTestFilters = [r\"E|𝔼\", r\"integral|∫\"]","category":"page"},{"location":"guide/objective/#obj_docs","page":"Objectives","title":"Objectives","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"A guide specifying and modifying objective functions in InfiniteOpt. See the  respective technical manual for more details.","category":"page"},{"location":"guide/objective/#Overview","page":"Objectives","title":"Overview","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Naturally, objective functions serve as a key aspect of optimization problems in  general and this is certainly the case with infinite dimensional ones. In  InfiniteOpt objectives are defined in much the same way they are in JuMP.  One key idea to keep in mind is that the objective must evaluate to a finite  expression. Note this means that objectives can only explicitly contain  finite variables and point variables. Infinite expressions must be evaluated in a  measure to be included (e.g., evaluate the expectation of a random variable).","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"note: Note\nNonlinear objectives as defined by JuMP.@NLobjective are not currently  supported by InfiniteOpt. See Nonlinear Expressions for more  information and possible workarounds. ","category":"page"},{"location":"guide/objective/#obj_basic","page":"Objectives","title":"Basic Usage","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Principally, the objective function is specified via  @objective  as is done in JuMP. For example, let's define the stochastic objective to  minimize 05 x_1 + 05 x_2 + mathbbE_xi y^2 - y:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> @infinite_parameter(model, ξ ~ Normal())\nξ\n\njulia> @variable(model, y, Infinite(ξ))\ny(ξ)\n\njulia> @variable(model, x[1:2])\n2-element Vector{GeneralVariableRef}:\n x[1]\n x[2]\n\njulia> @objective(model, Min, 0.5x[1] + 0.5x[2] + 𝔼(y^2 - y, ξ))\n0.5 x[1] + 0.5 x[2] + 𝔼{ξ}[y(ξ)² - y(ξ)]","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Thus, we have defined an objective using InfiniteOpt's straightforward syntax.  Note that the second argument indicates the objective sense which can be  expressed Min for minimization problems and Max for maximization problems.  The objective function (expression) must be finite containing only finite variables,  point variables, and/or measures. Also, any included measures must fully  integrate over all the infinite parameters contained in its input function.  For example, if we define had an infinite variable z(ξ, t) then the measure  𝔼(z, ξ) could not be included since the resulting expression would still  be infinite with respect to t. However, adding a measure for t would result  in a valid object to add to an objective: ∫(𝔼(z, ξ), t).","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Now we can add objectives to our infinite models. For more detailed information,  please review the information below.  ","category":"page"},{"location":"guide/objective/#Queries","page":"Objectives","title":"Queries","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"This section will highlight the available methods for extracting objective  information. These are all derived from extensions to JuMP functions and thus  follow syntax.","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Principally, these methods correspond to  objective_sense,  objective_function, and  objective_function_type  which return the objective sense (a subtype of MOI.OptimizationSense), the  objective function (expression), and the objective function type, respectively.  These methods are demonstrated in accordance with the example presented above in  the Basic Usage section:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> objective_sense(model)\nMIN_SENSE::OptimizationSense = 0\n\njulia> objective_function(model)\n0.5 x[1] + 0.5 x[2] + 𝔼{ξ}[y(ξ)² - y(ξ)]\n\njulia> objective_function_type(model)\nGenericAffExpr{Float64, GeneralVariableRef}","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"The objective sense can be one of three possibilities: MIN_SENSE, MAX_SENSE,  or FEASIBILITY_SENSE. The later sense applies to models that contain no  objective function.","category":"page"},{"location":"guide/objective/#Modification","page":"Objectives","title":"Modification","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"This section will review the methods that can be used to modify the objective.  First, we'll consider the useful  set_objective_coefficient  method and then we'll explain the methods that enable @objective.","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"The coefficient of a particular variable in an objective can be readily updated  via set_objective_coefficient.  This is useful repeatedly optimizing an infinite model with varied objective  coefficients (e.g., varied tradeoff parameters). For example, let's consider  updating the coefficient of x[1] in the previous example from 0.5 to 0.25:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> set_objective_coefficient(model, x[1], 0.25)\n\njulia> objective_function(model)\n0.25 x[1] + 0.5 x[2] + 𝔼{ξ}[y(ξ)² - y(ξ)]","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Now let's consider the modification methods that enable the @objective macro.  The objective function is specified via  set_objective_function  which simply updates the expression stored in the objective. For example,  let's update out objective to simply be 05x_1 + 05x_2:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> set_objective_function(model, 0.5x[1] + 0.5x[2])\n\njulia> objective_function(model)\n0.5 x[1] + 0.5 x[2]","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"The objective sense is updated via  set_objective_sense  which can specify the sense as one of the MOI.OptimizationSense subtypes. For  example, let's change the current objective to be maximization problem:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> set_objective_sense(model, MOI.MAX_SENSE)\n\njulia> objective_sense(model)\nMAX_SENSE::OptimizationSense = 1","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"The above 2 methods are both called via  set_objective.  This is the function that enables @objective behind the scenes. Thus, the  previous 2 examples could have been implemented equivalently in the following  ways:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> set_objective(model, MOI.MAX_SENSE, 0.5x[1] + 0.5x[2])\n\njulia> @objective(model, Max, 0.5x[1] + 0.5x[2])\n0.5 x[1] + 0.5 x[2]","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Notice that @objective offers a more intuitive syntax and is also  more efficient at parsing expressions.","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"note: Note\nWhen possible, the  @objective  since it is more stable and efficient than the set_objective_[aspect]  methods due to its enhanced methodology for parsing expressions.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"DocTestFilters = [r\"≥|>=\", r\" == | = \", r\" ∈ | in \", r\"MathOptInterface|MOI\",\n                  r\" for all | ∀ \", r\"[0-9\\.]+.*\"]","category":"page"},{"location":"guide/result/#result_docs","page":"Results","title":"Results","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"A guide for querying optimized InfiniteOpt models. See the respective  technical manual for more details.","category":"page"},{"location":"guide/result/#Overview","page":"Results","title":"Overview","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"So far we have covered defining, transforming, and optimizing InfiniteModels.  Now comes the point to extract information from our optimized model. This is done  following extended versions of JuMPs querying functions in combination with  the mapping information stored in the optimizer model. Thus, this page will  walk through the use of these result query functions.","category":"page"},{"location":"guide/result/#Basic-Usage","page":"Results","title":"Basic Usage","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Let's revisit the example from the optimization page to get us started:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> using InfiniteOpt, Ipopt;\n\njulia> model = InfiniteModel(Ipopt.Optimizer);\n\njulia> set_optimizer_attribute(model, \"print_level\", 0);\n\njulia> @infinite_parameter(model, t in [0, 10], num_supports = 10);\n\njulia> @variable(model, y >= 0, Infinite(t));\n\njulia> @variable(model, z >= 0);\n\njulia> @objective(model, Min, 2z);\n\njulia> @constraint(model, c1, z >= y);\n\njulia> @constraint(model, c2, y(0) == 42);\n\njulia> print(model)\nMin 2 z\nSubject to\n y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n z ≥ 0.0\n c1 : z - y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n y(0) ≥ 0.0\n c2 : y(0) = 42.0\n\njulia> optimize!(model)\n","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Now that the model has been optimized, let's find out what happened. To determine  why the optimizer stopped, we can use  termination_status to report the corresponding MathOptInterface  termination code (possible codes are explained  here.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> termination_status(model)\nLOCALLY_SOLVED::TerminationStatusCode = 4","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Here we see that our model was locally solved via Ipopt and that is why it  stopped. Furthermore, we can query the primal and dual problem optimalities via  primal_status and  dual_status, respectively.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> primal_status(model)\nFEASIBLE_POINT::ResultStatusCode = 1\n\njulia> dual_status(model)\nFEASIBLE_POINT::ResultStatusCode = 1","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"The possible statuses are detailed here.  These results are useful in knowing if information can be drawn from the primal  and/or dual and what it means. We can also verify that we indeed have answers  via has_values which indicates if our model has optimized variable  values.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> has_values(model)\ntrue","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"And indeed we do have values.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Now we can query the objective value via objective_value which reports the optimal objective value.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> objective_value(model)\n83.99999998250514","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Great now we can inquire about variable values via  value. First, let's retrieve the value of z:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> value(z)\n41.99999999125257","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We get a single value since z is a FiniteVariable and therefore finite. Now  let's retrieve the \"value\" of y(t) which is infinite with respect to t:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> value(y)\n10-element Vector{Float64}:\n 42.0\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Notice here we obtain an array of values since these correspond to the  transcribed finite (discretized) variables used to solve the problem. We obtain  the corresponding support (discretized t) values via supports:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> supports(y)\n10-element Vector{Tuple}:\n (0.0,)\n (1.11111111111,)\n (2.22222222222,)\n (3.33333333333,)\n (4.44444444444,)\n (5.55555555556,)\n (6.66666666667,)\n (7.77777777778,)\n (8.88888888889,)\n (10.0,)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"There is 1-to-1 correspondence between these supports and the values reported  above. Note that these are stored in tuples to facilitate multiple infinite  parameter dependencies.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\nThe values for an array of variables is obtained via the vectorized call  of value following the syntax:value.(::AbstractArray{<:GeneralVariableRef})This also holds true for many other methods in InfiniteOpt. For example,  adding the dot also vectorizes dual and set_binary.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We can also query the dual of a constraint via  dual if a model has duals available as indicated by has_duals:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> has_duals(model)\ntrue\n\njulia> dual(c1)\n10-element Vector{Float64}:\n 1.9999999988666093\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"c1 is an infinite constraint and thus we obtain the duals of its transcribed  versions. The underlying infinite parameter(s) and support values are queried  via parameter_refs and supports:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> parameter_refs(c1)\n(t,)\n\njulia> supports(c1)\n10-element Vector{Tuple}:\n (0.0,)\n (1.11111111111,)\n (2.22222222222,)\n (3.33333333333,)\n (4.44444444444,)\n (5.55555555556,)\n (6.66666666667,)\n (7.77777777778,)\n (8.88888888889,)\n (10.0,)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"These again all have a 1-to-1 correspondence.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\nIn the case that our variables/constraints depend on multiple infinite  parameter it is typically convenient to add the keyword statement  ndarray = true when calling any variable/constraint queries (e.g., value  and dual). This will reformat the output vector into a n-dimensional array  whose dimensions correspond to the supports of the infinite parameters. ","category":"page"},{"location":"guide/result/#Termination-Queries","page":"Results","title":"Termination Queries","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Termination queries are those that question about how the infinite model was  solved and what its optimized state entails. Programmatically, such queries on  the InfiniteModel are simply routed to its optimizer model.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"The commonly used queries include termination_status,  primal_status, dual_status, objective_value, result_count, and solve_time. The first four are well  exemplified in the Basic Usage section above and are helpful in quickly  understanding the optimality status of a given model following the many possible  statuses reported by MathOptInterface which are documented  here.  We use result_count to determine how many solutions are recorded in the  optimizer.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> result_count(model)\n1","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"This is useful since it informs what results there are which can be specified  via the result keyword argument in many methods such as primal_status,  dual_status, objective_value, value, dual, and more.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We use solve_time to determine the time in seconds used by the optimizer until  it terminated its search.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> solve_time(model)\n0.004999876022338867","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Note that this query might not be supported with all solvers.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"The above status queries are designed to report information in a consistent  format irrespective of the chosen optimizer. However, raw_status will  provide the optimality status verbatim as reported by the optimizer. Thus,  following our example with Ipopt we obtain:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> raw_status(model)\n\"Solve_Succeeded\"","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Also, we obtain the best objective bound via objective_bound which  becomes particularly useful solutions that are suboptimal. However, this method  is not supported by all optimizers and in this case Ipopt is one such optimizer.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Finally, we get the best dual objective value via dual_objective_value  if the optimizer supplies this information which again Ipopt does not.","category":"page"},{"location":"guide/result/#Variable-Queries","page":"Results","title":"Variable Queries","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Information about the optimized variables is gathered consistently in comparison  to typical JuMP models. With InfiniteModels this is done by querying the  optimizer model and using its stored variable mappings to return the correct  information. Thus, here the queries are extended to work with the specifics of  the optimizer model to return the appropriate info.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\nLike supports the all variable based query methods below also employ the  label::Type{AbstractSupportLabel} = PublicLabel keyword argument that by  default will return the desired information associated with public  supports. The full set (e.g., ones corresponding to internal collocation nodes)  is obtained via label = All.\nThese methods also employ the ndarray::Bool keyword argument that will cause the  output to be formatted as a n-dimensional array where the dimensions  correspond to the infinite parameter dependencies. For example, if we have an  infinite variable y(t, ξ) and we invoke a query method with ndarray = true  then we'll get a matrix whose dimensions correspond to the supports of t and  ξ, respectively. Also, if ndarray = true then label correspond to the  intersection of supports labels in contrast to its default of invoking the union  of the labels.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"First, we should verify that the optimized model in fact has variable values  via has_values. In our example, we have:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> has_values(model)\ntrue","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"So we have values readily available to be extracted.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Now value can be used to query the  values as shown above in the Basic Usage section. This works by calling the  appropriate map_value defined by the optimizer  model. By default this, employs the map_value fallback which uses  optimizer_model_variable to do the mapping. Details on how to extend these  methods for user-defined optimizer models is explained on the Extensions page.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We also, support call to value that use an expression of variables as input.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Finally, the optimizer index of a variable is queried via  optimizer_index which  reports back the index of the variable as used in the MathOptInterface  backend:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> optimizer_index(z)\nMathOptInterface.VariableIndex(1)\n\njulia> optimizer_index(y)\n10-element Vector{MathOptInterface.VariableIndex}:\n MathOptInterface.VariableIndex(2)\n MathOptInterface.VariableIndex(3)\n MathOptInterface.VariableIndex(4)\n MathOptInterface.VariableIndex(5)\n MathOptInterface.VariableIndex(6)\n MathOptInterface.VariableIndex(7)\n MathOptInterface.VariableIndex(8)\n MathOptInterface.VariableIndex(9)\n MathOptInterface.VariableIndex(10)\n MathOptInterface.VariableIndex(11)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"As noted previously, an array is returned for y(t) in accordance with its  transcription variables. In similar manner to value, this is enabled by  appropriate versions of map_optimizer_index.","category":"page"},{"location":"guide/result/#Constraint-Queries","page":"Results","title":"Constraint Queries","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Like variables, a variety of information can be queried about constraints.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\nLike supports the all constraint query methods below also employ the  label::Type{AbstractSupportLabel} = PublicLabel keyword argument that by  default will return the desired information associated with public  supports. The full set (e.g., ones corresponding to internal collocation nodes)  is obtained via label = All.\nThese methods also employ the ndarray::Bool keyword argument that will cause the  output to be formatted as a n-dimensional array where the dimensions  correspond to the infinite parameter dependencies. For example, if we have an  infinite constraint that depends on t and ξ) and we invoke a query method  with ndarray = true then we'll get a matrix whose dimensions correspond to  the supports of t and ξ, respectively. Also, if ndarray = true then  label correspond to the intersection of supports labels in contrast to its  default of invoking the union of the labels.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"First, recall that constraints are stored in the form function-in-set where  generally function contains the variables and coefficients and the set contains  the relational operator and the constant value. With this understanding, we  query the value of a constraint's function via  value:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> constraint_object(c1).func # show the function expression of c1\nz - y(t)\n\njulia> value(c1)\n10-element Vector{Float64}:\n -8.747427671096375e-9\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Again, we obtain an array of values since c1 is infinite due to its dependence  on x(t). Behind the scenes this is implemented via the appropriate extensions  of map_value.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Next the optimizer index(es) of the transcribed constraints in the  MathOptInterface backend provided via  optimizer_index.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> optimizer_index(c1)\n10-element Vector{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}}:\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(1)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(2)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(3)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(4)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(5)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(6)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(7)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(8)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(9)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(10)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Here 10 indices are given in accordance with the transcription constraints.  The mapping between these and the original infinite constraints is managed via  the appropriate extensions of map_optimizer_index.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We can also query dual information from our constraints if it is available.  First, we should verify that dual information is available via  has_duals:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> has_duals(model)\ntrue","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Now we can query the duals via dual.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> dual(c1)\n10-element Vector{Float64}:\n 1.9999999988666093\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Here we obtain the optimal dual values for each transcribed version of c1. This  is enabled via the proper extensions of map_dual.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Finally, we query the shadow price of a constraint via  shadow_price. This denotes  the change in the objective value due to an infinitesimal relaxation of the  constraint. For c1 we get:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> shadow_price(c1)\n10-element Vector{Float64}:\n -1.9999999988666093\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Similarly, the mapping to the transcription constraints is enabled via the  appropriate version of map_shadow_price.","category":"page"},{"location":"guide/result/#LP-Sensitivity","page":"Results","title":"LP Sensitivity","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"We also conduct sensitivity analysis for linear problems using  lp_sensitivity_report. This  will generate a InfOptSensitivityReport which contains mapping to the  ranges indicating how much a constraint RHS constant or a objective  coefficient can be changed without violating the feasibility of the solution.  This is further explained in the JuMP documentation  here.  Furthermore, these analysis can only be employed for a solver that implements  MOI.ConstraintBasisStatus. In our running example up above, Ipopt.jl does not  support this A solver like Gurobi.jl does.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> report = lp_sensitivity_report(model);\n\njulia> report[c1]\n10-element Vector{Tuple{Float64, Float64}}:\n (-42.0, Inf)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n\njulia> report[z]\n(-2.0, Inf)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Note that like other query methods, an array of ranges will be provided with testing the sensitivity of an infinite constraint RHS in accordance with the discretization scheme. Also, keyword arguments (like ndarray and label) can  be invoked when indexing the report:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> report[c1, label = All]\n10-element Vector{Tuple{Float64, Float64}}:\n (-42.0, Inf)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)","category":"page"},{"location":"guide/result/#Other-Queries","page":"Results","title":"Other Queries","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Any other queries supported by JuMP can be accessed by simply interrogating the  optimizer model directly using optimizer_model to access it. For  example, we can get the solution summary of the optimizer model:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> solution_summary(optimizer_model(model))\n* Solver : Ipopt\n\n* Status\n  Termination status : LOCALLY_SOLVED\n  Primal status      : FEASIBLE_POINT\n  Dual status        : FEASIBLE_POINT\n  Message from the solver:\n  \"Solve_Succeeded\"\n\n* Candidate solution\n  Objective value      : 83.99999998250514\n\n* Work counters\n  Solve time (sec)   : 0.01000","category":"page"},{"location":"manual/model/#infinite_model_manual","page":"Infinite Models","title":"Infinite Models","text":"","category":"section"},{"location":"manual/model/","page":"Infinite Models","title":"Infinite Models","text":"A technical manual for infinite dimensional models. See the respective  guide for more information.","category":"page"},{"location":"manual/model/#Models","page":"Infinite Models","title":"Models","text":"","category":"section"},{"location":"manual/model/","page":"Infinite Models","title":"Infinite Models","text":"InfiniteModel\nInfiniteModel()\nJuMP.object_dictionary(::InfiniteModel)\nhas_internal_supports\nBase.empty!(::InfiniteModel)","category":"page"},{"location":"manual/model/#InfiniteOpt.InfiniteModel","page":"Infinite Models","title":"InfiniteOpt.InfiniteModel","text":"InfiniteModel <: JuMP.AbstractModel\n\nA DataType for storing all of the mathematical modeling information needed to model an optmization problem with an infinite-dimensional decision space.\n\nFields\n\nindependent_params::MOIUC.CleverDict{IndependentParameterIndex, ScalarParameterData{IndependentParameter}}:  The independent parameters and their mapping information.\ndependent_params::MOIUC.CleverDict{DependentParametersIndex, MultiParameterData}:  The dependent parameters and their mapping information.\nfinite_params::MOIUC.CleverDict{FiniteParameterIndex, ScalarParameterData{FiniteParameter}}:  The finite parameters and their mapping information.\nname_to_param::Union{Dict{String, AbstractInfOptIndex}, Nothing}:  Field to help find a parameter given the name.\nlast_param_num::Int: The last parameter number to be used.\nparam_object_indices::Vector{Union{IndependentParameterIndex, DependentParametersIndex}}: The collection of parameter object indices in creation order.\nparam_functions::MOIUC.CleverDict{ParameterFunctionIndex, ParameterFunctionData{ParameterFunction}}:  The infinite parameter functions and their mapping information.\ninfinite_vars::MOIUC.CleverDict{InfiniteVariableIndex, <:VariableData{<:InfiniteVariable}}:  The infinite variables and their mapping information.\nsemi_infinite_vars::MOIUC.CleverDict{SemiInfiniteVariableIndex, <:VariableData{<:SemiInfiniteVariable}}:  The semi-infinite variables and their mapping information.\nsemi_lookup::Dict{<:Tuple, SemiInfiniteVariableIndex}: Look-up if a variable already already exists.\npoint_vars::MOIUC.CleverDict{PointVariableIndex, <:VariableData{<:PointVariable}}:  The point variables and their mapping information.\npoint_lookup::Dict{<:Tuple, PointVariableIndex}: Look-up if a variable already exists.\nfinite_vars::MOIUC.CleverDict{FiniteVariableIndex, VariableData{JuMP.ScalarVariable{Float64, Float64, Float64, Float64}}}:  The finite variables and their mapping information.\nname_to_var::Union{Dict{String, AbstractInfOptIndex}, Nothing}:  Field to help find a variable given the name.\nderivatives::MOIUC.CleverDict{DerivativeIndex, <:VariableData{<:Derivative}}: The derivatives and their mapping information.\nderiv_lookup::Dict{<:Tuple, DerivativeIndex}: Map derivative variable-parameter  pairs to a derivative index to prevent duplicates.\nmeasures::MOIUC.CleverDict{MeasureIndex, <:MeasureData}:  The measures and their mapping information.\nintegral_defaults::Dict{Symbol}:  The default keyword arguments for integral.\nconstraints::MOIUC.CleverDict{InfOptConstraintIndex, <:ConstraintData}:  The constraints and their mapping information.\nconstraint_restrictions::Dict{InfOptConstraintIndex, <:DomainRestrictions} Map constraints  to their domain restrictions if they have any.\nname_to_constr::Union{Dict{String, InfOptConstraintIndex}, Nothing}:  Field to help find a constraint given the name.\nobjective_sense::MOI.OptimizationSense: Objective sense.\nobjective_function::JuMP.AbstractJuMPScalar: Finite scalar function.\nobjective_has_measures::Bool: Does the objective contain measures?\nobj_dict::Dict{Symbol, Any}: Store Julia symbols used with InfiniteModel\noptimizer_constructor: MOI optimizer constructor (e.g., Gurobi.Optimizer).\noptimizer_model::JuMP.Model: Model used to solve InfiniteModel\nready_to_optimize::Bool: Is the optimizer_model up to date.\next::Dict{Symbol, Any}: Store arbitrary extension information.\n\n\n\n\n\n","category":"type"},{"location":"manual/model/#InfiniteOpt.InfiniteModel-Tuple{}","page":"Infinite Models","title":"InfiniteOpt.InfiniteModel","text":"InfiniteModel([optimizer_constructor];\n              [OptimizerModel::Function = TranscriptionModel,\n              caching_mode::MOIU.CachingOptimizerMode = MOIU.AUTOMATIC,\n              bridge_constraints::Bool = true, optimizer_model_kwargs...])\n\nReturn a new infinite model where an optimizer is specified if an optimizer_constructor is given. The optimizer can also later be set with the JuMP.set_optimizer call. By default the optimizer_model data field is initialized with a TranscriptionModel, but a different type of model can be assigned via set_optimizer_model as can be required by extensions.\n\nExample\n\njulia> using InfiniteOpt, JuMP, Ipopt;\n\njulia> model = InfiniteModel()\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nMeasures: 0\nDerivatives: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\njulia> model = InfiniteModel(Ipopt.Optimizer)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nMeasures: 0\nDerivatives: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt\n\n\n\n\n\n","category":"method"},{"location":"manual/model/#JuMP.object_dictionary-Tuple{InfiniteModel}","page":"Infinite Models","title":"JuMP.object_dictionary","text":"JuMP.object_dictionary(model::InfiniteModel)::Dict{Symbol, Any}\n\nReturn the dictionary that maps the symbol name of a macro defined object (e.g.,  a parameter, variable, or constraint) to the corresponding object. Objects are  registered to a specific symbol in the macros. For example,  @variable(model, x[1:2, 1:2]) registers the array of variables x to the symbol :x.\n\n\n\n\n\n","category":"method"},{"location":"manual/model/#InfiniteOpt.has_internal_supports","page":"Infinite Models","title":"InfiniteOpt.has_internal_supports","text":"has_internal_supports(pref::Union{IndependentParameterRef, DependentParameterRef})::Bool\n\nIndicate if pref has internal supports that will be hidden from the user by  default. \n\n\n\n\n\nhas_internal_supports(prefs; [kwargs...])\n\nDefine has_internal_supports for general variable references. It relies on has_internal_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"function"},{"location":"manual/model/#Base.empty!-Tuple{InfiniteModel}","page":"Infinite Models","title":"Base.empty!","text":"Base.empty!(model::InfiniteModel)::InfiniteModel\n\nClear out model of everything except the optimizer information and return the  cleared model. \n\n\n\n\n\n","category":"method"},{"location":"manual/model/#Abstract-Dependencies","page":"Infinite Models","title":"Abstract Dependencies","text":"","category":"section"},{"location":"manual/model/","page":"Infinite Models","title":"Infinite Models","text":"AbstractDataObject\nAbstractInfOptIndex\nObjectIndex","category":"page"},{"location":"manual/model/#InfiniteOpt.AbstractDataObject","page":"Infinite Models","title":"InfiniteOpt.AbstractDataObject","text":"AbstractDataObject\n\nAn abstract type for DataTypes that store core variable DataTypes and their model specific information (e.g., dependency mappings). These are what are stored in the InfiniteModel CleverDicts.\n\n\n\n\n\n","category":"type"},{"location":"manual/model/#InfiniteOpt.AbstractInfOptIndex","page":"Infinite Models","title":"InfiniteOpt.AbstractInfOptIndex","text":"AbstractInfOptIndex\n\nAn abstract type for all index objects used in InfiniteOpt.\n\n\n\n\n\n","category":"type"},{"location":"manual/model/#InfiniteOpt.ObjectIndex","page":"Infinite Models","title":"InfiniteOpt.ObjectIndex","text":"ObjectIndex <: AbstractInfOptIndex\n\nAn abstract type for indices of objects stored in MOI.Utilities.CleverDicts.\n\n\n\n\n\n","category":"type"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"DocTestFilters = [r\"≤|<=\", r\" == | = \", r\" ∈ | in \", r\"MathOptInterface|MOI\",\n                  r\" for all | ∀ \", r\"d|∂\", r\"integral|∫\"]","category":"page"},{"location":"guide/expression/#expr_docs","page":"Expressions","title":"Expressions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"A guide for the defining and understanding the variable expressions  used in InfiniteOpt. See the technical manual for more  details.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"note: Note\nNonlinear objects as defined by JuMP.@NL[macro_name] are not currently  supported by InfiniteOpt. See Nonlinear Expressions for more  information and possible workarounds. ","category":"page"},{"location":"guide/expression/#Overview","page":"Expressions","title":"Overview","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Expressions in InfiniteOpt (also called functions) refer to mathematical  statements involving variables and numbers. Thus, these comprise the  mathematical expressions used that are used in measures, objectives, and  constraints. Programmatically, InfiniteOpt simply extends JuMP expression  types and methods principally pertaining to affine and quadratic mathematical  expressions. A natively supported abstraction for general nonlinear expressions  is planned for development since that of JuMP is not readily extendable.","category":"page"},{"location":"guide/expression/#par_func_docs","page":"Expressions","title":"Parameter Functions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"As described further below, InfiniteOpt.jl only supports affine and quadratic  expressions in its current rendition. However, there several use cases where we  might want to provide a more complex known function of infinite parameter(s) (e.g.,  nonlinear setpoint tracking). Thus, we provide parameter function objects  that given a particular realization of infinite parameters will output a scalar  value. Note that this can be interpreted as an infinite variable that is  constrained to a particular known function. This is accomplished via  @parameter_function or parameter_function and is exemplified  by defining a parameter function f(t) that uses sin(t):","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> using InfiniteOpt;\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @parameter_function(model, f == sin(t))\nf(t)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Here we created an parameter function object, added it to model, and  then created a Julia variable f that serves as a GeneralVariableRef that points  to it. From here we can treat f as a normal infinite variable and use it with  measures, derivatives, and constraints. For example, we can do the following:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @variable(model, y, Infinite(t));\n\njulia> df = deriv(f, t)\n∂/∂t[f(t)]\n\njulia> meas = integral(y - f, t)\n∫{t ∈ [0, 10]}[y(t) - f(t)]\n\njulia> @constraint(model, y - f <= 0)\ny(t) - f(t) ≤ 0.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"We can also define parameter functions that depend on multiple infinite  parameters even use an anonymous function if prefer:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @infinite_parameter(model, x[1:2] in [-1, 1]);\n\njulia> @parameter_function(model, myname == (t, x) -> t + sum(x))\nmyname(t, x)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In many applications, we may also desire to define an array of parameter functions  that each use a different realization of some parent function by varying some  additional positional/keyword arguments. We readily support this behavior since  parameter functions can be defined with additional known arguments:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @parameter_function(model, pfunc_alt[i = 1:3] == t -> mysin(t, as[i], b = 0))\n3-element Vector{GeneralVariableRef}:\n pfunc_alt[1](t)\n pfunc_alt[2](t)\n pfunc_alt[3](t)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"The main recommended use case for parameter_function is that it is  amendable to defining complex anonymous functions via a do-block which is useful  for applications like defining a time-varied setpoint:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> setpoint = parameter_function(t, name = \"setpoint\") do t_supp\n                    if t_supp <= 5\n                        return 2.0\n                    else \n                        return 10.2\n                    end\n                 end\nsetpoint(t)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Please consult the following links for more information about defining parameter  functions: @parameter_function and parameter_function.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Beyond this, there are number of query and modification methods that can be  employed for parameter functions and these are detailed in the  technical manual Section below.","category":"page"},{"location":"guide/expression/#Variable-Hierarchy","page":"Expressions","title":"Variable Hierarchy","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Expressions employ variable reference types inherited from JuMP.AbstractVariableRef to form expression objects. InfiniteOpt uses a hierarchy of such types to organize the complexities associated with modeling infinite dimensional programs. The figure below summarizes this hierarchy of variable reference types where the abstract types are depicted in green and the concrete types are shown blue.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"(Image: tree)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In consistently with JuMP expression support, GeneralVariableRef exists as a variable reference type that is able to represent any of the above concrete subtypes of DispatchVariableRef. This allows the expression containers to be homogeneous in variable type. This is a paradigm shift from previous versions of InfiniteOpt that used the hierarchy of types directly to construct expressions. This behavior led to stability and performance limitations and thus a has been discontinued.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"However, the variable hierarchy is still used to create for variable methods. To accomplish this appropriate GeneralVariableRef dispatch methods are implemented (which are detailed in User Methods section at the bottom of this page) that utilize dispatch_variable_ref to create the appropriate concrete subtype of DispatchVariableRef and call the appropriate underlying method. These dispatch methods have been implemented for all public methods and the underlying methods are what are documented in the method manuals throughout the User Guide pages.","category":"page"},{"location":"guide/expression/#Affine-Expressions","page":"Expressions","title":"Affine Expressions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"An affine expression pertains to a mathematical function of the form:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"f_a(x) = a_1x_1 +  + a_nx_n + b","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"where x in mathbbR^n denote variables, a in mathbbR^n denote  coefficients, and b in mathbbR denotes a constant value. Such  expressions, are prevalent in any problem than involves linear constraints  and/or objectives.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In InfiniteOpt, affine expressions can be defined directly  using Julia's arithmetic operators (i.e., +, -, *, etc.) or using  @expression.  For example, let's define the expression  2y(t) + z - 3t noting that the following methods are equivalent:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @infinite_parameter(model, t in [0, 10])\nt\n\njulia> @variable(model, y, Infinite(t))\ny(t)\n\njulia> @variable(model, z)\nz\n\njulia> expr = 2y + z - 3t\n2 y(t) + z - 3 t\n\njulia> expr = 2 * y + z - 3 * t\n2 y(t) + z - 3 t\n\njulia> expr = @expression(model, 2y + z - 3t)\n2 y(t) + z - 3 t\n\njulia> typeof(expr)\nGenericAffExpr{Float64, GeneralVariableRef}","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Notice that coefficients to variables can simply be put alongside variables  without having to use the * operator. Also, note that all of these expressions  are stored in a container referred to as a GenericAffExpr which is a JuMP  object for storing affine expressions.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"note: Note\nWhere possible, it is preferable to use  @expression  for defining expressions as it is much more efficient than explicitly using  the standard operators.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"GenericAffExpr objects contain 2 fields which are:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"constant::CoefType The constant value of the affine expression.\nterms::OrderDict{VarType, CoefType} A dictionary mapping variables to coefficients.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"For example, let's see what these fields look like in the above example:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> expr.terms\nOrderedCollections.OrderedDict{GeneralVariableRef, Float64} with 3 entries:\n  y(t) => 2.0\n  z    => 1.0\n  t    => -3.0\n\njulia> expr.constant\n0.0","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Notice that the ordered dictionary preserves the order in which the variables  appear in the expression.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"More information can be found in the documentation for affine expressions in  JuMP.","category":"page"},{"location":"guide/expression/#Quadratic-Expressions","page":"Expressions","title":"Quadratic Expressions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"A quadratic function pertains to a mathematical function of the form:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"f_q(x) = a_1x_1^2 + a_2 x_1 x_2 +  + a_m x_n^2 + f_a(x)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"where x in mathbbR^n are the variables, f_a(x) mathbbR^n mapsto mathbbR is an affine function, and m = n(n+1)2 is the number of unique combinations of variables x. Like affine expressions, quadratic expressions can be defined via Julia's arithmetic operators or via @expression. For example, let's define 2y^2(t) - zy(t) + 42t - 3 using the following equivalent methods:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> expr = 2y^2 - z * y + 42t - 3\n2 y(t)² - z*y(t) + 42 t - 3\n\njulia> expr = @expression(model, 2y^2 - z * y + 42t - 3)\n2 y(t)² - y(t)*z + 42 t - 3\n\njulia> typeof(expr)\nGenericQuadExpr{Float64, GeneralVariableRef}","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Again, notice that coefficients need not employ *. Also, the object used to  store the expression is a GenericQuadExpr which is a JuMP object used for  storing quadratic expressions.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"GenericQuadExpr object contains 2 data fields which are:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"aff::GenericAffExpr{CoefType,VarType} An affine expression\nterms::OrderedDict{UnorderedPair{VarType}, CoefType} A dictionary mapping quadratic variable pairs to coefficients.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Here the UnorderedPair type is unique to JuMP and contains the fields:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"a::AbstractVariableRef One variable in a quadratic pair\nb::AbstractVariableRef The other variable in a quadratic pair.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Thus, this form can be used to store arbitrary quadratic expressions. For  example, let's look at what these fields look like in the above example:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> expr.aff\n42 t - 3\n\njulia> typeof(expr.aff)\nGenericAffExpr{Float64, GeneralVariableRef}\n\njulia> expr.terms\nOrderedCollections.OrderedDict{UnorderedPair{GeneralVariableRef}, Float64} with 2 entries:\n  UnorderedPair{GeneralVariableRef}(y(t), y(t)) => 2.0\n  UnorderedPair{GeneralVariableRef}(y(t), z)    => -1.0","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Notice again that the ordered dictionary preserves the order.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"tip: Tip\nPolynomial expressions can be represented by introducing dumby variables  and nested quadratic/affine expressions. For instance, z^3 + 2 can be  expressed by introducing a dumby variable x = z^2:julia> @variable(model, x)\nx\n\njulia> @constraint(model, x == z^2)\n-z² + x = 0.0\n\njulia> expr = @expression(model, z * x + 2)\nz*x + 2","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"More information can be found in the documentation for quadratic expressions in  JuMP.","category":"page"},{"location":"guide/expression/#Nonlinear-Expressions","page":"Expressions","title":"Nonlinear Expressions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"General nonlinear expressions as generated via JuMP.@NLexpression,  JuMP.@NLobjective, and/or JuMP.@NLconstraint macros in JuMP are not  currently for InfiniteOpt. This is because JuMP does not readily support  nonlinear extensions. However, a fundamental overhaul is planned to resolve this  problem (check the status on  GitHub).","category":"page"},{"location":"guide/expression/#Workarounds","page":"Expressions","title":"Workarounds","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In the meantime, this limitation can often be overcome by reformulating the  problem formulation. ","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"One common case involves expressions that entail integer powers that are greater  than 2. This can readily be remedied by adding placeholder variables. For example,  consider the expression z^2x - 3z. We can reformulate by introducing  z = z^2:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @variable(model, z_squared)\nz_squared\n\njulia> @constraint(model, z_squared == z^2)\n-z² + z_squared = 0.0\n\njulia> @expression(model, z_squared * x - 3z)\nz_squared*x - 3 z","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"We can also reformulate for a variety of nonlinear function types:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Function Example Reformulation Method\nSquare Root sqrtz Make a squared reformulation variable\nIndicator mathbb1_z geq alpha Use JuMP's indicator constraint syntax\nIndicator mathbb1_z geq alpha Replace with big-M constraints (reference)\nMax/Min max(z a) Linear programming cuts or big-m constraints (reference)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In other cases, it may be possible to use a formulation that uses vector  constraints. For example, it might be possible to model your problem using  semi-definite and/or conic constraints. ","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Also note that any nonlinearites that only involve infinite parameters (i.e.,  no decision variables) are enabled via parameter functions. See  Parameter Functions for more information.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"For problems that cannot be readily reformulated, JuMP can be used directly. In  this case the user will need to first transform the formulation into a finite  representation (e.g., discretize it). ","category":"page"},{"location":"guide/parameter/#inf_par_docs","page":"Infinite Parameters","title":"Infinite Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"A guide for infinite parameters in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/parameter/#Overview","page":"Infinite Parameters","title":"Overview","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Infinite parameters are what live on the infinite domains of infinite dimensional   mathematical optimization problems. In dynamic optimization this  corresponds to time and in stochastic optimization this to uncertain parameters  that follow a certain underlying statistical distribution. InfiniteOpt  considers natively two kinds of infinite parameters, ones defined over  continuous intervals and ones characterized by a distribution (others can be  added by defining a user-defined type). These can be used to parameterize  infinite variables, semi-infinite variables, point variables, derivatives,   measures, and can be used directly inside constraints. ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"note: Note\nPrevious versions of InfiniteOpt used the syntax  @infinite_parameter(model, ξ in distribution) for defining random infinite  parameters. This has been updated to  @infinite_parameter(model, ξ ~ distribution).","category":"page"},{"location":"guide/parameter/#Basic-Usage","page":"Infinite Parameters","title":"Basic Usage","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"First, we need to initialize and add infinite parameters to our InfiniteModel.  This can be accomplished using @infinite_parameter. For example, let's  define a parameter for time in a time interval from 0 to 10:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> using InfiniteOpt\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10])\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now t is a Julia variable that stores a GeneralVariableRef which  points to where the time parameter is stored in model. It can now be used with  infinite variables, derivatives, measures, and constraints as described in their   respective user guide sections.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"When the model is optimized, t will be transcribed (discretized) over its domain  following its support points. Users can specify support points via the   num_supports or supports keyword arguments. For example, if we desire to  have only 10 equi-distant supports then we could have instead defined t: ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], num_supports = 10)\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"More complex support schemes can be specified via supports such as:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0, 2, 7, 10])\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Where we specified t to use 4 supports: 0, 2, 7, and 10.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We can also add supports after t has been initialized. This can be accomplished  with add_supports. For example, consider the initial case where t has  no supports and we now wish to add 4 supports:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> add_supports(t, [0., 2.5, 7.5, 10.])\n\njulia> supports(t)\n4-element Vector{Float64}:\n  0.0\n  2.5\n  7.5\n 10.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Here only 4 supports are specified for the sake of example. Alternatively, we  could have initialized the parameter and added supports in just one step using  the supports keyword argument:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0., 2.5, 7.5, 10.])\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We could also define a random parameter described by a distribution. This can be  accomplished using @infinite_parameter in combination with a  distribution from  Distributions.jl. For  example let's define a vector of independent random parameters described by a  Normal distribution:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> using Distributions\n\njulia> @infinite_parameter(model, ξ[i = 1:3] ~ Normal(), independent = true)\n3-element Vector{GeneralVariableRef}:\n ξ[1]\n ξ[2]\n ξ[3]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that we use ~ instead of in when specifying distributions. We could have  used i as an index to assign a different distribution to each parameter.  Supports can also be specified for each parameter as shown above. Similarly, the  num_supports keyword is used to generate random supports.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"More interestingly, we can also define multi-variate random parameters, for example:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, θ[1:2] ~ MvNormal([0, 0], [1, 1]))\n2-element Vector{GeneralVariableRef}:\n θ[1]\n θ[2]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now we have infinite parameters t and ξ that are ready to be used in  defining infinite variables and constraints. We also mention here that the  @infinite_parameter macro is designed to closely emulate  JuMP.@variable and thus handles arrays and keyword arguments in the same way.  This is described in more detail below.","category":"page"},{"location":"guide/parameter/#Parameter-Definition","page":"Infinite Parameters","title":"Parameter Definition","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Defining/initializing an infinite parameter principally involves the following  steps (these are typically automated by @infinite_parameter):","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Define an AbstractInfiniteDomain\nDefine support points within the domain to later discretize the parameter\nConstruct an InfOptParameter to store this information\nAdd the InfOptParameter object to an InfiniteModel and assign a name\nCreate a GeneralVariableRef(s) that points to the parameter object","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Infinite domain definition is described above in the  Infinite Domains section. The supports should be  a vector of finite numbers that are drawn from the domain of the infinite domain.  These supports will be used to transcribe the InfiniteModel in preparation for  it to be optimized. If desired, the supports can be specified after the parameter  is defined and the support container of the defined parameter will be temporarily  empty.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"InfOptParameter is an abstract data type that encompasses all concrete  infinite parameter types. The concrete type for individual infinite parameters  is IndependentParameter, since these parameters are independent from  other parameters. On the other hand, DependentParameters handle  multivariate infinite parameters, within which each individual parameter is not  independent. These are useful for characterizing, for example, parameters  subject to multivariate distribution.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Regardless of the specific concrete type, the build_parameter function  is used to construct an InfOptParameter. For example, let's create a time  parameter t in 0 10 with supports [0, 2, 5, 7, 10]:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> domain = IntervalDomain(0, 10)\n[0, 10]\n\njulia> t_param = build_parameter(error, domain, supports = [0, 2, 5, 7, 10]);","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now that we have a InfOptParameter that contains an IntervalDomain and supports,  let's now add t_param to our InfiniteModel using add_parameter  and assign it the name of t: ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> t_ref = add_parameter(model, t_param, \"t\")\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We can also create an anonymous infinite parameter by dropping the name from  the add_parameter function call. For example:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> t_ref_noname = add_parameter(model, t_param)\nnoname","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now suppose we want to create an infinite parameter that is a random variable  with a given distribution. We follow the same procedure as above, except we use  distributions from Distributions.jl to define a UniDistributionDomain.  For example, let's consider a random variable x in mathcalN(01) with  supports [-0.5, 0.5]:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> dist = Normal(0., 1.)\nNormal{Float64}(μ=0.0, σ=1.0)\n\njulia> domain = UniDistributionDomain(dist)\nNormal{Float64}(μ=0.0, σ=1.0)\n\njulia> x_param = build_parameter(error, domain, supports = [-0.5, 0.5]);","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Again, we use add_parameter to add x_param to the InfiniteModel and  assign it the name x:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> x_ref = add_parameter(model, x_param, \"x\")\nx","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that add_parameter does not register the name of the parameters into the  model that it adds to. As shown in Macro Definition, the  macro definition does not allow for multiple parameters sharing the same name and  will throw an error if it happens.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For dependent parameters, we do not provide a publicly available build_parameter   method due to inherent complexities. Thus, it is recommended to construct these   using @infinite_parameter. However, these can be constructed manually  via the basic constructor for DependentParameters and then invoking  add_parameters. Note that this should be done with caution since most  error checking will be omitted in this case.","category":"page"},{"location":"guide/parameter/#param_macro","page":"Infinite Parameters","title":"Macro Definition","text":"","category":"section"},{"location":"guide/parameter/#One-Dimensional-Parameters","page":"Infinite Parameters","title":"One-Dimensional Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"One user-friendly way of defining infinite parameters is by macro  @infinite_parameter. The macro executes the same process as the  manual definition (steps listed in Parameter Definition), but allows  the users to manipulate several features of the defined infinite parameters.  Again, let's consider a time parameter t in 0 10 with supports  [0, 2, 5, 7, 10]. We use in (or ∈) to define the domain that an infinite  parameter is subject to (any InfiniteScalarDomain for single  parameters). For example, we can define t in 0 10:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0, 2, 5, 7, 10])\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In a similar way, we can define a random infinite parameter subject to some  distribution using ~ as the operator. For example, a Gaussian infinite  parameter with mean 0 and standard deviation 1 can be defined:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> using Distributions\n\njulia> dist = Normal(0., 1.)\nNormal{Float64}(μ=0.0, σ=1.0)\n\njulia> @infinite_parameter(model, ξ ~ dist, num_supports = 10)\nξ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For anonymous definition, we use either the domain or distribution keywords:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> t = @infinite_parameter(model, domain = [0, 10], supports = [0, 2, 5, 7, 10], \n                               base_name = \"t\")\nt\n\njulia> ξ = @infinite_parameter(model, distribution = dist, num_supports = 10, \n                               base_name = \"ξ\")\nξ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"All the definitions above return a GeneralVariableRef that refers to  the parameter object.","category":"page"},{"location":"guide/parameter/#Multi-Dimensional-Parameters","page":"Infinite Parameters","title":"Multi-Dimensional Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We can also define multi-dimensional infinite parameters in a concise way. For  example, consider a position parameter x in 0 1^3:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x[1:3] in [0, 1], independent = true, num_supports = 3)\n3-element Vector{GeneralVariableRef}:\n x[1]\n x[2]\n x[3]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Here we used independent = true to signify that each x[i] can be treated  independently. Hence, the overall infinite domain is the cartesian product of  their individual domains. In this example, we defined 3 supports for each x[i]  such that there will be 3^3 = 27 supports for the overall domain:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> supports(x[1])\n3-element Vector{Float64}:\n 0.0\n 0.5\n 1.0\n\njulia> supports(x)\n3×27 Matrix{Float64}:\n 0.0  0.5  1.0  0.0  0.5  1.0  0.0  0.5  …  1.0  0.0  0.5  1.0  0.0  0.5  1.0\n 0.0  0.0  0.0  0.5  0.5  0.5  1.0  1.0     0.0  0.5  0.5  0.5  1.0  1.0  1.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     1.0  1.0  1.0  1.0  1.0  1.0  1.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For multivariate random infinite parameters, we commonly wish their individual  domains to not be treated independently. Hence, we'll want independent = false  (the default value). For example, a 2-dimensional parameter  theta sim mathcalN(mu Sigma) is defined:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> dist = MvNormal([0, 0], [1 0; 0 2])\nFullNormal(\ndim: 2\nμ: [0.0, 0.0]\nΣ: [1.0 0.0; 0.0 2.0]\n)\n\njulia> @infinite_parameter(model, θ[1:2] ~ dist, num_supports = 3)\n2-element Vector{GeneralVariableRef}:\n θ[1]\n θ[2]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Here 3 supports are generated for all the parameters simultaneously according to  the distribution. ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> supports(θ)\n2×3 Matrix{Float64}:\n -0.353007  0.679107  0.586617\n -0.190712  1.17155   0.420496","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We refer to groups of parameters defined this way as dependent infinite  parameters. In principle, nonrandom infinite parameter types can be made  dependent as well when users wish to avoid the cartesian product of their  supports.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Anonymous groups of parameters can be defined as follows:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> x = @infinite_parameter(model, [1:3] in [0, 1], independent = true, \n                               num_supports = 3, base_name = \"x\")\n3-element Vector{GeneralVariableRef}:\n x[1]\n x[2]\n x[3]\n\njulia> θ = @infinite_parameter(model, [1:2] ~ dist, num_supports = 3, base_name = \"θ\")\n2-element Vector{GeneralVariableRef}:\n θ[1]\n θ[2]","category":"page"},{"location":"guide/parameter/#Containers-for-Multi-Dimensional-Parameters","page":"Infinite Parameters","title":"Containers for Multi-Dimensional Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Because we build on JuMP, we can use any indices we like when making containers  (e.g., arrays) for multi-dimensional parameters. For example, we can define:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x[i = [:a, :b]] in [0, 1])\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, [:a, :b]\nAnd data, a 2-element Vector{GeneralVariableRef}:\n x[a]\n x[b]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"See  JuMP's documentation on containers  for more information.","category":"page"},{"location":"guide/parameter/#Supports","page":"Infinite Parameters","title":"Supports","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For an infinite parameter, its supports are a finite set of points that the  parameter will take (or possibly take, if the parameter is random). During the  transcription stage, the supports specified will become part of the grid points  that approximate all functions parameterized by the infinite parameter.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Once an infinite parameter is defined, users can access the supports using  supports function:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0, 2, 5, 7, 10])\nt\n\njulia> supports(t)\n5-element Vector{Float64}:\n  0.0\n  2.0\n  5.0\n  7.0\n 10.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"note: Note\nMost support query functions have a keyword argument label that is used  the specify the type of supports that will be involved in the query. By default,  this will be PublicLabel which will correspond to any supports that are  reported to the user by default, but will exclude any supports that have  InternalLabels (e.g., internal collocation nodes). The full set can always  be obtained via label = All. We can also query more specific subsets of  support information with more specific labels such as label = UniformGrid.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We also provide functions that access other related information about the  supports. For example, has_supports checks whether a parameter has  supports, while num_supports gives the number of supports associated  with a parameter:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> has_supports(t)\ntrue\n\njulia> num_supports(t)\n5","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now suppose we want to add more supports to the t, which is already assigned  with some supports. We can use add_supports function to achieve this  goal:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> add_supports(t, [3, 8])\n\njulia> supports(t)\n7-element Vector{Float64}:\n  0.0\n  2.0\n  3.0\n  5.0\n  7.0\n  8.0\n 10.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"At times we might want to change the supports completely. In those cases, the  function set_supports resets the supports for a certain parameter with  new supports provided:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> set_supports(t, [0,3,5,8,10], force = true)\n\njulia> supports(t)\n5-element Vector{Float64}:\n  0.0\n  3.0\n  5.0\n  8.0\n 10.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that the keyword argument [force] must be set as [true] if the  parameter has been assigned with supports. Users can also delete all the  supports of a parameter with delete_supports.","category":"page"},{"location":"guide/parameter/#Automatic-Support-Generation-During-Parameter-Definition","page":"Infinite Parameters","title":"Automatic Support Generation During Parameter Definition","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For the examples in the Parameter Definition, we have seen how to  manually add supports to an infinite parameter. For a quick automatic  generation of support points, though, users do not have to input the support  points. Instead, the number of support points generated is supplied.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For an infinite parameter subject to an IntervalDomain, uniformly spaced  supports including both ends are generated across the interval. For example,  defining a time parameter t in 0 10 with 4 supports using  build_parameter gives","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> domain = IntervalDomain(0, 10)\n[0, 10]\n\njulia> t_param = build_parameter(error, domain, num_supports = 4, sig_digits = 3);","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Using macro definition we have","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], num_supports = 4, sig_digits = 3)\nt\n\njulia> supports(t)\n4-element Vector{Float64}:\n  0.0   \n  3.33\n  6.67\n 10.0   \n","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that the user can use the keyword argument sig_digits to dictate the  significant figures for the supports. The default value of sig_digits is 12.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For an infinite parameter that follows a univariate distribution,  supports are sampled from the underlying distribution. For example, we can  define an infinite parameter subject to a normal distribution with mean 0 and  variance 1:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x ~ Normal(), num_supports = 4)\nx\n\njulia> supports(x)\n4-element Vector{Float64}:\n -0.353007400301\n -0.134853871931\n  0.679107426036\n  0.8284134829  ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For multivariate distributions, though, we require support points are provided  in the definition. However, we can use fill_in_supports! to generate  supports for parameters following multivariate distributions. See  Automatic Support Generation For Defined Parameters for details.","category":"page"},{"location":"guide/parameter/#Automatic-Support-Generation-For-Defined-Parameters","page":"Infinite Parameters","title":"Automatic Support Generation For Defined Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"So far, we have seen that in both definition methods it is allowed to initialize  a parameter with no supports. This is done by not specifying supports and  num_supports. However, infinite parameters would not be allowed at the  transcription step since it needs information about how to discretize the  infinite parameters. In previous examples, we have shown that users can add  supports to a defined parameter using methods add_supports and  set_supports.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In this section we introduce automatic support generation for defined  parameters with no associated supports. This can be done using the  fill_in_supports! functions. fill_in_supports! can take as  argument a GeneralVariableRef or an  AbstractArray{<:GeneralVariableRef}, in which case it will generate  supports for the associated infinite parameter. Alternatively,  fill_in_supports! can also take an InfiniteModel as an  argument, in which case it will generate supports for all infinite parameters  of the InfiniteModel with no supports.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"The fill_in_supports! method allows users to specify integer keyword  arguments num_supports and sig_digits. num_supports dictates the  number of supports to be generated, and sig_digits dictates the significant  figures of generated supports desired. The default values are 10 and 12,  respectively.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"The ways by which supports are automatically generated are as follows. If the  parameter is in an IntervalDomain, then we generate an array of supports  that are uniformly distributed along the interval, including the two ends. For  example, consider a 3D position parameter x distributed in the unit cube  [0, 1]. We can generate supports for that point in the following way:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x[1:3] in [0, 1], independent = true);\n\njulia> fill_in_supports!.(x, num_supports = 3);\n\njulia> supports.(x)\n3-element Vector{Vector{Float64}}:\n [0.0, 0.5, 1.0]\n [0.0, 0.5, 1.0]\n [0.0, 0.5, 1.0]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that the dot syntax because fill_in_supports! takes single  GeneralVariableRef as argument. In each dimension, three equally spaced  supports ([0.0, 0.5, 1.0]) are generated. Since the independent keyword is  set as true, the transcription stage will create a three-dimensional grid for  all variables parameterized by x, with each point separated by 0.5 units in  each dimension. We can view this grid by simply invoking supports without the   vectorized syntax:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> supports(x)\n3×27 Matrix{Float64}:\n 0.0  0.5  1.0  0.0  0.5  1.0  0.0  0.5  …  1.0  0.0  0.5  1.0  0.0  0.5  1.0\n 0.0  0.0  0.0  0.5  0.5  0.5  1.0  1.0     0.0  0.5  0.5  0.5  1.0  1.0  1.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     1.0  1.0  1.0  1.0  1.0  1.0  1.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"If the parameter is in a UniDistributionDomain or  MultiDistributionDomain, fill_in_supports!  samples num_supports supports from the distribution. Recall that support  generation is not allowed for parameters under multivariate distribution during  parameter definition. However, if the parameter is defined first without  supports, fill_in_supports! allows for supports generation. For  example, for a 2D random variable ξ under a multivariate Gaussian  distribution, we can generate supports for it in the following way:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> dist = MvNormal([0., 0.], [1. 0.; 0. 2.])\nFullNormal(\ndim: 2\nμ: [0.0, 0.0]\nΣ: [1.0 0.0; 0.0 2.0]\n)\n\n\njulia> @infinite_parameter(model, ξ[1:2] ~ dist);\n\njulia> fill_in_supports!(ξ, num_supports = 3)\n\njulia> supports(ξ)\n2×3 Matrix{Float64}:\n -0.353007  0.679107  0.586617\n -0.190712  1.17155   0.420496","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that fill_in_supports! only fill in supports for parameters with no  associated supports. To modify the supports of parameters already associated  with some supports, refer to Supports for how to do that.","category":"page"},{"location":"guide/parameter/#Parameter-Queries","page":"Infinite Parameters","title":"Parameter Queries","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In addition to the modeling framework, this package provides many functions for  users to access information about the model. This section will go over basic  functions for accessing parameter information.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Once a (possibly large-scale) InfiniteModel is built, the users might want to  check if an infinite parameter is actually used in any way. This could be  checked by is_used function as follows:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x in [0, 1])\nx\n\njulia> is_used(x)\nfalse\n","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"This function checks if the parameter is used by any constraint, measure, or  variable. In a similar way, functions used_by_constraint,  used_by_measure and used_by_infinite_variable can be applied to  find out any dependency of specific types on the infinite parameter.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In addition, sometimes we need to check if a certain GeneralVariableRef  for an infinite parameter is valid with an InfiniteModel model, meaning that the  parameter reference actually refers to some parameter associated with the model. We  extend the JuMP.is_valid function from JuMP for that purpose. To see how  to use this, for example,","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> pref1 = GeneralVariableRef(model, 1, IndependentParameterIndex);\n\njulia> pref2 = GeneralVariableRef(model, 2, IndependentParameterIndex);\n\njulia> is_valid(model, pref1)\ntrue\n\njulia> is_valid(model, pref2)\nfalse","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"The second call of is_valid returns false because the model does  not have parameter with index 2 yet.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We can also access different information about the domain that the infinite  parameter is in. This is given by infinite_domain, which takes a  [GeneralVariableRef] as argument. For example, we have","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> infinite_domain(x)\n[0, 1]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"infinite_domain might be more useful if the infinite parameter is in a  UniDistributionDomain or MultiDistributionDomain, by which users  can access information about the underlying distribution. On the other hand,  if we already know that the parameter is in an interval domain, we can use  JuMP.has_lower_bound, JuMP.lower_bound,  JuMP.has_upper_bound, JuMP.upper_bound to retrieve information  about the interval domain in a more specific way:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> has_lower_bound(x)\ntrue\n\njulia> lower_bound(x)\n0.0\n\njulia> has_upper_bound(x)\ntrue\n\njulia> upper_bound(x)\n1.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"A quick way for users to obtain a GeneralVariableRef for a parameter with  a known name would be through parameter_by_name function. This  function takes an InfiniteModel and the parameter name in string,  and returns a GeneralVariableRef for that parameter. For example, ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> pref = parameter_by_name(model, \"x\")\nx","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"If there is no parameter associated with that name, the function would return  nothing. Otherwise, if multiple parameters share the same name, the function  would throw an error.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now we introduce two additional functions that we can use to access parameter  information for an  InfiniteModel. The function  num_parameters returns the number of infinite parameters associated  with a model, while all_parameters returns the list of all infinite  parameter references in the model. For a quick example: ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, y[1:2] in [0, 5])\n2-element Vector{GeneralVariableRef}:\n y[1]\n y[2]\n\njulia> num_parameters(model)\n3\n\njulia> all_parameters(model)\n3-element Vector{GeneralVariableRef}:\n x   \n y[1]\n y[2]","category":"page"},{"location":"guide/parameter/#Parameter-Modification","page":"Infinite Parameters","title":"Parameter Modification","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In this section we introduce a few shortcuts for users to modify defined  infinite parameters.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"First, once an infinite parameter is defined, we can change its name by calling  the [JuMP.set_name] function, which takes the [GeneralVariableRef] of  the parameter that needs a name change and the name string as arguments. For  example, to change the parameter x to t we can do:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> JuMP.set_name(x, \"t\")\n\njulia> all_parameters(model)\n3-element Vector{GeneralVariableRef}:\n t   \n y[1]\n y[2]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In a similar way, we can also change the infinite domain that the parameter is in  using the set_infinite_domain function as follows:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> t = parameter_by_name(model, \"t\")\nt\n\njulia> set_infinite_domain(t, IntervalDomain(0, 5))\n\njulia> infinite_domain(t)\n[0, 5]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For parameters in an IntervalDomain, we extend  JuMP.set_lower_bound and JuMP.set_upper_bound functions  for users to modify the lower bounds and upper bounds. For example,","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> JuMP.set_lower_bound(t, 1)\n\njulia> JuMP.set_upper_bound(t, 4)\n\njulia> infinite_domain(t)\n[1, 4]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We do not support setting lower bounds and upper bounds for random parameters  in a UniDistributionDomain and will throw an error if users attempt to do  so. If users want to set lower bound and upper bound for a random infinite  parameter, consider using Distributions.Truncated, which creates a truncated  distribution from a univariate distribution.","category":"page"},{"location":"guide/parameter/#gen_supp_docs","page":"Infinite Parameters","title":"Generative Supports","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Generative supports denote supports that are generated based on existing supports   (treated as finite elements). These are important for enabling certain measure   and derivative evaluation schemes. Examples of such supports include internal   collocation nodes and quadrature supports generated for quadrature methods that  decompose the infinite domain such that existing supports are incorporated. Users  shouldn't modify these directly, but extension writers will need to utilize the  generative support API when developing measures and/or derivative evaluation  methods that need to generate supports based on existing ones (e.g., adding  a new orthogonal collocation method). More information about extension writing  for either case is given on the Extensions page. For enhanced context, we  outline the general API below.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Information about producing generative supports are stored via concrete subtypes  of AbstractGenerativeInfo. Each IndependentParameter stores one of  these objects (the default being NoGenerativeSupports). Hence, a  particular independent parameter can only be associated with 1 generative support  scheme. We currently provide 1 concrete generative subtype of  AbstractGenerativeInfo which is UniformGenerativeInfo.  UniformGenerativeInfo stores the necessary information to make generative  supports that are uniformly applied to each finite element formed by the existing  supports. For example, let's say we want to use a generative support scheme that  adds 1 generative support exactly in the middle of each finite element with a  unique support label to we'll call MyGenLabel:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> struct MyGenLabel <: InfiniteOpt.InternalLabel end;\n\njulia> UniformGenerativeInfo([0.5], MyGenLabel)\nUniformGenerativeInfo([0.5], MyGenLabel)","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Users can make other generative support schemes as described on the Extensions  page. ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"These AbstractGenerativeInfo objects are added to parameters as needed via the  addition of measures and/or derivative methods that require generative supports.  We can always check what generative information is currently associated with a  particular parameter via generative_support_info.  The generation of these supports is handled automatically at the appropriate  times via add_generative_supports. We can always check if generative  supports have been created for a particular parameter with  has_generative_supports.","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Stochastic Optimization/flexible_design.jl\"","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/#Power-Network-Flexibility-Design","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"","category":"section"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"Here we consider a stochastic flexibility design problem that is inspired from an example problem in Pulsipher JL, Zavala VM. A scalable stochastic programming approach for the design of flexible systems. Computers & Chemical Engineering. 2019 Sep 2;128:69-76. See the paper here.","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/#Modeling-and-Solution","page":"Power Network Flexibility Design","title":"Modeling and Solution","text":"","category":"section"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"using InfiniteOpt, Clp, Distributions\n\n# Set the covariance matrix for the uncertain parameters\nθ_nom = [0.; 60.; 10.]\ncovar = [80. 0 0; 0 80. 0; 0 0 120.]\n\n# Set the dimensions\nn_z = 3; n_θ = 3; n_d = 3\n\n# Set the problem parameters\nc = ones(n_d) / sqrt(n_d)\nc_max = 5\nU = 10000\nnum_samples = 100 # more should be used (kept small for doc generation)\n\n# Initialize the model\nm = InfiniteModel(Clp.Optimizer)\nset_silent(m)\n\n# Set the uncertainty parameters\n@infinite_parameter(m, θ[i = 1:n_θ] ~ MvNormal(θ_nom, covar),\n                    num_supports = num_samples)\n\n# Initialize the variables\n@variable(m, 0 <= y <= 1, Infinite(θ))\n@variable(m, z[1:n_z], Infinite(θ))\n@variable(m, d[1:n_d] >= 0)\n\n# Set objective function\n@objective(m, Max, expect(1 - y, θ))\n\n# Set the line capacity constraints\n@constraint(m, f1, -z[1] - 35 - d[1] <= y * U)\n@constraint(m, f2, z[1] - 35 - d[1] <= y * U)\n@constraint(m, f3, -z[2] - 50 - d[2] <= y * U)\n@constraint(m, f4, z[1] - 50 - d[2] <= y * U)\n\n# Set the generator capacity constraints\n@constraint(m, f5, -z[3] <= y * U)\n@constraint(m, f6, z[3] - 100 - d[3] <= y * U)\n\n# Set the node balance constraints\n@constraint(m, h1, z[1] - θ[1] == 0)\n@constraint(m, h2, -z[1] -z[2] + z[3] - θ[2] == 0)\n@constraint(m, h3, z[2] - θ[3] == 0)\n\n# Enforce the minimum SF\n@constraint(m, max_cost, sum(c[i] * d[i] for i = 1:n_d) <= c_max)\n\n# Solve and and obtain results\noptimize!(m)\nif has_values(m)\n    opt_y = value(y)\n    opt_d = value.(d)\n    opt_obj = objective_value(m)\nend\n\n# Estimate the value of SF\nSF = 1 - sum(opt_y .>= 1e-8) / num_samples\n\n# Print the results\nprint(\"------------------RESULTS------------------\\n\")\nprint(\"Optimal Objective:     \", opt_obj, \"\\n\")\nprint(\"Optimal Cost:          \", sum(c[i] * opt_d[i] for i = 1:n_d), \"\\n\")\nprint(\"Maximum Cost:          \", c_max, \"\\n\")\nprint(\"Predicted SF:          \", 100 * SF, \"%\\n\")\nprint(\"Optimal Design Values: \", opt_d, \"\\n\\n\")","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"------------------RESULTS------------------\nOptimal Objective:     0.9999865533882265\nOptimal Cost:          5.0\nMaximum Cost:          5\nPredicted SF:          98.0%\nOptimal Design Values: [0.0, 0.0, 8.660254037844386]\n\n","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/#Maintenance-Tests","page":"Power Network Flexibility Design","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"using Test\n@test termination_status(m) == MOI.OPTIMAL\n@test opt_y isa Vector{<:Real}","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"Test Passed","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/derivative/#deriv_manual","page":"Derivatives","title":"Derivative Operators","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"A technical manual for derivatives in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/derivative/#Definition","page":"Derivatives","title":"Definition","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"deriv\n∂\n@deriv\n@∂\nDeriv\nJuMP.build_variable(::Function, ::JuMP.VariableInfo, ::Deriv)\nbuild_derivative\nDerivative\nadd_derivative\nDerivativeIndex\nDerivativeRef","category":"page"},{"location":"manual/derivative/#InfiniteOpt.deriv","page":"Derivatives","title":"InfiniteOpt.deriv","text":"deriv(expr::JuMP.AbstractJuMPScalar, pref1::GeneralVariableRef[, ....]\n      )::Union{JuMP.AbstractJuMPScalar, Float64}\n\nApply appropriate calculus methods to define and return the derivative expression of expr  with respect to the infinite parameter(s) pref1, pref2, etc. in that respective  order. This will implicilty build and add individual [Derivative`](@ref)s as  appropriate. Errors if no infinite parameter is given or if the parameters are  not infinite.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 1])\nt\n\njulia> @variable(m, x, Infinite(t))\nx(t)\n\njulia> @variable(m, z)\nz\n\njulia> deriv_expr = deriv(x^2 + z, t, t)\n2 ∂/∂t[∂/∂t[x(t)]]*x(t) + 2 ∂/∂t[x(t)]²\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.∂","page":"Derivatives","title":"InfiniteOpt.∂","text":"∂(expr::JuMP.AbstractJuMPScalar, pref1::GeneralVariableRef[, ....]\n  )::Union{JuMP.AbstractJuMPScalar, Float64}\n\nThis serves as a convenient unicode wrapper for deriv. The ∂ is  produced via \\partial.\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.@deriv","page":"Derivatives","title":"InfiniteOpt.@deriv","text":"@deriv(expr, pref_expr1[, ...]\n       )::Union{JuMP.AbstractJuMPScalar, Float64}\n\nThe macro variant of deriv that is more efficient for expression building  and enables symbolic differential operator parameter defintions via pref_exprs.  Like deriv expr can be any InfiniteOpt expression and the appropriate calculus  rules will applied to expr to take its derivative with respect to the indicated  infinite parameters detailed by the pref_exprs. The resulting derivative  expression will contain individual derivatives that were created and added to the  InfiniteModel as needed. Here each pref_expr arugment can be of the form:\n\npref::GeneralVariableRef: An indiviudal infinite parameter reference\n(pref::GeneralVariableRef)^(p::Int): An infinite parameter applied p times.\n\nThus, the syntax @deriv(expr, pref^2) is equivalent to @deriv(expr, pref, pref). \n\nThis will error if pref_expr is an unrecongnized syntax, no infinite parameter  is given, or if any of the specified parameters are not infinite.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 1])\nt\n\njulia> @variable(m, x, Infinite(t))\nx(t)\n\njulia> @variable(m, z)\nz\n\njulia> deriv_expr = @deriv(x^2 + z, t^2)\n2 ∂/∂t[∂/∂t[x(t)]]*x(t) + 2 ∂/∂t[x(t)]²\n\n\n\n\n\n","category":"macro"},{"location":"manual/derivative/#InfiniteOpt.@∂","page":"Derivatives","title":"InfiniteOpt.@∂","text":"@∂(expr, pref_expr1[, ...])::Union{JuMP.AbstractJuMPScalar, Float64}\n\nThis serves as a convenient unicode wrapper for @deriv. The ∂ is  produced via \\partial.\n\n\n\n\n\n","category":"macro"},{"location":"manual/derivative/#InfiniteOpt.Deriv","page":"Derivatives","title":"InfiniteOpt.Deriv","text":"Deriv{V, P} <: InfOptVariableType\n\nA DataType to assist in making derivative variables. This can be passed as an  extra argument to @variable to make such a variable: \n\n@variable(model, var_expr, Deriv(inf_var, inf_par), kwargs...)\n\nHere inf_var is the infinite variable that is being operated on and inf_par  is the infinite parameter that the derivative is defined with respect to.\n\nFields\n\nargument::V: The infinite variable being operated on.\noperator_parameter::P: The infinite parameter that determines the derivative.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#JuMP.build_variable-Tuple{Function, VariableInfo, Deriv}","page":"Derivatives","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, info::JuMP.VariableInfo, \n                    var_type::Deriv)::InfiniteVariable{GeneralVariableRef}\n\nBuild and return a first order derivative based on info and var_type. Errors  if the information in var_type is invalid. See Deriv for more  information.\n\nExample\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> deriv_var = build_variable(error, info, Deriv(y, t));\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.build_derivative","page":"Derivatives","title":"InfiniteOpt.build_derivative","text":"build_derivative(_error::Function, info::JuMP.VariableInfo, \n                 argument_ref::GeneralVariableRef, \n                 parameter_ref::GeneralVariableRef\n                 )::Derivative\n\nConstructs and returns a Derivative with a differential operator that  depends on parameter_ref and operates on argument_ref. Variable info can also  be provided to associate this derivative with bounds and a starting value function  like that of infinite variables. Errors when argument_ref is not an  infinite/semi-infinite variable or derivative that depends on parameter_ref.\n\nExample ```julia-repl  julia> @infiniteparameter(m, t in [0, 1]); @infinitevariable(m, x(t));\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, false, 0, false, false);\n\njulia> buildderivative(error, info, x, t) Derivative{GeneralVariableRef}(VariableInfo{Float64,Float64,Float64,Function}(false, 0.0, false, 0.0, false, 0.0, false, startfunc, false, false), true, x(t), t) ````\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.Derivative","page":"Derivatives","title":"InfiniteOpt.Derivative","text":"Derivative{F <: Function, V <: GeneralVariableRef} <: JuMP.AbstractVariable\n\nA DataType for storing core infinite derivative information. This follows a  derivative of the form: fracpartial x(alpha hdots)partial alpha  where x(alpha hdots) is an infinite variable and alpha is an infinite  parameter. Here, both x and alpha must be scalars. \n\nIt is important to note that info.start should contain a start value function that generates the start value for a given infinite parameter support. This function should map a support to a start value using user-formatting if is_vector_start = false, otherwise it should do the mapping using a single support vector as input. Also, the variable reference type V must pertain to infinite variables and parameters.\n\nFields\n\ninfo::JuMP.VariableInfo{Float64, Float64, Float64, F}: JuMP variable information.\nis_vector_start::Bool: Does the start function take support values formatted as vectors?\nvariable_ref::V: The variable reference of the infinite variable argument.\nparameter_ref::V: The variable reference of the infinite parameter the defines the  differential operator.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.add_derivative","page":"Derivatives","title":"InfiniteOpt.add_derivative","text":"add_derivative(model::InfiniteModel, d::Derivative, \n               [name::String = \"\"])::GeneralVariableRef\n\nAdds a derivative d to model and returns a GeneralVariableRef that points  to it. Errors if the derivative dependencies do not belong to model. Note that  d should be built using build_derivative to avoid nuance internal  errors.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 1]); @variable(m, x, Infinite(t));\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, false, 0, false, false);\n\njulia> d = build_derivative(error, info, x, t);\n\njulia> dref = add_derivative(m, d)\n∂/∂t[x(t)]\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.DerivativeIndex","page":"Derivatives","title":"InfiniteOpt.DerivativeIndex","text":"DerivativeIndex <: ObjectIndex\n\nA DataType for storing the index of a Derivative.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.DerivativeRef","page":"Derivatives","title":"InfiniteOpt.DerivativeRef","text":"DerivativeRef <: DispatchVariableRef\n\nA DataType for untranscripted derivative references.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::DerivativeIndex: Index of the derivative in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#Queries","page":"Derivatives","title":"Queries","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"derivative_argument(::DerivativeRef)\noperator_parameter(::DerivativeRef)\nnum_derivatives\nall_derivatives\nparameter_refs(::DerivativeRef)\nparameter_list(::DerivativeRef)\nraw_parameter_refs(::DerivativeRef)","category":"page"},{"location":"manual/derivative/#InfiniteOpt.derivative_argument-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.derivative_argument","text":"derivative_argument(dref::DerivativeRef)::GeneralVariableRef\n\nReturns the infinite variable/derivative reference that is the input the differential operator (i.e., the dependent variable of the derivative).\n\nExample\n\njulia> derivative_argument(dref) \nx(t)\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.operator_parameter-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.operator_parameter","text":"operator_parameter(dref::DerivativeRef)::GeneralVariableRef\n\nReturns the infinite parameter reference that is what the differential operator  is operating with respect to (i.e., the independent  variable of the derivative).\n\nExample\n\njulia> operator_parameter(dref) \nt\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.num_derivatives","page":"Derivatives","title":"InfiniteOpt.num_derivatives","text":"num_derivatives(model::InfiniteModel)::Int\n\nReturns the number of derivatives that have been defined in model. Note that  nested derivatives will be counted in accordance with their components (e.g.,  fracd^2 x(t)dt^2 =\\frac{d}{dt}\\left(\\frac{d x(t)}{dt} \\right)``  will count as 2 derivatives.)\n\nExample\n\njulia> num_derivatives(model)\n12\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.all_derivatives","page":"Derivatives","title":"InfiniteOpt.all_derivatives","text":"all_derivatives(model::InfiniteModel)::Vector{GeneralVariableRef}\n\nReturns a list of all the individual derivatives stored in model. \n\nExample\n\njulia> all_derivatives(model)\n3-element Array{GeneralVariableRef,1}:\n ∂/∂t[T(x, t)]\n ∂/∂x[T(x, t)]\n ∂/∂x[∂/∂x[T(x, t)]]\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.parameter_refs-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(dref::DerivativeRef)::Tuple\n\nReturn the parameter references associated with the infinite derivative dref. This is formatted as a Tuple of containing the parameter references as they inputted to define dref.\n\nExample\n\njulia> parameter_refs(deriv)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.parameter_list-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.parameter_list","text":"parameter_list(dref::DerivativeRef)::Vector{GeneralVariableRef}\n\nReturn a vector of the parameter references that dref depends on. This is primarily an internal method where parameter_refs is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.raw_parameter_refs-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refs(dref::DerivativeRef)::VectorTuple\n\nReturn the raw VectorTuple of the  parameter references that dref depends on. This is primarily an internal method  where parameter_refs  is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#Modification","page":"Derivatives","title":"Modification","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"set_start_value_function(::DerivativeRef,::Union{Real, Function})\nreset_start_value_function(::DerivativeRef)","category":"page"},{"location":"manual/derivative/#InfiniteOpt.set_start_value_function-Tuple{DerivativeRef, Union{Function, Real}}","page":"Derivatives","title":"InfiniteOpt.set_start_value_function","text":"set_start_value_function(dref::DerivativeRef,\n                         start::Union{Real, Function})::Nothing\n\nSet the start value function of dref. If start::Real then a function is generated to such that the start value will be start for the entire infinite domain. If start::Function then this function should map to a scalar start value given a support value arguments matching the format of the parameter elements in parameter_refs(dref).\n\nExample\n\njulia> set_start_value_function(dref, 1) # all start values will be 1\n\njulia> set_start_value_function(dref, my_func) # each value will be made via my_func\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.reset_start_value_function-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.reset_start_value_function","text":"reset_start_value_function(dref::DerivativeRef)::Nothing\n\nRemove the existing start value function and return to the default. Generally, this is triggered by deleting an infinite parameter that dref depends on.\n\nExample\n\njulia> reset_start_value_function(dref)\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#Evaluation","page":"Derivatives","title":"Evaluation","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"AbstractDerivativeMethod\nGenerativeDerivativeMethod\nOrthogonalCollocation\nNonGenerativeDerivativeMethod\nFiniteDifference\nFDTechnique\nForward\nCentral\nBackward\nderivative_method(::DerivativeRef)\nset_derivative_method(::IndependentParameterRef, ::NonGenerativeDerivativeMethod)\nset_derivative_method(::DependentParameterRef, ::AbstractDerivativeMethod)\nset_all_derivative_methods\nevaluate(::DerivativeRef)\nevaluate_all_derivatives!\nhas_derivative_constraints(::DerivativeRef)\nderivative_constraints(::DerivativeRef)\ndelete_derivative_constraints(::DerivativeRef)\nevaluate_derivative\ngenerative_support_info(::AbstractDerivativeMethod)\nsupport_label(::AbstractDerivativeMethod)\nInfiniteOpt.make_reduced_expr","category":"page"},{"location":"manual/derivative/#InfiniteOpt.AbstractDerivativeMethod","page":"Derivatives","title":"InfiniteOpt.AbstractDerivativeMethod","text":"AbstractDerivativeMethod\n\nAn abstract type for storing derivative evaluation data that is pertinent to its  reformation/transcription. \n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.GenerativeDerivativeMethod","page":"Derivatives","title":"InfiniteOpt.GenerativeDerivativeMethod","text":"GenerativeDerivativeMethod <: AbstractDerivativeMethod\n\nAn abstract type for derivative evaluation method types that will require support  generation when employed (e.g., internal node points associated with orthogonal  collocation). Such methods can be used with derivatives that depend on independent  infinite parameters, but cannot be used for ones that depend on dependent parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.OrthogonalCollocation","page":"Derivatives","title":"InfiniteOpt.OrthogonalCollocation","text":"OrthogonalCollocation{Q <: MeasureToolbox.AbstractUnivariateMethod\n                      } <: GenerativeDerivativeMethod\n\nA DataType for storing information about orthogonal collocation over finite  elements to approximate derivatives. The constructor is of the form:\n\n    OrthogonalCollocation(num_nodes::Int, \n                          [quad::AbstractUnivariateMethod = GaussLobatto])\n\nFields\n\nnum_nodes::Int: The number of collocation points (nodes) per finite element.\nquadrature_method::Q: The quadrature method uses to choose the collocation points.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.NonGenerativeDerivativeMethod","page":"Derivatives","title":"InfiniteOpt.NonGenerativeDerivativeMethod","text":"NonGenerativeDerivativeMethod <: AbstractDerivativeMethod\n\nAn abstract type for derivative evaluation method types that do not require the  definition of additional support points. Such methods are amendable to any  derivative in InfiniteOpt including those with dependent infinite parameter  dependencies.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.FiniteDifference","page":"Derivatives","title":"InfiniteOpt.FiniteDifference","text":"FiniteDifference{T <: FDTechnique} <: NonGenerativeDerivativeMethod\n\nA DataType for information about finite difference method applied to  a derivative evaluation. Note that the constructor is of the form:\n\n    FiniteDifference([technique::FDTechnique = Backward()],\n                     [add_boundary_constr::Bool = true])\n\nwhere technique is the indicated finite difference method to be applied and  add_boundary_constr indicates if the finite difference equation corresponding to  a boundary support should be included. Thus, for backward difference since corresponds to the terminal point and for forward difference this corresponds to  the initial point. We recommend using add_boundary_constr = false when an final  condition is given with a backward method or when an initial condition is given  with a forward method. Note that this argument is ignored for central finite  difference which cannot include any boundary points.\n\nFields \n\ntechnique::T: Mathematical technqiue behind finite difference\nadd_boundary_constraint::Bool: Indicate if the boundary constraint should be  included in the transcription (e.g., the terminal boundary backward equation for  backward difference)\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.FDTechnique","page":"Derivatives","title":"InfiniteOpt.FDTechnique","text":"FDTechnique\n\nAn abstract data type for labels of specific techniques applied in the finite  difference method in derivative evaluation.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.Forward","page":"Derivatives","title":"InfiniteOpt.Forward","text":"Forward <: FDTechnique\n\nA technique label for finite difference method that implements a forward  difference approximation.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.Central","page":"Derivatives","title":"InfiniteOpt.Central","text":"Central <: FDTechnique\n\nA technique label for finite difference method that implements a central  difference approximation.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.Backward","page":"Derivatives","title":"InfiniteOpt.Backward","text":"Backward <: FDTechnique\n\nA technique label for finite difference method that implements a backward  difference approximation.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.derivative_method-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.derivative_method","text":"derivative_method(dref::DerivativeRef)::AbstractDerivativeMethod\n\nReturns the evaluation method employed by dref that determines the numerical  computation scheme that will be used to evaluate the derivative. Note that this  is set on by the infinite parameter with respect to which the derivative is  defined.\n\nExample\n\njulia> derivative_method(dref) \nFiniteDifference(Backward, true)\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.set_derivative_method-Tuple{IndependentParameterRef, NonGenerativeDerivativeMethod}","page":"Derivatives","title":"InfiniteOpt.set_derivative_method","text":"set_derivative_method(pref::IndependentParameterRef, \n                      method::AbstractDerivativeMethod)::Nothing\n\nSpecfies the desired derivative evaluation method method for derivatives that are  taken with respect to pref. Any internal supports exclusively associated with  the previous method will be deleted. Also, if any derivatives were evaluated  manually, the associated derivative evaluation constraints will be deleted. Errors  if new derivative method generates supports that are incompatible with existing  measures.\n\nExample\n\njulia> set_derivative_method(d, OrthogonalCollocation(2))\n\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.set_derivative_method-Tuple{DependentParameterRef, AbstractDerivativeMethod}","page":"Derivatives","title":"InfiniteOpt.set_derivative_method","text":"set_derivative_method(pref::DependentParameterRef, \n                      method::NonGenerativeDerivativeMethod)::Nothing\n\nSpecfies the desired derivative evaluation method method for derivatives that are  taken with respect to pref. Errors if method is generative (i.e., it requires  the definition of additional supports)\n\nExample\n\njulia> set_derivative_method(d, FiniteDifference())\n\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.set_all_derivative_methods","page":"Derivatives","title":"InfiniteOpt.set_all_derivative_methods","text":"set_all_derivative_methods(model::InfiniteModel, \n                           method::AbstractDerivativeMethod)::Nothing\n\nSets the desired evaluation method method for all the derivatives currently added  to model. Note that this is done with respect to the infinite parameters. Errors  if a generative method is specified and the model contains dependent parameters.\n\nExample\n\njulia> set_all_derivative_methods(model, OrthogonalCollocation(2))\n\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.evaluate-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.evaluate","text":"evaluate(dref::DerivativeRef)::Nothing\n\nNumerically evaluate dref by computing its auxiliary derivative constraints  (e.g., collocation equations) and add them to the model. For normal usage, it is  recommended that this method not be called directly and instead have TranscriptionOpt  handle these equations. Errors if evaluate_derivative is not  defined for the derivative method employed.\n\nThe resulting constraints can be accessed via derivative_constraints.\n\nExample\n\njulia> m = InfiniteModel(); @infinite_parameter(m, t in [0,2]); @variable(m, T, Infinite(t));\n\njulia> dref = @deriv(T,t)\n∂/∂t[T(t)]\n\njulia> add_supports(t, [0, 0.5, 1, 1.5, 2])\n\njulia> evaluate(dref)\n\njulia> derivative_constraints(dref)\nFeasibility\n4-element Array{InfOptConstraintRef,1}:\n 0.5 ∂/∂t[T(t)](0.5) - T(0.5) + T(0) = 0.0\n 0.5 ∂/∂t[T(t)](1) - T(1) + T(0.5) = 0.0\n 0.5 ∂/∂t[T(t)](1.5) - T(1.5) + T(1) = 0.0\n 0.5 ∂/∂t[T(t)](2) - T(2) + T(1.5) = 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.evaluate_all_derivatives!","page":"Derivatives","title":"InfiniteOpt.evaluate_all_derivatives!","text":"evaluate_all_derivatives!(model::InfiniteModel)::Nothing\n\nEvaluate all the derivatives in model by adding the corresponding auxiliary  equations to model. See evaluate for more information.\n\nExample\n\njulia> m = InfiniteModel();\n\njulia> @infinite_parameter(m, t in [0,2], supports = [0, 1, 2]);\n\njulia> @infinite_parameter(m, x in [0,1], supports = [0, 0.5, 1]);\n\njulia> @variable(m, T, Infinite(x, t));\n\njulia> dref1 = @deriv(T, t); dref2 = @deriv(T, x^2);\n\njulia> evaluate_all_derivatives!(m)\n\njulia> print(m)\nFeasibility\nSubject to\n ∂/∂t[T(x, t)](x, 1) - T(x, 1) + T(x, 0) = 0.0, ∀ x ∈ [0, 1]\n ∂/∂t[T(x, t)](x, 2) - T(x, 2) + T(x, 1) = 0.0, ∀ x ∈ [0, 1]\n 0.5 ∂/∂x[T(x, t)](0.5, t) - T(0.5, t) + T(0, t) = 0.0, ∀ t ∈ [0, 2]\n 0.5 ∂/∂x[T(x, t)](1, t) - T(1, t) + T(0.5, t) = 0.0, ∀ t ∈ [0, 2]\n 0.5 ∂/∂x[∂/∂x[T(x, t)]](0.5, t) - ∂/∂x[T(x, t)](0.5, t) + ∂/∂x[T(x, t)](0, t) = 0.0, ∀ t ∈ [0, 2]\n 0.5 ∂/∂x[∂/∂x[T(x, t)]](1, t) - ∂/∂x[T(x, t)](1, t) + ∂/∂x[T(x, t)](0.5, t) = 0.0, ∀ t ∈ [0, 2]\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.has_derivative_constraints-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.has_derivative_constraints","text":"has_derivative_constraints(dref::DerivativeRef)::Bool\n\nReturn a Bool whether dref has been evaluated within the InfiniteModel and  has derivative constraints that have been added to the InfiniteModel. Note this  does not indicate if such constraints have been added to the optimizer model. Thus,  with normal usage (i.e., not using evaluate) this should always return false.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.derivative_constraints-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.derivative_constraints","text":"derivative_constraints(dref::DerivativeRef)::Vector{InfOptConstraintRef}\n\nReturn a list of the derivative evaluation constraints for dref that have been  added directly to the InfiniteModel associated with dref. An empty vector is  returned is there are no such constraints.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.delete_derivative_constraints-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.delete_derivative_constraints","text":"delete_derivative_constraints(dref::DerivativeRef)::Nothing\n\nDelete any derivative constraints of dref that have been directly added to the  InfiniteModel.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.evaluate_derivative","page":"Derivatives","title":"InfiniteOpt.evaluate_derivative","text":"evaluate_derivative(dref::GeneralVariableRef, \n                    method::AbstractDerivativeMethod,\n                    write_model::JuMP.AbstractModel)::Vector{JuMP.AbstractJuMPScalar}\n\nBuild expressions for derivative dref evaluated in accordance with method.  The expressions are of the form lhs - rhs, where lhs is a function of derivatives evaluated at some supports for certain infinite parameter, and rhs is a function of the derivative arguments evaluated at some supports for certain infinite parameter. For example, for finite difference methods at point t = 1, lhs is Δt * ∂/∂t[T(1)], and rhs could be T(1+Δt) - T(1) in case of forward difference mode. This is intended as a helper function for evaluate, which  will take the the expressions generated by this method and generate constraints that approximate the derivative values by setting the expressions as 0. However, one can extend this function  to encode custom methods for approximating derivatives. This should invoke  add_derivative_supports if the method is generative and users will likely find  it convenient to use make_reduced_expr.\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.generative_support_info-Tuple{AbstractDerivativeMethod}","page":"Derivatives","title":"InfiniteOpt.generative_support_info","text":"generative_support_info(method::AbstractDerivativeMethod)::AbstractGenerativeInfo\n\nReturn the AbstractGenerativeInfo associated with method. This is  intended as an internal method and should be extended for user-defined derivative  methods are GenerativeDerivativeMethods.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.support_label-Tuple{AbstractDerivativeMethod}","page":"Derivatives","title":"InfiniteOpt.support_label","text":"support_label(method::GenerativeDerivativeMethod)\n\nReturn the support label associated with method if there is one, errors otherwise.  This depends on generative_support_info  being defined for the type of method.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.make_reduced_expr","page":"Derivatives","title":"InfiniteOpt.make_reduced_expr","text":"make_reduced_expr(vref::GeneralVariableRef, pref::GeneralVariableRef, \n                  support::Float64, write_model::Union{InfiniteModel, JuMP.Model})\n\nGiven the argument variable vref and the operator parameter pref from a  derivative, build and return the reduced expression in accordance to the support  support with respect to pref. New point/semi-infinite variables will be written to  write_model. This is solely intended as a helper function for derivative  evaluation.\n\n\n\n\n\n","category":"function"},{"location":"manual/variable/#var_manual","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"A technical manual for variables in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/variable/#Definition","page":"Variables","title":"Definition","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"Note that the principle way for defining variables is by using  JuMP.@variable  which originates from JuMP.jl.","category":"page"},{"location":"manual/variable/#Infinite","page":"Variables","title":"Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"InfOptVariableType\nInfinite\nJuMP.build_variable(::Function, ::JuMP.VariableInfo, ::Infinite)\nJuMP.add_variable(::InfiniteModel, ::InfiniteVariable, ::String)\nInfiniteVariable\nrestrict\nVariableData\nInfiniteVariableIndex\nInfiniteVariableRef\nInfiniteOpt.Collections.VectorTuple","category":"page"},{"location":"manual/variable/#InfiniteOpt.InfOptVariableType","page":"Variables","title":"InfiniteOpt.InfOptVariableType","text":"InfOptVariableType\n\nAn abstract DataType for variable type objects used to create InfiniteOpt  variables via JuMP.@variable.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.Infinite","page":"Variables","title":"InfiniteOpt.Infinite","text":"Infinite{VT <: VectorTuple} <: InfOptVariableType\n\nA DataType to assist in making infinite variables. This can be passed as an  extra argument to @variable to make an infinite variable: \n\n@variable(model, var_expr, Infinite(parameter_refs...), args..., kwargs...)\n\nHere parameter_refs can be a single parameter reference, a single parameter  array with parameters defined in the same macro call, or multiple arguments where  each argument is either of the first two options listed.\n\nFields\n\nparameter_refs::VT: The infinite parameters the variable will depend on.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#JuMP.build_variable-Tuple{Function, VariableInfo, Infinite}","page":"Variables","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, info::JuMP.VariableInfo, \n                    var_type::Infinite)::InfiniteVariable{GeneralVariableRef}\n\nBuild and return an infinite variable based on info and var_type. Errors if  the infinite parameter references included in var_type are invalid. See  Infinite for more information.\n\nExample\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> inf_var = build_variable(error, info, Infinite(t));\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.add_variable-Tuple{InfiniteModel, InfiniteVariable, String}","page":"Variables","title":"JuMP.add_variable","text":"JuMP.add_variable(model::InfiniteModel, var::InfiniteVariable,\n                  [name::String = \"\"])::GeneralVariableRef\n\nExtend the JuMP.add_variable function to accomodate infinite variable  types. Adds a variable to an infinite model model and returns a  GeneralVariableRef. Primarily intended to be an internal function of  the constructor macro @variable. However, it can be used in combination with JuMP.build_variable to add  infinite variables to an infinite model object. Errors if invalid parameter reference(s) are included in var.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 10]);\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> inf_var = build_variable(error, info, Infinite(t));\n\njulia> ivref = add_variable(m, inf_var, \"var_name\")\nvar_name(t)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.InfiniteVariable","page":"Variables","title":"InfiniteOpt.InfiniteVariable","text":"InfiniteVariable{F <: Function, VT <: VectorTuple} <: JuMP.AbstractVariable\n\nA DataType for storing core infinite variable information. Note that indices that refer to the same dependent parameter group must be in the same tuple element. It is important to note that info.start should contain a start value function that generates the start value for a given infinite parameter support. This function should map a support to a start value using user-formatting if is_vector_start = false, otherwise it should do the mapping using a single support vector as input.\n\nFields\n\ninfo::JuMP.VariableInfo{Float64, Float64, Float64, F}: JuMP variable information. Here the start value is a function that maps the parameter values to a start value.\nparameter_refs::VT: The infinite parameter references that parameterize the  variable.\nparameter_nums::Vector{Int}: The parameter numbers of parameter_refs.\nobject_nums::Vector{Int}: The parameter object numbers associated with parameter_refs.\nis_vector_start::Bool: Does the start function take support values formatted as vectors?\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.restrict","page":"Variables","title":"InfiniteOpt.restrict","text":"restrict(ivref::GeneralVariableRef, supps...)::GeneralVariableRef\n\nRestrict the input domain of an infinite variable/derivative ivref in  accordance with the infinite parameters and/or values supps. Here supps must  match the formatting of ivref's infinite parameters. Here the following  outputs are possible:\n\nEquivalent to @variable(model, variable_type = Point(ivref, supps...) if  supps are a complete support point\nEquivalent to @variable(model, variable_type = SemiInfinite(ivref, supps...)  if supps are a partial support point.\n\nConveniently, we can also invoke this method by calling ivref(supps...).\n\nErrors if ivref is not an infinite variable or derivative or the formatting of  supps is incorrect. Will warn if supps only contain infinite parameters and  will simply return ivref.\n\nExample\n\njulia> restrict(y, 0, x)\ny(0, [x[1], x[2]])\n\njulia> restrict(y, 0, [0, 0])\ny(0, [0, 0])\n\njulia> y(0, x)\ny(0, [x[1], x[2]])\n\njulia> y(0, [0, 0])\ny(0, [0, 0])\n\n\n\n\n\n","category":"function"},{"location":"manual/variable/#InfiniteOpt.VariableData","page":"Variables","title":"InfiniteOpt.VariableData","text":"VariableData{V <: JuMP.AbstractVariable} <: AbstractDataObject\n\nA mutable DataType for storing variables and their data.\n\nFields\n\nvariable::V: The scalar variable.\nname::String: The name used for printing.\nlower_bound_index::Union{InfOptConstraintIndex, Nothing}: Index of lower bound constraint.\nupper_bound_index::Union{InfOptConstraintIndex, Nothing}: Index of upper bound constraint.\nfix_index::Union{InfOptConstraintIndex, Nothing}: Index on fixing constraint.\nzero_one_index::Union{InfOptConstraintIndex, Nothing}: Index of binary constraint.\nintegrality_index::Union{InfOptConstraintIndex, Nothing}: Index of integer constraint.\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nconstraint_indices::Vector{InfOptConstraintIndex}: Indices of dependent constraints.\nin_objective::Bool: Is this used in objective?\npoint_var_indices::Vector{PointVariableIndex}: Indices of dependent point variables.\nsemi_infinite_var_indices::Vector{SemiInfiniteVariableIndex}: Indices of dependent semi-infinite variables.\nderivative_indices::Vector{DerivativeIndex}: Indices of dependent derivatives.\nderiv_constr_indices::Vector{InfOptConstraintIndex}: Indices of dependent derivative evaluation constraints.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.InfiniteVariableIndex","page":"Variables","title":"InfiniteOpt.InfiniteVariableIndex","text":"InfiniteVariableIndex <: ObjectIndex\n\nA DataType for storing the index of a InfiniteVariable.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.InfiniteVariableRef","page":"Variables","title":"InfiniteOpt.InfiniteVariableRef","text":"InfiniteVariableRef <: DispatchVariableRef\n\nA DataType for untranscripted infinite dimensional variable references (e.g., second stage variables, time dependent variables).\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::InfiniteVariableIndex: Index of the variable in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.Collections.VectorTuple","page":"Variables","title":"InfiniteOpt.Collections.VectorTuple","text":"VectorTuple{T, I <: Tuple}\n\nA collection DataType for storing a Tuple of singular elements of type T and/or AbstractArray{<:T}s in a convenient vector form that utilizes linear indexing. Here I is denotes the type of a Tuple that stores the  indices of each tuple element as given by indices. VectorTuples should be  defined from an original tuple via VectorTuple(tuple) or by listing the tuple  elements VectorTuple(items...). Note this is still an experimental type and is  primarily intended to store infinite parameter reference tuples and point  variable support value tuples. Some of the notable capabilities are exemplified  below.\n\nExample\n\njulia> tuple = (3, [-2, 4], ones(2, 2))\n(3, [-2, 4], [1.0 1.0; 1.0 1.0])\n\njulia> vt = VectorTuple(tuple) # make by listing items (notice everything is a vector)\n([3.0], [3.0, 4.0], [1.0, 1.0, 1.0, 1.0])\n\njulia> vt[2] # linear indexing\n-2.0\n\njulia> vt[2, 2] # tuple indexing (note the second index is treated linearly)\n4.0\n\njulia> vt[6:end] # linear slicing\n2-element Array{Float64,1}:\n 1.0\n 1.0\n\njulia> vt[2:3, :] # tuple slicing\n2-element Array{Array{Float64,1},1}:\n [-2.0, 4.0]\n [1.0, 1.0, 1.0, 1.0]\n\njulia> tuple2 = Tuple(vt) # rebuild original Tuple with original indices\n([3.0], [-2.0, 4.0], [1.0 1.0; 1.0 1.0])\n\njulia> inds = [true, true, true, false, true, true, true];\n\njulia> restricted_copy(vt, delete_locs) # make a copy with deleted elements\n([3.0], [-2.0, 4.0], [1.0, 1.0, 1.0])\n\njulia> Tuple(vt) # The 3rd element becomes a SparseAxisArray because of deletion\n([3.0], [-2.0, 4.0],   [1, 2]  =  1.0\n  [2, 2]  =  1.0\n  [2, 1]  =  1.0)\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#Semi-Infinite","page":"Variables","title":"Semi-Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"SemiInfinite\nJuMP.build_variable(::Function, ::JuMP.VariableInfo, ::SemiInfinite)\nJuMP.build_variable(::Function, ::GeneralVariableRef, ::Dict{Int, Float64})\nJuMP.add_variable(::InfiniteModel, ::SemiInfiniteVariable, ::String)\nSemiInfiniteVariable\nSemiInfiniteVariableIndex\nSemiInfiniteVariableRef","category":"page"},{"location":"manual/variable/#InfiniteOpt.SemiInfinite","page":"Variables","title":"InfiniteOpt.SemiInfinite","text":"SemiInfinite{V, VT <: VectorTuple} <: InfOptVariableType\n\nA DataType to assist in making semi-infinite variables. This can be passed as an  extra argument to @variable to make such a variable: \n\n@variable(model, var_expr, SemiInfinite(inf_var, parameter_values...), kwargs...)\n\nHere parameter_values must match the format of the infinite parameter  references associated with the infinite variable inf_var and can be comprised  of both real valued supports and/or infinite parameters.\n\nFields\n\ninfinite_variable_ref::V\nparameter_values::VT: The infinite parameters and/or infinite   parameter support values the variable will depend on.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#JuMP.build_variable-Tuple{Function, VariableInfo, SemiInfinite}","page":"Variables","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, info::JuMP.VariableInfo, \n                    var_type::SemiInfinite)::SemiInfiniteVariable{GeneralVariableRef}\n\nBuild and return a semi-infinite variable based on info and var_type. Errors  if the information stored in var_type is invalid. See SemiInfinite  for more information.\n\nExample\n\njulia> y\ny(t, x)\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> semi_inf_var = build_variable(error, info, SemiInfinite(y, t, 0));\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.build_variable-Tuple{Function, GeneralVariableRef, Dict{Int64, Float64}}","page":"Variables","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, ivref::GeneralVariableRef,\n                    eval_supports::Dict{Int, Float64}; [check::Bool = true]\n                    )::SemiInfiniteVariable{GeneralVariableRef}\n\nExtend the JuMP.build_variable function to build a semi-infinite variable based on the infinite variable/derivative/parameter function ivref with  reduction support eval_supports. Will check that input is appropriate if  check = true. Errors if ivref is not an infinite variable, eval_supports  violate infinite parameter domains, or if the support dimensions don't match the  infinite parameter dimensions of ivref. This is intended an internal method for  use in evaluating measures.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.add_variable-Tuple{InfiniteModel, SemiInfiniteVariable, String}","page":"Variables","title":"JuMP.add_variable","text":"JuMP.add_variable(model::InfiniteModel, var::SemiInfiniteVariable,\n                  [name::String = \"\"])::GeneralVariableRef\n\nExtend the JuMP.add_variable function to accomodate InfiniteOpt  semi-infinite variable types. Adds var to the infinite model model and  returns a GeneralVariableRef. Primarily intended to be an internal  function used in evaluating measures.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.SemiInfiniteVariable","page":"Variables","title":"InfiniteOpt.SemiInfiniteVariable","text":"SemiInfiniteVariable{I <: GeneralVariableRef} <: JuMP.AbstractVariable\n\nA DataType for storing semi-infinite variables which partially support an infinite variable.\n\nFields\n\ninfinite_variable_ref::I: The original infinite/derivvative variable.\neval_supports::Dict{Int, Float64}: The original parameter tuple linear indices                                    to the evaluation supports.\nparameter_nums::Vector{Int}: The parameter numbers associated with the evaluated                                parameter_refs.\nobject_nums::Vector{Int}: The parameter object numbers associated with the                             evaluated parameter_refs.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.SemiInfiniteVariableIndex","page":"Variables","title":"InfiniteOpt.SemiInfiniteVariableIndex","text":"SemiInfiniteVariableIndex <: ObjectIndex\n\nA DataType for storing the index of a SemiInfiniteVariable.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.SemiInfiniteVariableRef","page":"Variables","title":"InfiniteOpt.SemiInfiniteVariableRef","text":"SemiInfiniteVariableRef <: DispatchVariableRef\n\nA DataType for partially transcripted infinite dimensional variable references. This is used to expand measures that contain infinite variables that are not fully transcripted by the measure.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::SemiInfiniteVariableIndex: Index of the variable in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#Point","page":"Variables","title":"Point","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"Point\nJuMP.build_variable(::Function, ::JuMP.VariableInfo, ::Point)\nJuMP.add_variable(::InfiniteModel, ::PointVariable, ::String)\nPointVariable\nPointVariableIndex\nPointVariableRef","category":"page"},{"location":"manual/variable/#InfiniteOpt.Point","page":"Variables","title":"InfiniteOpt.Point","text":"Point{V, VT <: VectorTuple} <: InfOptVariableType\n\nA DataType to assist in making point variables. This can be passed as an  extra argument to @variable to make such a variable: \n\n@variable(model, var_expr, Point(inf_var, parameter_values...), args..., \n          kwargs...)\n\nHere parameter_values must match the format of the infinite parameter  references associated with the infinite variable inf_var and can be comprised  of both real valued supports.\n\nFields\n\ninfinite_variable_ref::V\nparameter_values::VT: The infinite parameter support values the   variable will depend on.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#JuMP.build_variable-Tuple{Function, VariableInfo, Point}","page":"Variables","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, info::JuMP.VariableInfo, \n                    var_type::Point)::InfiniteVariable{GeneralVariableRef}\n\nBuild and return a point variable based on info and var_type. Errors  if the information stored in var_type is invalid. See Point  for more information.\n\nExample\n\njulia> y\ny(t)\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> pt_var = build_variable(error, info, SemiInfinite(y, 0));\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.add_variable-Tuple{InfiniteModel, PointVariable, String}","page":"Variables","title":"JuMP.add_variable","text":"JuMP.add_variable(model::InfiniteModel, var::PointVariable,\n                  [name::String = \"\"])::GeneralVariableRef\n\nExtend the JuMP.add_variable function to accomodate PointVariable variable  types. Adds a variable to an infinite model model and returns a  GeneralVariableRef. Primarily intended to be an internal function of  the constructor macro @variable. However, it can be used in combination with JuMP.build_variable to add variables to an infinite model object. Errors if an invalid infinite variable reference is included in var.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 10]);\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> inf_var = build_variable(error, info, Infinite(t));\n\njulia> ivref = add_variable(m, inf_var, \"var_name\")\nvar_name(t)\n\njulia> pt_var = build_variable(error, info, Point(ivref, 0.5));\n\njulia> pvref = add_variable(m, pt_var, \"var_alias\")\nvar_alias\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.PointVariable","page":"Variables","title":"InfiniteOpt.PointVariable","text":"PointVariable{I <: GeneralVariableRef} <: JuMP.AbstractVariable\n\nA DataType for storing point variable information. Note that the elements parameter_values field must match the format of the parameter reference tuple defined in InfiniteVariable\n\nFields\n\ninfo::JuMP.VariableInfo{Float64, Float64, Float64, Float64}: JuMP Variable information.\ninfinite_variable_ref::I: The infinite variable/derivative reference   associated with the point variable.\nparameter_values::Vector{Float64}: The infinite parameter values   defining the point.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.PointVariableIndex","page":"Variables","title":"InfiniteOpt.PointVariableIndex","text":"PointVariableIndex <: ObjectIndex\n\nA DataType for storing the index of a PointVariable.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.PointVariableRef","page":"Variables","title":"InfiniteOpt.PointVariableRef","text":"PointVariableRef <: FiniteRef\n\nA DataType for variables defined at a transcipted point (e.g., second stage variable at a particular scenario, dynamic variable at a discretized time point).\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::PointVariableIndex: Index of the variable in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#Finite","page":"Variables","title":"Finite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"Note that finite variables simply correspond to using  JuMP.ScalarVariable  which originates from JuMP.jl as well. In other words, these are defined via  JuMP.@variable without specifying any InfOptVariableType.","category":"page"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.add_variable(::InfiniteModel, ::JuMP.ScalarVariable, ::String)\nFiniteVariableIndex\nFiniteVariableRef","category":"page"},{"location":"manual/variable/#JuMP.add_variable-Tuple{InfiniteModel, ScalarVariable, String}","page":"Variables","title":"JuMP.add_variable","text":"JuMP.add_variable(model::InfiniteModel, var::JuMP.ScalarVariable,\n                  [name::String = \"\"])::GeneralVariableRef\n\nExtend the JuMP.add_variable function to accomodate finite (scalar) variable  types. Adds a variable to an infinite model model and returns a  GeneralVariableRef. Primarily intended to be an internal function of  the constructor macro @variable. However, it can be used in combination with JuMP.build_variable to add finite variables to an infinite model object.\n\nExamples\n\njulia> f_var = build_variable(error, info);\n\njulia> fvref = add_variable(m, f_var, \"var_name\")\nvar_name\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.FiniteVariableIndex","page":"Variables","title":"InfiniteOpt.FiniteVariableIndex","text":"FiniteVariableIndex <: ObjectIndex\n\nA DataType for storing the index of a JuMP.ScalarVariable.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.FiniteVariableRef","page":"Variables","title":"InfiniteOpt.FiniteVariableRef","text":"FiniteVariableRef <: FiniteRef\n\nA DataType for finite fixed variable references (e.g., first stage variables, steady-state variables).\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::FiniteVariableIndex: Index of the variable in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#Queries","page":"Variables","title":"Queries","text":"","category":"section"},{"location":"manual/variable/#General","page":"Variables","title":"General","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.name(::DecisionVariableRef)\nJuMP.variable_by_name(::InfiniteModel, ::String)\nJuMP.num_variables(::InfiniteModel)\nJuMP.all_variables(::InfiniteModel)\nJuMP.has_lower_bound(::UserDecisionVariableRef)\nJuMP.lower_bound(::UserDecisionVariableRef)\nJuMP.LowerBoundRef(::UserDecisionVariableRef)\nJuMP.has_upper_bound(::UserDecisionVariableRef)\nJuMP.upper_bound(::UserDecisionVariableRef)\nJuMP.UpperBoundRef(::UserDecisionVariableRef)\nJuMP.is_fixed(::UserDecisionVariableRef)\nJuMP.fix_value(::UserDecisionVariableRef)\nJuMP.FixRef(::UserDecisionVariableRef)\nJuMP.start_value(::UserDecisionVariableRef)\nJuMP.is_binary(::UserDecisionVariableRef)\nJuMP.BinaryRef(::UserDecisionVariableRef)\nJuMP.is_integer(::UserDecisionVariableRef)\nJuMP.IntegerRef(::UserDecisionVariableRef)\nis_used(::DecisionVariableRef)\nused_by_constraint(::DecisionVariableRef)\nused_by_measure(::DecisionVariableRef)\nused_by_objective(::DecisionVariableRef)","category":"page"},{"location":"manual/variable/#JuMP.name-Tuple{DecisionVariableRef}","page":"Variables","title":"JuMP.name","text":"JuMP.name(vref::DecisionVariableRef)::String\n\nExtend JuMP.name to return the names of InfiniteOpt variables.\n\nExample\n\njulia> name(vref)\n\"var_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.variable_by_name-Tuple{InfiniteModel, String}","page":"Variables","title":"JuMP.variable_by_name","text":"JuMP.variable_by_name(model::InfiniteModel,\n                      name::String)::Union{GeneralVariableRef, Nothing}\n\nExtend JuMP.variable_by_name for InfiniteModel objects. Return the variable  reference assoociated with a variable name. Errors if multiple variables have the  same name. Returns nothing if no such name exists.\n\nExamples\n\njulia> variable_by_name(m, \"var_name\")\nvar_name\n\njulia> variable_by_name(m, \"fake_name\")\n\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.num_variables-Tuple{InfiniteModel}","page":"Variables","title":"JuMP.num_variables","text":"JuMP.num_variables(model::InfiniteModel, [type])::Int\n\nExtend JuMP.num_variables to return the number of InfiniteOpt variables  assigned to model. By default, the total number of infinite, semi-infinite,  point, and finite variables is returned. The amount of a particular type is  obtained by specifying the concrete variable type via type. Type options  include:\n\nInfiniteVariable: all infinite variables\nSemiInfiniteVariable: all semi-infinite variables\nPointVariable: all point variables\nFiniteVariable: all finite variables\n\nExample\n\njulia> num_variables(model)\n3\n\njulia> num_variables(model, InfiniteVariable)\n2\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.all_variables-Tuple{InfiniteModel}","page":"Variables","title":"JuMP.all_variables","text":"JuMP.all_variables(model::InfiniteModel, [type])::Vector{GeneralVariableRef}\n\nExtend JuMP.all_variables] to return a list of all the variable references  associated with model. By default, all of the infinite, semi-infinite, point,  and finite variables is returned. Those of a particular type is obtained by  specifying the concrete variable type via type. Type options include:\n\nInfiniteVariable: all infinite variables\nSemiInfiniteVariable: all semi-infinite variables\nPointVariable: all point variables\nFiniteVariable: all finite variables\n\nExamples\n\njulia> all_variables(model)\n4-element Array{GeneralVariableRef,1}:\n y(t)\n w(t, x)\n y(0)\n z\n\njulia> all_variables(model, PointVariable)\n1-element Array{GeneralVariableRef,1}:\n y(0)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.has_lower_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.has_lower_bound to return a Bool whether an InfiniteOpt  variable has a lower bound.\n\nExample\n\njulia> has_lower_bound(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.lower_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.lower_bound","text":"JuMP.lower_bound(vref::UserDecisionVariableRef)::Float64\n\nExtend JuMP.lower_bound to return the lower bound of an InfiniteOpt variable.  Errors if vref doesn't have a lower bound.\n\nExample\n\njulia> lower_bound(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.LowerBoundRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.LowerBoundRef","text":"JuMP.LowerBoundRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.LowerBoundRef to extract a constraint reference for the lower  bound of vref.\n\nExample\n\nvar ≥ 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.has_upper_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.has_upper_bound to return a Bool whether an InfiniteOpt  variable has an upper bound.\n\nExample\n\njulia> has_upper_bound(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.upper_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.upper_bound","text":"JuMP.upper_bound(vref::UserDecisionVariableRef)::Float64\n\nExtend JuMP.upper_bound to return the upper bound of an InfiniteOpt variable.  Errors if vref doesn't have a upper bound.\n\nExample\n\njulia> upper_bound(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.UpperBoundRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.UpperBoundRef","text":"JuMP.UpperBoundRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.UpperBoundRef to extract a constraint reference for the upper  bound of vref.\n\nExample\n\njulia> cref = UpperBoundRef(vref)\nvar ≤ 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_fixed-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.is_fixed","text":"JuMP.is_fixed(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.is_fixed to return Bool whether an InfiniteOpt variable is  fixed.\n\nExample\n\njulia> is_fixed(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.fix_value-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.fix_value","text":"JuMP.fix_value(vref::UserDecisionVariableRef)::Float64\n\nExtend JuMP.fix_value to return the fix value of an InfiniteOpt variable.  Errors if variable is not fixed.\n\nExample\n\njulia> fix_value(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.FixRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.FixRef","text":"JuMP.FixRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.FixRef to return the constraint reference of the fix constraint  associated with vref. Errors vref is not fixed.\n\nExamples\n\njulia> cref = FixRef(vref)\nvar = 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.start_value-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.start_value","text":"JuMP.start_value(vref::UserDecisionVariableRef)::Union{Nothing, Float64}\n\nExtend JuMP.start_value to return starting value of InfiniteOpt variable if  it has one. Returns nothing otherwise.\n\nExample\n\njulia> start_value(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_binary-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.is_binary","text":"JuMP.is_binary(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.is_binary to return Bool whether an InfiniteOpt variable is  binary.\n\nExample\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.BinaryRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.BinaryRef","text":"JuMP.BinaryRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.BinaryRef to return a constraint reference to the constraint  constrainting vref to be binary. Errors if one does not exist.\n\nExample\n\njulia> cref = BinaryRef(vref)\nvar binary\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_integer-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.is_integer","text":"JuMP.is_integer(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.is_integer to return Bool whether an InfiniteOpt variable is  integer.\n\nExample\n\njulia> is_integer(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.IntegerRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.IntegerRef","text":"JuMP.IntegerRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.IntegerRef to return a constraint reference to the constraint  constrainting vref to be integer. Errors if one does not exist.\n\nExample\n\njulia> cref = IntegerRef(vref)\nvar integer\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.is_used-Tuple{DecisionVariableRef}","page":"Variables","title":"InfiniteOpt.is_used","text":"is_used(vref::DecisionVariableRef)::Bool\n\nReturn a Bool indicating if vref is used in the model.\n\nExample\n\njulia> is_used(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_constraint-Tuple{DecisionVariableRef}","page":"Variables","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(vref::DecisionVariableRef)::Bool\n\nReturn a Bool indicating if vref is used by a constraint.\n\nExample\n\njulia> used_by_constraint(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_measure-Tuple{DecisionVariableRef}","page":"Variables","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(vref::DecisionVariableRef)::Bool\n\nReturn a Bool indicating if vref is used by a measure.\n\nExample\n\njulia> used_by_measure(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_objective-Tuple{DecisionVariableRef}","page":"Variables","title":"InfiniteOpt.used_by_objective","text":"used_by_objective(vref::DecisionVariableRef)::Bool\n\nReturn a Bool indicating if vref is used by the objective.\n\nExample\n\njulia> used_by_objective(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Infinite-2","page":"Variables","title":"Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"start_value_function(::Union{InfiniteVariableRef, DerivativeRef})\nparameter_refs(::InfiniteVariableRef)\nparameter_list(::InfiniteVariableRef)\nraw_parameter_refs(::InfiniteVariableRef)\nis_used(::Union{InfiniteVariableRef, DerivativeRef})\nused_by_point_variable(::Union{InfiniteVariableRef, DerivativeRef})\nused_by_semi_infinite_variable(::Union{InfiniteVariableRef, DerivativeRef})","category":"page"},{"location":"manual/variable/#InfiniteOpt.start_value_function-Tuple{Union{DerivativeRef, InfiniteVariableRef}}","page":"Variables","title":"InfiniteOpt.start_value_function","text":"start_value_function(vref::Union{InfiniteVariableRef, DerivativeRef})::Union{Nothing, Function}\n\nReturn the function that is used to generate the start values of vref for particular support values. Returns nothing if no start behavior has been specified.\n\nExample\n\njulia> start_value_function(vref)\nmy_start_func\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_refs-Tuple{InfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(vref::InfiniteVariableRef)::Tuple\n\nReturn the parameter references associated with the infinite variable vref. This is formatted as a Tuple of containing the parameter references as they inputted to define vref.\n\nExample\n\njulia> @variable(model, T, Infinite(t))\nT(t)\n\njulia> parameter_refs(T)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_list-Tuple{InfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_list","text":"parameter_list(vref::InfiniteVariableRef)::Vector{GeneralVariableRef}\n\nReturn a vector of the parameter references that vref depends on. This is primarily an internal method where parameter_refs is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.raw_parameter_refs-Tuple{InfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refs(vref::InfiniteVariableRef)::VectorTuple\n\nReturn the raw VectorTuple of the  parameter references that vref depends on. This is primarily an internal method  where parameter_refs  is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.is_used-Tuple{Union{DerivativeRef, InfiniteVariableRef}}","page":"Variables","title":"InfiniteOpt.is_used","text":"is_used(vref::Union{InfiniteVariableRef, DerivativeRef})::Bool\n\nReturn a Bool indicating if vref is used in the model.\n\nExample\n\njulia> is_used(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_point_variable-Tuple{Union{DerivativeRef, InfiniteVariableRef}}","page":"Variables","title":"InfiniteOpt.used_by_point_variable","text":"used_by_point_variable(vref::Union{InfiniteVariableRef, DerivativeRef})::Bool\n\nReturn a Bool indicating if vref is used by a point variable.\n\nExample\n\njulia> used_by_point_variable(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_semi_infinite_variable-Tuple{Union{DerivativeRef, InfiniteVariableRef}}","page":"Variables","title":"InfiniteOpt.used_by_semi_infinite_variable","text":"used_by_semi_infinite_variable(vref::Union{InfiniteVariableRef, DerivativeRef})::Bool\n\nReturn a Bool indicating if vref is used by a semi-infinite variable.\n\nExample\n\njulia> used_by_semi_infinite_variable(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Semi-Infinite-2","page":"Variables","title":"Semi-Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.lower_bound(::SemiInfiniteVariableRef)\nJuMP.LowerBoundRef(::SemiInfiniteVariableRef)\nJuMP.has_upper_bound(::SemiInfiniteVariableRef)\nJuMP.upper_bound(::SemiInfiniteVariableRef)\nJuMP.UpperBoundRef(::SemiInfiniteVariableRef)\nJuMP.is_fixed(::SemiInfiniteVariableRef)\nJuMP.fix_value(::SemiInfiniteVariableRef)\nJuMP.FixRef(::SemiInfiniteVariableRef)\nstart_value_function(::SemiInfiniteVariableRef)\nJuMP.is_binary(::SemiInfiniteVariableRef)\nJuMP.BinaryRef(::SemiInfiniteVariableRef)\nJuMP.is_integer(::SemiInfiniteVariableRef)\nJuMP.IntegerRef(::SemiInfiniteVariableRef)\ninfinite_variable_ref(::SemiInfiniteVariableRef)\nparameter_refs(::SemiInfiniteVariableRef)\nparameter_list(::SemiInfiniteVariableRef)\nraw_parameter_refs(::SemiInfiniteVariableRef)\neval_supports(::SemiInfiniteVariableRef)","category":"page"},{"location":"manual/variable/#JuMP.lower_bound-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.lower_bound","text":"JuMP.lower_bound(vref::SemiInfiniteVariableRef)::Float64\n\nExtend JuMP.lower_bound to return the lower bound of the original infinite variable of vref. Errors if vref doesn't have a lower bound.\n\nExample\n\njulia> lower_bound(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.LowerBoundRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.LowerBoundRef","text":"JuMP.LowerBoundRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.LowerBoundRef to extract a constraint reference for the lower bound of the original infinite variable of vref.\n\nExample\n\njulia> cref = LowerBoundRef(vref)\nvar >= 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.has_upper_bound-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(vref::SemiInfiniteVariableRef)::Bool\n\nExtend JuMP.has_upper_bound to return a Bool whether the original infinite variable of vref has an upper bound.\n\nExample\n\njulia> has_upper_bound(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.upper_bound-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.upper_bound","text":"JuMP.upper_bound(vref::SemiInfiniteVariableRef)::Float64\n\nExtend JuMP.upper_bound to return the upper bound of the original infinite variable of vref. Errors if vref doesn't have a upper bound.\n\nExample\n\njulia> upper_bound(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.UpperBoundRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.UpperBoundRef","text":"JuMP.UpperBoundRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.UpperBoundRef to extract a constraint reference for the upper bound of the original infinite variable of vref.\n\nExample\n\njulia> cref = UpperBoundRef(vref)\nvar <= 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_fixed-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.is_fixed","text":"JuMP.is_fixed(vref::SemiInfiniteVariableRef)::Bool\n\nExtend JuMP.is_fixed to return Bool whether the original infinite variable of vref is fixed.\n\nExample\n\njulia> is_fixed(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.fix_value-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.fix_value","text":"JuMP.fix_value(vref::SemiInfiniteVariableRef)::Float64\n\nExtend JuMP.fix_value to return the fix value of the original infinite variable of vref. Errors if variable is not fixed.\n\nExample\n\njulia> fix_value(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.FixRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.FixRef","text":"JuMP.FixRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.FixRef to return the constraint reference of the fix constraint associated with the original infinite variable of vref. Errors vref is not fixed.\n\nExamples\n\njulia> cref = FixRef(vref)\nvar == 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.start_value_function-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.start_value_function","text":"start_value_function(vref::SemiInfiniteVariableRef)::Union{Nothing, Function}\n\nReturn the function that is used to generate the start values of vref for particular support values. Returns nothing if no start behavior has been specified.\n\nExample\n\njulia> start_value_func(vref)\nmy_func\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_binary-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.is_binary","text":"JuMP.is_binary(vref::SemiInfiniteVariableRef)::Bool\n\nExtend JuMP.is_binary to return Bool whether the original infinite variable of vref is binary.\n\nExample\n\njulia> is_binary(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.BinaryRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.BinaryRef","text":"JuMP.BinaryRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.BinaryRef to return a constraint reference to the constraint constrainting the original infinite variable of vref to be binary. Errors if one does not exist.\n\nExample\n\njulia> cref = BinaryRef(vref)\nvar binary\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_integer-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.is_integer","text":"JuMP.is_integer(vref::SemiInfiniteVariableRef)::Bool\n\nExtend JuMP.is_integer to return Bool whether the original infinite variable of vref is integer.\n\nExample\n\njulia> is_integer(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.IntegerRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.IntegerRef","text":"JuMP.IntegerRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.IntegerRef to return a constraint reference to the constraint constrainting the original infinite variable of vref to be integer. Errors if one does not exist.\n\nExample\n\njulia> cref = IntegerRef(vref)\nvar integer\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.infinite_variable_ref-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.infinite_variable_ref","text":"infinite_variable_ref(vref::SemiInfiniteVariableRef)::GeneralVariableRef\n\nReturn the infinite variable/derivative/parameter function reference associated  with the semi-infinite variable vref.\n\nExample\n\njulia> infinite_variable_ref(vref)\ng(t, x)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_refs-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(vref::SemiInfiniteVariableRef)::Tuple\n\nReturn the infinite parameter references associated with the semi-infinite variable vref. This is formatted as a Tuple of containing the parameter references as they were inputted to define the untranscripted infinite variable except, the evaluated parameters are excluded.\n\nExample\n\njulia> parameter_refs(vref)\n(t, [x[1], x[2]])\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_list-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_list","text":"parameter_list(vref::SemiInfiniteVariableRef)::Vector{GeneralVariableRef}\n\nReturn a vector of the parameter references that vref depends on. This is primarily an internal method where parameter_refs is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.raw_parameter_refs-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refs(vref::SemiInfiniteVariableRef)::VectorTuple\n\nReturn the raw VectorTuple of the  parameter references that vref depends on. This is primarily an internal method  where parameter_refs  is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.eval_supports-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.eval_supports","text":"eval_supports(vref::SemiInfiniteVariableRef)::Dict{Int, Float64}\n\nReturn the evaluation supports associated with the semi-infinite variable vref.\n\nExample\n\njulia> eval_supports(vref)\nDict{Int64,Float64} with 1 entry:\n  1 => 0.5\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Point-2","page":"Variables","title":"Point","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"infinite_variable_ref(::PointVariableRef)\nparameter_values(::PointVariableRef)\nraw_parameter_values(::PointVariableRef)","category":"page"},{"location":"manual/variable/#InfiniteOpt.infinite_variable_ref-Tuple{PointVariableRef}","page":"Variables","title":"InfiniteOpt.infinite_variable_ref","text":"infinite_variable_ref(vref::PointVariableRef)::GeneralVariableRef\n\nReturn the InfiniteVariableRef associated with the point variable vref.\n\nExample\n\njulia> @variable(model, T, Infinite(t))\nT(t)\n\njulia> @variable(model, T0, Point(T, 0))\nT0\n\njulia> infinite_variable_ref(T0)\nT(t)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_values-Tuple{PointVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_values","text":"parameter_values(vref::PointVariableRef)::Tuple\n\nReturn the support point associated with the point variable vref.\n\nExample\n\njulia> @variable(model, T, Infinite(t))\nT(t)\n\njulia> @variable(model, T0, Point(T, 0))\nT0\n\njulia> parameter_values(T0)\n(0,)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.raw_parameter_values-Tuple{PointVariableRef}","page":"Variables","title":"InfiniteOpt.raw_parameter_values","text":"raw_parameter_values(vref::PointVariableRef)::Vector{Float64}\n\nReturn the raw support point values associated with the point variable vref.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Modification","page":"Variables","title":"Modification","text":"","category":"section"},{"location":"manual/variable/#General-2","page":"Variables","title":"General","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.set_name(::DecisionVariableRef, ::String)\nJuMP.set_lower_bound(::UserDecisionVariableRef, ::Real)\nJuMP.delete_lower_bound(::UserDecisionVariableRef)\nJuMP.set_upper_bound(::UserDecisionVariableRef, ::Real)\nJuMP.delete_upper_bound(::UserDecisionVariableRef)\nJuMP.fix(::UserDecisionVariableRef, ::Real; ::Bool)\nJuMP.unfix(::UserDecisionVariableRef)\nJuMP.set_start_value(::UserDecisionVariableRef, ::Real)\nJuMP.set_binary(::UserDecisionVariableRef)\nJuMP.unset_binary(::UserDecisionVariableRef)\nJuMP.set_integer(::UserDecisionVariableRef)\nJuMP.unset_integer(::UserDecisionVariableRef)\nJuMP.relax_integrality(::InfiniteModel)\nJuMP.delete(::InfiniteModel, ::DecisionVariableRef)","category":"page"},{"location":"manual/variable/#JuMP.set_name-Tuple{DecisionVariableRef, String}","page":"Variables","title":"JuMP.set_name","text":"JuMP.set_name(vref::DecisionVariableRef, name::String)::Nothing\n\nExtend JuMP.set_name to set names of decision variables.\n\nExample\n\njulia> set_name(vref, \"var_name\")\n\njulia> name(vref)\n\"var_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_lower_bound-Tuple{UserDecisionVariableRef, Real}","page":"Variables","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(vref::UserDecisionVariableRef, lower::Real)::Nothing\n\nExtend JuMP.set_lower_bound to specify the lower bound of an InfiniteOpt  variable vref. Errors if vref is fixed.\n\nExample\n\njulia> set_lower_bound(vref, -1)\n\njulia> lower_bound(vref)\n-1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.delete_lower_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.delete_lower_bound","text":"JuMP.delete_lower_bound(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.delete_lower_bound to delete lower bound of vref. Errors if it  doesn't have a lower bound.\n\nExample\n\njulia> delete_lower_bound(vref)\n\njulia> has_lower_bound(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_upper_bound-Tuple{UserDecisionVariableRef, Real}","page":"Variables","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(vref::UserDecisionVariableRef, upper::Real)::Nothing\n\nExtend JuMP.set_upper_bound to specify the upper bound of an InfiniteOpt  variable vref. Errors if vref is fixed.\n\nExample\n\njulia> set_upper_bound(vref, 1)\n\njulia> upper_bound(vref)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.delete_upper_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.delete_upper_bound","text":"JuMP.delete_upper_bound(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.delete_upper_bound to delete the upper bound of vref. Errors if  it doesn't have an upper bound.\n\nExample\n\njulia> delete_upper_bound(vref)\n\njulia> has_upper_bound(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.fix-Tuple{UserDecisionVariableRef, Real}","page":"Variables","title":"JuMP.fix","text":"JuMP.fix(vref::UserDecisionVariableRef, value::Real;\n         force::Bool = false)::Nothing\n\nExtend JuMP.fix to fix the value of an InfiniteOpt variable. Errors if  variable has a lower and/or an upper bound(s) unless force = true.\n\nExamples\n\njulia> fix(vref, 3)\n\njulia> fix_value(vref)\n3.0\n\njulia> fix(vref2, 2, force = true)\n\njulia> fix_value(vref2)\n2.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.unfix-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.unfix","text":"JuMP.unfix(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.unfix to unfix vref. Errors if it is not fixed.\n\nExample\n\njulia> unfix(vref)\n\njulia> is_fixed(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_start_value-Tuple{UserDecisionVariableRef, Real}","page":"Variables","title":"JuMP.set_start_value","text":"JuMP.set_start_value(vref::UserDecisionVariableRef, value::Real)::Nothing\n\nExtend JuMP.set_start_value to specify the start value of InfiniteOpt  variables.\n\nExample\n\njulia> set_start_value(vref, 1)\n\njulia> start_value(vref)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_binary-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.set_binary","text":"JuMP.set_binary(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.set_binary to specify an InfiniteOpt variable as a binary  variable. Errors if vref is an integer variable.\n\nExample\n\njulia> set_binary(vref)\n\njulia> is_binary(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.unset_binary-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.unset_binary","text":"JuMP.unset_binary(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.unset_binary to unset vref as a binary variable. Errors if it is  not binary.\n\njulia> unset_binary(vref)\n\njulia> is_binary(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_integer-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.set_integer","text":"JuMP.set_integer(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.set_integer to specify an InfiniteOpt variable as a integer  variable. Errors if vref is an binary variable.\n\nExample\n\njulia> set_integer(vref)\n\njulia> is_integer(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.unset_integer-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.unset_integer","text":"JuMP.unset_integer(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.unset_integer to unset vref as an integer variable. Errors if it  is not an integer variable.\n\njulia> unset_integer(vref)\n\njulia> is_integer(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.relax_integrality-Tuple{InfiniteModel}","page":"Variables","title":"JuMP.relax_integrality","text":"JuMP.relax_integrality(model::InfiniteModel)::Function\n\nModifies model to \"relax\" all binary and integrality constraints on variables. Specifically,\n\nBinary constraints are deleted, and variable bounds are tightened if necessary to ensure the variable is constrained to the interval 0 1.\nIntegrality constraints are deleted without modifying variable bounds.\nAll other constraints are ignored (left in place). This includes discrete constraints like SOS and indicator constraints.\n\nReturns a function that can be called without any arguments to restore the original model. The behavior of this function is undefined if additional changes are made to the affected variables in the meantime.\n\nExample\n\njulia> undo_relax = relax_integrality(model);\n\njulia> print(model)\nMin x + ∫{t ∈ [0, 10]}(y(t))\nSubject to\n x ≥ 0.0\n y(t) ≥ 1.0\n x ≤ 1.0\n y(t) ≤ 10.0\n\njulia> undo_relax()\n\njulia> print(model)\nMin x + ∫{t ∈ [0, 10]}(y(t))\nSubject to\n y(t) ≥ 1.0\n y(t) ≤ 10.0\n y(t) integer\n x binary\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.delete-Tuple{InfiniteModel, DecisionVariableRef}","page":"Variables","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, vref::DecisionVariableRef)::Nothing\n\nExtend JuMP.delete to delete InfiniteOpt variables and their dependencies.  Errors if variable is invalid, meaning it has already been deleted or it belongs  to another model.\n\nExample\n\njulia> print(model)\nMin measure(g(t)*t) + z\nSubject to\n z ≥ 0.0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n g(0.5) = 0\n\njulia> delete(model, g)\n\njulia> print(model)\nMin measure(t) + z\nSubject to\n z ≥ 0.0\n z ≥ 42.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Infinite-3","page":"Variables","title":"Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"set_start_value_function(::InfiniteVariableRef, ::Union{Real, Function})\nreset_start_value_function(::InfiniteVariableRef)","category":"page"},{"location":"manual/variable/#InfiniteOpt.set_start_value_function-Tuple{InfiniteVariableRef, Union{Function, Real}}","page":"Variables","title":"InfiniteOpt.set_start_value_function","text":"set_start_value_function(vref::InfiniteVariableRef,\n                         start::Union{Real, Function})::Nothing\n\nSet the start value function of vref. If start::Real then a function is generated to such that the start value will be start for the entire infinite domain. If start::Function then this function should map to a scalar start value given a support value arguments matching the format of the parameter elements in parameter_refs(vref).\n\nExample\n\njulia> set_start_value_function(vref, 1) # all start values will be 1\n\njulia> set_start_value_function(vref, my_func) # each value will be made via my_func\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.reset_start_value_function-Tuple{InfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.reset_start_value_function","text":"reset_start_value_function(vref::InfiniteVariableRef)::Nothing\n\nRemove the existing start value function and return to the default. Generally, this is triggered by deleting an infinite parameter that vref depends on.\n\nExample\n\njulia> reset_start_value_function(vref)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Semi-Infinite-3","page":"Variables","title":"Semi-Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.set_name(::SemiInfiniteVariableRef,::String)","category":"page"},{"location":"manual/variable/#JuMP.set_name-Tuple{SemiInfiniteVariableRef, String}","page":"Variables","title":"JuMP.set_name","text":"JuMP.set_name(vref::DecisionVariableRef, name::String)::Nothing\n\nExtend JuMP.set_name to set names of decision variables.\n\nExample\n\njulia> set_name(vref, \"var_name\")\n\njulia> name(vref)\n\"var_name\"\n\n\n\n\n\n","category":"method"},{"location":"develop/start_guide/#contribute_guide","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"InfiniteOpt is a large project with a lot of opportunity for development. As  such we warmly welcome and encourage contributions. This page serves as the guide  of how to start contributing.","category":"page"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"Before starting please review our  Code of Conduct.","category":"page"},{"location":"develop/start_guide/#Step-by-Step","page":"Getting Started","title":"Step-by-Step","text":"","category":"section"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"This section will provide a birds-eye view on how to make a contribution to this  project.","category":"page"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"So you want to help improve InfiniteOpt, awesome and thank you! Let's walk  through step by step how this should be done.","category":"page"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"Setup a GitHub account if you do not already have one. Here is the  link to do so.\nSelect a specific task to develop that is well-defined. This can as simple as  correcting/clarifying a documentation page or as involved as implementing a  more efficient data management paradigm. With a task in mind, please start a new  issue here in the  InfiniteOpt repository. Also, this is a good place to find tasks to contribute to by  browsing what open issues are (especially ones with the tag good first issue).  Note that if your proposed contribution corresponds to an existing issue please  do not make a new issue. A guide to using issues in GitHub is located  here.\nFork the InfiniteOpt repository to your GitHub account. Only core  developers have permissions to modify InfiniteOpt directly, thus others need  to fork it which essentially amounts to creating their own linked copy. This is  done by clicking the Fork button at the top left corner on the main repository  page here.\nInstall Git on your computer. Git is an open source version control program  for repositories (it is why GitHub uses the word Git). This is needed to manipulate  the repository (all the package files) locally on your computer. A simple Google  search should indicate how this should be done for your computer. I personally  prefer Git for Windows as a Windows user. \nNow you need to install your forked version of InfiniteOpt in Julia on your  computer. This needs to be done via the dev command in the package manager  so you can edit it. The syntax is as follows:\n(v1.6) pkg> dev https://github.com/username-here/InfiniteOpt.jl\nWe also recommend you install Revise.jl  which is very useful when developing packages in Julia.\nDevelop your contribution. Please follow the style guides featured in the  sections below. A programmatic contribution will involve the following parts:\nediting/adding code to the .jl files in the src (source) directory\nadding a docstring for each public function/datatype\nincluding comments that describe each internal function/datatype\nadding a unit-testing for each function in the appropriate test files in the  test directory\nadding documentation of the new functionality in the appropriate place in the  documentation by adding the files in the docs/src directory.\nThese aspects are detailed further in the sections below.\nCommit and push your changes to your forked repository. This is done via Git  using your preferred interface and one should pull, add, commit, and then push  the changes. Using a bash terminal it would look like this:\nusername@ubuntu:~$ cd repo_directory\nusername@ubuntu:~/repo_directory$ git pull origin master\nusername@ubuntu:~/repo_directory$ git add *\nusername@ubuntu:~/repo_directory$ git commit -m \"insert commit message here\"\nusername@ubuntu:~/repo_directory$ git push origin master\nWe recommend using VsCode as an editor and  as a GUI for interfacing with Git.\nCreate a pull request. Go here  to InfiniteOpt's main page and create a pull request drawing from your forked  repository. A step by step explanation is provided  here.\nMake necessary changes if the tests fail and/or we ask you to make specific  changes. The Codecov tests will ensure every new line of code is tested at least  once with the new test functions and the GitHub Actions CI will ensure that  the tests pass on a range of operating systems and Julia versions.\nThat's it. Once the new additions are ready, we will merge them into the   main repository.\nContribute more by repeating steps 2 and 6-10. Just make sure to update your  forked repository before getting started which can be done as explained  here.  Also, be sure to pull the updated repository unto your computer before getting  started.","category":"page"},{"location":"develop/style/#Style-Guide","page":"Style Guide","title":"Style Guide","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Below we detail the formatting, naming, and organizational styles used in  InfiniteOpt. We kindly ask developers to adhere to these practices in efforts  to foster consistency.","category":"page"},{"location":"develop/style/#File-Organization","page":"Style Guide","title":"File Organization","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Files for InfiniteOpt are principally stored in 5 locations:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"the base directory ./,\nthe source file directory ./src/,\nthe source code testing directory ./test/,\nthe documentation source file directory ./docs/,\nand the example scripts directory ./examples/.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The base directory is for certain critical package files such as the README.md file and the CI (virtual testing service) configuration files. Files should NOT  be added or removed from this directory, but may be modified as needed. ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Naturally, the source directory is where all the source code files are located.  The principal file InfiniteOpt.jl is where the main module is defined, all  source code files are included, and all methods/datatypes/macros are exported. This  file shouldn't contain any function or datatype definitions directly, but rather  should include source files containing such via include(\"file_name.jl\"). Where  possible new datatypes should be defined in datatypes.jl and new methods should  be defined in the appropriate file (e.g., a new parameter method should be  defined in parameters.jl). New files can be added as necessary to help with  organization and to prevent a particular file from becoming too long. Also, note  that any submodule (e.g., TranscriptionOpt) should be defined within its own  sub-directory named after itself.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The test directory contains all the files in appropriate organization to test  all of the methods, datatypes, and macros defined in the source files. The file  structure here should emulate that of the ./src/ directory since each file  should by systematically tested as described be below in the Unit Tests section.  Here the principle file is runtests.jl which serves as the backbone for all the  unit testing. Again, no explicit tests should be contain in it, but rather  inclusions of test files via include(\"file_name\").","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The documentation directory follows a particular structure as explained in the  documentation for Documenter.jl. Here the root directory ./docs/ contains  make.jl which is the script that generates the documentation via Documenter.jl.  The Project.toml includes the packages necessary to do this. The ./docs/src/  sub-directory is where source code is stored to build the documentation pages.  When building the documentation locally, a ./docs/build directory will also  appear that stores the built HTML files. However, this directory is not tracked  by Git and any changes here will be ignored.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The example directory contains scripted use examples of InfiniteOpt. Each  example should be stored in single .jl file where possible. However, other more  complex examples that use multiple files should be stored in an appropriately  named folder.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Please note that all file/folder names should use complete names and avoid  abbreviations where possible unless the abbreviations are unambiguous and common  knowledge. Moreover, names should be lowercase and use underscores between  words: example_file_name.jl.  ","category":"page"},{"location":"develop/style/#Julia-Code","page":"Style Guide","title":"Julia Code","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Here we detail the programmatic style used with InfiniteOpt. This is done in an  effort to make this package intuitive for new-comers and to ease development. This  style closely follows that of JuMP.jl with similar deviations from typical Julia  styles. Please refer to the   JuMP style guide as this  is the style used by InfiniteOpt.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"In addition, we adopt the following practices: ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"All names should be meaningful and readily identifiable. This is bad:\nx = y2 - cp\nThis is good:\nnew_pizza_cost = old_pizza_cost - discount\nThis will make lines longer, but much more understandable.\nAvoid the use explicit numeric values (i.e., magic numbers): This is bad:\ntax = 0.07 * total_price\nTypically, this will employ the use of constants via const This is good:\nconst TAX_RATE = 0.07\ntax = TAX_RATE * total_price\nExceptions to this rule include the use of 1, 1.0, 0, 0.0, -1, -1.0, Inf, and -Inf.\nWhere possible use eachindex to iterate over an datatype: This is bad:\nfor i in 1:length(A)\n    A[i] = i\nend\nThis is good:\nfor i in eachindex(A)\n    A[i] = i\nend\nAll function arguments and struct elements should be typed. Also, function outputs should be typed where possible.    This is bad:\nfunction my_new_function(arg1, arg2)\n    return arg1 + arg2\nend\nstruct MyNewStruct\n    thing1\n    thing2\nend\nThis is good:\nfunction my_new_function(arg1::Int, arg2::Int)::Int\n    return arg1 + arg2\nend\nstruct MyNewStruct\n    thing1::Int\n    thing2::String\nend\nType dispatch should be used instead of conditional statements based on type: This is bad:\nfunction my_new_function(arg::AbstractType)::ReturnType\n  if arg isa Type1\n      temp = arg + 1\n  elseif arg isa Type2\n      temp = 0\n  end\n  # do more stuff with temp\n  return temp\nend\nThis is good:\n## Internal dispatch for my_new_function\n# Type1\nfunction _my_internal_function(arg::Type1)::Int\n    return arg + 1\nend\n# Type2\nfunction _my_internal_function(arg::Type1)::Int\n    return 0\nend\n# Fallback\nfunction _my_internal_function(arg::AbstractType)\n    error(\"Unrecognized type...\")\nend\n# Main method\nfunction my_new_function(arg::AbstractType)::ReturnType\n  temp = _my_internal_function(arg)\n  # do more stuff with temp\n  return temp\nend\nFunctions should be built in a modular manner to avoid code repetition and  excessively long function definitions.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"In addition to the above guidelines, contributions should be structured such that  extensions are readily possible without having to rewrite all of the associated  functions. The ability to easily facilitate extensions is a core goal of  InfiniteOpt and this should be kept in mind when developing contributions. ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"TODO add example.","category":"page"},{"location":"develop/style/#Docstrings-and-Comments","page":"Style Guide","title":"Docstrings and Comments","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Here we discuss the use of Docstrings and comments in InfiniteOpt. All public  functions, macros, and datatypes should have a Docstring. This is enables the  help query tool in Julia and is needed for inclusion in the documentation pages.  For functions and macros the format should follow the form:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"\"\"\"\n    my_new_function(arg1::Type, [arg2::Type = 0; karg1::Type = 42])::Type\n\nPrecise and concise description of what `my_new_function` does and what it\nreturns (also what will cause it will trigger errors). This is in markdown\nformat.\n\n**Example**\n```julia-repl\njulia> my_new_function(input...)\nexpected_output\n```\n\"\"\"\nfunction my_new_function(arg1::Type, arg2::Type = 0; karg1::Type = 42)::Type\n    return arg1 + arg2 + karg1\nend","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Notice that the function is declared at the top with an ident and the optional  arguments are enclosed within square brackets. This can be spaced over several  lines if there are too many arguments to fit on one line. ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"For datatypes Docstrings should follow the form:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"\"\"\"\n    MyNewStruct\n\nPrecise and concise description of what this is.\n\n**Fields**\n- `element1::Type` Description of what this is.\n- `element2::Type` Description of what this is.\n\"\"\"\nstruct MyNewStruct\n    element1::Type\n    element2::Type\nend","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Note that if the struct is parametric and/or has inheritance, this information  should also be shown in the header. For example, we have that  InfOptParameter{T <: AbstractInfiniteSet} <: JuMP.AbstractVariable.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"For more docstring information please visit the Julia documentation  here.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Furthermore, all internal functions and datatypes should have an appropriate  commented description of what they do above them. This should follow the  form:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"# Description of what _my_internal_function does. Bla Bla Bla Bla Bla Bla Bla\n# Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla.\nfunction _my_internal_function(arg1::Type, arg2::Type)::Type\n    return arg1 + arg2\nend","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Finally, we encourage a healthy usage of comments throughout source code to  enhance its readability. A simple comment before a complex block of code can make  all the difference.","category":"page"},{"location":"develop/style/#Unit-Tests","page":"Style Guide","title":"Unit Tests","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"A nice attribute of InfiniteOpt is that it is near perfect code testing  coverage. This success is due to strictly testing every method and macro rigorously  such that every line is called. This has been very advantageous in detecting  many bugs which can be difficult to anticipate given the quantity of source code.  Thus, tests must be created/updated to cover any new additions/changes in the  ./src/ directory.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The runtests.jl file serves as the principal backbone for doing this. We use  a nested @testset structure using Test.jl. Please refer to the documentation  here to learn about the relevant  testing macros. The structure typically groups related functions together where  each function/macro/datatype is tested via a @testset that employs a number of  tests via @test that thoroughly test it. This is typically of the form:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"@testset \"my_new_function\" begin\n    @test my_new_function(input1) == expected_output1\n    @test my_new_function(input2) == expected_output2\n    @test my_new_function(input3) == expected_output3\n    .\n    .\n    .\nend","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Thus, a function's @testset should be updated when the respective function has  been modified. Moreover, a new @testset should be added for each new  function/macro. New function tests should be implemented in an order such that  any other functions/macros they depend on are tested first.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Also, where possible please include comments to explain what is going on.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Please refer to InfiniteOpt/test/ for examples.","category":"page"},{"location":"develop/style/#Documentation-Pages","page":"Style Guide","title":"Documentation Pages","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Documentation in InfiniteOpt is generated via  Documenter.jl. Please refer to  its documentation to learn about how to use it.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The source markdown files stored in ./docs/src/ are what comprise the source  code for the documentation pages and are principally what should be updated. A  guide for markdown syntax is provided here.  Also, note that Documenter enables unique functionality in addition to this  general guide.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"When a new Docstring is created as described above, it should be included in the  appropriate @docs block on its corresponding manual page. Moreover, content  should be added in an appropriate section (or perhaps in a new section) in the  guide that overviews how to implement the new capabilities in an example driven  fashion. These examples should use jldoctests where possible as well to assess  whether the example code is functional.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Documentation content should be concise and use examples and lists where possible  to provide a more visual guide. Also, we ask that passive voice be avoided.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Be sure to test the documentation first locally by running make.jl to check  for problems which may include:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"unrecognized docstrings\nfailed doctests\nfaulty links\nunrecognized formats\nmissing package dependencies\netc.","category":"page"},{"location":"develop/style/#Case-Study-Examples","page":"Style Guide","title":"Case Study Examples","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"We use Literate.jl to run  the case studies in ./docs/src/examples/ and generate markdown files that are  incorporated into the documentation for the Examples sections. ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"A new case study example can be added to an appropriate sub-folder of  ./docs/src/examples/ (a new sub-folder can be made if needed). The example file  should be .jl file that uses comments in accordance with Literate.jl's format.  This is exemplified below:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"# # My Example Name\n# Text to introduce my example...\n\n# ## Background \n# Text that describes the problem we are trying to solve. We can also include \n# latex math like ``x^2`` and math blocks such as:\n# ```math \n# x^2 + y = 1\n# ```\n\n# ## Formulation\n# Text to introduce as needed...\nusing InfiniteOpt, Clp # import the needed packages\n\n## This comment type will be part of the code block\nmodel = InfiniteModel(Clp.Optimizer) # add side comments to code\n\n# This comment type will be Markdown again, thus breaking up the code block\n@infinite_parameter(model, t in [0, 1], num_supports = 42)\n@variable(model, y >= 0, Infinite(t))\n\noptimize!(model)\n\n## TODO add more code\n\n# ### Maintenance Tests\n# These are here to ensure this example stays up to date. \nusing Test\n@test termination_status(model) == MOI.OPTIMAL\n@test has_values(model)\n## Add more tests as appropriate","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The above file will then be tested and incorporated into the documentation when  ./docs/make.jl is called. Notice that we also have the \"Maintenance Test\"  section at the end that will be used to run checks to ensure the example script  is working as expected (this helps ensure the documentation is up to date).","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The above example would produce the following markdown file via Literate.jl:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"# My Example Name\nText to introduce my example...\n\n## Background\nText that describes the problem we are trying to solve. We can also include\nlatex math like ``x^2`` and math blocks such as:\n```math\nx^2 + y = 1\n```\n\n## Formulation\nText to introduce as needed...\n\n```julia\nusing InfiniteOpt, Clp # import the needed packages\n\n# This comment type will be part of the code block\nmodel = InfiniteModel(Clp.Optimizer) # add side comments to code\n\n```\n\n```julia\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Clp\n```\n\nThis comment type will be Markdown again, thus breaking up the code block\n\n```julia\n@infinite_parameter(model, t in [0, 1], num_supports = 42)\n@variable(model, y >= 0, Infinite(t))\n\noptimize!(model)\n\n# TODO add more code\n```\n\n### Maintenance Tests\nThese are here to ensure this example stays up to date.\n\n```julia\nusing Test\n@test termination_status(model) == MOI.OPTIMAL\n@test has_values(model)\n# Add more tests as appropriate\n```\n\n```\nTest Passed\n```\n\n---\n\n*This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*\n\n","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Optimal Control/consumption_savings.jl\"","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Consumption-Savings-Problem","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"In this case study, a household endowed with B_0 dollars of wealth must decide how much to consume and save to maximize its utility over its finite lifecycle.","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Formulation","page":"Consumption Savings Problem","title":"Formulation","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"The corresponding dynamic optimization problem is expressed:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"beginaligned\n\tV(B_00) = undersetc(t) B(t)textmax int_t = 0^t=T e^-rho t u(c(t)) dt \n\ttextst \n\t fracdBdt = r times B(t) - c(t)  t in 0T \n   B(0) = B_0 \n   B(T) = 0\nendaligned","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"where the household lives during time t in 0T, the state variable B(t) is the household's stock of wealth at time t, the choice variable c(t) is the household's consumption at time t, r is the interest rate, B_0 is the household's wealth endowment (initial condition), B(T) = 0 is the terminal condition, and T is the time horizon.","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Model-Definition","page":"Consumption Savings Problem","title":"Model Definition","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Let's implement this in InfiniteOpt and first import the packages we need:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"using InfiniteOpt, Ipopt","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"We set the preference and constraint parameters:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"ρ = 0.025  # discount rate\nk = 100.0  # utility bliss point\nT = 10.0   # life horizon\nr = 0.05   # interest rate\nB0 = 100.0 # endowment\nu(c; k=k) = -(c - k)^2       # utility function\ndiscount(t; ρ=ρ) = exp(-ρ*t) # discount function\nBC(B, c; r=r) = r*B - c      # budget constraint","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"BC (generic function with 1 method)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"We set the hyperparameters:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"opt = Ipopt.Optimizer   # desired solver\nns = 1_000;             # number of points in the time grid\n","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"We initialize the infinite model and choose the Ipopt solver:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"m = InfiniteModel(opt)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"An InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information: \nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Let's specify our infinite parameter which is time t in 0 T:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@infinite_parameter(m, t in [0, T], num_supports = ns)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"t","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Now let's specify the variables:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@variable(m, B, Infinite(t)) ## state variables\n@variable(m, c, Infinite(t)) ## control variables","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"c(t)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Specify the objective:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@objective(m, Max, integral(u(c), t, weight_func = discount))","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"∫{t ∈ [0, 10]}[-c(t)² + 200 c(t) - 10000]","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Set the initial/terminal conditions:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@constraint(m, B(0) == B0)\n@constraint(m, B(T) == 0)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"B(10) = 0.0","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Set the budget constraint:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@constraint(m, c1, deriv(B, t) == BC(B, c; r=r))","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"c1 : ∂/∂t[B(t)] - 0.05 B(t) + c(t) = 0.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Problem-Solution","page":"Consumption Savings Problem","title":"Problem Solution","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Optimize the model:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"optimize!(m)\ntermination_status(m)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"LOCALLY_SOLVED::TerminationStatusCode = 4","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Extract the results:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"c_opt = value(c)\nB_opt = value(B)\nts = supports(t)\nopt_obj = objective_value(m) # V(B0, 0)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"-67025.62174598583","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Plot the results:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"using Plots\nix = 2:(length(ts)-1) # index for plotting\nplot(ts[ix],   B_opt[ix], lab = \"B: wealth balance\")\nplot!(ts[ix],  c_opt[ix], lab = \"c: consumption\")","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"(Image: )","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"That's it, now we have our optimal trajectory!","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"This very simple problem has a closed form solution:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"λ1 = exp((r)T)\nλ2 = exp(-(r-ρ)T)\nden = (λ1-λ2)r\nΩ1 = (k + (r*B0-k)λ2)/den\nΩ2 = (k + (r*B0-k)λ1)/den\nc0 = r*B0 + (r)Ω1 + (r-ρ)Ω2\nBB(t; k=k,r=r,ρ=ρ,Ω1=Ω1,Ω2=Ω2) = (k/r) - Ω1*exp((r)t) + Ω2*exp(-(r-ρ)t)\ncc(t; k=k,r=r,ρ=ρ,c0=c0)       = k + (c0-k)*exp(-(r-ρ)t)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"cc (generic function with 1 method)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Compare the solution given by InfiniteOpt with the closed form:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"plot(legend=:topright);\nplot!(ts[ix], c_opt[ix], color = 1, lab = \"c: consumption, InfiniteOpt\");\nplot!(ts[ix], cc, color = 1, linestyle=:dash, lab = \"c: consumption, closed form\");\nplot!(ts[ix], B_opt[ix], color = 4, lab = \"B: wealth balance, InfiniteOpt\");\nplot!(ts[ix], BB, color = 4, linestyle=:dash, lab = \"B: wealth balance, closed form\")","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"(Image: )","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Not bad!","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Maintenance-Tests","page":"Consumption Savings Problem","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"using Test\n@test termination_status(m) == MOI.LOCALLY_SOLVED\n@test has_values(m)\n@test B_opt isa Vector{<:Real}\n@test c_opt isa Vector{<:Real}","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Test Passed","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/finite_parameter/#finite_param_manual","page":"Finite Parameters","title":"Finite Parameters","text":"","category":"section"},{"location":"manual/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"A technical manual for finite parameters in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/finite_parameter/#Definition","page":"Finite Parameters","title":"Definition","text":"","category":"section"},{"location":"manual/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"@finite_parameter\nFiniteParameter\nbuild_parameter(::Function, ::Real)\nadd_parameter(::InfiniteModel, ::FiniteParameter, ::String)\nFiniteParameterIndex\nFiniteParameterRef","category":"page"},{"location":"manual/finite_parameter/#InfiniteOpt.@finite_parameter","page":"Finite Parameters","title":"InfiniteOpt.@finite_parameter","text":"@finite_parameter(model::InfiniteModel, value, kwargs...)\n\nDefine and add an anonymous finite parameter to model and return its parameter reference. Its value is equal to value.\n\n@finite_parameter(model::InfiniteModel, param_expr == value_expr, kwargs...)\n\nDefine and add a finite parameter(s) to model and return appropriate parameter reference(s). The parameter(s) has/have value(s) indicated by the value_expr. The expression param_expr can be of the form:\n\nparamname creating a scalar parameter of name paramname\nparamname[...] or [...] creating a container of parameters\n\nThe expression value_expr simply expresses the value of the parameter(s). This is typically a number but could be an array indexed using an index defined in param_expr.\n\nThe recognized keyword arguments in kwargs are the following:\n\nbase_name: Sets the name prefix used to generate parameter names. It corresponds to the parameter name for scalar parameter, otherwise, the parameter names are set to base_name[...] for each index ... of the axes axes.\ncontainer: Specify the container type, defaults to Auto.\n\nExamples\n\njulia> par = @finite_parameter(model, 2)\nnoname\n\njulia> vals = [3, 2];\n\njulia> pars = @finite_parameter(model, [i = 1:2] == vals[i], base_name = \"par\")\n2-element Array{ParameterRef,1}:\n par[1]\n par[2]\n\njulia> @finite_parameter(model, par2 == 42)\npar2\n\n\n\n\n\n","category":"macro"},{"location":"manual/finite_parameter/#InfiniteOpt.FiniteParameter","page":"Finite Parameters","title":"InfiniteOpt.FiniteParameter","text":"FiniteParameter <: ScalarParameter\n\nA DataType for storing finite parameters meant to be nested in expressions and replaced with their values at runtime.\n\nFields\n\nvalue::Float64: The parameter value.\n\n\n\n\n\n","category":"type"},{"location":"manual/finite_parameter/#InfiniteOpt.build_parameter-Tuple{Function, Real}","page":"Finite Parameters","title":"InfiniteOpt.build_parameter","text":"build_parameter(_error::Function, value::Real)::FiniteParameter\n\nReturns a FiniteParameter given the appropriate information. This is analagous to JuMP.build_variable. This is meant to primarily serve as a helper method for @finite_parameter.\n\nExample\n\njulia> build_finite_parameter(error, 1)\nFiniteParameter(1.0)\n\n\n\n\n\n","category":"method"},{"location":"manual/finite_parameter/#InfiniteOpt.add_parameter-Tuple{InfiniteModel, FiniteParameter, String}","page":"Finite Parameters","title":"InfiniteOpt.add_parameter","text":"add_parameter(model::InfiniteModel, p::FiniteParameter,\n              [name::String = \"\"])::GeneralVariableRef\n\nReturns a GeneralVariableRef associated with the parameter p that is  added to model. This adds a parameter to the model in a manner similar to JuMP.add_variable. This is to add parameters with the use of  @finite_parameter.  build_parameter should be used to construct p.\n\nExample\n\njulia> p = build_parameter(error, 42);\n\njulia> param_ref = add_parameter(model, p, \"name\")\nname\n\n\n\n\n\n","category":"method"},{"location":"manual/finite_parameter/#InfiniteOpt.FiniteParameterIndex","page":"Finite Parameters","title":"InfiniteOpt.FiniteParameterIndex","text":"FiniteParameterIndex <: ObjectIndex\n\nA DataType for storing the index of a FiniteParameter.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/finite_parameter/#InfiniteOpt.FiniteParameterRef","page":"Finite Parameters","title":"InfiniteOpt.FiniteParameterRef","text":"FiniteParameterRef <: FiniteRef\n\nA DataType for finite parameters references who are replaced with their values at the transcription step.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::FiniteParameterIndex: Index of the parameter in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/finite_parameter/#Methods","page":"Finite Parameters","title":"Methods","text":"","category":"section"},{"location":"manual/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"Many methods are shared with independent infinite parameters since both  finite and independent infinite parameters are scalar. See the infinite  parameter technical manual for the remainder of the  methods available for finite parameters (i.e., any method typed for  ScalarParameterRefs)","category":"page"},{"location":"manual/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"parameter_value(::FiniteParameterRef)\nJuMP.set_value(::FiniteParameterRef, ::Real)\nused_by_objective(::FiniteParameterRef)","category":"page"},{"location":"manual/finite_parameter/#InfiniteOpt.parameter_value-Tuple{FiniteParameterRef}","page":"Finite Parameters","title":"InfiniteOpt.parameter_value","text":"parameter_value(pref::FiniteParameterRef)::Float64\n\nReturn the value of a finite parameter reference pref. Errors if it is an infinite parameter.\n\nExample\n\njulia> value(cost)\n42.0\n\n\n\n\n\n","category":"method"},{"location":"manual/finite_parameter/#JuMP.set_value-Tuple{FiniteParameterRef, Real}","page":"Finite Parameters","title":"JuMP.set_value","text":"JuMP.set_value(pref::FiniteParameterRef, value::Real)::Nothing\n\nSet the value of pref so long as it is a finite parameter. Errors if it is an infinite parameter.\n\nExample\n\njulia> set_value(cost, 27)\n\njulia> value(cost)\n27.0\n\n\n\n\n\n","category":"method"},{"location":"manual/finite_parameter/#InfiniteOpt.used_by_objective-Tuple{FiniteParameterRef}","page":"Finite Parameters","title":"InfiniteOpt.used_by_objective","text":"used_by_objective(pref::FiniteParameterRef)::Bool\n\nReturn true if pref is used by the objective function.\n\nExample\n\n\n\n\n\n\n\n","category":"method"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"DocTestFilters = [r\"≥|>=\", r\" == | = \", r\" ∈ | in \", r\" for all | ∀ \", r\"d|∂\", \n                  r\"integral|∫\", r\".*scalar_parameters.jl:781\"]","category":"page"},{"location":"guide/derivative/#deriv_docs","page":"Derivatives","title":"Derivative Operators","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"A guide for derivatives in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/derivative/#Overview","page":"Derivatives","title":"Overview","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Derivative operators commonly arise in many infinite-dimensional problems,  particularly in space-time optimization. InfiniteOpt.jl provides a simple yet  powerful interface to model these objects for derivatives of any order, including  partial derivatives. Derivatives can be used in defining measures and constraints. ","category":"page"},{"location":"guide/derivative/#Basic-Usage","page":"Derivatives","title":"Basic Usage","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Derivative operators can defined a few different ways in InfiniteOpt. To motivate  these, let's first define an InfiniteModel along with some parameters and variables:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> using InfiniteOpt, Distributions;\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10], \n                           derivative_method = OrthogonalCollocation(3));\n\njulia> @infinite_parameter(model, ξ ~ Uniform(-1, 1));\n\njulia> @variable(model, y, Infinite(t, ξ));\n\njulia> @variable(model, q, Infinite(t));","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Notice that we used the derivative_method keyword argument to specify which  numerical method will be used to evaluate any derivatives that depend on that  infinite parameter t. In this case we, specified to use orthogonal collocation  over finite elements using 3 nodes. We'll come back to this just a little further  below to more fully describe the various methods we can use. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"First, let's discuss how to define derivatives in InfiniteOpt.jl. Principally,  this is accomplished via @deriv which will operate on a particular  InfiniteOpt expression (containing parameters, variables, and/or measures) with  respect to infinite parameters specified with their associated orders. Behind the  scenes all the appropriate calculus will be applied, creating derivative variables  as needed. For example, we can define the following:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> d1 = @deriv(y, t)\n∂/∂t[y(t, ξ)]\n\njulia> d2 = @deriv(y, t, ξ)\n∂/∂ξ[∂/∂t[y(t, ξ)]]\n\njulia> d3 = @∂(q, t^2)\n∂/∂t[∂/∂t[q(t)]]\n\njulia> d_expr = @deriv(y * q - 2t, t)\n∂/∂t[y(t, ξ)]*q(t) + ∂/∂t[q(t)]*y(t, ξ) - 2","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Thus, we can define derivatives in a variety of forms according to the problem at  hand. The last example even shows how the product rule is correctly applied. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"note: Note\nFor convenience in making more compact code we provide ∂ and  @∂ as wrappers for deriv and @deriv, respectively.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Also, notice that the appropriate analytic calculus is applied to infinite  parameters. For example, we could also compute:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> @deriv(3t^2 - 2t, t)\n6 t - 2","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Conveniently, @deriv can be called within any measure and constraint. However,  in certain cases we may need to define an initial guess (initial guess trajectory).  This can be accomplished in 2 ways:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Call set_start_value_function  using the individual derivative (e.g., d1 above)\nDefine the derivative using @variable with the Deriv variable type  object and use the start keyword argument.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In either case, a single value can be given or a start value function that will generate a value in accordance with the support values (i.e., following the same  syntax as infinite variables). For example, we can specify the starting value of  d1 to 0 via the following:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> set_start_value_function(d1, 0)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Now let's return to our discussion on derivative evaluation methods. These are the  methods that can/will be invoked to transcript the derivatives when solving the  model. The methods native to InfiniteOpt are described in the table below:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Method Type Needed Boundary Conditions Creates Supports\nFiniteDifference Forward Final & optional Initial No\nFiniteDifference Central Initial & Final No\nFiniteDifference Backward Initial & optional Final No\nOrthogonalCollocation GaussLobatto Initial Yes","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Here the default method is backward finite difference. These are enforced on an  infinite parameter basis (i.e., the parameter the differential operator is taken  with respect to). Thus, in the above examples any derivatives taken with respect to  t will use orthogonal collocation on finite elements since that is what we  specified as our derivative method. More information is provided in the  Derivative Methods Section below. However, we note here that  set_derivative_method can be invoked anytime after parameter definition  to specify/modify the derivative method used. More conveniently, we can call  set_all_derivative_methods:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> set_all_derivative_methods(model, FiniteDifference(Forward()))\n","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"warning: Warning\nInfiniteOpt does not ensure proper boundary conditions are provided by the  user. Thus, it is imperative that the user ensure these are provided appropriately  with the derivative evaluation method that is used. We recommend specifying  such conditions via a constraint that uses Restricted Variables. For  example:@constraint(model, initial_condition, y(0) == 42)","category":"page"},{"location":"guide/derivative/#Advanced-Definition","page":"Derivatives","title":"Advanced Definition","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"This section will detail the inner-workings and more advanced details behind  defining derivatives in InfiniteOpt.","category":"page"},{"location":"guide/derivative/#Manual-Definition","page":"Derivatives","title":"Manual Definition","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"The workflow for derivative definition mirrors that of variable definition as  summarized in the following steps:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Define the variable information via a JuMP.VariableInfo.\nBuild the derivative using build_derivative.\nAdd the derivative to the model via add_derivative.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"To exemplify this process, let's first define appropriate variable information:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> info = VariableInfo(true, 0., true, 42., false, 0., false, 0., false, false);","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"More detailed information on JuMP.VariableInfo is provided in the  Variable Definition Methodology section. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"warning: Warning\nInstances of JuMP.VariableInfo used to define derivatives should have  info.binary = false and info.integer = false, since most derivative  evaluation methods require that derivatives be continuous.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Now that we have our variable information we can make a derivative using  build_derivative:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> d = build_derivative(error, info, y, ξ);\n\njulia> d isa Derivative\ntrue","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Here the argument variable can be an infinite variable, semi-infinite variable,  derivative, or measure that depends on the infinite parameter provided. This will  error to the contrary.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Now we can add the derivative to the model via add_derivative which  will add the Derivative object and return GeneralVariableRef pointing  to it that we can use in InfiniteOpt expressions:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> dref = add_derivative(model, d)\n∂/∂ξ[y(t, ξ)]","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"This will also create any appropriate information based constraints (e.g., lower  bounds).","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Finally, we note that higher order derivatives are made by simply nesting this  process.","category":"page"},{"location":"guide/derivative/#Macro-Definition","page":"Derivatives","title":"Macro Definition","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"There are two macros we provide for defining derivatives:  @variable  that uses the Deriv variable type and @deriv. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"warning: Warning\nThe @derivative_variable macro used by previous versions of InfiniteOpt  is now discontinued in favor of using @variable with the Deriv  variable type object.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"First, @variable simply automates the process described above in a manner  inspired the by the syntax of the variable macros. As such it will support all  the same keywords and constraint syntax used with the variable macros. For  example, we can define the derivative  fracpartial^2 y(t xi)partial t^2 using d1 (defined in the  a Basic Usage section) enforcing a lower bound of 1 with an initial guess of 0 and  assign it to an alias GeneralVariableRef called dydt2:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> @variable(model, dydt2 >= 1, Deriv(d1, t), start = 0)\ndydt2(t, ξ)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"This will also support anonymous definition and multi-dimensional definition.  Please see Macro Variable Definition for more information.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Second, for more convenient definition we use @deriv (or @∂)  as shown in the Basic Usage section above. Unlike @variable this can handle any  InfiniteOpt expression as the argument input. It also can build derivatives  that depend on multiple infinite parameters and/or are taken to higher orders.  This is accomplished via recursive derivative definition, handling the nesting  as appropriate. For example, we can \"define\"  fracpartial^2 y(t xi)partial t^2 again:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> @deriv(d1, t)\ndydt2(t, ξ)\n\njulia> @deriv(y, t^2)\ndydt2(t, ξ)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Notice that the derivative references all point to the same derivative object we  defined up above with its alias name dydt2. This macro can also tackle complex  expressions using the appropriate calculus such as:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> @deriv(∫(y, ξ) * q, t)\n∂/∂t[∫{ξ ∈ [-1, 1]}[y(t, ξ)]]*q(t) + ∂/∂t[q(t)]*∫{ξ ∈ [-1, 1]}[y(t, ξ)]","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Thus, demonstrating the convenience of using @deriv.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"With all this in mind, we recommend using @deriv as the defacto method, but  then using @variable as a convenient way to specify information constraints  and an initial guess value/trajectory. ","category":"page"},{"location":"guide/derivative/#Derivative-Evaluation","page":"Derivatives","title":"Derivative Evaluation","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In this section, we detail how derivatives are evaluated in InfiniteOpt to then  be used in reformulating the model for solution. ","category":"page"},{"location":"guide/derivative/#Theory","page":"Derivatives","title":"Theory","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"To motivate the principles behind numerical derivative evaluation/transcription,  let's first consider the initial value problem:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"fracd y(t)dt = f(t y(t))    y(t_0) = y_0","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"With a finite support set t_0 t_1 dots t_k we can numerically  approximate the value of fracd y(t_n)dt at each time point t_n via  the Euler method (i.e., forward finite difference). We thus obtain a system of  equations:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"beginaligned\n y(t_n+1) = y(t_n) + (t_n+1 - t_n) fracd y(t_n)dt  forall n = 0 dots k-1\n fracd y(t_n)dt = f(t_n y(t_n))  forall n = 0 dots k  \n y(t_0) = y_0\nendaligned","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Thus, we obtain 3 sets of equations: ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"constraint transcriptions\nauxiliary derivative equations \nboundary conditions. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In the case above, we could reduce the number of equations by substituting out the  point derivatives in the constraint transcriptions since we have explicit  relationships in the auxiliary equations. However, this is not possible in general,  such as when we encounter more complex partial differential equations. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Thus, in InfiniteOpt derivatives are treated as variables which can be contained  implicitly in constraints and/or measures. This allows us to support implicit  dependencies and higher order derivatives. This means that when the model is  reformulated, its constraints and measures can be reformulated as normal  (treating any derivative dependencies as variables). We then can apply the  appropriate derivative evaluation technique to derive the necessary set of  auxiliary derivative equations to properly characterize the derivative variables.  This can be formalized as:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"beginaligned\n f_j(y(lambda) Dy(lambda)) leq 0  forall j in J lambda in Lambda \n h_i(y(lambda) Dy(lambda)) == 0  forall i in I lambda in Lambda \n g_k(y(hatlambda) Dy(hatlambda)) == 0  forall k in K hatlambda in hatLambda\nendaligned","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"where y(lambda) and Dy(lambda) denote all the variables and derivatives  in the problem and lambda the denote all the problem's infinite parameters.  With this let the constraints f_j denote the problem constraints which can  contain any variables, parameters, derivatives, and/or measures associated with  the problem. The constraints h_i denote the auxiliary derivative equations  formed by the appropriate numerical method to implicitly define the behavior of  the derivative variables present in f_j. Finally, the necessary boundary  conditions are provided in the constraints g_k.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Note that this general paradigm captures a wide breadth of problems and  derivative evaluation techniques. Higher order derivatives are dealt with naturally  since such techniques can be applied to nested derivative operators recursively.  For example, consider the second-order partial derivative:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"fracpartial^2 y(t xi)partial t^2 = fracpartialpartial tleft(fracpartial y(t xi)partial tright)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"The 2 forms are equivalent thus when we apply the Euler method we obtain the  following auxiliary equations:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"beginaligned\n y(t_n+1 xi) = y(t_n xi) + (t_n+1 - t_n) fracpartial y(t_n xi)partial t  forall xi in mathcalD_xi n = 0 dots k-1\n fracpartial y(t_n+1 xi)partial t = fracpartial y(t_n xi)partial t + (t_n+1 - t_n) fracpartial^2 y(t_n xi)partial t^2  forall xi in mathcalD_xi n = 0 dots k-1\nendaligned","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In the section below we detail the derivative evaluation methods that InfiniteOpt  natively implements.","category":"page"},{"location":"guide/derivative/#Derivative-Methods","page":"Derivatives","title":"Derivative Methods","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"As discussed briefly above in the Basic Usage section, we natively employ 4  derivative methods in InfiniteOpt (see the table in that section for a summary).","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"These methods are defined in association with individual infinite parameters and  will be applied to any derivatives that are taken with respect to that parameter.  These methods are specified via the derivative_method keyword argument in the  @infinite_parameter macro and can also be defined by invoking  set_derivative_method or set_all_derivative_methods:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> set_derivative_method(t, FiniteDifference(Forward()))\n","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In this example, we set t's derivative evaluation method to use forward finite  difference. This will also reset any changes that were made with the old method  (e.g., removing old collocation points). Now let's describe the ins and outs of  these methods.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"The first class of methods pertain to finite difference techniques. The syntax  for specifying these techniques is described in FiniteDifference and  exemplified here:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> FiniteDifference(Forward(), true)\nFiniteDifference{Forward}(Forward(), true)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"where the first argument indicates the type of finite difference we wish to employ  and the second argument indicates if this method should be enforced on boundary  points. By default, we have FiniteDifference(Backward(), true) which is the default  for all infinite parameters. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Forward finite difference (i.e., explicit Euler) is exemplified by approximating first  order derivative fracd y(t)dt via ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"y(t_n+1) = y(t_n) + (t_n+1 - t_n)fracd y(t_n)dt  forall n = 0 1 dots k-1","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Note that in this case, the boundary relation corresponds to n = 0 and would  be included if we set FiniteDifference(Forward(), true) or would excluded if we  let the second argument be false. We recommend, selecting false when an initial  condition is provided. Also, note that a terminal condition should be provided  when using this method since an auxiliary equation for the derivative at the  terminal point cannot be made. Thus, if a terminal condition is not given terminal  point derivative will be a free variable.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Central finite difference is exemplified by approximating the first order derivative  fracd y(t)dt via","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"y(t_n+1) = y(t_n-1) + (t_n+1 - t_n-1)fracd y(t_n)dt  forall n = 1 2 dots k-1","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Note that this form cannot be invoked at n = 0 or n = k and cannot  an equation at either boundary. With this in mind the syntax is FiniteDifference(Central())  where the second argument is omitted since it doesn't apply to this scheme. As a  result both initial and terminal conditions should be specified otherwise the  derivatives at those points will be free variables.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Backward finite difference (i.e., implicit euler) is our last (and default)  finite difference method and is exemplified by approximating the first order  derivative fracd y(t)dt via","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"y(t_n) = y(t_n-1) + (t_n - t_n-1)fracd y(t_n)dt  forall n = 1 2 dots k","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Here the boundary case corresponds to n = k and would be included if we set  FiniteDifference(Backward(), true) (the default) or excluded if we set the second  argument to false. We recommend, selecting false when a terminal condition is  provided. Also, note that an initial condition should always be given otherwise  the derivative at the first point will be free.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Finally, we employ orthogonal collocation on finite elements via the  OrthogonalCollocation object (please refer to it in the manual for  complete syntax details). In general terms, this technique fits an m degree  polynomial to each finite element (i.e., sequential support pair) and this fit is  done via m+1 collocation nodes (supports) which include the finite element  supports along with m-1 additional internal collocation nodes chosen at  orthogonal points to the polynomial. The typical syntax for specifying this method  is OrthogonalCollocation(num_nodes) where num_nodes indicates the number  collocation nodes to be used for each finite element. For example, we can specify  to use 3 collocation nodes (i.e., 1 internal node per finite element) corresponding  to a 2nd degree polynomial via","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> OrthogonalCollocation(3)\nOrthogonalCollocation{GaussLobatto}(3, GaussLobatto())","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Notice that the 2nd attribute is GaussLobatto which indicates that we are using  collocation nodes selected via Lobatto quadrature. This is currently the only  supported technique employed by OrthogonalCollocation although more may be added  in future versions. Please note that an initial condition must be provided otherwise  the corresponding derivative will be free variable. For more information on  orthogonal collocation over finite elements, this  page provides a  good reference.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Other methods can be employed via user-defined extensions. Please visit our  Extensions page for more information.","category":"page"},{"location":"guide/derivative/#User-Invoked-Evaluation","page":"Derivatives","title":"User-Invoked Evaluation","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Typically, derivative evaluation is handled when the model is reformulated in such  a way that the InfiniteModel is unmodified such that modifications and repeated  solutions can be done efficiently and seamlessly. This is also the recommended  workflow. However, we do provide user accessible derivative evaluation methods  that generate the auxiliary derivative equations and add them to the InfiniteModel. This can be useful for visualizing how these techniques work and can be helpful for  user-defined reformulation extensions (i.e., optimizer model extensions).","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"We can build these relations for a particular derivative via evaluate.  For example, let's build evaluation equations for d1:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> d1 \n∂/∂t[y(t, ξ)]\n\njulia> fill_in_supports!(t, num_supports = 3) # add supports first\n\njulia> evaluate(d1)\n\njulia> derivative_constraints(d1)\n2-element Vector{InfOptConstraintRef}:\n 5 ∂/∂t[y(t, ξ)](5, ξ) - y(10, ξ) + y(5, ξ) = 0.0, ∀ ξ ~ Uniform\n 5 ∂/∂t[y(t, ξ)](0, ξ) - y(5, ξ) + y(0, ξ) = 0.0, ∀ ξ ~ Uniform","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Note that we made sure t had supports first over which we could carry out the  evaluation, otherwise an error would have been thrown. Moreover, once the  evaluation was completed we were able to access the auxiliary equations via  derivative_constraints. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"We can also, add the necessary auxiliary equations for all the derivatives in the  model if we call evaluate_all_derivatives!:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> fill_in_supports!(ξ, num_supports = 4) # add supports first\n\njulia> evaluate_all_derivatives!(model)\n\njulia> derivative_constraints(dydt2)\n2-element Vector{InfOptConstraintRef}:\n 5 dydt2(5, ξ) - ∂/∂t[y(t, ξ)](10, ξ) + ∂/∂t[y(t, ξ)](5, ξ) = 0.0, ∀ ξ ~ Uniform\n 5 dydt2(0, ξ) - ∂/∂t[y(t, ξ)](5, ξ) + ∂/∂t[y(t, ξ)](0, ξ) = 0.0, ∀ ξ ~ Uniform","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Finally, we note that once derivative constraints have been added to the  InfiniteModel any changes to the respective infinite parameter sets, supports,  or derivative method will necessitate the deletion of these auxiliary constraints  and a warning will be thrown to indicate such:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> derivative_constraints(d1)\n2-element Vector{InfOptConstraintRef}:\n 5 ∂/∂t[y(t, ξ)](5, ξ) - y(10, ξ) + y(5, ξ) = 0.0, ∀ ξ ~ Uniform\n 5 ∂/∂t[y(t, ξ)](0, ξ) - y(5, ξ) + y(0, ξ) = 0.0, ∀ ξ ~ Uniform\n\njulia> add_supports(t, 0.2)\n┌ Warning: Support/method changes will invalidate existing derivative evaluation constraints that have been added to the InfiniteModel. Thus, these are being deleted.\n└ @ InfiniteOpt ~/build/pulsipher/InfiniteOpt.jl/src/scalar_parameters.jl:781\n\njulia> has_derivative_constraints(d1)\nfalse","category":"page"},{"location":"guide/derivative/#Query-Methods","page":"Derivatives","title":"Query Methods","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Here we describe the various query techniques that we can employ on derivatives  in InfiniteOpt.","category":"page"},{"location":"guide/derivative/#Basic-Queries","page":"Derivatives","title":"Basic Queries","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"First, let's overview the basic object inquiries: derivative_argument,  operator_parameter, derivative_method, and name:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> derivative_argument(dydt2) # get the variable the derivative operates on\n∂/∂t[y(t, ξ)]\n\njulia> operator_parameter(dydt2) # get the parameter the operator is taken with respect to\nt\n\njulia> derivative_method(dydt2) # get the numerical derivative evaluation method\nFiniteDifference{Forward}(Forward(), true)\n\njulia> name(dydt2) # get the name if there is one\n\"dydt2\"","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"These all work as exemplified above. We note that derivative_method simply  queries the derivative method associated with the operator parameter.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Derivatives also inherit all the usage methods employed by infinite variables.  For example:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> is_used(d1)\ntrue\n\njulia> used_by_measure(dydt2)\nfalse\n\njulia> used_by_semi_infinite_variable(d2)\ntrue","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Also, since derivatives are analogous to infinite variables, they inherit many  of the same queries including parameter_refs:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> parameter_refs(d1)\n(t, ξ)\n\njulia> parameter_refs(derivative_argument(d1))\n(t, ξ)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Since derivatives simply inherit their infinite parameter dependencies from the  argument variable, the above lines are equivalent.","category":"page"},{"location":"guide/derivative/#Variable-Information","page":"Derivatives","title":"Variable Information","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Again, since derivatives are essentially a special case of infinite variables, they  inherit all the same methods for querying variable information. For example,  consider the following queries:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> has_lower_bound(dydt2)\ntrue\n\njulia> lower_bound(dydt2)\n1.0\n\njulia> LowerBoundRef(dydt2)\ndydt2(t, ξ) ≥ 1.0, ∀ t ∈ [0, 10], ξ ~ Uniform\n\njulia> has_upper_bound(dydt2)\nfalse \n\njulia> func = start_value_function(dydt2);","category":"page"},{"location":"guide/derivative/#Model-Queries","page":"Derivatives","title":"Model Queries","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"We can also determine the number of derivatives a model contains and obtain a list  of them via num_derivatives and all_derivatives, respectively:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> num_derivatives(model)\n7\n\njulia> all_derivatives(model)\n7-element Vector{GeneralVariableRef}:\n ∂/∂t[y(t, ξ)]\n ∂/∂ξ[∂/∂t[y(t, ξ)]]\n ∂/∂t[q(t)]\n ∂/∂t[∂/∂t[q(t)]]\n ∂/∂ξ[y(t, ξ)]\n dydt2(t, ξ)\n ∂/∂t[∫{ξ ∈ [-1, 1]}[y(t, ξ)]]","category":"page"},{"location":"guide/derivative/#Modification-Methods","page":"Derivatives","title":"Modification Methods","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In this section, we'll highlight some of the modification methods that can be  used on derivatives in InfiniteOpt.","category":"page"},{"location":"guide/derivative/#Variable-Information-2","page":"Derivatives","title":"Variable Information","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"As discussed above, derivatives inherit the same variable methods as infinite  variables. Thus we can modify/delete bounds and starting values for derivatives  using the same methods. For example:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> set_lower_bound(dydt2, 0)\n\njulia> lower_bound(dydt2)\n0.0\n\njulia> set_upper_bound(dydt2, 2)\n\njulia> upper_bound(dydt2)\n2.0\n\njulia> fix(dydt2, 42, force = true)\n\njulia> fix_value(dydt2) \n42.0\n\njulia> set_start_value_function(dydt2, (t, xi) -> t + xi)\n\njulia> unfix(dydt2)\n","category":"page"},{"location":"guide/derivative/#Deletion","page":"Derivatives","title":"Deletion","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Finally, the are 2 deletion methods we can employ apart from deleting variable  information. First, we can employ delete_derivative_constraints to  delete any derivative evaluation constraints associated with a particular  derivative:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> delete_derivative_constraints(d2)\n\njulia> has_derivative_constraints(d2)\nfalse","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Lastly, we can employ delete to delete a particular derivative and all its  dependencies:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> delete(model, d2)\n\njulia> is_valid(model, d2)\nfalse","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"DocTestFilters = [r\"≥|>=\", r\" == | = \", r\" ∈ | in \", r\" for all | ∀ \"]","category":"page"},{"location":"guide/optimize/#opt_docs","page":"Optimization","title":"Optimization","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"A guide for optimizing (solving) InfiniteOpt models. See the respective  technical manual for more details.","category":"page"},{"location":"guide/optimize/#Overview","page":"Optimization","title":"Overview","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Fundamentally, we seek to optimize a given infinite optimization model that  we have defined and this is the very reason why InfiniteOpt was created. Thus,  InfiniteOpt offers a general and intuitive platform to do just this. This  is made up of transforming the InfiniteModel into a standard optimization  problem stored as a JuMP.Model (referred to as the optimizer_model) that is  then optimized via a compatible optimizer. By default this is done via a  TranscriptionModel as described on the previous page. However, user-defined  reformulation strategies can readily be implemented as described in the  Optimizer Models section on the extensions page. ","category":"page"},{"location":"guide/optimize/#Basic-Usage","page":"Optimization","title":"Basic Usage","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"For most users, optimize! is the only  method required to optimize an InfiniteModel. This is exactly analogous  to that of any JuMP.Model and is designed to provide a similar user experience.  Let's first define an InfiniteModel with an appropriate optimizer:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> using InfiniteOpt, Ipopt;\n\njulia> model = InfiniteModel(Ipopt.Optimizer);\n\njulia> set_optimizer_attribute(model, \"print_level\", 0);\n\njulia> @infinite_parameter(model, t in [0, 10], num_supports = 10);\n\njulia> @variable(model, y >= 0, Infinite(t));\n\njulia> @variable(model, z >= 0);\n\njulia> @objective(model, Min, 2z);\n\njulia> @constraint(model, c1, z >= y);\n\njulia> @constraint(model, c2, y(0) == 42);\n\njulia> print(model)\nMin 2 z\nSubject to\n y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n z ≥ 0.0\n c1 : z - y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n y(0) ≥ 0.0\n c2 : y(0) = 42.0","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Now we optimize the model using optimize!:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> optimize!(model);\n\njulia> termination_status(model)\nLOCALLY_SOLVED::TerminationStatusCode = 4","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Now our model has been solved and we can query the solution. How to query the  solution is explained on the Results page.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"If no optimizer has been specified for the InfiniteModel, one can be provided  via set_optimizer:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_optimizer(model, Ipopt.Optimizer)","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"A number of methods also exist to adjust the optimizer settings such as  suppressing output. This is explained below in the  Optimizer Settings section.","category":"page"},{"location":"guide/optimize/#Optimizer-Models","page":"Optimization","title":"Optimizer Models","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"As discussed previously, InfiniteModels contain an optimizer_model field  which stores a transformed finite version of the model in a JuMP.Model that  contains a data object (that stores a mapping between the transformed model and  the infinite model) in the Model.ext dictionary with an associated key. By  default a JuMP.Model using TranscriptionData stored under the key  :TransData is used and is referred to as a TranscriptionModel. The  optimizer model is then what is used to optimize the infinite model and it provides  the information exacted by solution queries mapped back to the infinite  model using the mapping data structure.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"The process for optimizing an InfiniteModel is summarized in the following  steps:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"fully define the InfiniteModel\nbuild the optimizer model via build_optimizer_model!\noptimize the optimizer_model via optimize!.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Here build_optimizer_model! creates a reformulated finite version of the  InfiniteModel, stores it in InfiniteModel.optimizer_model via  set_optimizer_model, and indicates that the optimizer model is ready  via set_optimizer_model_ready. These steps are all automated when  optimize! is invoked on the  InfiniteModel.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"The optimizer_model can be queried/extracted at any time from an InfiniteModel  via optimizer_model. For example, let's extract the optimizer model  from the example above in the basic usage section: ","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> trans_model = optimizer_model(model)\nA JuMP Model\nMinimization problem with:\nVariables: 11\nObjective function type: AffExpr\n`AffExpr`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\n`AffExpr`-in-`MathOptInterface.GreaterThan{Float64}`: 10 constraints\n`VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 11 constraints\nModel mode: AUTOMATIC\nCachingOptimizer state: ATTACHED_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"The JuMP variable(s) stored in the optimizer model that correspond to a  particular InfiniteOpt variable can be queried via  optimizer_model_variable.  Using a TranscriptionModel this equivalent to calling  transcription_variable. Thus, using the going example we get:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> optimizer_model_variable(y) # infinite variable\n10-element Vector{VariableRef}:\n y(support: 1)\n y(support: 2)\n y(support: 3)\n y(support: 4)\n y(support: 5)\n y(support: 6)\n y(support: 7)\n y(support: 8)\n y(support: 9)\n y(support: 10)\n\njulia> optimizer_model_variable(z) # finite variable\nz","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"In like manner, we get the JuMP constraints corresponding to a particular  InfiniteOpt constraint via  optimizer_model_constraint.  Using a TranscriptionModel this equivalent to calling  transcription_constraint. Thus, using going example we get: ","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> optimizer_model_constraint(c1) # infinite constraint\n10-element Vector{ConstraintRef}:\n c1(support: 1) : z - y(support: 1) ≥ 0.0\n c1(support: 2) : z - y(support: 2) ≥ 0.0\n c1(support: 3) : z - y(support: 3) ≥ 0.0\n c1(support: 4) : z - y(support: 4) ≥ 0.0\n c1(support: 5) : z - y(support: 5) ≥ 0.0\n c1(support: 6) : z - y(support: 6) ≥ 0.0\n c1(support: 7) : z - y(support: 7) ≥ 0.0\n c1(support: 8) : z - y(support: 8) ≥ 0.0\n c1(support: 9) : z - y(support: 9) ≥ 0.0\n c1(support: 10) : z - y(support: 10) ≥ 0.0","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"We can also query the expressions via  optimizer_model_expression:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> optimizer_model_expression(z - y^2 + 3) # infinite expression\n10-element Vector{AbstractJuMPScalar}:\n -y(support: 1)² + z + 3\n -y(support: 2)² + z + 3\n -y(support: 3)² + z + 3\n -y(support: 4)² + z + 3\n -y(support: 5)² + z + 3\n -y(support: 6)² + z + 3\n -y(support: 7)² + z + 3\n -y(support: 8)² + z + 3\n -y(support: 9)² + z + 3\n -y(support: 10)² + z + 3","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"note: Note\nLike supports the optimizer_model_[obj] methods also employ the  label::Type{AbstractSupportLabel} = PublicLabel keyword argument that by  default will return variables/expressions/constraints associated with public  supports. The full set (e.g., ones corresponding to internal collocation nodes)  is obtained via label = All.\nThese methods also employ the ndarray::Bool keyword argument that will cause the  output to be formatted as a n-dimensional array where the dimensions  correspond to the infinite parameter dependencies. For example, if we have an  infinite variable y(t, ξ) and we invoke a query method with ndarray = true  then we'll get a matrix whose dimensions correspond to the supports of t and  ξ, respectively. Also, if ndarray = true then label correspond to the  intersection of supports labels in contrast to its default of invoking the union  of the labels.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"The purpose of this optimizer_model abstraction is to readily enable user-defined  reformulation extensions (e.g., using polynomial chaos expansion theory). However,  this is all handled behind the scenes such that most users can interact with  InfiniteModels like any JuMP.Model.","category":"page"},{"location":"guide/optimize/#opt_settings","page":"Optimization","title":"Optimizer Settings","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"A few optimizer settings can be set in a consistent way agnostic of particular  solver keywords. One such setting is that of suppressing and unsuppressing  optimizer verbose output. This is accomplished via  set_silent and  unset_silent. The syntax is  exemplified below:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_silent(model)\ntrue\n\njulia> unset_silent(model)\nfalse","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"We can also adjust the time limit in a solver independent fashion via  set_time_limit_sec, unset_time_limit_sec, and  time_limit_sec. These methods are illustrated below:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_time_limit_sec(model, 100)\n100\n\njulia> time_limit_sec(model)\n100.0\n\njulia> unset_time_limit_sec(model)","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Other optimizer specific settings can be set via  set_optimizer_attribute. For example, let's set the maximum CPU time  for Ipopt:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_optimizer_attribute(model, \"max_cpu_time\", 60.)\n60.0","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Multiple settings  can be specified via set_optimizer_attributes. For  example, let's specify the tolerance and the maximum number of iterations:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_optimizer_attributes(model, \"tol\" => 1e-4, \"max_iter\" => 100)","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Finally, we can query optimizer settings via get_optimizer_attribute.  For example, let's query the maximum number of iterations:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> get_optimizer_attribute(model, \"max_iter\")\n100","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Note this only works if the attribute has been previously specified.","category":"page"},{"location":"manual/objective/#obj_manual","page":"Objectives","title":"Objectives","text":"","category":"section"},{"location":"manual/objective/","page":"Objectives","title":"Objectives","text":"A technical manual for objective functions in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/objective/#Queries","page":"Objectives","title":"Queries","text":"","category":"section"},{"location":"manual/objective/","page":"Objectives","title":"Objectives","text":"JuMP.objective_sense(::InfiniteModel)\nJuMP.objective_function_type(::InfiniteModel)\nJuMP.objective_function(::InfiniteModel)\nobjective_has_measures","category":"page"},{"location":"manual/objective/#JuMP.objective_sense-Tuple{InfiniteModel}","page":"Objectives","title":"JuMP.objective_sense","text":"JuMP.objective_sense(model::InfiniteModel)::MOI.OptimizationSense\n\nExtend JuMP.objective_sense to return the objective sense of the infinite model  model.\n\nExample\n\njulia> objective_sense(model)\nMIN_SENSE::OptimizationSense = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.objective_function_type-Tuple{InfiniteModel}","page":"Objectives","title":"JuMP.objective_function_type","text":"JuMP.objective_function_type(model::InfiniteModel)::Type{<:JuMP.AbstractJuMPScalar}\n\nExtend JuMP.objective_function_type to return the objective function type of  infinite model model.\n\nExample\n\njulia> objective_function_type(model)\nGenericAffExpr{Float64,GeneralVariableRef}\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.objective_function-Tuple{InfiniteModel}","page":"Objectives","title":"JuMP.objective_function","text":"JuMP.objective_function(model::InfiniteModel)::JuMP.AbstractJuMPScalar\n\nExtend JuMP.objective_function to return the objective of infinite model  model.\n\nExample\n\njulia> objective_function(model)\n1\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#InfiniteOpt.objective_has_measures","page":"Objectives","title":"InfiniteOpt.objective_has_measures","text":"objective_has_measures(model::InfiniteModel)::Bool\n\nReturn Bool whether the objective function contains any measures.\n\n\n\n\n\n","category":"function"},{"location":"manual/objective/#Modification","page":"Objectives","title":"Modification","text":"","category":"section"},{"location":"manual/objective/","page":"Objectives","title":"Objectives","text":"JuMP.set_objective_function(::InfiniteModel, ::JuMP.AbstractJuMPScalar)\nJuMP.set_objective_function(::InfiniteModel, ::Real)\nJuMP.set_objective_sense(::InfiniteModel, ::MOI.OptimizationSense)\nJuMP.set_objective(::InfiniteModel, ::MOI.OptimizationSense, ::Union{JuMP.AbstractJuMPScalar, Real})\nJuMP.set_objective_coefficient(::InfiniteModel, ::GeneralVariableRef, ::Real)","category":"page"},{"location":"manual/objective/#JuMP.set_objective_function-Tuple{InfiniteModel, AbstractJuMPScalar}","page":"Objectives","title":"JuMP.set_objective_function","text":"JuMP.set_objective_function(model::InfiniteModel,\n                            func::JuMP.AbstractJuMPScalar)::Nothing\n\nExtend JuMP.set_objective_function to set the objective expression of infinite model model. Errors if func contains infinite variables and/or parameters. Also errors if func contains invalid variables.\n\nExample\n\njulia> set_objective_function(model, 2x + 1)\n\njulia> objective_function(model)\n2 x + 1\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.set_objective_function-Tuple{InfiniteModel, Real}","page":"Objectives","title":"JuMP.set_objective_function","text":"JuMP.set_objective_function(model::InfiniteModel, func::Real)::Nothing\n\nExtend JuMP.set_objective_function to set the objective expression of model with a number.\n\nExample\n\njulia> set_objective_function(model, 3)\n\njulia> objective_function(model)\n3\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.set_objective_sense-Tuple{InfiniteModel, MathOptInterface.OptimizationSense}","page":"Objectives","title":"JuMP.set_objective_sense","text":"JuMP.set_objective_sense(model::InfiniteModel,\n                         sense::MOI.OptimizationSense)::Nothing\n\nExtend JuMP.set_objective_sense to set the objective sense of infinite model  model.\n\nExample\n\njulia> set_objective_sense(model, MOI.MIN_SENSE)\n\njulia> objective_sense(model)\nMIN_SENSE::OptimizationSense = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.set_objective-Tuple{InfiniteModel, MathOptInterface.OptimizationSense, Union{Real, AbstractJuMPScalar}}","page":"Objectives","title":"JuMP.set_objective","text":"JuMP.set_objective(model::InfiniteModel, sense::MOI.OptimizationSense,\n                   func::Union{JuMP.AbstractJuMPScalar, Real})::Nothing\n\nExtend JuMP.set_objective to set the objective of infinite model model. Errors if func contains infinite variables and/or parameters, or if it does not belong to the model.\n\nExample\n\njulia> set_objective(model, MOI.MIN_SENSE, 2x + 1)\n\njulia> objective_function(model)\n2 x + 1\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.set_objective_coefficient-Tuple{InfiniteModel, GeneralVariableRef, Real}","page":"Objectives","title":"JuMP.set_objective_coefficient","text":"JuMP.set_objective_coefficient(model::InfiniteModel,\n                               variable::GeneralVariableRef,\n                               coefficient::Real)::Nothing\n\nExtend JuMP.set_objective_coefficient Set the linear objective coefficient  associated with variable to coefficient. Errors if the function type is  unsupported.\n\nExample\n\njulia> @variable(model, x)\nx\n\njulia> @variable(model, y)\ny\n\njulia> @objective(model, x + y)\nx + y\n\njulia> set_objective_coefficient(model, y, 2)\n\njulia> objective_function(model)\nx + 2 y\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#opt_manual","page":"Optimization","title":"Optimization","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"A technical manual for optimizing (solving) InfiniteOpt models. See the  respective guide for more information.","category":"page"},{"location":"manual/optimize/#Optimize","page":"Optimization","title":"Optimize","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"JuMP.optimize!(::InfiniteModel)","category":"page"},{"location":"manual/optimize/#JuMP.optimize!-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.optimize!","text":"JuMP.optimize!(model::InfiniteModel;\n               bridge_constraints::Bool=true, kwargs...])\n\nExtend JuMP.optimize! to optimize infinite models using the internal optimizer model. Will call build_optimizer_model! if the optimizer model isn't up to date. The kwargs correspond to keyword arguments passed to build_optimizer_model! if any are defined.\n\nExample\n\njulia> optimize!(model)\n\njulia> has_values(model)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#Optimizer-Settings","page":"Optimization","title":"Optimizer Settings","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"JuMP.set_optimizer(::InfiniteModel, ::Any)\nJuMP.set_silent(::InfiniteModel)\nJuMP.unset_silent(::InfiniteModel)\nJuMP.set_time_limit_sec(::InfiniteModel, ::Any)\nJuMP.unset_time_limit_sec(::InfiniteModel)\nJuMP.time_limit_sec(::InfiniteModel)\nJuMP.set_optimizer_attribute(::InfiniteModel, ::String, ::Any)\nJuMP.set_optimizer_attribute(::InfiniteModel,::MOI.AbstractOptimizerAttribute,::Any)\nJuMP.set_optimizer_attributes(::InfiniteModel, ::Pair)\nJuMP.get_optimizer_attribute(::InfiniteModel, ::String)\nJuMP.get_optimizer_attribute(::InfiniteModel,::MOI.AbstractOptimizerAttribute)\nJuMP.add_bridge(::InfiniteModel, ::Type{<:MOI.Bridges.AbstractBridge})","category":"page"},{"location":"manual/optimize/#JuMP.set_optimizer-Tuple{InfiniteModel, Any}","page":"Optimization","title":"JuMP.set_optimizer","text":"JuMP.set_optimizer(model::InfiniteModel,\n                   [optimizer_constructor;\n                   bridge_constraints::Bool = true])\n\nExtend JuMP.set_optimizer to set optimizer of infinite models. Specifically, the optimizer of the optimizer model is modified.\n\nExample\n\njulia> set_optimizer(model, Clp.Optimizer)\n\njulia> optimizer_model(model)\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: SolverName() attribute not implemented by the optimizer.\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_silent-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.set_silent","text":"JuMP.set_silent(model::InfiniteModel)\n\nExtend JuMP.set_silent for infinite models to take precedence over any other attribute controlling verbosity and requires the solver to produce no output.\n\nExample\n\njulia> set_silent(model)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.unset_silent-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.unset_silent","text":"JuMP.unset_silent(model::InfiniteModel)\n\nExtend JuMP.unset_silent for infinite models to neutralize the effect of the set_silent function and let the solver attributes control the verbosity.\n\nExample\n\njulia> unset_silent(model)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_time_limit_sec-Tuple{InfiniteModel, Any}","page":"Optimization","title":"JuMP.set_time_limit_sec","text":"JuMP.set_time_limit_sec(model::InfiniteModel, limit)\n\nExtend set_time_limit_sec to set the time limit (in seconds) of the solver. Can be unset using unset_time_limit_sec or with limit set to nothing.\n\nExample\n\njulia> set_time_limit_sec(model, 100)\n100\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.unset_time_limit_sec-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.unset_time_limit_sec","text":"JuMP.unset_time_limit_sec(model::InfiniteModel)\n\nExtend unset_time_limit_sec to unset the time limit of the solver. Can be set  using set_time_limit_sec.\n\nExample\n\njulia> unset_time_limit_sec(model)\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.time_limit_sec-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.time_limit_sec","text":"JuMP.time_limit_sec(model::InfiniteModel)\n\nExtend time_limit_sec to get the time limit (in seconds) of the solve used by  the optimizer model (nothing if unset). Can be set using set_time_limit_sec.\n\nExample\n\njulia> time_limit_sec(model)\n100\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_optimizer_attribute-Tuple{InfiniteModel, String, Any}","page":"Optimization","title":"JuMP.set_optimizer_attribute","text":"JuMP.set_optimizer_attribute(model::InfiniteModel, name::String, value)\n\nExtend set_optimizer_attribute to specify a solver-specific attribute  identified by name to value.\n\nExample\n\njulia> set_optimizer_attribute(model, \"SolverSpecificAttributeName\", true)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_optimizer_attribute-Tuple{InfiniteModel, MathOptInterface.AbstractOptimizerAttribute, Any}","page":"Optimization","title":"JuMP.set_optimizer_attribute","text":"JuMP.set_optimizer_attribute(model::InfiniteModel,\n                             attr::MOI.AbstractOptimizerAttribute,\n                             value)\n\nExtend set_optimizer_attribute to set the solver-specific attribute attr in  model to value.\n\nExample\n\njulia> set_optimizer_attribute(model, MOI.Silent(), true)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_optimizer_attributes-Tuple{InfiniteModel, Pair}","page":"Optimization","title":"JuMP.set_optimizer_attributes","text":"JuMP.set_optimizer_attributes(model::InfiniteModel, pairs::Pair...)\n\nExtend set_optimizer_attributes to set multiple solver attributes given a  list of attribute => value pairs. Calls  set_optimizer_attribute(model, attribute, value) for each pair.\n\nExample\n\njulia> model = Model(Ipopt.Optimizer);\n\njulia> set_optimizer_attributes(model, \"tol\" => 1e-4, \"max_iter\" => 100)\n\nis equivalent to:\n\njulia> set_optimizer_attribute(model, \"tol\", 1e-4);\n\njulia> set_optimizer_attribute(model, \"max_iter\", 100);\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.get_optimizer_attribute-Tuple{InfiniteModel, String}","page":"Optimization","title":"JuMP.get_optimizer_attribute","text":"JuMP.get_optimizer_attribute(model::InfiniteModel, name::String)\n\nExtend get_optimizer_attribute to return the value associated with the  solver-specific attribute named name.\n\nExample julia-repl julia> get_optimizer_attribute(model, \"tol\") 0.0001`\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.get_optimizer_attribute-Tuple{InfiniteModel, MathOptInterface.AbstractOptimizerAttribute}","page":"Optimization","title":"JuMP.get_optimizer_attribute","text":"JuMP.get_optimizer_attribute(model::InfiniteModel,\n                             attr::MOI.AbstractOptimizerAttribute)\n\nExtend get_optimizer_attribute to return the value of the solver-specific  attribute attr in model.\n\nExample julia-repl julia> get_optimizer_attribute(model, MOI.Silent()) true`\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.add_bridge-Tuple{InfiniteModel, Type{var\"#s40\"} where var\"#s40\"<:MathOptInterface.Bridges.AbstractBridge}","page":"Optimization","title":"JuMP.add_bridge","text":"JuMP.add_bridge(model::InfiniteModel,\n                BridgeType::Type{<:MOI.Bridges.AbstractBridge})\n\nExtend JuMP.add_bridge to add BridgeType to the list of bridges that can be used by the optimizer model to transform unsupported constraints into an equivalent formulation using only constraints supported by the optimizer.\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#Optimizer-Queries","page":"Optimization","title":"Optimizer Queries","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"JuMP.solver_name(model::InfiniteModel)\nJuMP.backend(model::InfiniteModel)\nJuMP.mode(model::InfiniteModel)\nJuMP.bridge_constraints(::InfiniteModel)","category":"page"},{"location":"manual/optimize/#JuMP.solver_name-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.solver_name","text":"JuMP.solver_name(model::InfiniteModel)\n\nExtend solver_name to return the name of the solver being used if there is an  optimizer selected and it has a name attribute. Otherwise, an error is thrown.\n\nExample\n\njulia> solver_name(model)\n\"Gurobi\"\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.backend-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.backend","text":"JuMP.backend(model::InfiniteModel)\n\nExtend backend to return the MathOptInterface backend associated with the  optimizer model. Note this will be empty if the optimizer model has not been  build yet.\n\nExample\n\njulia> moi_model = backend(model);\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.mode-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.mode","text":"JuMP.mode(model::InfiniteModel)\n\nExtend mode to return the MathOptInterface mode the optimizer model is in.\n\nExample\n\njulia> mode(model)\nAUTOMATIC::ModelMode = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.bridge_constraints-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.bridge_constraints","text":"JuMP.bridge_constraints(model::InfiniteModel)::Bool\n\nExtend JuMP.bridge_constraints to return if an infinite model model has an optimizer model where the optimizer is set and unsupported constraints are automatically bridged to equivalent supported constraints when an appropriate transformation is available.\n\nExample\n\njulia> bridge_constraints(model)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#Optimizer-Model-API","page":"Optimization","title":"Optimizer Model API","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"optimizer_model\nset_optimizer_model\noptimizer_model_key(::InfiniteModel)\noptimizer_model_key(::JuMP.Model)\nbuild_optimizer_model!(::InfiniteModel)\nbuild_optimizer_model!\nclear_optimizer_model_build!(::InfiniteModel)\nclear_optimizer_model_build!(::JuMP.Model)\nInfiniteOpt.add_infinite_model_optimizer\noptimizer_model_variable(::GeneralVariableRef)\noptimizer_model_variable\nsupports(::Union{DecisionVariableRef, MeasureRef})\nInfiniteOpt.variable_supports\noptimizer_model_expression(::JuMP.AbstractJuMPScalar)\noptimizer_model_expression\nsupports(::JuMP.AbstractJuMPScalar)\nInfiniteOpt.expression_supports\nInfiniteOpt.optimizer_model_constraint(::InfOptConstraintRef)\noptimizer_model_constraint\nsupports(::InfOptConstraintRef)\nInfiniteOpt.constraint_supports\noptimizer_model_ready\nset_optimizer_model_ready","category":"page"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model","page":"Optimization","title":"InfiniteOpt.optimizer_model","text":"optimizer_model(model::InfiniteModel)::JuMP.Model\n\nReturn the JuMP model stored in model that is used to solve it.\n\nExample\n\njulia> opt_model = optimizer_model(model)\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.set_optimizer_model","page":"Optimization","title":"InfiniteOpt.set_optimizer_model","text":"set_optimizer_model(inf_model::InfiniteModel, opt_model::JuMP.Model;\n                    inherit_optimizer::Bool = true)\n\nSpecify the JuMP model that is used to solve inf_model. This is intended for internal use and extensions. Note that opt_model should contain extension data to allow it to map to inf_model in a manner similar to TranscriptionModel. inherit_optimizer indicates whether add_infinite_model_optimizer should be invoked on the new optimizer mode to inherit the optimizer constuctor and attributes currently stored in inf_model.\n\nExample\n\njulia> set_optimizer_model(model, TranscriptionModel())\n\njulia> optimizer_model(model)\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_key-Tuple{InfiniteModel}","page":"Optimization","title":"InfiniteOpt.optimizer_model_key","text":"optimizer_model_key(model::InfiniteModel)::Any\n\nReturn the extension key used in the optimizer model of model. Errors if optimizer_model.ext contains more than one key. This is intended for internal use and extensions. For extensions this is used to dispatch to the appropriate optmizer model functions such as extensions to build_optimizer_model!.\n\nExample\n\njulia> optimizer_model_key(model)\n:TransData\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_key-Tuple{Model}","page":"Optimization","title":"InfiniteOpt.optimizer_model_key","text":"optimizer_model_key(model::JuMP.Model)::Any\n\nReturn the extension key used in the optimizer model model. Errors if model.ext contains more than one key. This is intended for internal use and extensions. For extensions this is used to dispatch to the appropriate optmizer model functions such as extensions to build_optimizer_model!. This is intended as an internal method. See  optimizer_model_key  for the public method\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.build_optimizer_model!-Tuple{InfiniteModel}","page":"Optimization","title":"InfiniteOpt.build_optimizer_model!","text":"build_optimizer_model!(model::InfiniteModel; [kwargs...])\n\nBuild the optimizer model stored in model such that it can be treated as a normal JuMP model. Specifically, translate the variables and constraints stored in model into ones that are stored in the optimizer model and can be solved. This is provided generally to accomodate extensions that use custom optimizer model types in accordance with optimizer_model_key. However, it may be useful in certain applications when the user desires to force a build without calling optimize!. Extensions will need to implement their own version of the function build_optimizer_model!(model::InfiniteModel, key::Val{ext_key_name}; kwargs...).\n\nExample\n\njulia> build_optimizer_model!(model)\n\njulia> optimizer_model_ready(model)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.build_optimizer_model!","page":"Optimization","title":"InfiniteOpt.build_optimizer_model!","text":"build_optimizer_model!(model::InfiniteModel, key::Val{ext_key_name};\n                       [kwargs...])\n\nBuild the optimizer model stored in model such that it can be treated as a normal JuMP model, where the Model.ext field contains a key that points to a datastructure that appropriately maps the data between the two models. The key argument should be be typed to Val{ext_key_name}. This should also use clear_optimizer_model_build! to empty the out the current optimizer model. Ultimately, set_optimizer_model should be called to insert the build optimizer model into model and set_optimizer_model_ready should be used to update the optimizer model's status.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.clear_optimizer_model_build!-Tuple{InfiniteModel}","page":"Optimization","title":"InfiniteOpt.clear_optimizer_model_build!","text":"clear_optimizer_model_build!(model::InfiniteModel)::JuMP.Model\n\nEmpty the optimizer model using appropriate calls of Base.empty!. This effectively resets model.optimizer_model except the optimizer, its attributes, and an an emptied optimizer model data struct are maintained. This is intended as an internal method for use by build_optimizer_model!.\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.clear_optimizer_model_build!-Tuple{Model}","page":"Optimization","title":"InfiniteOpt.clear_optimizer_model_build!","text":"clear_optimizer_model_build!(model::JuMP.Model)::JuMP.Model\n\nEmpty the optimizer model using appropriate calls of Base.empty!. This effectively resets model except the optimizer, its attributes, and an an emptied optimizer model data struct are maintained. This is intended as an internal method for use by build_optimizer_model!.\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.add_infinite_model_optimizer","page":"Optimization","title":"InfiniteOpt.add_infinite_model_optimizer","text":"add_infinite_model_optimizer(opt_model::JuMP.Model, inf_model::InfiniteModel)\n\nParse the current optimizer and its attributes associated with inf_model and load them into opt_model. This is intended to be used as an internal method for set_optimizer_model.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_variable-Tuple{GeneralVariableRef}","page":"Optimization","title":"InfiniteOpt.optimizer_model_variable","text":"optimizer_model_variable(vref::GeneralVariableRef; \n                         [label::Type{<:AbstractSupportLabel} = PublicLabel, \n                         ndarray::Bool = false,\n                         kwargs...])\n\nReturn the reformulation variable(s) stored in the optimizer model that correspond to vref. Also errors if no such variable can be found in the optimizer model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of optimizer_model_variable. Errors if such an extension has not been written. \n\nBy default only the variables associated with public supports are returned, the  full set can be accessed via label = All. Moreover, infinite variables are  returned as a list corresponding to their supports. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the variable has multiple  infinite parameter dependencies. The corresponding supports are obtained via  supports using the same keyword arguments.\n\nExample\n\njulia> optimizer_model_variable(x) # infinite variable\n2-element Array{VariableRef,1}:\n x(support: 1)\n x(support: 2)\n\njulia> optimizer_model_variable(z) # finite variable\nz\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_variable","page":"Optimization","title":"InfiniteOpt.optimizer_model_variable","text":"optimizer_model_variable(vref::GeneralVariableRef, key::Val{ext_key_name};\n                         [kwargs...])\n\nReturn the reformulation variable(s) stored in the optimizer model that correspond to vref. This needs to be defined for extensions that implement a custom optimizer model type. Principally, this is accomplished by typed the key argument to Val{ext_key_name}. Keyword arguments can be added as needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.supports-Tuple{Union{MeasureRef, DecisionVariableRef}}","page":"Optimization","title":"InfiniteOpt.supports","text":"supports(vref::DecisionVariableRef; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel, \n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the supports associated with vref in the optimizer model. Errors if InfiniteOpt.variable_supports has not been extended for the optimizer model type or if vref is not be reformulated in the optimizer model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of variable_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  variables are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the variable has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(vref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\nsupports(expr::JuMP.AbstractJuMPScalar; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel,\n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the support associated with expr. Errors if expr is not associated with the constraint mappings stored in optimizer_model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of expression_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  expressions are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(cref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.variable_supports","page":"Optimization","title":"InfiniteOpt.variable_supports","text":"variable_supports(optimizer_model::JuMP.Model, vref,\n                  key::Val{ext_key_name}; \n                  [kwargs...])::Vector\n\nReturn the supports associated with the mappings of vref in optimizer_model. This dispatches off of key which permits optimizer model extensions. This should throw an error if vref is not associated with the variable mappings stored in optimizer_model. Keyword arguments can be added as needed. Note that no extension is necessary for point or finite variables. \n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_expression-Tuple{AbstractJuMPScalar}","page":"Optimization","title":"InfiniteOpt.optimizer_model_expression","text":"optimizer_model_expression(expr::JuMP.AbstractJuMPScalar; \n                           [label::Type{<:AbstractSupportLabel} = PublicLabel,\n                           ndarray::Bool = false, \n                           kwargs...])\n\nReturn the reformulation expression(s) stored in the optimizer model that correspond to expr. Also errors if no such expression can be found in the optimizer model (meaning one or more of the underlying variables have not been transcribed).\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of optimizer_model_expression. Errors if such an extension has not been written. \n\nBy default only the expressions associated with public supports are returned, the  full set can be accessed via label = All. Moreover, infinite expressions are  returned as a list corresponding to their supports. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies. The corresponding supports are obtained via  supports using the same keyword arguments.\n\nExample\n\njulia> optimizer_model_expression(my_expr) # finite expression\nx(support: 1) - y\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_expression","page":"Optimization","title":"InfiniteOpt.optimizer_model_expression","text":"optimizer_model_expression(expr, key::Val{ext_key_name}; [kwargs...])\n\nReturn the reformulation expression(s) stored in the optimizer model that correspond to expr. This needs to be defined for extensions that implement a custom optimizer model type. Principally, this is accomplished by typed the key argument to Val{ext_key_name}. Keyword arguments can be added as needed. Note that if expr is a GeneralVariableRef this just dispatches to optimizer_model_variable.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.supports-Tuple{AbstractJuMPScalar}","page":"Optimization","title":"InfiniteOpt.supports","text":"supports(expr::JuMP.AbstractJuMPScalar; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel,\n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the support associated with expr. Errors if expr is not associated with the constraint mappings stored in optimizer_model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of expression_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  expressions are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(cref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.expression_supports","page":"Optimization","title":"InfiniteOpt.expression_supports","text":"expression_supports(optimizer_model::JuMP.Model, expr,\n                    key::Val{ext_key_name}; [kwargs...])\n\nReturn the supports associated with the mappings of expr in optimizer_model. This dispatches off of key which permits optimizer model extensions. This should throw an error if expr is not associated with the variable mappings stored in optimizer_model. Keyword arguments can be added as needed. Note that if expr is a GeneralVariableRef this just dispatches to variable_supports.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_constraint-Tuple{InfOptConstraintRef}","page":"Optimization","title":"InfiniteOpt.optimizer_model_constraint","text":"optimizer_model_constraint(cref::InfOptConstraintRef; \n                           [label::Type{<:AbstractSupportLabel} = PublicLabel, \n                           ndarray::Bool = false,\n                           kwargs...])\n\nReturn the reformulation constraint(s) stored in the optimizer model that correspond to cref. Errors if no such constraint can be found in the optimizer model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of optimizer_model_constraint. Errors if such an extension has not been written. \n\nBy default only the constraints associated with public supports are returned, the  full set can be accessed via label = All. Moreover, infinite constraints are  returned as a list corresponding to their supports. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies. The corresponding supports are obtained via  supports using the same keyword arguments.\n\nExample\n\njulia> optimizer_model_constraint(c1) # finite constraint\nc1 : x(support: 1) - y <= 3.0\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_constraint","page":"Optimization","title":"InfiniteOpt.optimizer_model_constraint","text":"optimizer_model_constraint(cref::InfOptConstraintRef,\n                           key::Val{ext_key_name}; [kwargs...])\n\nReturn the reformulation constraint(s) stored in the optimizer model that correspond to cref. This needs to be defined for extensions that implement a custom optimizer model type. Principally, this is accomplished by typed the key argument to Val{ext_key_name}. Keyword arguments can be added as needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.supports-Tuple{InfOptConstraintRef}","page":"Optimization","title":"InfiniteOpt.supports","text":"supports(cref::InfOptConstraintRef; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel,\n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the support associated with cref. Errors if cref is not associated with the constraint mappings stored in optimizer_model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of constraint_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(cref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.constraint_supports","page":"Optimization","title":"InfiniteOpt.constraint_supports","text":"constraint_supports(optimizer_model::JuMP.Model, \n                    cref::InfOptConstraintRef,\n                    key::Val{ext_key_name}; [kwargs...])\n\nReturn the supports associated with the mappings of cref in optimizer_model. This dispatches off of key which permits optimizer model extensions. This should throw an error if cref is not associated with the variable mappings stored in optimizer_model. Keyword arguments can be added as needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_ready","page":"Optimization","title":"InfiniteOpt.optimizer_model_ready","text":"optimizer_model_ready(model::InfiniteModel)::Bool\n\nReturn Bool if the optimizer model is up to date with model.\n\nExample\n\njulia> optimizer_model_ready(model)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.set_optimizer_model_ready","page":"Optimization","title":"InfiniteOpt.set_optimizer_model_ready","text":"set_optimizer_model_ready(model::InfiniteModel, status::Bool)\n\nSet the status of the optimizer model to whether it is up to date or not. Note is more intended as an internal function, but is useful for extensions.\n\nExample\n\njulia> set_optimizer_model_ready(model, true)\n\njulia> optimizer_model_ready(model)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"DocTestFilters = [r\"≤|<=\", r\"≥|>=\", r\" == | = \", r\" ∈ | in \", r\"MathOptInterface|MOI\", \n                  r\" for all | ∀ \", r\"d|∂\"]","category":"page"},{"location":"guide/transcribe/#transcription_docs","page":"Model Transcription","title":"Model Transcription","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"A guide for transcribing infinite models in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/transcribe/#Overview","page":"Model Transcription","title":"Overview","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"All infinite models need to be reformulated in such a way that they can be solved  using traditional optimization methods. Typically, this involves discretization  of the infinite domain via particular parameter support points. By default,  InfiniteOpt employs this methodology via the use of transcription models (which  comprise the optimizer_model as discussed in the  Infinite Models section). InfiniteOpt is built  modularly to readily accept other user defined techniques and this is discussed  in further detail on the Extensions page. This page will detail  transcription models based in InfiniteOpt.TranscriptionOpt which provide the  default transcription (reformulation) capabilities of InfiniteOpt.","category":"page"},{"location":"guide/transcribe/#Basic-Usage","page":"Model Transcription","title":"Basic Usage","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Most users will not need to employ the capabilities of TranscriptionOpt directly  since they are employed implicitly with the call of  optimize! on an infinite model. This  occurs since TranscriptionModels are the default optimizer model type that is  employed. ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"However, some users may wish to use TranscriptionOpt to extract a fully  discretized/transcribed version of an infinite model that is conveniently output  as a typical JuMP model and can then be treated as such. This is principally  accomplished via build_optimizer_model!. To illustrate how this is done,  let's first define a basic infinite model with a simple support structure for the  sake of example:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> using InfiniteOpt\n\njulia> inf_model = InfiniteModel();\n\njulia> @infinite_parameter(inf_model, t in [0, 10], supports = [0, 5, 10])\nt\n\njulia> @variable(inf_model, y >= 0, Infinite(t))\ny(t)\n\njulia> @variable(inf_model, z, Bin)\nz\n\njulia> @objective(inf_model, Min, 2z + support_sum(y, t))\n2 z + support_sum{t}[y(t)]\n\njulia> @constraint(inf_model, initial, y(0) == 1)\ninitial : y(0) = 1.0\n\njulia> @constraint(inf_model, constr, y^2 - z <= 42)\nconstr : y(t)² - z ≤ 42.0, ∀ t ∈ [0, 10]\n\njulia> print(inf_model)\nMin 2 z + support_sum{t}[y(t)]\nSubject to\n y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n z binary\n y(0) ≥ 0.0\n initial : y(0) = 1.0\n constr : y(t)² - z ≤ 42.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now we can make JuMP model containing the transcribed version of inf_model  via build_optimizer_model! and then extract it via  optimizer_model:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> build_optimizer_model!(inf_model)\n\njulia> trans_model = optimizer_model(inf_model)\nA JuMP Model\nMinimization problem with:\nVariables: 4\nObjective function type: AffExpr\n`AffExpr`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\n`QuadExpr`-in-`MathOptInterface.LessThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.ZeroOne`: 1 constraint\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\njulia> print(trans_model)\nMin 2 z + y(support: 1) + y(support: 2) + y(support: 3)\nSubject to\n initial(support: 1) : y(support: 1) = 1.0\n constr(support: 1) : y(support: 1)² - z ≤ 42.0\n constr(support: 2) : y(support: 2)² - z ≤ 42.0\n constr(support: 3) : y(support: 3)² - z ≤ 42.0\n y(support: 1) ≥ 0.0\n y(support: 2) ≥ 0.0\n y(support: 3) ≥ 0.0\n z binary","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"note: Note\nPrevious versions of InfiniteOpt, employed a TranscriptionModel(model::InfiniteModel)  constructor to build transcription models independently of the optimizer model.  This has functionality has been removed in favor of internal optimizer model  based builds for efficiency reasons and to properly manage MOI optimizer  attributes.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Thus, we have a transcribed JuMP model. To be precise this is actually a  TranscriptionModel which is a JuMP.Model with some extra data stored in the  ext field that retains the mapping between the transcribed variables/constraints  and their infinite counterparts. Notice, that multiple finite variables  have been introduced to discretize y(t) at supports 1, 2, and 3 which correspond  to 0, 5, and 10 as can be queried by supports:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> supports(y)\n3-element Vector{Tuple}:\n (0.0,)\n (5.0,)\n (10.0,)","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Also, notice how the constraints are transcribed in accordance with these supports  except the initial condition which naturally is only invoked for the first support  point. Furthermore, the transcription variable(s) of any variable associated with  the infinite model can be determined via transcription_variable:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> transcription_variable(y)\n3-element Vector{VariableRef}:\n y(support: 1)\n y(support: 2)\n y(support: 3)\n\njulia> transcription_variable(trans_model, z)\nz","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Similarly, the transcription constraints associated with infinite model constraints  can be queried via transcription_constraint and the associated supports  and infinite parameters can be found via supports and parameter_refs:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> transcription_constraint(initial)\ninitial(support: 1) : y(support: 1) = 1.0\n\njulia> transcription_constraint(constr)\n3-element Vector{ConstraintRef}:\n constr(support: 1) : y(support: 1)² - z ≤ 42.0\n constr(support: 2) : y(support: 2)² - z ≤ 42.0\n constr(support: 3) : y(support: 3)² - z ≤ 42.0\n\njulia> supports(constr)\n3-element Vector{Tuple}:\n (0.0,)\n (5.0,)\n (10.0,)\n\njulia> parameter_refs(constr)\n(t,)","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Note the parameter reference tuple corresponds to the support tuples. ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"note: Note\nMethod that query the transcription surrogates (e.g., transcription_variable)  and the respective supports via supports also accept the keyword argument  label to specify which that transcription objects are desired in accordance  to the support labels that are inherited from and/or are equal to label. By  default, this will return any supports that are public (i.e., will hide anything  solely associated with internal supports). The full query response can always  be obtained via label = All.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now we have a transcribed JuMP model that can be optimized via traditional  JuMP methods whose variables and constraints can be accessed using the methods  mentioned above.","category":"page"},{"location":"guide/transcribe/#Transcription-Theory","page":"Model Transcription","title":"Transcription Theory","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"A given infinite-dimensional optimization problem is parameterized according to  infinite parameters following our abstraction. In general, most solution strategies  transcribe the problem according to certain finite parameter values (supports) and  thus represent the problem in terms of these supports (e.g., using discrete time  points in dynamic optimization). This methodology can be generalized into the  following steps:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"define supports for each infinite parameter if not already defined,\nadd any additional support needed for derivative evaluation,\nexpand any measures according to their underlying numerical representation ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"using transcribed infinite variables as appropriate,","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"replace any remaining infinite variables/derivatives with transcribed  variables supported over each unique combination of the underlying parameter  supports,\nreplace any remaining infinite constraints with transcribed ones supported over ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"all the unique support combinations stemming from the infinite parameters they     depend on,","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"and add on the transcribed versions of the auxiliary derivative evaluation ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"equations. ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"For example, let's consider a space-time optimization problem of the form:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"beginaligned\n\tmin_y(t) g(t x)  int_0^10 y^2(t) dt \n\ttextst  y(0) = 1 \n\t int_x in -1 1^2 fracpartial g(t x)partial t dx = 42  forall t in 0 10 \n   3g(t x) + 2y^2(t) leq 2  forall t in T  x in -1 1^2 \nendaligned","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Thus, we have an optimization problem whose decision space is infinite with  respect to time t and position x. Now let's transcript it following the  above steps. First, we need to specify the infinite parameter supports and for  simplicity let's choose the following sparse sets:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"t in 0 10\nx in -1 -1^T -1 1^T 1 -1^T 1 1^T.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"To handle the derivative fracpartial g(t x)partial t, we'll use    backward finite difference so no additional supports will need to be added.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now we expand the two integrals (measures) via a finite approximation using only  the above supports and term coefficients of 1 (note this is not numerically  correct but is done for conciseness in example). Doing this, we obtain the  form:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"beginaligned\n\tmin_y(t) g(t x)  y^2(0) + y^2(10) \n\ttextst  y(0) = 1 \n   g(0 x) = 0 \n\t fracpartial g(t -1 -1)partial t + fracpartial g(t -1 1)partial t + fracpartial g(t 1 -1)partial t + fracpartial g(t 1 1)partial t = 42  forall t in 0 10 \n   3g(t x) + 2y^2(t) leq 2  forall t in T  x in -1 1^2 \nendaligned","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Notice that the infinite variable y(t) in the objective measure has been  replaced with finite transcribed variables y(0) and y(10). Also, the  infinite derivative fracpartial g(t x)partial t was replaced with   partially transcribed variables in the second constraint in accordance with the  measure over the positional domain x.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now we need to transcribe the remaining infinite and semi-infinite variables  with finite variables and duplicate the remaining infinite constraints accordingly.  This means that the second constraint needs to be transcribed over the time domain  and the third constraint needs to be transcribed for each unique combination  of the time and position supports. Applying this transcription yields: ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"beginaligned\n\tmin_y(t) g(t x)  y^2(0) + y^2(10) \n\ttextst  y(0) = 1 \n   g(0 -1 -1) = 0 \n   g(0 -1 1) = 0 \n   g(0 1 -1) = 0 \n   g(0 1 1) = 0 \n\t fracpartial g(0 -1 -1)partial t + fracpartial g(0 -1 1)partial t + fracpartial g(0 1 -1)partial t + fracpartial g(0 1 1)partial t = 42\n   fracpartial g(10 -1 -1)partial t + fracpartial g(10 -1 1)partial t + fracpartial g(10 1 -1)partial t + fracpartial g(10 1 1)partial t = 42\n   3g(0 -1 -1) + 2y^2(0) leq 2 \n   3g(0 -1 1) + 2y^2(0) leq 2 \n   vdots \n   3g(10 1 1) + 2y^2(10) leq 2\nendaligned","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now that the variables and constraints are are transcribed, all that remains is  to add relations to define the behavior of the transcribed partial derivatives.  We can accomplish this via backward finite difference which will just add one  infinite equation in this case this we only have 2 supports in the time domain  is then transcribed over the spatial domain to yield:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"beginaligned\n g(10 -1 -1) = g(0 -1 -1) + 10fracpartial g(10 -1 -1)partial t \n g(10 -1 1) = g(0 -1 1) + 10fracpartial g(10 -1 1)partial t \n g(10 1 -1) = g(0 1 -1) + 10fracpartial g(10 1 -1)partial t \n g(10 1 1) = g(0 1 1) + 10fracpartial g(10 1 1)partial t\nendaligned","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now the problem is fully transcribed (discretized) and can be solved as a  standard optimization problem. Note that with realistic measure evaluation  schemes more supports might be added to the support sets and these will need to  be incorporated when transcribing variables and constraints.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"It is easy to imagine how the above procedure can get quite involved to do manually,  but this is precisely what InfiniteOpt automates behind the scenes. Let's  highlight this by repeating the same example using InfiniteOpt (again using  the incorrect simple representation for the integrals for conciseness).","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"using InfiniteOpt\n\n# Initialize model\ninf_model = InfiniteModel()\n\n# Define parameters and supports\n@infinite_parameter(inf_model, t in [0, 10], supports = [0, 10])\n@infinite_parameter(inf_model, x[1:2] in [-1, 1], supports = [-1, 1], independent = true)\n\n# Define variables\n@variable(inf_model, y, Infinite(t))\n@variable(inf_model, g, Infinite(t, x))\n\n# Set the objective (using support_sum for the integral given our simple example)\n# Note: In real problems integral should be used\n@objective(inf_model, Min, support_sum(y^2, t))\n\n# Define the constraints\n@constraint(inf_model, y(0) == 1)\n@constraint(inf_model, g(0, x) == 0)\n@constraint(inf_model, support_sum(deriv(g, t), x) == 42) # support_sum for simplicity\n@constraint(inf_model, 3g + y^2 <= 2)\n\n# Print the infinite model\nprint(inf_model)\n\n# output\nMin support_sum{t}[y(t)²]\nSubject to\n y(0) = 1.0\n g(0, [x[1], x[2]]) = 0.0, ∀ x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]\n support_sum{x}[∂/∂t[g(t, x)]] = 42.0, ∀ t ∈ [0, 10]\n y(t)² + 3 g(t, x) ≤ 2.0, ∀ t ∈ [0, 10], x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Thus, we obtain the infinite problem in InfiniteOpt. As previously noted,  transcription would be handled automatically behind the scenes when the model is  optimized. However, we can directly extract the transcribed version by building a  TranscriptionModel:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> build_optimizer_model!(inf_model)\n\njulia> trans_model = optimizer_model(inf_model);\n\njulia> print(trans_model)\nMin y(support: 1)² + y(support: 2)²\nSubject to\n y(support: 1) = 1.0\n g(support: 1) = 0.0\n g(support: 3) = 0.0\n g(support: 5) = 0.0\n g(support: 7) = 0.0\n ∂/∂t[g(t, x)](support: 1) + ∂/∂t[g(t, x)](support: 3) + ∂/∂t[g(t, x)](support: 5) + ∂/∂t[g(t, x)](support: 7) = 42.0\n ∂/∂t[g(t, x)](support: 2) + ∂/∂t[g(t, x)](support: 4) + ∂/∂t[g(t, x)](support: 6) + ∂/∂t[g(t, x)](support: 8) = 42.0\n g(support: 1) - g(support: 2) + 10 ∂/∂t[g(t, x)](support: 2) = 0.0\n g(support: 3) - g(support: 4) + 10 ∂/∂t[g(t, x)](support: 4) = 0.0\n g(support: 5) - g(support: 6) + 10 ∂/∂t[g(t, x)](support: 6) = 0.0\n g(support: 7) - g(support: 8) + 10 ∂/∂t[g(t, x)](support: 8) = 0.0\n y(support: 1)² + 3 g(support: 1) ≤ 2.0\n y(support: 2)² + 3 g(support: 2) ≤ 2.0\n y(support: 1)² + 3 g(support: 3) ≤ 2.0\n y(support: 2)² + 3 g(support: 4) ≤ 2.0\n y(support: 1)² + 3 g(support: 5) ≤ 2.0\n y(support: 2)² + 3 g(support: 6) ≤ 2.0\n y(support: 1)² + 3 g(support: 7) ≤ 2.0\n y(support: 2)² + 3 g(support: 8) ≤ 2.0","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"This precisely matches what we found analytically. Note that the unique support  combinations are determined automatically and are represented visually as  support: #. The precise support values can be looked up via supports:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> supports(y)\n2-element Vector{Tuple}:\n (0.0,)\n (10.0,)\n\njulia> supports(g)\n8-element Vector{Tuple}:\n (0.0, [-1.0, -1.0])\n (10.0, [-1.0, -1.0])\n (0.0, [1.0, -1.0])\n (10.0, [1.0, -1.0])\n (0.0, [-1.0, 1.0])\n (10.0, [-1.0, 1.0])\n (0.0, [1.0, 1.0])\n (10.0, [1.0, 1.0])\n\njulia> supports(g, ndarray = true) # format it as an n-dimensional array (t by x[1] by x[2])\n2×2×2 Array{Tuple, 3}:\n[:, :, 1] =\n (0.0, [-1.0, -1.0])   (0.0, [1.0, -1.0])\n (10.0, [-1.0, -1.0])  (10.0, [1.0, -1.0])\n\n[:, :, 2] =\n (0.0, [-1.0, 1.0])   (0.0, [1.0, 1.0])\n (10.0, [-1.0, 1.0])  (10.0, [1.0, 1.0])","category":"page"},{"location":"guide/transcribe/#TranscriptionOpt","page":"Model Transcription","title":"TranscriptionOpt","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"InfiniteOpt.TranscriptionOpt is a sub-module which principally implements  TranscriptionModels and its related access/modification methods. Thus,  this section will detail what these are and how they work.","category":"page"},{"location":"guide/transcribe/#TranscriptionModels","page":"Model Transcription","title":"TranscriptionModels","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"A TranscriptionModel is simply a JuMP.Model whose ext field contains  TranscriptionData which acts to map the transcribed model back to the  original infinite model (e.g., map the variables and constraints). Such models  are constructed via a default version of  build_optimizer_model!  which wraps build_transcription_model!:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> model1 = TranscriptionModel() # make an empty model\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\njulia> build_optimizer_model!(inf_model); \n\njulia> model2 = optimizer_model(inf_model) # generate from an InfiniteModel\nA JuMP Model\nMinimization problem with:\nVariables: 4\nObjective function type: AffExpr\n`AffExpr`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\n`QuadExpr`-in-`MathOptInterface.LessThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.ZeroOne`: 1 constraint\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Note that the all the normal JuMP.Model arguments can be used with both  constructor when making an empty model and they are simply inherited from those   specified in the InfiniteModel. The call to build_optimizer_model! is the backbone  behind infinite model transcription and is what encapsulates all of the methods to  transcribe measures, variables, derivatives, and constraints. This is also the  method that enables the use of optimize!.","category":"page"},{"location":"guide/transcribe/#Queries","page":"Model Transcription","title":"Queries","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"In this section we highlight a number of query methods that pertain to  TranscriptionModels and their mappings. First, if the optimizer_model of an  InfiniteModel is a TranscriptionModel it can be extracted via  transcription_model:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> transcription_model(inf_model)\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Here we observe that such a model is currently empty and hasn't been populated  yet. Furthermore, we check that a Model is an TranscriptionModel via  is_transcription_model: ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> is_transcription_model(optimizer_model(inf_model))\ntrue\n\njulia> is_transcription_model(Model())\nfalse","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"We can also extract the raw TranscriptionData object from a  TranscriptionModel via transcription_data.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> transcription_data(trans_model);","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Next we can retrieve the JuMP variable(s) for a particular InfiniteOpt  variable via transcription_variable. For finite variables, this will  be a one to one mapping, and for infinite variables a list of supported variables  will be returned in the order of the supports. Following the initial example in  the basic usage section, this is done:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> build_optimizer_model!(inf_model); trans_model = optimizer_model(inf_model);\n\njulia> transcription_variable(trans_model, y)\n3-element Vector{VariableRef}:\n y(support: 1)\n y(support: 2)\n y(support: 3)\n\njulia> transcription_variable(trans_model, z)\nz","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Note that if the TranscriptionModel is stored as the current optimizer_model  then the first argument (specifying the TranscriptionModel can be omitted). Thus,   in this case the first argument can be omitted as it was above, but is shown for  completeness.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Similarly, the parameter supports corresponding to the transcription variables  (in the case of transcribed infinite variables) can be queried via  supports:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> supports(y)\n3-element Vector{Tuple}:\n (0.0,)\n (5.0,)\n (10.0,)","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"note: Note\nNote that like supports the transcription_[obj] methods also employ the  label::Type{AbstractSupportLabel} = PublicLabel keyword argument that by  default will return variables/expressions/constraints associated with public  supports. The full set (e.g., ones corresponding to internal collocation nodes)  is obtained via label = All. \nThese methods also employ the ndarray::Bool keyword argument that will cause the  output to be formatted as a n-dimensional array where the dimensions  correspond to the infinite parameter dependencies. For example, if we have an  infinite variable y(t, ξ) and we invoke a query method with ndarray = true  then we'll get a matrix whose dimensions correspond to the supports of t and  ξ, respectively. Also, if ndarray = true then label correspond to the  intersection of supports labels in contrast to its default of invoking the union  of the labels.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Likewise, transcription_constraint and  supports(@ref) can be used with constraints to find their transcribed   equivalents in the JuMP model and determine their supports.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"We can also do this with measures and expressions:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> meas = support_sum(y^2, t)\nsupport_sum{t}[y(t)²]\n\njulia> build_optimizer_model!(inf_model)\n\njulia> transcription_variable(meas)\ny(support: 1)² + y(support: 2)² + y(support: 3)²\n\njulia> supports(meas)\n()\n\njulia> transcription_expression(y^2 + z - 42)\n3-element Vector{AbstractJuMPScalar}:\n y(support: 1)² + z - 42\n y(support: 2)² + z - 42\n y(support: 3)² + z - 42\n\njulia> supports(y^2 + z - 42)\n3-element Vector{Tuple}:\n (0.0,)\n (5.0,)\n (10.0,)\n\njulia> parameter_refs(y^2 + z - 42)\n(t,)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"DocTestFilters = [r\" ∈ | in \", r\"E|𝔼\", r\"integral|∫\"]","category":"page"},{"location":"guide/measure/#measure_docs","page":"Measures","title":"Measure Operators","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"A guide for measure operators in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/measure/#Overview","page":"Measures","title":"Overview","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Measure operators are objects that capture the evaluation of an expression with respect  to parameters, which is a distinct feature of optimization problems with  infinite decision spaces. In dynamic optimization measures can represent integral  terms such as the total cost over time, and in stochastic optimization measures  can represent integrals over the uncertain parameters, such as expectations. In  InfiniteOpt, measures are general operators that can be uni-variate or   multi-variate. Natively we employ measure abstractions that employ discretization   schemes, which evaluate the expression at a set of points over the parameter space and  approximates the measures based on the expression values at these points. However,  we support the use of alternative measure operator paradigms.","category":"page"},{"location":"guide/measure/#measure_basic_usage","page":"Measures","title":"Basic Usage","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"First, we consider a dynamic optimization problem with the time parameter t  from 0 to 10. We also consider a state variable y(t) and a control variable  u(t) that are parameterized by t:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0, 5, 10])\nt\n\njulia> @variable(model, y, Infinite(t))\ny(t)\n\njulia> @variable(model, u, Infinite(t))\nu(t)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Now suppose we want to evaluate the integral int_2^8y(t)^2 + u(t)^2 dt.  We can construct a measure to represent this integral using the  integral function","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref1 = integral(y^2 + u^2, t, 2, 8)\n∫{t ∈ [2, 8]}[y(t)² + u(t)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The four positional arguments of integral are the integrand expression,   the parameter of integration, the lower bound, and the upper bound, respectively.  Specifying the integrand expression and the parameter of integration is required.  If the lower and upper bounds are not specified, then the integration will  be over the entire domain, which is 0 10 in this case.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The integral function uses trapezoid rule as the default discretization scheme  for univariate parameters in finite IntervalDomains. In addition, the user can also  use quadrature methods for univariate parameters in all IntervalDomains by setting  the keyword argument eval_method as Quadrature():","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref2 = integral(y^2 + u^2, t, eval_method = Quadrature())\n∫{t ∈ [0, 10]}[y(t)² + u(t)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The integral function also allows for specifying other keyword arguments that  correspond to the chosen evaluation method. For example, when using  FEGaussLobatto as the evaluation method we can specify the number of  discretization points per finite element via num_nodes. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref3 = ∫(y^2 + u^2, t, eval_method = FEGaussLobatto(), num_nodes = 3)\n∫{t ∈ [0, 10]}[y(t)² + u(t)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Notice here how we used ∫ in place of integral as a convenient wrapper.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Two other explicit measure type methods include expect for expectations  and support_sum for summing an expression over the support points of  selected infinite parameters. The syntax for these is analogous to that of integral  except that there are no lower/upper bounds. For example, we can define the following  expectation of a random expression:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> m = InfiniteModel();\n\njulia> @infinite_parameter(m, ξ ~ Normal(), num_supports = 100);\n\njulia> @variable(m, x, Infinite(ξ));\n\njulia> expect_x = expect(x^2, ξ)\n𝔼{ξ}[x(ξ)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"note: Note\nFor integrals, expectations, and support sums involving moderate to large  expressions, the macro versions @integral, @expect, and  @support_sum should be used instead of their functional equivalents  for better performance.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"note: Note\nFor convenience in compact representation we can use ∫, @∫,  𝔼, and @𝔼 as wrappers for integral,  @integral, expect, and @expect, respectively.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Other measure paradigms can be implemented via measure as described in  the sections further below.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Depending on the type of measures created, support points may be generated  at the time of creating the measures. In these cases, the new support points  will be added to the support list of the integrated parameter.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Once a measure is created, the evaluation of that measure is stored in a  measure data object. Users can query the measure data object using the  measure_data function as follows ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> meas_data = measure_data(mref2);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Natively in InfiniteOpt, two types of measure data objects are used to store the measure  data information depending on the nature of the measures created: DiscreteMeasureData and  FunctionalDiscreteMeasureData. For more details on the measure data object,  refer to Measure Data Generation.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Similarly, one can also query the expression the measure operates on using  measure_function:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> measure_function(mref3)\ny(t)² + u(t)²","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In addition to eval_method, the integral function  also accepts weight_func as keyword argument, which dictates the weight function  of the measure. Now suppose we want to create multiple measures that share the   same keyword argument values that are different from the defaults. We don't have  to input the keyword argument values every time we construct a new measure.  Instead, we can modify the default values of measure keyword arguments, and  construct measures using the new default values. To do that, we use the functions  set_uni_integral_defaults and set_multi_integral_defaults. We  can in turn reset these via clear_uni_integral_defaults and  clear_multi_integral_defaults. Adding new keyword arguments will be  useful if users want to extend the measure functions with their custom  representation/evaluation schemes that need to take additional arguments somehow.  See Extensions for more details.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"We can also use the pdf keyword argument for [expect] over interval domains  which allows us to specify the density function we would like to use. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Now we can add measures to the constraints and objective functions in our  model. For more detailed information, please review the information below.","category":"page"},{"location":"guide/measure/#Theoretical-Abstraction","page":"Measures","title":"Theoretical Abstraction","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In InfiniteOpt, measures denote operators M_ell that operate on some infinite  expression y over the infinite domain mathcalD_ell associated with  the infinite parameter ell:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"M_elly  mathcalD_-ell mapsto mathbbR^n_y","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Such a paradigm can capture a wide variety of mathematical operators commonly  encountered in infinite-dimensional programming such as integrals, expectations,  risk measures, and chance constraints.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Currently, InfiniteOpt natively contains programmatic objects for measures that  can be represented as integrals of the form:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"int_tau in mathcalT f(tau)w(tau) dtau","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"where tau is a (possibly multivariate) infinite parameter, f(tau) is an  expression parameterized by tau, w(tau) is a weight function, and  mathcalT is a subset of the domain of tau. The measures approximate  the integrals by taking a discretization scheme","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"int_tau in mathcalT f(tau)w(tau) dtau approx sum_i=1^N alpha_i f(tau_i) w(tau_i)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"where tau_i are the grid points where the expression f(tau) is  evaluated, and N is the total number of points taken.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"This is the abstraction behind both DiscreteMeasureData and  FunctionalDiscreteMeasureData which are the native measure data types  in InfiniteOpt. The Measure Data Generation section below details how  these can be implemented to enable schemes that fit this mathematical paradigm, but  lie out of the realm of the supported features behind integral, expect, and  support_sum.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"More complex measure paradigms can also be implemented by creating concrete  subtype of AbstractMeasureData as detailed in  Measure Data Section on our extensions page.","category":"page"},{"location":"guide/measure/#Measure-Data-Generation","page":"Measures","title":"Measure Data Generation","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The general measure function takes two arguments: the argument expression and  a measure data object that contains the details of the measure representation.  Measure data objects can be constructed using DiscreteMeasureData,  where the parameter of integration, the coefficients alpha_i, and the  support points need to be defined explicitly. For example, if we want to  evaluate a function at each integer time point between 0 and 10, we  can construct the following measure data object to record this discretization  scheme:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> md_t = DiscreteMeasureData(t, ones(10), [i for i in 1:10]);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The arguments of DiscreteMeasureData are parameter, coefficients, and  supports. The default weight function is w(tau) = 1 for  any tau, which can be overwritten by the keyword argument weight_function.  The weight_function should take a function that returns a number for any  value that is well defined for the integrated infinite parameter. The data type  is DiscreteMeasureData, which is a subtype of the abstract data type  AbstractMeasureData.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"With DiscreteMeasureData, a measure can be generated in a custom and  quick manner. For example, using the measure data above, we can define a measure  for y^2 as follows:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref = measure(y^2, md_t)\nmeasure{t}[y(t)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In the same way, we can define measure data for multi-variate infinite parameters.  For example, we can define a discretization scheme for a 2D position parameter  x in 0 1 times 0 1 as follows:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> @infinite_parameter(model, x[1:2] in [0, 1])\n2-element Vector{GeneralVariableRef}:\n x[1]\n x[2]\n\njulia> md_x = DiscreteMeasureData(x, 0.25 * ones(4), [[0.25, 0.25], [0.25, 0.75], [0.75, 0.25], [0.75, 0.75]]);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"where md_x cuts the domain into four 0.5-by-0.5 squares, and evaluates the  integrand on the center of these squares. Note that for multivariate parameters,   each support point should be an AbstractArray that stores the value at each dimension. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In addition to the intuitive [DiscreteMeasureData], another type of measure data   object is FunctionalDiscreteMeasureData. This type captures measure data  where the support points are not known at the time of measure data creation. Instead of   storing the specific support and coefficient values, FunctionalDiscreteMeasureData  stores the minimum number of supports required for the measure, and a coefficient function  that maps supports to coefficients. When the measure is built on a FunctionalDiscreteMeasureData   is evaluated (expanded), supports will be generated based on the functions stored in   the data object. The method of support generation is recorded as a label in the  measure object. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"For example, suppose we want to uniformly generate at least 20 Monte Carlo samples   over the interval that t is in. A build-in label UniformGrid can be used to  signify the use of this method. A FunctionalDiscreteMeasureData can be created as follows:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> coeff_f(supports) = [(10 - 0) / length(supports) for i in supports]\ncoeff_f (generic function with 1 method)\n\njulia> fmd_t = FunctionalDiscreteMeasureData(t, coeff_f, 20, UniformGrid);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"For more details see FunctionalDiscreteMeasureData. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Our higher-level measure methods, such as integral, do not require  explicit construction of the measure data object and instead serve as wrappers  that construct the appropriate data object and then call measure.","category":"page"},{"location":"guide/measure/#Evaluation-Methods","page":"Measures","title":"Evaluation Methods","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The integral function calls generate_integral_data under the hood  to construct the measure data object. generate_integral_data takes as  positional arguments the integrated parameter, lower bound, upper bound, and method, and returns  a measure data object of type AbstractMeasureData.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"generate_integral_data applies multiple dispatch to encode different  support generation methods depending on the input eval_method. Each dispatch is distinguished by  the method, which takes a concrete subtype of AbstractIntegralMethod.  Each dispatch of generate_integral_data implements the specified method and returns  the resulting measure data, which will be used by @integral to create the measure.  A table of available method options in our package is listed below.  Each method is limited on the dimension of parameter and/or the type of domain  that it can apply for. For the details of what each method type means, refer to the corresponding  docstrings.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Evaluation Method Uni/Multi-Variate? Weight Function Domain Type\nAutomatic() Both 1 Any\nUniTrapezoid() Both 1 IntervalDomain\nUniMCSampling() Univariate 1 Finite IntervalDomain\nUniIndepMCSampling() Univariate 1 Finite IntervalDomain\nQuadrature() Univariate 1 IntervalDomain\nGaussLegendre() Univariate 1 Finite IntervalDomain\nGaussRadau() Univariate 1 Finite IntervalDomain\nGaussJacobi(α, β) Univariate (1-x)^alpha (1+x)^beta Finite IntervalDomain\nGaussLobatto() Univariate 1 Finite IntervalDomain\nFEGaussLobatto() Univariate 1 Finite IntervalDomain\nGaussChebyshev(1) Univariate frac1sqrt1-x^2 Finite IntervalDomain\nGaussChebyshev(2) Univariate sqrt1-x^2 Finite IntervalDomain\nGaussChebyshev(3) Univariate sqrt(1+x)(1-x) Finite IntervalDomain\nGaussChebyshev(4) Univariate sqrt(1-x)(1+x) Finite IntervalDomain\nGaussLaguerre() Univariate e^-x Semi-infinite IntervalDomain\nGaussHermite() Univariate e^-x^2 Infinite IntervalDomain\nMultiMCSampling() Multivariate 1 Finite IntervalDomain\nMultiIndepMCSampling() Multivariate 1 Finite IntervalDomain","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The eval method FEGaussLobatto creates finite elements by decomposing over the  supports that have been added to the integral parameter and then approximates the  integral over each finite element via Lobatto quadrature using num_nodes.  All other Gauss quadrature methods do not incorporate any existing supports nor  do they decompose the integral into finite elements, but instead generate their  quadrature node points over the entire integral domain. See the  A Note on Support Management Section for more information. This method  will take in the user supports, and create generative supports along each interval  and match them with corresponding coefficients. Here is a depiction of such what  FEGaussLobatto does. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"(Image: lobatto)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"int_x_1^x_3 f(x) dx = int_x_1^x_2 f(x) dx + int_x_2^x_3 f(x) dx","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"approx sum_i=1^n alpha_ai f(tau_ai) + sum_i=1^n alpha_bi f(tau_bi)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"= sum_i=1^n (alpha_ai f(tau_ai) + alpha_bi f(tau_bi))","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"where tau_ai and tau_bi are the discrete nodes for the two intervals ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"and alpha_ai and alpha_bi are the coefficients.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref_lob = integral(y^2 + u^2, t, num_nodes = 3, eval_method = FEGaussLobatto())\n∫{t ∈ [0, 10]}[y(t)² + u(t)²]\n\njulia> expand(mref_lob)\n0.8333333333333333 y(0)² + 0.8333333333333333 u(0)² + 3.333333333333333 y(2.5)² + 3.333333333333333 u(2.5)² + 1.6666666666666665 y(5)² + 1.6666666666666665 u(5)² + 3.333333333333333 y(7.5)² + 3.333333333333333 u(7.5)² + 0.8333333333333333 y(10)² + 0.8333333333333333 u(10)²\n","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"We set num_nodes = 3 to define the number of nodes (supports) that will be used  at each finite element for the integral approximation. Note that this is inclusive  of the finite element supports, so the number of generative (internal) supports  added to each finite element is num_nodes - 2.  ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In summary, we natively support trapezoid rule, Gaussian quadrature methods for  univariate parameters, and Monte Carlo sampling for both univariate and  multivariate infinite parameters. For extension purposes, users may define their  own generate_integral_data to encode custom evaluation methods. See  Extensions for more details.","category":"page"},{"location":"guide/measure/#A-Note-on-Support-Management","page":"Measures","title":"A Note on Support Management","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"There is a difference in how supports are considered using UniTrapezoid()/FEGaussLobatto() vs. the other schemes. Namely, the other schemes will NOT incorporate other supports  specified elsewhere in the model. Consider the following example with 3 equidistant  supports and an integral objective function that uses UniTrapezoid() (the default):","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"# Create a model, with one variable and an infinite parameter with a given number of supports\nm = InfiniteModel()\n@infinite_parameter(m, t in [0, 2], num_supports = 3)\n@variable(m, u, Infinite(t))\n\n# Create an objective function with the default trapezoid integration\n@objective(m, Min, integral(u^2, t))\n\n# Get the transcribed model to check how the supports are taken into account\nbuild_optimizer_model!(m)\ntrans_m = optimizer_model(m);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"If we look at how many supports there are, how the variable u is transcribed,  and how the objective function of the transcribed model looks like, we notice that  the same supports are used in both the objective function and the transcribed  variable:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> supports(t) \n3-element Vector{Float64}:\n 0.0\n 1.0\n 2.0\n\njulia> transcription_variable(u)  \n3-element Vector{VariableRef}:\n u(support: 1)\n u(support: 2)\n u(support: 3)\n\njulia> objective_function(trans_m) \n0.5 u(support: 1)² + u(support: 2)² + 0.5 u(support: 3)²","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Thus, the integral incorporates the 3 supports generated outside of the integral  declaration.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Then we readjust the model to use Gauss-Legendre quadrature via GaussLegendre()  that uses 2 quadrature nodes:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"# Set the new objective and update the TranscriptionModel\nset_objective_function(m, integral(u^2, t, eval_method = GaussLegendre(), num_nodes = 2))\nbuild_optimizer_model!(m)\ntrans_m = optimizer_model(m);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Now let's look again at the number of supports, the transcription of u, and the  new objective function:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> supports(t) \n5-element Vector{Float64}:\n 0.0\n 0.42264973081\n 1.0\n 1.57735026919\n 2.0\n\njulia> transcription_variable(u)  \n5-element Vector{VariableRef}:\n u(support: 1)\n u(support: 2)\n u(support: 3)\n u(support: 4)\n u(support: 5)\n\njulia> objective_function(trans_m) \nu(support: 2)² + u(support: 4)²","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The supports used in the objective function are different from the supports used  in the transcription of u. The integral objective function has been transcribed  using the 2 quadrature supports, but does not include the other supports since  they cannot be incorporated into the Gaussian quadrature approximation. Whereas,  u is defined over all the supports and thus certain realizations of u will  excluded from the objective function which will affect the behavior of the  optimization and lead to unexpected results.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"However, this behavior is avoided if we let the integral add the supports and  not add supports elsewhere (for convenience we'll use set_uni_integral_defaults):","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"# Define a new model, parameter, and variable\nm = InfiniteModel()\n@infinite_parameter(m, t in [0, 2])\n@variable(m, u, Infinite(t))\n\n# Update the integral default keyword arguments for convenience \nset_uni_integral_defaults(eval_method = GaussLegendre(), num_nodes = 2)\n\n# Set the objective with our desired integral\n@objective(m, Min, integral(u^2, t))\n\n# Build the transcribed model \nbuild_optimizer_model!(m)\ntrans_m = optimizer_model(m);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Then we get the supports are consistent for u and the integral:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> supports(t) \n2-element Vector{Float64}:\n 0.42264973081\n 1.57735026919\n\njulia> transcription_variable(u)  \n2-element Vector{VariableRef}:\n u(support: 1)\n u(support: 2)\n\njulia> objective_function(trans_m) \nu(support: 1)² + u(support: 2)²","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Therefore, using quadratures other than UniTrapezoid() or FEGaussLobatto()  requires careful analysis if there are user-defined supports in the problem. ","category":"page"},{"location":"guide/measure/#Expansion","page":"Measures","title":"Expansion","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In a model, each measure records the integrand expression and an evaluation  scheme that details the discretization scheme to approximate the integral.  The model will not expand the measures until the transcription stage, at which  a JuMP.AbstractJuMPScalar is created for each measure to represent how  the measure is modeled in a transcription model based on the stored  discretization scheme (see Model Transcription for  details on transcription). Additional point variables will be created in the  expansion process if the measure is evaluated at infinite parameter points that  do not have corresponding point variables yet.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Sometimes for extension purposes, one might want to expand a specific measure  before reaching the transcription stage. Alternatively, one might want to use  custom reformulation instead of the transcription encoded in this package, in  which expanding measures will also be useful. This can be done using the expand  function, which takes a MeasureRef object and returns a JuMP.AbstractJuMPScalar  based on the AbstractMeasureData. For example, suppose we want to  integrate y^2 in t, with two supports t = 25 and t = 75.  We can set up and expand this measure as follows:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> tdata = DiscreteMeasureData(t, [5, 5], [2.5, 7.5]);\n\njulia> mref4 = measure(y^2, tdata)\nmeasure{t}[y(t)²]\n\njulia> expanded_measure = expand(mref4)\n5 y(2.5)² + 5 y(7.5)²\n\njulia> typeof(expanded_measure)\nGenericQuadExpr{Float64, GeneralVariableRef}","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In the expand call, two point variables, y(2.5) and y(7.5), are created  because they are not defined in the model before the expand call. One can use  the expand_all_measures! function to expand all measures in a model,  which simply applies the expand to all measures stored in the model. ","category":"page"},{"location":"manual/domains/#infinite_domains_manual","page":"Infinite Domains","title":"Infinite Domains","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"A technical manual for infinite domains in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/domains/#Domain-Types","page":"Infinite Domains","title":"Domain Types","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"AbstractInfiniteDomain\nInfiniteScalarDomain\nIntervalDomain\nUniDistributionDomain\nInfiniteArrayDomain\nMultiDistributionDomain\nCollectionDomain","category":"page"},{"location":"manual/domains/#InfiniteOpt.AbstractInfiniteDomain","page":"Infinite Domains","title":"InfiniteOpt.AbstractInfiniteDomain","text":"AbstractInfiniteDomain\n\nAn abstract type for domains that characterize infinite parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.InfiniteScalarDomain","page":"Infinite Domains","title":"InfiniteOpt.InfiniteScalarDomain","text":"InfiniteScalarDomain <: AbstractInfiniteDomain\n\nAn abstract type for infinite domains that are one-dimensional.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.IntervalDomain","page":"Infinite Domains","title":"InfiniteOpt.IntervalDomain","text":"IntervalDomain <: InfiniteScalarDomain\n\nA DataType that stores the lower and upper interval bounds for infinite parameters that are continuous over a certain that interval. This is for use with a IndependentParameter.\n\nFields\n\nlower_bound::Float64 Lower bound of the infinite parameter.\nupper_bound::Float64 Upper bound of the infinite parameter.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.UniDistributionDomain","page":"Infinite Domains","title":"InfiniteOpt.UniDistributionDomain","text":"UniDistributionDomain{T <: Distributions.UnivariateDistribution} <: InfiniteScalarDomain\n\nA DataType that stores the distribution characterizing an infinite parameter that is random. This is for use with a IndependentParameter.\n\nFields\n\ndistribution::T Distribution of the random parameter.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.InfiniteArrayDomain","page":"Infinite Domains","title":"InfiniteOpt.InfiniteArrayDomain","text":"InfiniteArrayDomain <: AbstractInfiniteDomain\n\nAn abstract type for multi-dimensional infinite domains.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.MultiDistributionDomain","page":"Infinite Domains","title":"InfiniteOpt.MultiDistributionDomain","text":"MultiDistributionDomain{T <: NonUnivariateDistribution} <: InfiniteArrayDomain\n\nA DataType that stores the distribution characterizing a collection of infinite parameters that follows its form. This is for use with DependentParameters.\n\nFields\n\ndistribution::T Distribution of the random parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.CollectionDomain","page":"Infinite Domains","title":"InfiniteOpt.CollectionDomain","text":"CollectionDomain{T <: InfiniteScalarDomain} <: InfiniteArrayDomain\n\nA DataType that stores a collection of InfiniteScalarDomains characterizing a collection of infinite parameters that follows its form. This is for use with DependentParameters.\n\nFields\n\ndomains::Array{T} The collection of scalar domains.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#Domain-Methods","page":"Infinite Domains","title":"Domain Methods","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"collection_domains\nJuMP.has_lower_bound(::AbstractInfiniteDomain)\nJuMP.lower_bound(::AbstractInfiniteDomain)\nJuMP.set_lower_bound(::AbstractInfiniteDomain, ::Real)\nJuMP.has_upper_bound(::AbstractInfiniteDomain)\nJuMP.upper_bound(::AbstractInfiniteDomain)\nJuMP.set_upper_bound(::AbstractInfiniteDomain, ::Real)","category":"page"},{"location":"manual/domains/#InfiniteOpt.collection_domains","page":"Infinite Domains","title":"InfiniteOpt.collection_domains","text":"collection_domains(domain::AbstractInfiniteDomain)\n\nReturn the array of domains associated with a CollectionDomain. Error if the input domain is not a CollectionDomain.\n\n\n\n\n\n","category":"function"},{"location":"manual/domains/#JuMP.has_lower_bound-Tuple{AbstractInfiniteDomain}","page":"Infinite Domains","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(domain::AbstractInfiniteDomain)::Bool\n\nReturn Bool indicating if domain has a lower bound that can be determined. This should be extended for user-defined infinite domains. It defaults to false for unrecognized domain types.\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> has_lower_bound(domain)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.lower_bound-Tuple{AbstractInfiniteDomain}","page":"Infinite Domains","title":"JuMP.lower_bound","text":"JuMP.lower_bound(domain::AbstractInfiniteDomain)::Union{Real, Vector{<:Real}}\n\nReturn the lower bound of domain if one exists. This should be extended for user-defined infinite domains if appropriate. Errors if JuMP.has_lower_bound returns false. Extensions are enabled by JuMP.has_lower_bound(domain) and JuMP.lower_bound(domain).\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> lower_bound(domain)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.set_lower_bound-Tuple{AbstractInfiniteDomain, Real}","page":"Infinite Domains","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(domain::AbstractInfiniteDomain,\n                     lower::Union{Real, Vector{<:Real}})::AbstractInfiniteDomain\n\nSet and return the lower bound of domain if such an operation makes sense. Errors if the type of domain does not support this operation or has not been extended. User-defined domain types should extend this if appropriate.\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> set_lower_bound(domain, 0.5)\n[0.5, 1]\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.has_upper_bound-Tuple{AbstractInfiniteDomain}","page":"Infinite Domains","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(domain::AbstractInfiniteDomain)::Bool\n\nReturn Bool indicating if domain has a upper bound that can be determined. This should be extended for user-defined infinite domains. It defaults to false for unrecognized domain types.\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> has_upper_bound(domain)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.upper_bound-Tuple{AbstractInfiniteDomain}","page":"Infinite Domains","title":"JuMP.upper_bound","text":"JuMP.upper_bound(domain::AbstractInfiniteDomain)::Union{Real, Vector{<:Real}}\n\nReturn the upper bound of domain if one exists. This should be extended for user-defined infinite domains if appropriate. Errors if JuMP.has_upper_bound returns false. Extensions are enabled by JuMP.has_upper_bound(domain) and JuMP.upper_bound(domain).\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> upper_bound(domain)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.set_upper_bound-Tuple{AbstractInfiniteDomain, Real}","page":"Infinite Domains","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(domain::AbstractInfiniteDomain,\n                     upper::Real)::AbstractInfiniteDomain\n\nSet and return the upper bound of domain if such an aoperation makes sense. Errors if the type of domain does not support this operation or has not been extended. User-defined domain types should extend this if appropriate.\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> set_upper_bound(domain, 0.5)\n[0, 0.5]\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#Support-Point-Labels","page":"Infinite Domains","title":"Support Point Labels","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"AbstractSupportLabel\nAll\nPublicLabel\nUserDefined\nUniformGrid\nSampleLabel\nMCSample\nWeightedSample\nMixture\nUniqueMeasure\nInfiniteOpt.generate_unique_label\nMeasureBound\nInternalLabel\nInfiniteOpt.MeasureToolbox.InternalGaussLobatto","category":"page"},{"location":"manual/domains/#InfiniteOpt.AbstractSupportLabel","page":"Infinite Domains","title":"InfiniteOpt.AbstractSupportLabel","text":"AbstractSupportLabel\n\nAn abstract type for support label types. These are used to distinguish different  kinds of supports that are added to infinite parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.All","page":"Infinite Domains","title":"InfiniteOpt.All","text":"All <: AbstractSupportLabel\n\nThis support label is unique in that it isn't associated with a particular set of  supports, but rather is used used to indicate that all supports should be used.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.PublicLabel","page":"Infinite Domains","title":"InfiniteOpt.PublicLabel","text":"PublicLabel <: AbstractSupportLabel\n\nAn abstract type used to denote that labels that should be given to the user by  default.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.UserDefined","page":"Infinite Domains","title":"InfiniteOpt.UserDefined","text":"UserDefined <: PublicLabel\n\nA support label for supports that are supplied by the user directly to an infinite  parameter. \n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.UniformGrid","page":"Infinite Domains","title":"InfiniteOpt.UniformGrid","text":"UniformGrid <: PublicLabel\n\nA support label for supports that are generated uniformly accross a given interval.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.SampleLabel","page":"Infinite Domains","title":"InfiniteOpt.SampleLabel","text":"SampleLabel <: PublicLabel\n\nAn abstract type for labels of supports that are generated via some sampling technique.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.MCSample","page":"Infinite Domains","title":"InfiniteOpt.MCSample","text":"MCSample <: SampleLabel\n\nA support label for supports that are generated via Monte Carlo Sampling.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.WeightedSample","page":"Infinite Domains","title":"InfiniteOpt.WeightedSample","text":"WeightedSample <: SampleLabel\n\nA support label for supports that are generated by sampling from a statistical  distribution.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.Mixture","page":"Infinite Domains","title":"InfiniteOpt.Mixture","text":"Mixture <: PublicLabel\n\nA support label for multi-dimensional supports that are generated from a variety  of methods.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.UniqueMeasure","page":"Infinite Domains","title":"InfiniteOpt.UniqueMeasure","text":"UniqueMeasure{S::Symbol} <: PublicLabel\n\nA support label for supports that are provided from the DiscreteMeasureData  associated with a measure where a unique label is generated to distinguish those  supports. This is done by invoking generate_unique_label.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.generate_unique_label","page":"Infinite Domains","title":"InfiniteOpt.generate_unique_label","text":"generate_unique_label()::Type{UniqueMeasure}\n\nGenerate and return a unique support label for measures.\n\n\n\n\n\n","category":"function"},{"location":"manual/domains/#InfiniteOpt.MeasureBound","page":"Infinite Domains","title":"InfiniteOpt.MeasureBound","text":"MeasureBound <: PublicLabel\n\nA support label for supports that are generated using the upper and lower bounds for FunctionalDiscreteMeasureData.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.InternalLabel","page":"Infinite Domains","title":"InfiniteOpt.InternalLabel","text":"InternalLabel <: AbstractSupportLabel\n\nAn abstract type for support labels that are associated with supports that should  not be reported to the user by default.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.MeasureToolbox.InternalGaussLobatto","page":"Infinite Domains","title":"InfiniteOpt.MeasureToolbox.InternalGaussLobatto","text":"InternalGaussLobatto <: InfiniteOpt.InternalLabel\n\nA support label Gauss Lobatto points that are used as generative supports.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#Support-Point-Methods","page":"Infinite Domains","title":"Support Point Methods","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"supports_in_domain\ngenerate_supports\nInfiniteOpt.generate_support_values","category":"page"},{"location":"manual/domains/#InfiniteOpt.supports_in_domain","page":"Infinite Domains","title":"InfiniteOpt.supports_in_domain","text":"supports_in_domain(supports::Union{Real, Vector{<:Real}, Array{<:Real, 2}},\n                domain::AbstractInfiniteDomain)::Bool\n\nUsed to check if supports are in the domain of domain. Returns true if supports are in domain of domain and returns false otherwise. This is primarily an internal method for performing checks but can be extended for user-defined domain types. Extending this is optional, but recommended where possible. Note by fallback, this returns true for unrecognized domain types such that an error won't be thrown.\n\n\n\n\n\n","category":"function"},{"location":"manual/domains/#InfiniteOpt.generate_supports","page":"Infinite Domains","title":"InfiniteOpt.generate_supports","text":"generate_supports(domain::AbstractInfiniteDomain\n                  [method::Type{<:AbstractSupportLabel}];\n                  [num_supports::Int = DefaultNumSupports,\n                  sig_digits::Int = DefaultSigDigits]\n                  )::Tuple{Array{<:Real}, DataType}\n\nGenerate num_supports support values with sig_digits significant digits in accordance with domain and return them along with the correct generation label(s). IntervalDomains generate supports uniformly with label UniformGrid and distribution domains generate them randomly accordingly to the underlying distribution. Moreover, method indicates the generation method that should be used. These methods correspond to parameter support labels. Current labels that can be used as generation methods include (but may not be defined for certain domain types):\n\nMCSample: Uniformly distributed Monte Carlo samples.\nWeightedSample: Monte Carlo samples that are weighted by an underlying PDF.\nUniformGrid: Samples that are generated uniformly over the domain.\n\nExtensions that employ user-defined infinite domain types and/or methods should extend generate_support_values to enable this. Errors if the domain type and /or methods are unrecognized. This is intended as an internal method to be used by methods such as generate_and_add_supports!.\n\n\n\n\n\n","category":"function"},{"location":"manual/domains/#InfiniteOpt.generate_support_values","page":"Infinite Domains","title":"InfiniteOpt.generate_support_values","text":"generate_support_values(domain::AbstractInfiniteDomain,\n                        [method::Type{MyMethod} = MyMethod];\n                        [num_supports::Int = DefaultNumSupports,\n                        sig_digits::Int = DefaultSigDigits]\n                        )::Tuple{Array{<:Real}, Symbol}\n\nA multiple dispatch method for generate_supports. This will return a tuple where the first element are the supports and the second is their label. This can be extended for user-defined infinite domains and/or generation methods. When defining a new domain type the default method dispatch should make method an optional argument (making it the default). Otherwise, other method dispatches for a given domain must ensure that method is positional argument without a default value (contrary to the definition above). Note that the  method must be a subtype of either PublicLabel or InternalLabel.\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#inf_par_manual","page":"Infinite Parameters","title":"Infinite Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"A technical manual for infinite parameters in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/parameter/#Definition","page":"Infinite Parameters","title":"Definition","text":"","category":"section"},{"location":"manual/parameter/#Macro","page":"Infinite Parameters","title":"Macro","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"@infinite_parameter","category":"page"},{"location":"manual/parameter/#InfiniteOpt.@infinite_parameter","page":"Infinite Parameters","title":"InfiniteOpt.@infinite_parameter","text":"@infinite_parameter(model::InfiniteModel, kwargs...)\n\nAdd anonymous infinite parameter to the model model described by the keyword arguments kw_args and returns the parameter reference.\n\n@infinite_parameter(model::InfiniteModel, expr, kwargs...)\n\nAdd an infinite parameter to the model model described by the expression expr, and the keyword arguments kw_args. (Note that in the following the symbol in  can be used instead of ∈) The expression expr can be of the form:\n\nparamexpr creating parameters described by paramexpr.\nparamexpr ∈ [lb, ub] creating parameters described by paramexpr characterized  by a continuous interval domain with lower bound lb and upper bound ub.\nparamexpr ~ dist creating parameters described by paramexpr characterized  by the Distributions.jl distribution object dist.\nparamexpr ∈ domain creating parameters described by paramexpr characterized  by the AbstractInfiniteDomain object domain.\n\nThe expression paramexpr can be of the form:\n\nparamname creating a scalar parameter of name paramname\nparamname[...] or [...] creating a container of parameters\n\nThe recognized keyword arguments in kwargs are the following:\n\nbase_name: Sets the name prefix used to generate parameter names. It corresponds to the parameter name for scalar parameter, otherwise, the parameter names are set to base_name[...] for each index ... of the axes axes.\ndomain: The InfiniteDomain characterizing the parameters see subtypes of           AbstractInfiniteDomain.\ndistribution: Sets the Distributions.jl distribution object that   characterizes the parameters (specified instead of a domain).\nsupports: Sets the support points for the parameters.\nnum_supports: Specifies the number of supports to be automatically generated.                 Note that supports takes precedence. Defaults to 0.\nderivative_method: Specify the numerical method to evaluate derivatives that                       are taken with respect to the parameter.\nsig_digits: Specifies the number of significant digits that should be used               in automatic support generation. Defaults to DefaultSigDigits.\nindependent: Specifies if the each parameter is independent from each other or not. Defaults to false.\ncontainer: Specify the container type. Defaults to Auto\n\nExamples\n\njulia> @infinite_parameter(m, x in [0, 1])\nx\n\njulia> @infinite_parameter(m, y[i = 1:2] ~ MvNormal(ones(2)), num_supports = 10)\n2-element Array{GeneralVariableRef,1}:\n y[1]\n y[2]\n\njulia> z = @infinite_parameter(m, [[\"a\", \"b\"]], distribution = Normal(),\n                               independent = true)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, [\"a\", \"b\"]\nAnd data, a 2-element Array{GeneralVariableRef,1}:\n noname[a]\n noname[b]\n\n\n\n\n\n","category":"macro"},{"location":"manual/parameter/#Independent-Parameters","page":"Infinite Parameters","title":"Independent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"InfOptParameter\nScalarParameter\nIndependentParameter\nbuild_parameter(::Function, ::InfiniteScalarDomain)\nadd_parameter(::InfiniteModel, ::IndependentParameter, ::String)\nScalarParameterData\nIndependentParameterIndex\nIndependentParameterRef","category":"page"},{"location":"manual/parameter/#InfiniteOpt.InfOptParameter","page":"Infinite Parameters","title":"InfiniteOpt.InfOptParameter","text":"InfOptParameter <: JuMP.AbstractVariable\n\nAn abstract type for all parameters used in InfiniteOpt.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.ScalarParameter","page":"Infinite Parameters","title":"InfiniteOpt.ScalarParameter","text":"ScalarParameter <: InfOptParameter\n\nAn abstract type for scalar parameters used in InfiniteOpt.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.IndependentParameter","page":"Infinite Parameters","title":"InfiniteOpt.IndependentParameter","text":"IndependentParameter{T <: InfiniteScalarDomain,\n                     M <: AbstractDerivativeMethod,\n                     I <: AbstractGenerativeInfo} <: ScalarParameter\n\nA DataType for storing independent scalar infinite parameters.\n\nFields\n\ndomain::T: The infinite domain that characterizes the parameter.\nsupports::DataStructures.SortedDict{Float64, Set{DataType}}: The support points  used to discretize the parameter and their associated type labels stored as  DataTypess which should be a subtype of AbstractSupportLabel.\nsig_digits::Int: The number of significant digits used to round the support values.\nderivative_method::M: The derivative evaluation method used for derivatives that  are conducted with respect to this parameter.\ngnerative_supp_info::I: The info associated with any generative supports that will   need to be generated for measures and/or derivatives based on existing supports. \n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.build_parameter-Tuple{Function, InfiniteScalarDomain}","page":"Infinite Parameters","title":"InfiniteOpt.build_parameter","text":"build_parameter(\n    _error::Function, domain::InfiniteScalarDomain;\n    [num_supports::Int = 0,\n    supports::Union{Real, Vector{<:Real}} = Float64[],\n    sig_digits::Int = DefaultSigDigits,\n    derivative_method::AbstractDerivativeMethod = DefaultDerivativeMethod]\n)::IndependentParameter\n\nReturns a IndependentParameter given the appropriate information. This is analagous to JuMP.build_variable. Errors if supports violate the bounds associated with domain. This is meant to primarily serve as a helper method for @infinite_parameter. Here derivative_method  specifies the numerical evalution method that will be applied to derivatives that  are taken with respect to this infinite parameter.\n\nExample\n\njulia> param = build_parameter(error, IntervalDomain(0, 3), supports = Vector(0:3));\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.add_parameter-Tuple{InfiniteModel, IndependentParameter, String}","page":"Infinite Parameters","title":"InfiniteOpt.add_parameter","text":"add_parameter(model::InfiniteModel, p::IndependentParameter,\n              [name::String = \"\"])::GeneralVariableRef\n\nReturns a GeneralVariableRef associated with the parameter p that is added  to model. This adds a parameter to the model in a manner similar to  JuMP.add_variable. This is used to add parameters with the use of  @infinite_parameter.  build_parameter  should be used to construct p.\n\nExample\n\njulia> p = build_parameter(error, IntervalDomain(0, 3), supports = Vector(0:3));\n\njulia> param_ref = add_parameter(model, p, \"name\")\nname\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.ScalarParameterData","page":"Infinite Parameters","title":"InfiniteOpt.ScalarParameterData","text":"ScalarParameterData{P <: ScalarParameter} <: AbstractDataObject\n\nA mutable DataType for storing ScalarParameters and their data.\n\nFields\n\nparameter::P: The scalar parameter.\nobject_num::Int: The location of the corresponding ObjectIndex in   InfiniteModel.param_object_indices (given by InfiniteModel.last_object_num).\nparameter_num::Int: Given by InfiniteModel.last_param_num (updated when                       prior parameters are deleted)\nname::String: The name used for printing.\nparameter_func_indices::Vector{ParameterFunctionIndex}: Indices of dependent  infinite parameter functions.\ninfinite_var_indices::Vector{InfiniteVariableIndex}: Indices of dependent  infinite variables.\nderivative_indices::Vector{DerivativeIndex}: Indices of dependent derivatives.\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nconstraint_indices::Vector{InfOptConstraintIndex}: Indices of dependent constraints.\nin_objective::Bool: Is this used in objective? This should be true only for finite parameters.\ngenerative_measures::Vector{MeasureIndex}: Indices of measures that use parameter.generative_supp_info.\nhas_internal_supports::Bool: Does this parameter have internal supports?\nhas_generative_supports::Bool: Have any generative supports been added?\nhas_deriv_constrs::Bool: Have any derivative evaluation constraints been added                             to the infinite model associated with this parameter?\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.IndependentParameterIndex","page":"Infinite Parameters","title":"InfiniteOpt.IndependentParameterIndex","text":"IndependentParameterIndex <: ObjectIndex\n\nA DataType for storing the index of a IndependentParameter.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.IndependentParameterRef","page":"Infinite Parameters","title":"InfiniteOpt.IndependentParameterRef","text":"IndependentParameterRef <: DispatchVariableRef\n\nA DataType for independent infinite parameters references that parameterize infinite variables.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::IndependentParameterIndex: Index of the parameter in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#Dependent-Parameters","page":"Infinite Parameters","title":"Dependent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"DependentParameters\nadd_parameters\nMultiParameterData\nDependentParametersIndex\nDependentParameterIndex\nDependentParameterRef","category":"page"},{"location":"manual/parameter/#InfiniteOpt.DependentParameters","page":"Infinite Parameters","title":"InfiniteOpt.DependentParameters","text":"DependentParameters{T <: InfiniteArrayDomain, \n                    M <: NonGenerativeDerivativeMethod} <: InfOptParameter\n\nA DataType for storing a collection of dependent infinite parameters.\n\nFields\n\ndomain::T: The infinite domain that characterizes the parameters.\nsupports::Dict{Vector{Float64}, Set{DataType}}: Support dictionary where keys             are supports and the values are the set of labels for each support.\nsig_digits::Int: The number of significant digits used to round the support values.\nderivative_methods::Vector{M}: The derivative evaluation methods associated with  each parameter.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.add_parameters","page":"Infinite Parameters","title":"InfiniteOpt.add_parameters","text":"add_parameters(model::InfiniteModel,\n               params::DependentParameters,\n               names::Vector{String}\n               )::Vector{GeneralVariableRef}\n\nAdd params to model and return an appropriate container of the dependent infinite parameter references. This is intended as an internal method for use with @infinite_parameter. However, if desired users can use this to add a DependentParameters object to model. Here, names denote the name  of each parameter. \n\nExample\n\njulia> using Distributions\n\njulia> dist = MvNormal(ones(3)); # 3 dimensional\n\njulia> domain = MultiDistributionDomain(dist); # 3 dimensional\n\njulia> params = DependentParameters(domain, Dict{Vector{Float64}, Set{DatatType}}(), 10);\n\njulia> prefs = add_parameters(model, params, [\"par1\", \"par2\", \"par3\"])\n3-element Array{GeneralVariableRef,1}:\n par1\n par2\n par3\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#InfiniteOpt.MultiParameterData","page":"Infinite Parameters","title":"InfiniteOpt.MultiParameterData","text":"MultiParameterData{P <: DependentParameters} <: AbstractDataObject\n\nA mutable DataType for storing DependentParameters and their data.\n\nFields\n\nparameters::P: The parameter collection.\nobject_num::Int: The location of the corresponding ObjectIndex in  InfiniteModel.param_object_indices (given by InfiniteModel.last_object_num).\nparameter_nums::UnitRange{Int}: Given by InfiniteModel.last_param_num                                   (updated when prior parameters are deleted)\nnames::Vector{String}: The names used for printing each parameter.\nparameter_func_indices::Vector{ParameterFunctionIndex}: Indices of  dependent infinite parameter functions.\ninfinite_var_indices::Vector{InfiniteVariableIndex}: Indices of  dependent infinite variables.\nderivative_indices::Vector{Vector{DerivativeIndex}}: Indices of dependent derivatives.\nmeasure_indices::Vector{Vector{MeasureIndex}}: Indices of dependent measures.\nconstraint_indices::Vector{Vector{InfOptConstraintIndex}}: Indices of dependent constraints.\nhas_internal_supports::Bool: Does this parameter have internal supports?\nhas_deriv_constrs::Bool: Have any derivative evaluation constraints been added                             to the infinite model associated with this parameter?\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.DependentParametersIndex","page":"Infinite Parameters","title":"InfiniteOpt.DependentParametersIndex","text":"DependentParametersIndex <: ObjectIndex\n\nA DataType for storing the index of a DependentParameters object.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.DependentParameterIndex","page":"Infinite Parameters","title":"InfiniteOpt.DependentParameterIndex","text":"DependentParameterIndex <: AbstractInfOptIndex\n\nA DataType for storing the index of an indiviudal parameter in a DependentParameters object.\n\nFields\n\nobject_index::DependentParametersIndex: The index of the parameter collection.\nparam_index::Int: The index of the individual parameter in the above object.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.DependentParameterRef","page":"Infinite Parameters","title":"InfiniteOpt.DependentParameterRef","text":"DependentParameterRef <: DispatchVariableRef\n\nA DataType for dependent infinite parameter references that parameterize infinite variables.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::DependentParameterIndex: Index of the dependent parameter.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#Queries","page":"Infinite Parameters","title":"Queries","text":"","category":"section"},{"location":"manual/parameter/#General","page":"Infinite Parameters","title":"General","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"parameter_by_name(::InfiniteModel,::String)\nnum_parameters\nall_parameters","category":"page"},{"location":"manual/parameter/#InfiniteOpt.parameter_by_name-Tuple{InfiniteModel, String}","page":"Infinite Parameters","title":"InfiniteOpt.parameter_by_name","text":"parameter_by_name(model::InfiniteModel,\n                  name::String)::Union{GeneralVariableRef, Nothing}\n\nReturn the parameter reference assoociated with a parameter name. Errors if multiple parameters have the same name. Returns nothing if no such name exists.\n\nExample\n\njulia> parameter_by_name(model, \"t\")\nt\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.num_parameters","page":"Infinite Parameters","title":"InfiniteOpt.num_parameters","text":"num_parameters(model::InfiniteModel,\n               [type::Type{InfOptParameter} = InfOptParameter])::Int\n\nReturn the number of InfiniteOpt parameters assigned to model. By default, the total number of infinite and finite parameters is returned. The amount of a particular type is obtained by specifying the concrete parameter type of InfOptParameter via type. Type options include:\n\nInfOptParameter: all parameters\nScalarParameter: all scalar parameters\nInfiniteParameter: all infinite parameters\nFiniteParameter: all finite parameters\nIndependentParameter: all independent infinite parameters\nDependentParameters: all dependent infinite parameters\n\nExample\n\njulia> num_parameters(model)\n3\n\njulia> num_parameters(model, IndependentParameter)\n2\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#InfiniteOpt.all_parameters","page":"Infinite Parameters","title":"InfiniteOpt.all_parameters","text":"all_parameters(model::InfiniteModel,\n               type::Type{InfOptParameter} = InfOptParameter\n               )::Vector{GeneralVariableRef}\n\nReturn a list of all the InfiniteOpt parameters assigned to model. By default, all of the infinite and finite parameters is returned. The search is reduced to a particular type is obtained by specifying the concrete parameter type of InfOptParameter via type. Type options include:\n\nInfOptParameter: all parameters\nScalarParameter: all scalar parameters\nInfiniteParameter: all infinite parameters\nFiniteParameter: all finite parameters\nIndependentParameter: all independent infinite parameters\nDependentParameters: all dependent infinite parameters\n\nExamples\n\njulia> all_parameters(model)\n4-element Array{GeneralVariableRef,1}:\n t\n x[1]\n x[2]\n alpha\n\njulia> all_parameters(model, FiniteParameter)\n1-element Array{GeneralVariableRef,1}:\n alpha\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#Independent-Parameters-2","page":"Infinite Parameters","title":"Independent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"JuMP.name(::ScalarParameterRef)\ninfinite_domain(::IndependentParameterRef)\nJuMP.has_lower_bound(::IndependentParameterRef)\nJuMP.lower_bound(::IndependentParameterRef)\nJuMP.has_upper_bound(::IndependentParameterRef)\nJuMP.upper_bound(::IndependentParameterRef)\nhas_supports(::IndependentParameterRef)\nnum_supports(::IndependentParameterRef)\nsupports(::IndependentParameterRef)\nhas_internal_supports(::Union{IndependentParameterRef, DependentParameterRef})\nsignificant_digits(::IndependentParameterRef)\nderivative_method(::IndependentParameterRef)\nis_used(::ScalarParameterRef)\nused_by_infinite_variable(::IndependentParameterRef)\nused_by_parameter_function(::IndependentParameterRef)\nused_by_measure(::ScalarParameterRef)\nused_by_constraint(::ScalarParameterRef)","category":"page"},{"location":"manual/parameter/#JuMP.name-Tuple{ScalarParameterRef}","page":"Infinite Parameters","title":"JuMP.name","text":"JuMP.name(pref::Union{IndependentParameterRef, FiniteParameterRef})::String\n\nExtend the JuMP.name function to accomodate infinite parameters. Returns the  name string associated with pref.\n\nExample\n\njulia> name(t)\n\"t\"\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.infinite_domain-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(pref::IndependentParameterRef)::InfiniteScalarDomain\n\nReturn the infinite domain associated with pref.\n\nExample\n\njulia> infinite_domain(t)\n[0, 1]\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.has_lower_bound-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(pref::IndependentParameterRef)::Bool\n\nExtend the JuMP.has_lower_bound function to accomodate infinite parameters. Return true if the domain associated with pref has a defined lower bound or if a lower bound can be found. Extensions with user-defined infinite domain types should extend JuMP.has_lower_bound(domain::NewType).\n\nExample\n\njulia> has_lower_bound(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.lower_bound-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.lower_bound","text":"JuMP.lower_bound(pref::IndependentParameterRef)::Real\n\nExtend the JuMP.lower_bound function to accomodate infinite parameters. Returns the lower bound associated with the infinite domain. Errors if such a bound is not well-defined.\n\nExample\n\njulia> lower_bound(t)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.has_upper_bound-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(pref::IndependentParameterRef)::Bool\n\nExtend the JuMP.has_upper_bound function to accomodate infinite parameters. Return true if the domain associated with pref has a defined upper bound or if a upper bound can be found. Extensions with user-defined domains should extend JuMP.has_upper_bound(domain::NewType).\n\nExample\n\njulia> has_upper_bound(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.upper_bound-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.upper_bound","text":"JuMP.upper_bound(pref::IndependentParameterRef)::Real\n\nExtend the JuMP.upper_bound function to accomodate infinite parameters. Returns the upper bound associated with the infinite domain. Errors if such a bound is not well-defined. Extensions with user-defined domain types should extend JuMP.has_upper_bound(domain::NewType) and JuMP.upper_bound(domain::NewType) if appropriate.\n\nExample\n\njulia> upper_bound(t)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.has_supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.has_supports","text":"has_supports(pref::IndependentParameterRef)::Bool\n\nReturn true if pref has supports or false otherwise.\n\nExample\n\njulia> has_supports(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.num_supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.num_supports","text":"num_supports(pref::IndependentParameterRef; \n             [label::Type{<:AbstractSupportLabel} = PublicLabel])::Int\n\nReturn the number of support points associated with pref. By default, only the  number of public supports are counted. The full amount can be determined by setting  label = All. Moreover, the amount of labels that satisfy label is obtained  using an AbstractSupportLabel.\n\nExample\n\njulia> num_supports(t)\n2\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.supports","text":"supports(pref::IndependentParameterRef; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel])::Vector{Float64}\n\nReturn the support points associated with pref. Errors if there are no supports. Users can query just support points generated by a certain method using the keyword argument label. By default, the function returns all public support points regardless of the associated label. The full collection is given by setting  label = All. Moreover, the amount of labels that satisfy label is obtained  using an AbstractSupportLabel.\n\nExample\n\njulia> supports(t)\n2-element Array{Float64,1}:\n 0.0\n 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.has_internal_supports-Tuple{Union{DependentParameterRef, IndependentParameterRef}}","page":"Infinite Parameters","title":"InfiniteOpt.has_internal_supports","text":"has_internal_supports(pref::Union{IndependentParameterRef, DependentParameterRef})::Bool\n\nIndicate if pref has internal supports that will be hidden from the user by  default. \n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.significant_digits-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.significant_digits","text":"significant_digits(pref::IndependentParameterRef)::Int\n\nReturn the number of significant digits enforced on the supports of pref.\n\nExample\n\njulia> significant_digits(t)\n12\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.derivative_method-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.derivative_method","text":"derivative_method(pref::IndependentParameterRef)::AbstractDerivativeMethod\n\nReturns the numerical derivative evaluation method employed with pref when it  is used as an operator parameter in a derivative.\n\nExample\n\njulia> derivative_method(pref) \nFiniteDifference(Backward, true)\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.is_used-Tuple{ScalarParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.is_used","text":"is_used(pref::Union{IndependentParameterRef, FiniteParameterRef})::Bool\n\nReturn true if pref is used in the model or false otherwise.\n\nExample\n\njulia> is_used(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_infinite_variable-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_infinite_variable","text":"used_by_infinite_variable(pref::IndependentParameterRef)::Bool\n\nReturn true if pref is used by an infinite variable or false otherwise.\n\nExample\n\njulia> used_by_infinite_variable(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_parameter_function-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_parameter_function","text":"used_by_parameter_function(pref::IndependentParameterRef)::Bool\n\nReturn true if pref is used by an infinite parameter function or false otherwise.\n\nExample\n\njulia> used_by_parameter_function(t)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_measure-Tuple{ScalarParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(pref::Union{IndependentParameterRef, FiniteParameterRef})::Bool\n\nReturn true if pref is used by a measure or false otherwise.\n\nExample\n\njulia> used_by_measure(t)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_constraint-Tuple{ScalarParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(pref::Union{IndependentParameterRef, FiniteParameterRef})::Bool\n\nReturn true if pref is used by a constraint or false otherwise.\n\nExample\n\njulia> used_by_constraint(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Dependent-Parameters-2","page":"Infinite Parameters","title":"Dependent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"JuMP.name(::DependentParameterRef)\ninfinite_domain(::DependentParameterRef)\ninfinite_domain(::AbstractArray{<:DependentParameterRef})\nJuMP.has_lower_bound(::DependentParameterRef)\nJuMP.lower_bound(::DependentParameterRef)\nJuMP.has_upper_bound(::DependentParameterRef)\nJuMP.upper_bound(::DependentParameterRef)\nhas_supports(::DependentParameterRef)\nhas_supports(::AbstractArray{<:DependentParameterRef})\nnum_supports(::DependentParameterRef)\nnum_supports(::AbstractArray{<:DependentParameterRef})\nsupports(::DependentParameterRef)\nsupports(::AbstractArray{<:DependentParameterRef})\nsignificant_digits(::DependentParameterRef)\nderivative_method(::DependentParameterRef)\nis_used(::DependentParameterRef)\nused_by_infinite_variable(::DependentParameterRef)\nused_by_parameter_function(::DependentParameterRef)\nused_by_measure(::DependentParameterRef)\nused_by_constraint(::DependentParameterRef)","category":"page"},{"location":"manual/parameter/#JuMP.name-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.name","text":"JuMP.name(pref::DependentParameterRef)::String\n\nExtend JuMP.name to return the names of infinite dependent parameters.\n\nExample\n\njulia> name(pref)\n\"par_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.infinite_domain-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(pref::DependentParameterRef)::InfiniteScalarDomain\n\nReturn the infinite domain associated with the particular infinite dependent parameter pref if valid. Errors if the underlying DependentParameters object does not use a CollectionDomain.\n\nExample\n\njulia> infinite_domain(x[1])\n[-1, 1]\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.infinite_domain-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(prefs::AbstractArray{<:DependentParameterRef})::InfiniteArrayDomain\n\nReturn the infinite domain associated with the container of infinite dependent parameters prefs. Errors if the container prefs is incomplete.\n\nExample\n\njulia> infinite_domain(x)\nZeroMeanDiagNormal(\ndim: 2\nμ: [0.0, 0.0]\nΣ: [1.0 0.0; 0.0 1.0]\n)\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.has_lower_bound-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(pref::DependentParameterRef)::Bool\n\nExtend the JuMP.has_lower_bound function to accomodate a single dependent infinite parameter. Return true if the domain associated with pref has a defined lower bound or if a lower bound can be found. Extensions with user-defined scalar infinite domain types should extend JuMP.has_lower_bound(domain::NewType).\n\nExample\n\njulia> has_lower_bound(x[1])\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.lower_bound-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.lower_bound","text":"JuMP.lower_bound(pref::DependentParameterRef)::Number\n\nExtend the JuMP.lower_bound function to accomodate a single dependent infinite parameter. Returns the lower bound associated with the infinite domain. Errors if such a bound is not well-defined.\n\nExample\n\njulia> lower_bound(x[1])\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.has_upper_bound-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(pref::DependentParameterRef)::Bool\n\nExtend the JuMP.has_upper_bound function to accomodate a single dependent infinite parameter. Return true if the domain associated with pref has a defined upper bound or if a upper bound can be found. Extensions with user-defined scalar infinite domain types should extend JuMP.has_upper_bound(domain::NewType).\n\nExample\n\njulia> has_upper_bound(x[1])\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.upper_bound-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.upper_bound","text":"JuMP.upper_bound(pref::DependentParameterRef)::Number\n\nExtend the JuMP.upper_bound function to accomodate a single dependent infinite parameter. Returns the upper bound associated with the infinite domain. Errors if such a bound is not well-defined.\n\nExample\n\njulia> upper_bound(x[1])\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.has_supports-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.has_supports","text":"has_supports(pref::DependentParameterRef)::Bool\n\nReturn true if pref has supports or false otherwise.\n\nExample\n\njulia> has_supports(x[1])\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.has_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.has_supports","text":"has_supports(prefs::AbstractArray{<:DependentParameterRef})::Bool\n\nReturn true if prefs have supports or false otherwise. Errors if not all of the infinite dependent parameters are from the same object.\n\nExample\n\njulia> has_supports(x)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.num_supports-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.num_supports","text":"num_supports(pref::DependentParameterRef; \n             [label::Type{<:AbstractSupportLabel} = PublicLabel])::Int\n\nReturn the number of support points associated with a single dependent infinite parameter pref. Specify a subset of supports via label to only count the supports with label. By default only the amount of public supports are given, but  the full amount is obtained via label == All.\n\nExample\n\njulia> num_supports(x[1])\n2\n\njulia> num_supports(x[1], label = MCSample)\n0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.num_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.num_supports","text":"num_supports(prefs::AbstractArray{<:DependentParameterRef};\n             [label::Type{<:AbstractSupportLabel} = PublicLabel])::Int\n\nReturn the number of support points associated with dependent infinite parameters prefs. Errors if not all from the same underlying object. Specify a subset of supports via label to only count the supports with label. By default only the amount of public supports are given, but the full amount is  obtained via label == All.\n\nExample\n\njulia> num_supports(x)\n2\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.supports-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.supports","text":"supports(pref::DependentParameterRef; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel])::Vector{Float64}\n\nReturn the support points associated with pref. A subset of supports can be returned via label to return just the supports associated with label. By  default only the public supports are given, but the full set is  obtained via label == All.\n\nExample\n\njulia> supports(x[1])\n2-element Array{Float64,1}:\n 0.0\n 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.supports","text":"supports(prefs::AbstractArray{<:DependentParameterRef};\n         [label::Type{<:AbstractSupportLabel} = PublicLabel]\n         )::Union{Vector{<:AbstractArray{<:Real}}, Array{Float64, 2}}\n\nReturn the support points associated with prefs. Errors if not all of the infinite dependent parameters are from the same object. This will return a matrix if prefs is Vector, otherwise a vector of arrays is returned where each  array is a support point matching the format of prefs. A subset of supports can be returned via label to return just the supports associated with label. By  default only the public supports are given, but the full set is  obtained via  label == All.\n\nExample\n\njulia> supports(x) # columns are supports\n2×2 Array{Float64,2}:\n 0.0  1.0\n 0.0  1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.significant_digits-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.significant_digits","text":"significant_digits(pref::DependentParameterRef)::Int\n\nReturn the number of significant digits enforced on the supports of pref.\n\nExample\n\njulia> significant_digits(x[1])\n12\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.derivative_method-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.derivative_method","text":"derivative_method(pref::DependentParameterRef)::NonGenerativeDerivativeMethod\n\nReturns the numerical derivative evaluation method employed with pref when it  is used as an operator parameter in a derivative.\n\nExample\n\njulia> derivative_method(pref) \nFiniteDifference\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.is_used-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.is_used","text":"is_used(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used in the model.\n\nExample\n\njulia> is_used(pref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_infinite_variable-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_infinite_variable","text":"used_by_infinite_variable(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used by an infinite variable.\n\nExample\n\njulia> used_by_infinite_variable(pref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_parameter_function-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_parameter_function","text":"used_by_parameter_function(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used by an infinite parameter function.\n\nExample\n\njulia> used_by_parameter_function(pref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_measure-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used by a measure.\n\nExample\n\njulia> used_by_measure(pref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_constraint-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used by a constraint.\n\nExample\n\njulia> used_by_constraint(pref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Modification","page":"Infinite Parameters","title":"Modification","text":"","category":"section"},{"location":"manual/parameter/#General-2","page":"Infinite Parameters","title":"General","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"fill_in_supports!(::InfiniteModel)","category":"page"},{"location":"manual/parameter/#InfiniteOpt.fill_in_supports!-Tuple{InfiniteModel}","page":"Infinite Parameters","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(model::InfiniteModel; [num_supports::Int = DefaultNumSupports,\n                  modify::Bool = true])::Nothing\n\nAutomatically generate support points for all infinite parameters in model. This calls fill_in_supports! for each parameter in the model. See fill_in_supports! for more information. Errors if one of the infinite domain types is unrecognized. Note that no supports will be added to a particular parameter if it already has some and modify = false.\n\nExample\n\njulia> fill_in_supports!(model, num_supports = 4)\n\njulia> supports(t)\n4-element Array{Float64,1}:\n 0.0\n 0.333\n 0.667\n 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Independent-Parameters-3","page":"Infinite Parameters","title":"Independent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"JuMP.set_name(::ScalarParameterRef, ::String)\nset_infinite_domain(::IndependentParameterRef,::InfiniteScalarDomain)\nJuMP.set_lower_bound(::IndependentParameterRef, ::Real)\nJuMP.set_upper_bound(::IndependentParameterRef,::Real)\nadd_supports(::IndependentParameterRef,::Union{Real, Vector{<:Real}})\nset_supports(::IndependentParameterRef, ::Vector{<:Real})\ndelete_supports(::IndependentParameterRef)\ngenerate_and_add_supports!(::IndependentParameterRef,::AbstractInfiniteDomain)\nfill_in_supports!(::IndependentParameterRef)\nJuMP.delete(::InfiniteModel, ::IndependentParameterRef)","category":"page"},{"location":"manual/parameter/#JuMP.set_name-Tuple{ScalarParameterRef, String}","page":"Infinite Parameters","title":"JuMP.set_name","text":"JuMP.set_name(pref::ScalarParameterRef, name::String)\n\nExtend the JuMP.set_name function to accomodate infinite parameters. Set a new  base name to be associated with pref.\n\nExample\n\njulia> set_name(t, \"time\")\n\njulia> name(t)\n\"time\"\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_infinite_domain-Tuple{IndependentParameterRef, InfiniteScalarDomain}","page":"Infinite Parameters","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(pref::IndependentParameterRef,\n                 domain::InfiniteScalarDomain)::Nothing\n\nReset the infinite domain of pref with another InfiniteScalarDomain. An error will  be thrown if pref is being used by some measure.\n\nExample\n\njulia> set_infinite_domain(t, IntervalDomain(0, 2))\n\njulia> infinite_domain(t)\n[0, 2]\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.set_lower_bound-Tuple{IndependentParameterRef, Real}","page":"Infinite Parameters","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(pref::IndependentParameterRef, lower::Real)::Nothing\n\nExtend the JuMP.set_lower_bound function to accomodate infinite parameters. Updates the infinite domain lower bound if such an operation is supported. Set extensions that seek to employ this should extend JuMP.set_lower_bound(domain::NewType, lower::Number).\n\nExample\n\njulia> set_lower_bound(t, -1)\n\njulia> lower_bound(t)\n-1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.set_upper_bound-Tuple{IndependentParameterRef, Real}","page":"Infinite Parameters","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(pref::IndependentParameterRef, lower::Real)::Nothing\n\nExtend the JuMP.set_upper_bound function to accomodate infinite parameters. Updates the infinite domain upper bound if and only if it is an IntervalDomain. Errors otherwise. Extensions with user-defined infinite domains should extend JuMP.set_upper_bound(domain::NewType, upper::Number) if appropriate.\n\nExample\n\njulia> set_upper_bound(t, 2)\n\njulia> upper_bound(t)\n2.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.add_supports-Tuple{IndependentParameterRef, Union{Real, Vector{var\"#s40\"} where var\"#s40\"<:Real}}","page":"Infinite Parameters","title":"InfiniteOpt.add_supports","text":"add_supports(pref::IndependentParameterRef,\n             supports::Union{Real, Vector{<:Real}};\n             [label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nAdd additional support points for pref with identifying label label.\n\nExample\n\njulia> add_supports(t, 0.5)\n\njulia> supports(t)\n3-element Array{Float64,1}:\n 0.0\n 0.5\n 1.0\n\njulia> add_supports(t, [0.25, 1])\n\njulia> supports(t)\n4-element Array{Float64,1}:\n 0.0\n 0.25\n 0.5\n 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_supports-Tuple{IndependentParameterRef, Vector{var\"#s40\"} where var\"#s40\"<:Real}","page":"Infinite Parameters","title":"InfiniteOpt.set_supports","text":"set_supports(pref::IndependentParameterRef, supports::Vector{<:Real};\n             [force::Bool = false,\n             label::Type{<:AbstractSupportLabel} = UserDefined]\n             )::Nothing\n\nSpecify the support points for pref. Errors if the supports violate the bounds associated with the infinite domain. Warns if the points are not unique. If force this will overwrite exisiting supports otherwise it will error if there are existing supports.\n\nExample\n\njulia> set_supports(t, [0, 1])\n\njulia> supports(t)\n2-element Array{Int64,1}:\n 0\n 1\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.delete_supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.delete_supports","text":"delete_supports(pref::IndependentParameterRef; \n                [label::Type{<:AbstractSupportLabel} = All])::Nothing\n\nDelete the support points for pref. If label != All then delete label and  any supports that solely depend on it.\n\nExample\n\njulia> delete_supports(t)\n\njulia> supports(t)\nERROR: Parameter t does not have supports.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.generate_and_add_supports!-Tuple{IndependentParameterRef, AbstractInfiniteDomain}","page":"Infinite Parameters","title":"InfiniteOpt.generate_and_add_supports!","text":"generate_and_add_supports!(pref::IndependentParameterRef,\n                           domain::AbstractInfiniteDomain,\n                           [method::Type{<:AbstractSupportLabel}];\n                           [num_supports::Int = DefaultNumSupports])::Nothing\n\nGenerate supports for independent parameter pref via generate_support_values and add them to pref. This is intended as an extendable internal method for fill_in_supports!. Most extensions that empoy user-defined infinite domains can typically enable this by extending generate_support_values. Errors if the infinite domain type is not recognized.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.fill_in_supports!-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(pref::IndependentParameterRef;\n                  [num_supports::Int = DefaultNumSupports])::Nothing\n\nAutomatically generate support points for a particular independent parameter pref. Generating num_supports for the parameter. The supports are generated uniformly if the underlying infinite domain is an IntervalDomain or they are generating randomly accordingly to the distribution if the domain is a UniDistributionDomain. Will add nothing if there are supports and modify = false. Extensions that use user defined domain types should extend generate_and_add_supports! and/or generate_support_values as needed. Errors if the infinite domain type is not recognized.\n\nExample\n\njulia> fill_in_supports!(x, num_supports = 4)\n\njulia> supports(x)\n4-element Array{Number,1}:\n 0.0\n 0.333\n 0.667\n 1.0\n\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.delete-Tuple{InfiniteModel, IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, pref::ScalarParameterRef)::Nothing\n\nExtend JuMP.delete to delete scalar parameters and their dependencies. All variables, constraints, and measure functions that depend on pref are updated to exclude it. Errors if the parameter is used by an infinite variable or if it is contained in an  AbstractMeasureData DataType that is employed by a measure since the measure becomes invalid otherwise. Thus, measures that contain this dependency must be deleted first. Note that parameter_refs needs to be extended to allow deletion of parameters when custom AbstractMeasureData datatypes are used.\n\nExample\n\njulia> delete(model, x)\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Dependent-Parameters-3","page":"Infinite Parameters","title":"Dependent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"JuMP.set_name(::DependentParameterRef, ::String)\nset_infinite_domain(::DependentParameterRef,::InfiniteScalarDomain)\nset_infinite_domain(::AbstractArray{<:DependentParameterRef},::InfiniteArrayDomain)\nJuMP.set_lower_bound(::DependentParameterRef,::Real)\nJuMP.set_upper_bound(::DependentParameterRef,::Real)\nadd_supports(::AbstractArray{<:DependentParameterRef},::Vector{<:AbstractArray{<:Real}})\nset_supports(::AbstractArray{<:DependentParameterRef},::Vector{<:AbstractArray{<:Real}})\ndelete_supports(::AbstractArray{<:DependentParameterRef})\ngenerate_and_add_supports!(::AbstractArray{<:DependentParameterRef},::InfiniteArrayDomain)\nfill_in_supports!(::AbstractArray{<:DependentParameterRef})\nJuMP.delete(::InfiniteModel,::AbstractArray{<:DependentParameterRef})","category":"page"},{"location":"manual/parameter/#JuMP.set_name-Tuple{DependentParameterRef, String}","page":"Infinite Parameters","title":"JuMP.set_name","text":"JuMP.set_name(pref::DependentParameterRef, name::String)::Nothing\n\nExtend JuMP.set_name to set names of dependent infinite parameters.\n\nExample\n\njulia> set_name(vref, \"par_name\")\n\njulia> name(vref)\n\"para_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_infinite_domain-Tuple{DependentParameterRef, InfiniteScalarDomain}","page":"Infinite Parameters","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(pref::DependentParameterRef,\n                 domain::InfiniteScalarDomain)::Nothing\n\nSpecify the scalar infinite domain of the dependent infinite parameter pref to domain if pref is part of a CollectionDomain, otherwise an error is thrown. Note this will reset/delete all the supports contained in the underlying DependentParameters object. Also, errors if pref is used by a measure.\n\nExample\n\njulia> set_infinite_domain(x[1], IntervalDomain(0, 2))\n\njulia> infinite_domain(x[1])\n[0, 2]\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_infinite_domain-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}, InfiniteArrayDomain}","page":"Infinite Parameters","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(prefs::AbstractArray{<:DependentParameterRef},\n                 domain::InfiniteArrayDomain)::Nothing\n\nSpecify the multi-dimensional infinite domain of the dependent infinite parameters prefs to domain. Note this will reset/delete all the supports contained in the underlying DependentParameters object. This will error if the not all of the dependent infinite parameters are included, if any of them are used by measures.\n\nExample\n\njulia> set_infinite_domain(x, CollectionDomain([IntervalDomain(0, 1), IntervalDomain(0, 2)]))\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.set_lower_bound-Tuple{DependentParameterRef, Real}","page":"Infinite Parameters","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(pref::DependentParameterRef, lower::Real)::Nothing\n\nExtend the JuMP.set_lower_bound function to accomodate a single dependent infinite parameter. Updates the infinite domain lower bound if such an operation is supported. Infinite scalar domain extensions that seek to employ this should extend JuMP.set_lower_bound(domain::NewType, lower::Number). This will call set_infinite_domain and will error if this is not well-defined. Note that existing supports will be deleted.\n\nExample\n\njulia> set_lower_bound(t, -1)\n\njulia> lower_bound(t)\n-1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.set_upper_bound-Tuple{DependentParameterRef, Real}","page":"Infinite Parameters","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(pref::DependentParameterRef, upper::Real)::Nothing\n\nExtend the JuMP.set_upper_bound function to accomodate a single dependent infinite parameter. Updates the infinite domain upper bound if such an operation is supported. Infinite scalar domain extensions that seek to employ this should extend JuMP.set_upper_bound(domain::NewType, upper::Number). This will call set_infinite_domain and will error if this is not well-defined. Note that existing supports will be deleted.\n\nExample\n\njulia> set_upper_bound(t, -1)\n\njulia> upper_bound(t)\n-1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.add_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}, Vector{var\"#s39\"} where var\"#s39\"<:(AbstractArray{var\"#s38\", N} where {var\"#s38\"<:Real, N})}","page":"Infinite Parameters","title":"InfiniteOpt.add_supports","text":"add_supports(prefs::AbstractArray{<:DependentParameterRef},\n             supports::Vector{<:AbstractArray{<:Real}};\n             [label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nAdd additional support points for prefs. Errors if the supports violate the domain of the infinite domain, if the dimensions don't match up properly, if prefs and supports have different indices, or not all of the prefs are from the same dependent infinite parameter container.\n\n    add_supports(prefs::Vector{DependentParameterRef},\n                 supports::Array{<:Real, 2};\n                 [label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nSpecify the supports for a vector prefs of dependent infinite parameters. Here rows of supports correspond to prefs and the columns correspond to the supports. This is more efficient than the above method and will error for the same reasons.\n\nExample\n\njulia> add_supports(x, [[1], [1]])\n\njulia> supports(x)\n2×2 Array{Float64,2}:\n 0.0  1.0\n 0.0  1.0\n\njulia> add_supports(x, ones(2, 1) * 0.5)\n\njulia> supports(t)\n2×3 Array{Float64,2}:\n 0.0  1.0  0.5\n 0.0  1.0  0.5\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}, Vector{var\"#s39\"} where var\"#s39\"<:(AbstractArray{var\"#s38\", N} where {var\"#s38\"<:Real, N})}","page":"Infinite Parameters","title":"InfiniteOpt.set_supports","text":"set_supports(prefs::AbstractArray{<:DependentParameterRef},\n             supports::Vector{<:AbstractArray{<:Real}};\n             [force::Bool = false,\n             label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nSpecify the support points for prefs. Errors if the supports violate the domain of the infinite domain, if the dimensions don't match up properly, if prefs and supports have different indices, not all of the prefs are from the same dependent infinite parameter container, there are existing supports and force = false. Note that it is strongly preferred to use add_supports if possible to avoid destroying measure dependencies.\n\n    set_supports(prefs::Vector{DependentParameterRef},\n                 supports::Array{<:Real, 2};\n                 [force::Bool = false,\n                 label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nSpecify the supports for a vector prefs of dependent infinite parameters. Here rows of supports correspond to prefs and the columns correspond to the supports. This is more efficient than the above method and will error for the same reasons.\n\nExample\n\njulia> set_supports(y, [[0, 1], [0, 1]])\n\njulia> set_supports(x, [0 1; 0 1])\n\njulia> supports(x)\n2×2 Array{Float64,2}:\n 0.0  1.0\n 0.0  1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.delete_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.delete_supports","text":"delete_supports(prefs::AbstractArray{<:DependentParameterRef};\n                [label::Type{<:AbstractSupportLabel} = All])::Nothing\n\nDelete the support points for prefs. Errors if any of the parameters are used by a measure or if not all belong to the same set of dependent parameters. If label != All then that label is removed along with any supports that solely  contain that label.\n\nExample\n\njulia> delete_supports(w)\n\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.generate_and_add_supports!-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}, InfiniteArrayDomain}","page":"Infinite Parameters","title":"InfiniteOpt.generate_and_add_supports!","text":"generate_and_add_supports!(prefs::AbstractArray{<:DependentParameterRef},\n                           domain::InfiniteArrayDomain,\n                           [method::Type{<:AbstractSupportLabel}];\n                           [num_supports::Int = DefaultNumSupports])::Nothing\n\nGenerate supports for prefs via generate_support_values and add them to pref. This is intended as an extendable internal method for fill_in_supports!. Most extensions that employ user-defined infinite domains can typically enable this by extending generate_support_values. However, in some cases it may be necessary to extend this when more complex operations need to take place then just adding supports to a set of infinite parameters. Errors if the infinite domain type is not recognized.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.fill_in_supports!-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(prefs::AbstractArray{<:DependentParameterRef};\n                  [num_supports::Int = DefaultNumSupports,\n                   modify::Bool = true])::Nothing\n\nAutomatically generate support points for a container of dependent infinite parameters prefs. Generating up to num_supports for the parameters in accordance with generate_and_add_supports!. Will add nothing if there are supports and modify = false. Extensions that use user defined domain types should extend generate_and_add_supports! and/or generate_support_values as needed. Errors if the infinite domain type is not recognized.\n\nExample\n\njulia> fill_in_supports!(x, num_supports = 4)\n\njulia> supports(x)\n2×4 Array{Float64,2}:\n 0.0  0.333  0.667  1.0\n 0.0  0.333  0.667  1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.delete-Tuple{InfiniteModel, AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel,\n            prefs::AbstractArray{<:DependentParameterRef})::Nothing\n\nExtend JuMP.delete to delete dependent infinite parameters and their dependencies. All variables, constraints, and measure functions that depend on prefs are updated to exclude them. Errors if the parameters are contained in an AbstractMeasureData datatype that is employed by a measure since the measure becomes invalid otherwise. Thus, measures that contain this dependency must be deleted first. Note that parameter_refs needs to be extended to allow deletion of parameters when custom AbstractMeasureData datatypes are used. Note that any dependent infinite variables will have their start values reset to the default via reset_start_value_function.\n\nExample\n\njulia> print(model)\nMin measure(g(t, x)*t + x) + z\nSubject to\n z ≥ 0.0\n g(t, x) + z ≥ 42.0, ∀ t ∈ [0, 6], x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]\n g(0.5, x) = 0, x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]\n\njulia> delete(model, x)\n\njulia> print(model)\nMin measure(g(t)*t) + z\nSubject to\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n g(0.5) = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Generative-Supports","page":"Infinite Parameters","title":"Generative Supports","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"AbstractGenerativeInfo\nNoGenerativeSupports\nUniformGenerativeInfo\nhas_generative_supports(::IndependentParameterRef)\nsupport_label(::AbstractGenerativeInfo)\ngenerative_support_info(::IndependentParameterRef)\nmake_generative_supports\nadd_generative_supports","category":"page"},{"location":"manual/parameter/#InfiniteOpt.AbstractGenerativeInfo","page":"Infinite Parameters","title":"InfiniteOpt.AbstractGenerativeInfo","text":"AbstractGenerativeInfo\n\nAn abstract type for storing information about generating supports that are made  based on existing supports as required by certain measures and/or derivatives  that depend on a certain independent infinite parameter. Such as the case with  internal collocation supports.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.NoGenerativeSupports","page":"Infinite Parameters","title":"InfiniteOpt.NoGenerativeSupports","text":"NoGenerativeSupports <: AbstractGenerativeInfo\n\nA DataType to signify that no generative supports will be generated for the  measures and/or the derivatives. Has no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.UniformGenerativeInfo","page":"Infinite Parameters","title":"InfiniteOpt.UniformGenerativeInfo","text":"UniformGenerativeInfo <: AbstractGenerativeInfo\n\nA DataType for generative supports that will be generated in a uniform manner  over finite elements (i.e., in between the existing supports). These generative  supports are described by the support_basis which lie in a nominal domain [0, 1].  The constructor is of the form:\n\n    UniformGenerativeInfo(support_basis::Vector{<:Real}, label::DataType, \n                          [lb::Real = 0, ub::Real = 1])\n\nwhere the support_basis is defined over [lb, ub].\n\nFields\n\nsupport_basis::Vector{Float64}: The basis of generative supports defined in   [0, 1] that will be transformed for each finite element.\nlabel::DataType: The unique label to be given to each generative support.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.has_generative_supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.has_generative_supports","text":"has_generative_supports(pref::IndependentParameterRef)::Bool\n\nReturn whether generative supports have been added to pref in accordance  with its generative support info.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.support_label-Tuple{AbstractGenerativeInfo}","page":"Infinite Parameters","title":"InfiniteOpt.support_label","text":"support_label(info::AbstractGenerativeInfo)::DataType\n\nReturn the support label to be associated with generative supports produced in  accordance with info. This is intended an internal method that should be  extended for user defined types of AbstractGenerativeInfo.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.generative_support_info-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.generative_support_info","text":"generative_support_info(pref::IndependentParameterRef)::AbstractGenerativeInfo\n\nReturn the generative support information associated with pref.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.make_generative_supports","page":"Infinite Parameters","title":"InfiniteOpt.make_generative_supports","text":"make_generative_supports(info::AbstractGenerativeInfo,\n                         pref::IndependentParameterRef,\n                         existing_supps::Vector{Float64}\n                         )::Vector{Float64}\n\nGenerate the generative supports for pref in accordance with info and the  existing_supps that pref has. The returned supports should not include  existing_supps. This is intended as internal method to enable  add_generative_supports and should be extended for any user defined  info types that are created to enable new measure and/or derivative evaluation  techniques that require the creation of generative supports.\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#InfiniteOpt.add_generative_supports","page":"Infinite Parameters","title":"InfiniteOpt.add_generative_supports","text":"add_generative_supports(pref::IndependentParameterRef)::Nothing\n\nCreate generative supports for pref if needed in accordance with its  generative support info using make_generative_supports and add them to  pref. This is intended as an internal function, but can be useful user defined  optimizer model extensions that utlize our support system.\n\n\n\n\n\nadd_generative_supports(prefs; [kwargs...])\n\nDefine add_generative_supports for general variable references. It relies on add_generative_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"function"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Stochastic Optimization/farmer.jl\"","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Two-Stage-Stochastic-Program","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/#Introduction","page":"Two-Stage Stochastic Program","title":"Introduction","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"First let's consider a standard two-stage stochastic program. Such problems consider 1st stage variables x in X subseteq mathbbR^n_x which denote upfront (here-and-now) decisions made before any realization of the random parameters xi in mathbbR^n_xi is observed, and 2nd stage variables y(xi) in mathbbR^n_y which denote recourse (wait-and-see) decisions that are made in response to realizations of xi. Moreover, the objective seeks to optimize 1st stage costs f_1(x) and second stage costs f_2(x y(xi)) which are evaluated over the uncertain domain via a risk measure R_xicdot (e.g., the expectation mathbbE_xicdot). Putting this together, we obtain the two-stage stochastic program:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"beginaligned\n    min_x y(xi)  f_1(x) + R_xif_2(x y(xi)) \n    textst   g_i(x y(xi)) = 0  i in I\n     h_j(x y(xi)) leq 0  j in J\n      x in X\nendaligned","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"where g_i(x y(xi))  i in I denote 2nd stage equality constraints, h_j(x y(xi))  j in J are 2nd stage inequality constraints, and X denotes the set of feasible 1st stage decisions.","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Formulation","page":"Two-Stage Stochastic Program","title":"Formulation","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"For an example, we consider the classic farmer problem. Here the farmer must allocate farmland x_c for each crop c in C with random yields per acre xi_c such that he minimizes expenses (i.e., maximizes profit) while fulfilling contractual demand d_c. If needed he can purchase crops from other farmers to satisfy his contracts. He can also sell extra crop yield that exceeds his contractual obligations. Thus, here we have 1st stage variables x_c and 2nd stage variables of crops sold w_c(xi) and crops purchased y_c(xi). Putting this together using the expectation mathbbE_xicdot as our risk measure we obtain:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"beginaligned\n    undersetx y(xi) w(xi)textmin  sum_c in C alpha_c x_c + mathbbE_xileftsum_c in Cbeta_c y_c(xi) - lambda_c w_c(xi)right \n    textst   sum_c in C x_c leq barx\n     xi_c x_c + y_c(xi) - w_c(xi) geq d_c  c in C \n     0 leq x_c leq barx  c in C \n     0 leq y_c(xi) leq bary_c  c in C \n     0 leq w_c(xi) leq barw_c  c in C \n     xi_c in Xi_c  c in C\nendaligned","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"where alpha_c are production costs, beta_c are the purchase prices, lambda_c are the selling prices, barx is the total acreage, bary_c are purchases limits, barw_c are selling limits, and Xi_c are the underlying distributions.","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Problem-Setup","page":"Two-Stage Stochastic Program","title":"Problem Setup","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"First let's import the necessary packages:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"using InfiniteOpt, Distributions, Ipopt","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Next let's specify the problem data:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"num_scenarios = 10 # small amount for example\nC = 1:3\nα = [150, 230, 260] # land cost\nβ = [238, 210, 0]   # purchasing cost\nλ = [170, 150, 36]  # selling price\nd = [200, 240, 0]   # contract demand\nxbar = 500          # total land\nwbar3 = 6000        # no upper bound on the other crops\nybar3 = 0           # no upper bound on the other crops\nΞ = [Uniform(0, 5), Uniform(0, 5), Uniform(10, 30)]; # the distributions\n","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Problem-Definition","page":"Two-Stage Stochastic Program","title":"Problem Definition","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Let's start by setting up the infinite model that uses Ipopt as the optimizer that will ultimately be used to solve the transcribed variant:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"model = InfiniteModel(Ipopt.Optimizer)\nset_optimizer_attribute(model, \"print_level\", 0);\n","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Now let's define the infinite parameters using @infinite_parameter:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@infinite_parameter(model, ξ[c in C] ~ Ξ[c], num_supports = num_scenarios)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:3\nAnd data, a 3-element Vector{GeneralVariableRef}:\n ξ[1]\n ξ[2]\n ξ[3]","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Now let's define all of the decision variables using @variables:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@variables(model, begin\n    # 1st stage variables\n    0 <= x[C] <= xbar\n    # 2nd stage variables\n    0 <= y[C], Infinite(ξ)\n    0 <= w[C], Infinite(ξ)\nend)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Next, the objective is defined using @objective and 𝔼:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@objective(model, Min, sum(α[c] * x[c] for c in C) +\n                       𝔼(sum(β[c] * y[c] - λ[c] * w[c] for c in C), ξ))","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"150 x[1] + 230 x[2] + 260 x[3] + 𝔼{ξ}[238 y[1](ξ) - 170 w[1](ξ) + 210 y[2](ξ) - 150 w[2](ξ) - 36 w[3](ξ)]","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Finally, all we need to do is define the constraints using @constraints:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@constraints(model, begin\n    # capacity constraint\n    sum(x[c] for c in C) <= xbar\n    # balances\n    [c in C], ξ[c] * x[c] + y[c] - w[c] >= d[c]\n    # crop limits\n    w[3] <= wbar3\n    y[3] <= ybar3\nend)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Problem-Solution","page":"Two-Stage Stochastic Program","title":"Problem Solution","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"With the model defined, let's optimize and get the results","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"optimize!(model)\nx_opt = value.(x)\nprofit = -objective_value(model)\n\nprintln(\"Land Allocations: \", [round(x_opt[k], digits = 2) for k in keys(x_opt)])\nprintln(\"Expected Profit: \\$\", round(profit, digits = 2))","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Land Allocations: [48.56, 214.77, 236.67]\nExpected Profit: $57099.53\n","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"We did it!","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#CVaR-Objective","page":"Two-Stage Stochastic Program","title":"CVaR Objective","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"An interesting modification to the above problem would be to use a CVaR risk measure instead of an expectation. This also can be readily achieved via InfiniteOpt. The CVaR measure is defined:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"CVaR_epsilon(X) = undersett in mathbbRtextinfleftt + frac11-epsilon mathbbEtextmax(0 X - t) right","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"where epsilon is the confidence level. Inserting this into the formulation, we now obtain:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"beginaligned\n    undersetx y(xi) w(xi) t q(xi)textmin  sum_c in C alpha_c x_c + t + frac11-epsilon mathbbE_xiq(xi) \n    textst  sum_c in C x_c leq barx\n     xi_c x_c + y_c(xi) - w_c(xi) geq d_c  c in C \n     0 leq x_c leq barx  c in C \n     0 leq y_c(xi) leq bary_c  c in C \n     0 leq w_c(xi) leq barw_c  c in C \n     xi_c in Xi_c  c in C \n     q(xi) geq sum_c in Cbeta_c y_c(xi) - lambda_c w_c(xi) - t \n     q(xi) geq 0\nendaligned","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"where q(xi) is introduced to handle the max operator. Let's update and resolve our InfiniteOpt model using epsilon = 095:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Define the additional variables:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@variables(model, begin\n    t\n    q >= 0, Infinite(ξ)\nend)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Redefine the objective:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@objective(model, Min, sum(α[c] * x[c] for c in C) + t + 1 / (1 - 0.95) * 𝔼(q, ξ))","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"150 x[1] + 230 x[2] + 260 x[3] + t + 19.999999999999982 𝔼{ξ}[q(ξ)]","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Add the max constraint:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@constraint(model, q >= sum(β[c] * y[c] - λ[c] * w[c] for c in C) - t)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"q(ξ) - 238 y[1](ξ) + 170 w[1](ξ) - 210 y[2](ξ) + 150 w[2](ξ) + 36 w[3](ξ) + t ≥ 0.0, ∀ ξ[1] ~ Uniform, ξ[2] ~ Uniform, ξ[3] ~ Uniform","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Optimize and get the results","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"optimize!(model)\nx_opt = value.(x)\ny_opt = value.(y)\nw_opt = value.(w)\nprofit = -sum(α[c] * x_opt[c] for c in C) - 1 / num_scenarios *\n            sum(β[c] * y_opt[c][k] - λ[c] * w_opt[c][k] for c in C, k in 1:num_scenarios)\n\nprintln(\"Land Allocations: \", [round(x_opt[k], digits = 2) for k in keys(x_opt)])\nprintln(\"Expected Profit: \\$\", round(profit, digits = 2))","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Land Allocations: [28.58, 0.0, 471.42]\nExpected Profit: $-27187.13\n","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"That's it!","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Maintenance-Tests","page":"Two-Stage Stochastic Program","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"using Test\n@test termination_status(model) == MOI.LOCALLY_SOLVED\n@test x_opt isa JuMPC.DenseAxisArray{<:Real}\n@test profit isa Real","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Test Passed","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img class=\"display-light-only\" src=\"assets/full_logo.png\" alt=\"InfiniteOpt logo\"/>\n<img class=\"display-dark-only\" src=\"assets/full_logo-dark.png\" alt=\"InfiniteOpt logo\"/>","category":"page"},{"location":"","page":"Home","title":"Home","text":"A JuMP extension for expressing and solving infinite-dimensional optimization  problems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nInfiniteOpt v0.4.0 underwent a number of breaking syntax changes  relative to previous versions. This is to promote long term code stability  and to increase the capabilities of InfiniteOpt. Please review the guide  to see updated syntax. Deprecation warnings have been incorporated into this  version to help convert old scripts.","category":"page"},{"location":"#What-is-InfiniteOpt?","page":"Home","title":"What is InfiniteOpt?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt.jl provides a general mathematical abstraction to express and solve  infinite-dimensional optimization problems (i.e., problems with decision  functions). Such problems stem from areas such as space-time programming and  stochastic programming. InfiniteOpt is meant to facilitate intuitive model  definition, automatic transcription into solvable models, permit a wide range  of user-defined extensions/behavior, and more. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"It builds upon JuMP to add support for many complex modeling objects which  include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Infinite parameters (e.g., time, space, uncertainty, etc.)\nFinite parameters (similar to ParameterJuMP)\nInfinite variables (e.g., y(t x))\nDerivatives (e.g., fracpartial y(t x)partial t)\nMeasures (e.g., int_t in mathcalD_ty(tx) dt, mathbbEy(xi))\nMore","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nInfiniteOpt is intended to be used for infinite-dimensional optimization  problems. Finite problems (e.g., directly modeling a discrete time model)  should instead be modeled using JuMP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Moreover, InfiniteOpt decouples the infinite-dimensional formulations from the  finite transformations typically used to solve them. This readily enables diverse  techniques be used to solve these types of problems. By default, we employ  direct transcription (i.e., discretization) transformations whose features  include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Efficient implementations that scale linearly!\nDiverse integral approximations (e.g., quadratures, sampling)\nDiverse derivative approximations (e.g., finite difference, orthogonal  collocation)\nSophisticated support point management system\nCompatible with all JuMP-supported solvers","category":"page"},{"location":"","page":"Home","title":"Home","text":"Accepted infinite/finite problem forms currently include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Variables\nContinuous and semi-continuous\nBinary\nInteger and semi-integer\nSemi-definite\nDerivatives\nOrdinary derivative operators (of any order)\nPartial derivative operators (of any order)\nMeasures\nUnivariate and multivariate integrals \nUnivariate and multivariate expectations \nArbitrary measure operators (via general measure API)\nObjectives\nLinear\nQuadratic (convex and non-convex)\nHigher-order powers (via place holder variables)\nConstraints\nLinear\nQuadratic (convex and non-convex)\nHigher-order powers (via place holder variables)\nConic\nSemi-definite\nIndicator","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nNonlinear objects as defined by JuMP.@NL[macro_name] are not currently  supported by InfiniteOpt. See Nonlinear Expressions for more  information and possible workarounds. ","category":"page"},{"location":"#Modeling-Infinite-Dimensional-Problems-with-InfiniteOpt.jl","page":"Home","title":"Modeling Infinite-Dimensional Problems with InfiniteOpt.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See our YouTube overview of infinite-dimensional programming and InfiniteOpt.jl's  capabilities (Note the syntax in the video is now deprecated):  (Image: youtube)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt.jl is a registered Julia package and can be added simply by  inputting the following in the package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.6) pkg> add InfiniteOpt","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please visit our Installation Guide for more details and information on how to get started.","category":"page"},{"location":"#First-Steps","page":"Home","title":"First Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt is extension of JuMP, thus new users should start by  familiarizing themselves with how to use JuMP first. See  JuMP's documentation to learn more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once you're familiar with JuMP check out our Quick Start Guide to get  started. From there we provide extensive documentation to help you along, please  see How to Use the Documentation for more info.","category":"page"},{"location":"#How-to-Use-the-Documentation","page":"Home","title":"How to Use the Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt is intended to serve both as a high-level interface for  infinite-dimensional optimization and as a highly customizable/extendable  platform for implementing advanced techniques. With this in mind, we provide the  User Guide sections to walk through the ins and outs of InfiniteOpt. Each  page in the User Guide typically contains the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"An Overview section describing the purpose of the page.\nA Basic Usage section to guide using InfiniteOpt at a high level.\nOther sections offering more in-depth information/guidance beyond basic usage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We also provide a technical manual in the API Manual sections which are  comprised of the docstrings of all the public methods and types that comprise  InfiniteOpt. These detail the technical aspects of each function, method, macro,  and composite type.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Details, instructions, templates, and tutorials on how to write user-defined  extensions in InfiniteOpt are provided on the Extensions page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, case study examples are provided in the Examples sections.","category":"page"},{"location":"#Contribution","page":"Home","title":"Contribution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt is a powerful tool with a broad scope lending to a large realm of  possible feature additions and enhancements. So, we are thrilled to support  anyone who would like to contribute to this project in any way big or small.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For small documentation fixes (such as typos or wording clarifications) please  do the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Click on Edit on GitHub at the top of the documentation page\nMake the desired changes\nSubmit a pull request","category":"page"},{"location":"","page":"Home","title":"Home","text":"For other contributions, please visit our  Developers Guide for step by step instructions and to  review our style guide.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We acknowledge our support from the Department of Energy under grant  DE-SC0014114.","category":"page"},{"location":"manual/result/#result_manual","page":"Results","title":"Results","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"A technical manual for querying optimized InfiniteOpt models. See the  respective guide for more information.","category":"page"},{"location":"manual/result/#Statuses","page":"Results","title":"Statuses","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.termination_status(::InfiniteModel)\nJuMP.raw_status(::InfiniteModel)\nJuMP.primal_status(::InfiniteModel)\nJuMP.dual_status(::InfiniteModel)","category":"page"},{"location":"manual/result/#JuMP.termination_status-Tuple{InfiniteModel}","page":"Results","title":"JuMP.termination_status","text":"JuMP.termination_status(model::InfiniteModel)\n\nExtend JuMP.termination_status  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.raw_status-Tuple{InfiniteModel}","page":"Results","title":"JuMP.raw_status","text":"JuMP.raw_status(model::InfiniteModel)\n\nExtend JuMP.raw_status  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.primal_status-Tuple{InfiniteModel}","page":"Results","title":"JuMP.primal_status","text":"JuMP.primal_status(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.primal_status  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.dual_status-Tuple{InfiniteModel}","page":"Results","title":"JuMP.dual_status","text":"JuMP.dual_status(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.dual_status  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#General","page":"Results","title":"General","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.solve_time(::InfiniteModel)\nJuMP.simplex_iterations(::InfiniteModel)\nJuMP.barrier_iterations(::InfiniteModel)\nJuMP.node_count(::InfiniteModel)\nJuMP.result_count(::InfiniteModel)","category":"page"},{"location":"manual/result/#JuMP.solve_time-Tuple{InfiniteModel}","page":"Results","title":"JuMP.solve_time","text":"JuMP.solve_time(model::InfiniteModel)\n\nExtend JuMP.solve_time  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.simplex_iterations-Tuple{InfiniteModel}","page":"Results","title":"JuMP.simplex_iterations","text":"JuMP.simplex_iterations(model::InfiniteModel)\n\nExtend JuMP.simplex_iterations  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.barrier_iterations-Tuple{InfiniteModel}","page":"Results","title":"JuMP.barrier_iterations","text":"JuMP.barrier_iterations(model::InfiniteModel)\n\nExtend JuMP.barrier_iterations  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.node_count-Tuple{InfiniteModel}","page":"Results","title":"JuMP.node_count","text":"JuMP.node_count(model::InfiniteModel)\n\nExtend JuMP.node_count  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.result_count-Tuple{InfiniteModel}","page":"Results","title":"JuMP.result_count","text":"JuMP.result_count(model::InfiniteModel)\n\nExtend result_count to return the number of results available to query after a  call to optimize!.\n\nExample\n\njulia> result_count(model)\n1\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#Objective","page":"Results","title":"Objective","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.objective_bound(::InfiniteModel)\nJuMP.objective_value(::InfiniteModel)\nJuMP.dual_objective_value(::InfiniteModel)","category":"page"},{"location":"manual/result/#JuMP.objective_bound-Tuple{InfiniteModel}","page":"Results","title":"JuMP.objective_bound","text":"JuMP.objective_bound(model::InfiniteModel)\n\nExtend JuMP.objective_bound  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.objective_value-Tuple{InfiniteModel}","page":"Results","title":"JuMP.objective_value","text":"JuMP.objective_value(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.objective_value  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.dual_objective_value-Tuple{InfiniteModel}","page":"Results","title":"JuMP.dual_objective_value","text":"JuMP.dual_objective_value(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.dual_objective_value  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#Variables","page":"Results","title":"Variables","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.has_values(::InfiniteModel)\nJuMP.value(::GeneralVariableRef)\nJuMP.reduced_cost(::GeneralVariableRef)\nJuMP.optimizer_index(::GeneralVariableRef)\nInfiniteOpt.map_value\nInfiniteOpt.map_reduced_cost\nInfiniteOpt.map_optimizer_index","category":"page"},{"location":"manual/result/#JuMP.has_values-Tuple{InfiniteModel}","page":"Results","title":"JuMP.has_values","text":"JuMP.has_values(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.has_values  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.value-Tuple{GeneralVariableRef}","page":"Results","title":"JuMP.value","text":"JuMP.value(vref::GeneralVariableRef; [result::Int = 1, \n           label::Type{<:AbstractSupportLabel} = PublicLabel,\n           ndarray::Bool = false, kwargs...])\n\nExtend JuMP.value to return the value(s) of vref in accordance with its  reformulation variable(s) stored in the optimizer model and the result index  result of the most recent solution obtained. Use JuMP.has_values to check if a result exists before asking for values. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the values associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the values of infinite  variables are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the variable has multiple  infinite parameter dependencies.\n\nTo provide context for the results it may be helpful to also query the variable's parameter_refs and supports which will have a one-to-one correspondence with the value(s). It may also be helpful to query via optimizer_model_variable to retrieve the variables(s) that these values are based on. These functions should  all be called with the same keyword arugments for consistency.\n\nFor extensions, this only works if optimizer_model_variable has been extended correctly and/or map_value has been extended for variables.\n\nExample\n\njulia> value(z)\n42.0\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.reduced_cost-Tuple{GeneralVariableRef}","page":"Results","title":"JuMP.reduced_cost","text":"JuMP.reduced_cost(vref::GeneralVariableRef)\n\nExtend JuMP.reduced_cost. This returns the reduced cost(s) of a variable. This  will be a vector of scalar values for an infinite variable or will be a scalar  value for finite variables. \n\nExample\n\njulia> reduced_cost(x)\n12.81\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.optimizer_index-Tuple{GeneralVariableRef}","page":"Results","title":"JuMP.optimizer_index","text":"JuMP.optimizer_index(vref::GeneralVariableRef; \n                     [label::Type{<:AbstractSupportLabel} = PublicLabel,\n                     ndarray::Bool = false, kwargs...])\n\nExtend JuMP.optimizer_index to return the MathOptInterface index(es) of  vref in accordance with its reformulation variable(s) stored in the optimizer  model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the optimizer indices associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the indices of infinite  variables are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the variable has multiple  infinite parameter dependencies.\n\nIt may also be helpful to query via optimizer_model_variable to retrieve the variables(s) that these indices are based on. These should use the  same keyword arguments for consistency.\n\nFor extensions, this only works if optimizer_model_variable has been extended correctly and/or map_optimizer_index has been extended for variables.\n\nExample\n\njulia> optimizer_index(x)\n4-element Array{MathOptInterface.VariableIndex,1}:\n MathOptInterface.VariableIndex(2)\n MathOptInterface.VariableIndex(3)\n MathOptInterface.VariableIndex(4)\n MathOptInterface.VariableIndex(5)\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#InfiniteOpt.map_value","page":"Results","title":"InfiniteOpt.map_value","text":"map_value([ref/expr], key::Val{ext_key_name}, result::Int; kwargs...)\n\nMap the value(s) of ref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. Here ref need refer to methods for both variable references and constraint references. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable, optimizer_model_expression, and/or optimizer_model_constraint. Such as is the case with reformuations that do not have a direct mapping between variables and/or constraints in the original infinite form. Otherwise, optimizer_model_variable, optimizer_model_expression, and optimizer_model_constraint are used to make these mappings by default where kwargs are passed on these functions. Here  result is the result index used in value.\n\n\n\n\n\n","category":"function"},{"location":"manual/result/#InfiniteOpt.map_reduced_cost","page":"Results","title":"InfiniteOpt.map_reduced_cost","text":"map_reduced_cost(vref::GeneralVariableRef, key::Val{ext_key_name}, \n                  result::Int; kwargs...)\n\nMap the reduced cost(s) of vref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable. Such as is the case with reformulations  that do not have a direct mapping between variables in the original infinite form. Otherwise, optimizer_model_variable, is used to make these mappings by default where kwargs are passed on these functions. Here  result is the result index used in value.\n\n\n\n\n\n","category":"function"},{"location":"manual/result/#InfiniteOpt.map_optimizer_index","page":"Results","title":"InfiniteOpt.map_optimizer_index","text":"map_optimizer_index(ref, key::Val{ext_key_name}; kwargs...)\n\nMap the MathOptInterface index(es) of ref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. Here ref need refer to methods for both variable references and constraint references. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable and optimizer_model_constraint. Such as is the case with reformuations that do not have a direct mapping between variables and/or constraints in the original infinite form. Otherwise, optimizer_model_variable and optimizer_model_constraint are used to make these mappings by default where kwargs are passed on as well.\n\n\n\n\n\n","category":"function"},{"location":"manual/result/#Constraints","page":"Results","title":"Constraints","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.has_duals(::InfiniteModel)\nJuMP.value(::InfOptConstraintRef)\nJuMP.optimizer_index(::InfOptConstraintRef)\nJuMP.dual(::InfOptConstraintRef)\nJuMP.shadow_price(::InfOptConstraintRef)\nInfiniteOpt.map_dual\nInfiniteOpt.map_shadow_price","category":"page"},{"location":"manual/result/#JuMP.has_duals-Tuple{InfiniteModel}","page":"Results","title":"JuMP.has_duals","text":"JuMP.has_duals(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.has_duals  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.value-Tuple{InfOptConstraintRef}","page":"Results","title":"JuMP.value","text":"JuMP.value(cref::InfOptConstraintRef; [result::Int = 1,\n           label::Type{<:AbstractSupportLabel} = PublicLabel,\n           ndarray::Bool = false, kwargs...])\n\nExtend JuMP.value to return the value(s) of cref in accordance with its  reformulation constraint(s) stored in the optimizer model and the result index  result of the most recent solution obtained. Use  JuMP.has_values to check if a result  exists before asking for values. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the values associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the values of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nTo provide context for the results it may be helpful to also query the constraint's parameter_refs and supports which will have a one-to-one correspondence with the value(s). It may also be helpful to query via optimizer_model_constraint to retrieve the constraint(s) that these values are based on. By default, only the  values corresponding to public supports are returned. These functions should  all be called with the same keyword arugments for consistency.\n\nFor extensions, this only works if optimizer_model_constraint has been extended correctly and/or map_value has been extended for constraints. \n\nExample\n\njulia> value(c1)\n4-element Array{Float64,1}:\n -0.0\n 20.9\n 20.9\n 20.9\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.optimizer_index-Tuple{InfOptConstraintRef}","page":"Results","title":"JuMP.optimizer_index","text":"JuMP.optimizer_index(cref::InfOptConstraintRef; \n                     [label::Type{<:AbstractSupportLabel} = PublicLabel,\n                     ndarray::Bool = false, kwargs...])\n\nExtend JuMP.optimizer_index to return the MathOptInterface index(es) of  cref in accordance with its reformulation constraints(s) stored in the  optimizer model. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the optimizer indices associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the indices of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nIt may also be helpful to query via optimizer_model_constraint to retrieve the constraints(s) that these indices are based on. The same keyword  arguments should be used for consistency.\n\nFor extensions, this only works if optimizer_model_constraint has been extended correctly and/or map_optimizer_index has been extended for constraints.\n\nExample\n\njulia> optimizer_index(c1)\n4-element Array{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}},1}:\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(1)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(2)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(3)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(4)\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.dual-Tuple{InfOptConstraintRef}","page":"Results","title":"JuMP.dual","text":"JuMP.dual(cref::InfOptConstraintRef; [result::Int = 1, \n          label::Type{<:AbstractSupportLabel} = PublicLabel,\n          ndarray::Bool = false, kwargs...])\n\nExtend JuMP.dual to return the dual(s) of cref in accordance with its  reformulation constraint(s) stored in the optimizer model and the result index  result of the most recent solution obtained. Use  JuMP.has_duals to check if a result  exists before asking for duals. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the duals associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the duals of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nIt may also be helpful to query via optimizer_model_constraint to retrieve the constraint(s) that these duals are based on. Calling parameter_refs and supports may also be insightful. Be sure to use the same keyword arguments for consistency.\n\nFor extensions, this only works if optimizer_model_constraint has been extended correctly and/or map_dual has been extended for constraints.\n\nExample\n\njulia> dual(c1)\n4-element Array{Float64,1}:\n -42.0\n -42.0\n 32.3\n 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.shadow_price-Tuple{InfOptConstraintRef}","page":"Results","title":"JuMP.shadow_price","text":"JuMP.shadow_price(cref::InfOptConstraintRef; \n                  [label::Type{<:AbstractSupportLabel} = PublicLabel,\n                  ndarray::Bool = false, kwargs...])\n\nExtend JuMP.shadow_price to return the shadow price(s) of cref in accordance  with its reformulation constraint(s) stored in the optimizer model. Use  JuMP.has_duals to check if a result  exists before asking for duals. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the shadow prices associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the prices of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nIt may also be helpful to query via optimizer_model_constraint to retrieve the constraint(s) that these shadow prices are based on. Calling parameter_refs and supports may also be insightful. Be sure to use the same keyword arguments for  consistency.\n\nFor extensions, this only works if optimizer_model_constraint has been extended correctly and/or map_shadow_price has been extended for constraints. \n\nExample\n\njulia> shadow_price(c1)\n4-element Array{Float64,1}:\n 42.0\n 42.0\n -32.3\n -0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#InfiniteOpt.map_dual","page":"Results","title":"InfiniteOpt.map_dual","text":"map_dual(cref::InfOptConstraintRef, key::Val{ext_key_name}, result::Int; \n         kwargs...)\n\nMap the dual(s) of cref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. Here ref need refer to methods for both variable references and constraint references. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable and optimizer_model_constraint. Such as is the case with reformuations that do not have a direct mapping between variables and/or constraints in the original infinite form. Otherwise, optimizer_model_variable and optimizer_model_constraint are used to make these mappings by default where kwargs are also pass on to. Here result is  the result index that is used in dual. \n\n\n\n\n\n","category":"function"},{"location":"manual/result/#InfiniteOpt.map_shadow_price","page":"Results","title":"InfiniteOpt.map_shadow_price","text":"map_shadow_price(cref::InfOptConstraintRef, key::Val{ext_key_name}; \n                 kwargs...)\n\nMap the shadow price(s) of cref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. Here ref need refer to methods for both variable references and constraint references. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable and optimizer_model_constraint. Such as is the case with reformuations that do not have a direct mapping between variables and/or constraints in the original infinite form. Otherwise, optimizer_model_variable and optimizer_model_constraint are used to make these mappings by default where kwargs are passed on to.\n\n\n\n\n\n","category":"function"},{"location":"manual/result/#Expressions","page":"Results","title":"Expressions","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.value(::Union{JuMP.GenericAffExpr{<:Any, <:GeneralVariableRef}, JuMP.GenericQuadExpr{<:Any, <:GeneralVariableRef}})","category":"page"},{"location":"manual/result/#JuMP.value-Tuple{Union{GenericAffExpr{var\"#s40\", var\"#s39\"} where {var\"#s40\", var\"#s39\"<:GeneralVariableRef}, GenericQuadExpr{var\"#s38\", var\"#s37\"} where {var\"#s38\", var\"#s37\"<:GeneralVariableRef}}}","page":"Results","title":"JuMP.value","text":"value(ex::GenericAffExpr, var_value::Function)\n\nEvaluate ex using var_value(v) as the value for each variable v.\n\n\n\n\n\nJuMP.value(expr::JuMP.AbstractJuMPScalar; [result::Int = 1, \n           label::Type{<:AbstractSupportLabel} = PublicLabel,\n           ndarray::Bool = false, kwargs...])\n\nReturn the value(s) of expr in accordance with the optimized variable values the result index result of the most recent solution obtained. Use JuMP.has_values to check if a result exists before asking for values. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the values associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the values of infinite  expressions are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies.\n\nTo provide context for the results it may be helpful to also query the expression's parameter_refs and supports which will have a one-to-one correspondence with the value(s). It may also be helpful to query via optimizer_model_expression to retrieve the expression(s) that these values are based on. These should use the same keyword arguments for  consistency.\n\nFor extensions, this only works if optimizer_model_expression has been extended correctly and/or map_value has been extended for expressions.\n\nExample\n\njulia> value(my_finite_expr)\n23.34\n\njulia> value(my_infinite_expr)\n4-element Array{Float64,1}:\n -0.0\n 20.9\n 20.9\n 20.9\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#LP-Sensitivity","page":"Results","title":"LP Sensitivity","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.lp_sensitivity_report(::InfiniteModel)\nInfOptSensitivityReport ","category":"page"},{"location":"manual/result/#JuMP.lp_sensitivity_report-Tuple{InfiniteModel}","page":"Results","title":"JuMP.lp_sensitivity_report","text":"JuMP.lp_sensitivity_report(model::InfiniteModel; \n                           [atol::Float64 = 1e-8])::InfOptSensitivityReport\n\nExtends JuMP.lp_sensitivity_report to generate and return an LP sensitivity  report in accordance with the optimizer model. See  InfOptSensitivityReport for syntax details on how to query it. atol  denotes the optimality tolerance and should match that used by the solver to  compute the basis. Please refer to JuMP's documentation for more technical  information on interpretting the output of the report.\n\nExample\n\njulia> report = lp_sensitivity_report(model);\n\njulia> report[x]\n(0.0, 0.5)\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#InfiniteOpt.InfOptSensitivityReport","page":"Results","title":"InfiniteOpt.InfOptSensitivityReport","text":"InfOptSensitivityReport\n\nA wrapper DataType for JuMP.SensitivityReports in InfiniteOpt.  These are generated based on the optimizer model and should be made via the use of  lp_sensitivity_report. Once  made these can be indexed to get the sensitivies with respect to variables and/or  constraints. The indexing syntax for these is: \n\nreport[ref::[GeneralVariableRef/InfOptConstraintRef]; \n       [label::Type{<:AbstractSupportLabel} = PublicLabel,\n       ndarray::Bool = false, kwargs...]]\n\nThis is enabled in user-defined optimizer model extensions by appropriately  extending optimizer_model_variable and optimizer_model_constraint.\n\nFields\n\nopt_report::JuMP.SensitivityReport: The LP sensitivity captured from the optimizer model.\n\n\n\n\n\n","category":"type"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"DocTestFilters = [r\"≤|<=\", r\" == | = \", r\" ∈ | in \", r\" for all | ∀ \"]","category":"page"},{"location":"guide/variable/#var_docs","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"A guide for variables in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/variable/#Overview","page":"Variables","title":"Overview","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Decision variables are at the very core of InfiniteOpt as its name alludes to mathematical programs that entail infinite decision spaces (i.e., contain infinite decision variables). Principally, 4 variable types are employed: infinite, semi-infinite, point, and finite. Infinite variables encompass any  decision variable that is parameterized by an infinite parameter(s) (e.g.,  space-time variables and stochastic recourse variables). Semi-infinite variables  denote infinite variables where certain infinite parameters are restricted to  point values. Point variables are infinite variables at a particular point.  Finally, finite variables are decisions that are made irrespective of the  infinite domain (e.g., first stage variables and design variables).","category":"page"},{"location":"guide/variable/#Basic-Usage","page":"Variables","title":"Basic Usage","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Infinite, semi-infinite, point, and finite variables are summarized in the  following table:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Name Variable Type Object Description Example\nInfinite Infinite decision functions y(t x xi)\nSemi-Infinite SemiInfinite partially evaluated decision functions y(t_0 x xi)\nPoint Point fully evaluated decision functions y(t_0 x_0 xi_k)\nFinite NA classical decision variables z","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Infinite, semi-infinite, point, and finite variables are defined via  @variable  (inherited from JuMP) with their respective variable type  object arguments: Infinite, SemiInfinite, and Point  (finite variables don't use a variable type object).","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"warning: Warning\nThe variable nomenclature used by previous versions of InfiniteOpt has  been updated for enhanced clarity and long term longevity. Note that  finite variables were previously called hold variables. Also, the  @infinite_variable, @point_variable, and @hold_variable macros are now  discontinued in favor of using @variable for all decision variable  types.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Let's first setup a simple space-time model with infinite parameters time t and spatial position x:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> using InfiniteOpt\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10])\nt\n\njulia> @infinite_parameter(model, x[1:2] in [-1, 1], independent = true)\n2-element Vector{GeneralVariableRef}:\n x[1]\n x[2]","category":"page"},{"location":"guide/variable/#Infinite-Variables","page":"Variables","title":"Infinite Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Now let's define a time dependent infinite variable y(t) with a lower bound of 0:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y >= 0, Infinite(t))\ny(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This creates a Julia variable y that points to the decision variable y(t) that is stored in model which is added to include a lower bound of 0. Another useful case is that of defining an array of variables w that depend on both position and time:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, w[i = 1:3], Infinite(t, x), start = [0, 2, 1][i])\n3-element Vector{GeneralVariableRef}:\n w[1](t, x)\n w[2](t, x)\n w[3](t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus we create a Julia array variable w whose elements w[i] point to their respective infinite variables w[i](t, x) stored in model. Note that the i used in the array definition can be used to index attributes assigned to each variable in the array. In this case, we used i to assign different initial guess values for each variable via the start keyword argument.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Moreover, for infinite variables a function can be given to determine the start values over a range of support points (e.g., a guess trajectory). This is discussed further below in the Macro Definition section.","category":"page"},{"location":"guide/variable/#Semi-Infinite-Variables","page":"Variables","title":"Semi-Infinite Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Now let's restrict the above infinite variables w[i](t, x) to a particular  time via semi-infinite variables:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, w0[i = 1:3], SemiInfinite(w[i], 0, x))\n3-element Vector{GeneralVariableRef}:\n w0[1]\n w0[2]\n w0[3]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus we create a Julia array variable w0 whose elements w0[i] point to their respective semi-infinite variables w[i](0, x) stored in model. Alternatively,  we can make a semi-infinite variable via our restriction syntax:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> [w[i](0, x) for i in 1:3]\n3-element Vector{GeneralVariableRef}:\n w0[1]\n w0[2]\n w0[3]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"These are often useful to define semi-infinite variables directly in constraint  expressions. See Restricted Variables to learn about symbolic inline  definition of semi-infinite variables.","category":"page"},{"location":"guide/variable/#Point-Variables","page":"Variables","title":"Point Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Now let's add some point variables. These allow us to consider an infinite variable evaluated at a certain infinite parameter point. For example, let's define a point variable for y(0) with the alias y0 that is fixed at a value of 0:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y0 == 0, Point(y, 0))\ny0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Here we create a Julia variable y0 which points to the point variable y(0). Notice that in the second argument we specify the infinite variable indexed at the appropriate parameter value(s). Point variables automatically inherit attributes of the infinite variable (e.g., bounds, start values, etc.), but these are overwritten with properties specified for the point variable. In this case the lower bound inherited from y(t) is overwritten by instead fixing y(0) to a value of 0.  ","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Alternatively, we can use the convenient restriction syntax:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> y(0)\ny0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Again this is very useful when embedded directly in constraint expressions  (e.g., when defining boundary conditions). See Restricted Variables to  learn about symbolic inline definition of point variables.","category":"page"},{"location":"guide/variable/#Finite-Variables","page":"Variables","title":"Finite Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Finally, we can add finite variables to our model. These denote variables that hold a single value over the infinite domain or some portion of it (e.g., design variables, first stage variables, etc.). Let's add a finite variable 0 leq d leq 42 that is an integer variable and defined over all infinite domains (i.e., time and space):","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, 0 <= d <= 42, Int)\nd","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This creates a Julia variable d that points to the finite variable d which has a lower bound of 0, an upper bound of 42, and is an integer variable. Thus, finite  variables are equivalent to those employed in JuMP.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Now we have defined variables that we can use in the objective, measures, and constraints. Please note that the above tutorial only shows a small portion of the capabilities and options available in defining variables. A full description is provided in the documentation below.","category":"page"},{"location":"guide/variable/#Variable-Definition-Methodology","page":"Variables","title":"Variable Definition Methodology","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Defining/initializing a variable (what happens behind the scenes of the variable  macros) principally involves the following steps:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Define the variable information pertaining to JuMP.VariableInfo (e.g.,  bounds, indicate if it is integer, etc.)\nConstruct a concrete subtype of InfOptVariableType to specify the  desired type and its required additional information if appropriate\nBuild the variable object via JuMP.build_variable\nAdd the variable object to an InfiniteModel and assign a name via  JuMP.add_variable\nCreate a GeneralVariableRef that points to the variable object  stored in the model","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nThis methodology is presented for those wanting to learn more about the ins  and outs of variable definition. We recommend that all variables be created  via @variable. See Macro Variable Definition.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The JuMP.VariableInfo data structure stores the following variable information:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"has_lb::Bool: Specifies a Bool it has a lower bound\nlower_bound::Real: Specifies lower bound value\nhas_ub::Bool: Specifies a Bool it has a upper bound\nupper_bound::Real: Specifies upper bound value\nhas_fix::Bool: Specifies a Bool it is fixed\nfixed_value::Real: Specifies the fixed value\nhas_start::Bool: Specifies a Bool it has a start value\nstart::Union{Real, Function}: Specifies the start guess value, this can be a                                 function for infinite variables that intakes a                                 support and maps it to a guess value (allowing                                 to specify guess trajectories)\nbinary: Specifies Bool if it is binary\ninteger: Specifies Bool if it is integer.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, the user specifies this information to prepare such an object:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> info = VariableInfo(true, 0., true, 42., false, 0., false, 0., false, true);","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Here we specified a lower bound of 0, an upper bound of 42, and that it is integer valued.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The variable type objects (InfOptVariableType subtypes) are used with  build_variable to specify the desired variable type along with any additional  information needed for that type. For example, let's build an infinite variable  y(t) that has an lower bound of 0, an upper bound of 42, and is integer valued:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @infinite_parameter(model, t in [0, 10])\nt\n\njulia> info = VariableInfo(true, 0, true, 42, false, 0, false, 0, false, true);\n\njulia> inf_var = build_variable(error, info, Infinite(t));","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, we create an InfiniteVariable object with the desired properties.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Once a variable has been built, it needs to be added to our model and a Julia variable should be defined to reference it. Variables are added via add_variable which adds a variable object to the model, assigns a name to the variable, adds any constraints associated with the JuMP.VariableInfo, and returns an appropriate variable reference variable (a GeneralVariableRef). For example, let's add inf_var to model:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> var_ref = add_variable(model, inf_var, \"y\")\ny(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, we have added an infinite variable y that is parameterized by t with the variable information mentioned above and now have a GeneralVariableRef called var_ref that can be used in defining our infinite model.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Note that the use of GeneralVariableRefs and the corresponding concrete subtypes of DispatchVariableRefs is discussed on the Expressions page.","category":"page"},{"location":"guide/variable/#Macro-Variable-Definition","page":"Variables","title":"Macro Variable Definition","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The @variable  macro automates the variable definition process discussed above in the  Variable Definition Methodology section via a straightforward symbolic  syntax. The only key difference is that non-anonymous macro calls will register  variable names to ensure they are not repeated. Anonymous macro calls forgo this  step and exactly follow the process described above. This section will highlight  the details of using this macro which is the recommended way to define variables.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"tip: Tip\nJuMP's documentation on variables  is a good place to start since InfiniteOpt simply extends JuMP to  accommodate our additional variable types.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We directly build upon  JuMP.@variable  to create all of our decision variable types. To illustrate this via example,  let's setup a model with a variety of infinite parameters t in 010,  x in -1 1^3, and xi in mathcalN(0 1):","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> using InfiniteOpt, Distributions\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @infinite_parameter(model, x[1:3] in [-1, 1], independent = true);\n\njulia> @infinite_parameter(model, ξ ~ Normal());","category":"page"},{"location":"guide/variable/#Variable-Types","page":"Variables","title":"Variable Types","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We specify the variable type by providing a subtype of InfOptVariableType  as an extra positional argument:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y, Infinite(t, x, ξ)) # explicit infinite variable\ny(t, x, ξ)\n\njulia> @variable(model, ys, SemiInfinite(y, 0, x, ξ)) # explicit semi-infinite variable\nys\n\njulia> @variable(model, yp, Point(y, 0, [1, 1, 1], 0)) # explicit point variable\nyp\n\njulia> @variable(model, z) # explicit finite variable\nz","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For anonymous definition, we use the variable_type keyword argument instead:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia>  y = @variable(model, variable_type = Infinite(t, x, ξ)) # anon infinite variable\nnoname(t, x, ξ)\n\njulia> ys = @variable(model, variable_type = SemiInfinite(y, 0, x, ξ)) # anon semi-infinite variable\nnoname(0, [x[1], x[2], x[3]], ξ)\n\njulia> yp = @variable(model, variable_type = Point(y, 0, [1, 1, 1], 0)) # anon point variable\nnoname(0, [1, 1, 1], 0)\n\njulia> z = @variable(model) # anon finite variable\nnoname","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Please refer to Infinite, SemiInfinite, and Point  for more information.","category":"page"},{"location":"guide/variable/#Variable-Names","page":"Variables","title":"Variable Names","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Variable inherit their names from the symbolic literal given with explicit  definitions:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, myname, Infinite(t))\nmyname(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This creates an infinite variable with name \"myname\" that is added to model  and creates a Julia variable myname that stores a GeneralVariableRef  which points to the infinite variable in model.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can overwrite the inherited name using the base_name keyword argument:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, myjlvar, Infinite(t), base_name = \"myname\")\nmyname(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This creates an infinite variable with name \"myname\" that is added to model  and creates a Julia variable myjlvar that stores a GeneralVariableRef  which points to the infinite variable in model.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This syntax is particularly useful for anonymous variables to have meaningful  names:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> myjlvar = @variable(model, variable_type = Infinite(t), base_name = \"myname\")\nmyname(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"See the Queries and Modification sections further below for more information on  how to query/modify variable names.","category":"page"},{"location":"guide/variable/#Variable-Bounds","page":"Variables","title":"Variable Bounds","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can specify variable bounds in like manner to JuMP variables. Let's  demonstrate this with infinite variables: ","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y_lb >= 0, Infinite(t, x)) # add w/ lower bound\ny_lb(t, x)\n\njulia> @variable(model, y_ub <= 10, Infinite(t, x)) # add w/ upper bound\ny_ub(t, x)\n\njulia> @variable(model, 0 <= y_bd <= 10, Infinite(t, x)) # add w/ bounds\ny_bd(t, x)\n\njulia> @variable(model, y_fix == 42, Infinite(t, x)) # add w/ fixed value \ny_fix(t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"warning: Warning\nWhen creating a variable with only a single bound and the value of the bound  is not an explicit numeric literal, the name of the variable must appear on  the left-hand side. Otherwise, the macro will error.@variable(model, 0 <= y, Infinite(t)) # okay\n\na = 0\n@variable(model, a <= y, Infinite(t)) # bad \n@variable(model, y >= a, Infinite(t)) # okay","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For anonymous definition, we use the lower_bound and upper_bound. Let's use  finite variables for example:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> z_lb = @variable(model, lower_bound = 0, base_name = \"z_lb\") # add w/ lower bound\nz_lb\n\njulia> z_ub = @variable(model, upper_bound = 10, base_name = \"z_ub\") # add w/ upper bound\nz_ub\n\njulia> z_bd = @variable(model, lower_bound = 0, upper_bound = 10, \n                        base_name = \"z_bd\") # add w/ bounds\nz_bd\n\njulia> z_fix = @variable(model, lower_bound = 10, upper_bound = 10, \n                         base_name = \"z_fix\") # ~add w/ fixed value \nz_fix","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Note that there isn't a keyword for fixing variables. Instead  fix should be used. ","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"See the Queries and Modification sections further below for more information on  how to query/modify variable bounds.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nPoint variables inherit all the bounds of their respective infinite variables  by default. This can be overwritten by specifying different ones at creation.@variable(model, y >= 0, Infinite(t, x)) # has lower bound\n@variable(model, yp == 0, Point(w, 0, [0, 0, 0])) # forces the point to be fixed","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nBounds cannot be specified on creation for semi-infinite variables. Note that  they will inherit these from the infinite variable they depend on. Additional  bound be created by directly adding constraints. For example:@variable(model, y >= 0, Infinite(t, x)) # has lower bound\n@variable(model, ys, SemiInfinite(w, 0, x)) # inherits the lower bound\n@constraint(model, ys <= 10) # add upper bound to ys","category":"page"},{"location":"guide/variable/#Variable-Integrality","page":"Variables","title":"Variable Integrality","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can constrain the integrality of decision variables in like manner to JuMP  using the Bin and Int positional arguments for explicit macro definition:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y_bin, Infinite(t, x), Bin) # add as binary variable\ny_bin(t, x)\n\njulia> @variable(model, y_int, Infinite(t, x), Int) # add as integer variable\ny_int(t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For anonymous definition, we use the binary and integer keyword arguments:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> y_bin = @variable(model, variable_type = Infinite(t, x), binary = true)\nnoname(t, x)\n\njulia> y_int = @variable(model, variable_type = Infinite(t, x), integer = true)\nnoname(t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Moreover, we can add bounds as needed to constrain the domain of integer variables:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, 0 <= y_int2 <= 10, Infinite(t, x), Int)\ny_int2(t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"See the Queries and Modification sections further below for more information on  how to query/modify variable integralities.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nPoint variables inherit the integrality of their respective infinite variables  by default. This can be overwritten by specifying different ones at creation.@variable(model, y, Infinite(t, x), Bin) # is binary\n@variable(model, yp, Point(w, 0, [0, 0, 0]), Int) # is integer","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nIntegrality cannot be specified for semi-infinite variables. Note that  they will inherit these from the infinite variable they depend on. ```","category":"page"},{"location":"guide/variable/#Variable-Start-Values","page":"Variables","title":"Variable Start Values","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Optimization solvers often benefit from giving initial guesses for the optimal  decision variable values. Following JuMP vernacular, these are called start  values. We use the keyword start to specify these at variable creation:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, z_start, start = 42)\nz_start","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Moreover, infinite variables can accept a function that specifies the start  value of over the range of its infinite parameters (e.g., a function that provides  an initial guess trajectory). For example, consider the difference between these  two infinite variables:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y_uniform, Infinite(t), start = 0) # start with y(t) = 0\ny_uniform(t)\n\njulia> @variable(model, y_sin, Infinite(t), start = sin) # start with y(t) = sin(t)\ny_sin(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Note that such start functions must be able to accept parameter values as  arguments that exactly match the format of the infinite parameters given in  Infinite(params...).","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nStart values be specified for semi-infinite variables. Note that  they will inherit these from the infinite variable they depend on.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"See the Queries and Modification sections further below for more information on  how to query/modify variable names.","category":"page"},{"location":"guide/variable/#Variable-Containers","page":"Variables","title":"Variable Containers","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Optimization problems often involve multi-dimensional decision variables. Luckily,  JuMP provides a versatile syntax for specifying collections (i.e., containers)  of variables. See  JuMP's container documentation  for a thorough tutorial on the syntax. It uses Arrays, DenseAxisArrays, and  SparseAxisArrays to contain the variable references created. Here  DenseAxisArrays and SparseAxisArrays allow the use of nontraditional indices  (i.e., can use indices that are not sequential integers).","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"To illustrate what this means, consider the two equivalent ways to define  a 3-dimensional vector of variables with indices [1, 2, 3]:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> s = [0, 2, 1];\n\njulia> var_refs = @variable(model, [i = 1:3], start = s[i], base_name = \"z\")\n3-element Vector{GeneralVariableRef}:\n z[1]\n z[2]\n z[3]\n\njulia> var_refs = Vector{GeneralVariableRef}(undef, 3);\n\njulia> for i in eachindex(var_refs)\n          var_refs[i] = @variable(model, start = s[i], base_name = \"z\")\n       end","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Moreover, here are a few illustrative examples:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, z_dense[2:4])\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 2:4\nAnd data, a 3-element Vector{GeneralVariableRef}:\n z_dense[2]\n z_dense[3]\n z_dense[4]\n\njulia> @variable(model, z_named[[:A, :C, :Z]])\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, [:A, :C, :Z]\nAnd data, a 3-element Vector{GeneralVariableRef}:\n z_named[A]\n z_named[C]\n z_named[Z]\n\njulia> @variable(model, z_sparse[i = 1:2, j = 1:2; i + j <= 3])\nJuMP.Containers.SparseAxisArray{GeneralVariableRef, 2, Tuple{Int64, Int64}} with 3 entries:\n  [1, 2]  =  z_sparse[1,2]\n  [1, 1]  =  z_sparse[1,1]\n  [2, 1]  =  z_sparse[2,1]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The variable macro will by default automatically detect which container type  should be used. However, the user can specify a particular container type using  the container keyword. For example, if we want to use indices a:b where  a = 1 and b = 3, a DenseAxisArray will be used by default, but we can  force it to be a regular Array:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> a = 1; b = 3;\n\njulia> var_refs1 = @variable(model, [a:b], base_name = \"z\")\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:3\nAnd data, a 3-element Vector{GeneralVariableRef}:\n z[1]\n z[2]\n z[3]\n\njulia> var_refs2 = @variable(model, [a:b], base_name = \"z\", container = Array)\n3-element Vector{GeneralVariableRef}:\n z[1]\n z[2]\n z[3]","category":"page"},{"location":"guide/variable/#Variable-Sets","page":"Variables","title":"Variable Sets","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Like JuMP variables, we can constrain variables on creation to lie in  particular sets. This allows us to make semi-definite variables, cone constrained  variables, and more. ","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"warning: Warning\nThe set syntax is only supported with finite variables with v0.21.8 of  JuMP. This limitation will be removed with the next release of JuMP. In the  meantime, other variable types can be constrained using @constraint.@variable(model, y_psd[1:2, 1:2], Infinite(t))\n@constraint(model, y_psd in PSDCone())","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For example:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, z_psd[1:2, 1:2], PSD) # positive semi-definite variable matrix\n2×2 LinearAlgebra.Symmetric{GeneralVariableRef, Matrix{GeneralVariableRef}}:\n z_psd[1,1]  z_psd[1,2]\n z_psd[1,2]  z_psd[2,2]\n\njulia> @variable(model, z_cone[1:3] in SecondOrderCone()) # 2nd order cone variables\n3-element Vector{GeneralVariableRef}:\n z_cone[1]\n z_cone[2]\n z_cone[3]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Typically, variable sets can be defined symbolically using the syntax  var in set. For anonymous variables, the set keyword argument must be used:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> z_cone = @variable(model, [1:3], set = SecondOrderCone())\n3-element Vector{GeneralVariableRef}:\n noname\n noname\n noname","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For more a thorough tutorial please see  JuMP's semi-definite documentation  and/or JuMP's variables constrained on creation documentation.","category":"page"},{"location":"guide/variable/#Anonymous-Variables","page":"Variables","title":"Anonymous Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Above we talked showed the syntax for both explicit and anonymous variable  creation. Anonymous creation is typically helpful in the following situations:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"defining multiple variables with the same name\ncreating variables in user defined extensions\nusing nontraditional naming","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For anonymous variables, the only accepted positional arguments are the model  and the container expression [indices...]. Everything else must be specified  via keyword arguments kwargs... as shown in the subsections above.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"@variable(model, [indices...], kwargs...)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For more information, see  JuMP's anonymous variable documentation.","category":"page"},{"location":"guide/variable/#The-@variables-Macro","page":"Variables","title":"The @variables Macro","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"When using many @variable calls, we can instead use  @variables to  enhance the readability:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variables(model, begin\n           y1, Infinite(t, x)\n           y2[i=1:2] >= i, Infinite(t), (start = i, base_name = \"Y_$i\")\n           z2, Bin\n       end)\n","category":"page"},{"location":"guide/variable/#Restricted-Variables","page":"Variables","title":"Restricted Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"To define point and semi-infinite variables, we can also use restrict  for convenient inline definitions.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For example, let's consider restricting the infinite variable y(t, x):","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 1]);\n\njulia> @infinite_parameter(model, x[1:2] in [-1, 1]);\n\njulia> @variable(model, y, Infinite(t, x))\ny(t, x)\n\njulia> pt = restrict(y, 0, [-1, 1]) # make point variable y(0, [-1, 1])\ny(0, [-1, 1])\n\njulia> semi = restrict(y, 0, x) # make semi-infinite variable y(0, x)\ny(0, [x[1], x[2]])","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can also, even more conveniently, treat the infinite variable as a function  to accomplish this in a more intuitive syntax:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> pt = y(0, [-1, 1]) # make point variable y(0, [-1, 1])\ny(0, [-1, 1])\n\njulia> semi = y(0, x) # make semi-infinite variable y(0, x)\ny(0, [x[1], x[2]])","category":"page"},{"location":"guide/variable/#Queries","page":"Variables","title":"Queries","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"InfiniteOpt contains a large suite of methods to query information about variables. This suite is comprised of extensions to all current JuMP query methods and many more that are specific to InfiniteOpt. A number of the more commonly used ones are explained in this section, but all of the available methods are explained in the technical manual.","category":"page"},{"location":"guide/variable/#General-Information","page":"Variables","title":"General Information","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Here we describe some methods used to query general variable information such as the name. Variable names can be extracted via name which returns the name of a variable. The index of a variable (where it is stored  in the infinite model) is accessed via  index and the infinite model it  belongs to is given by  owner_model. These methods are demonstrated below:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> name(y)\n\"y\"\n\njulia> index(y)\nInfiniteVariableIndex(2)\n\njulia> model_where_stored = owner_model(y);","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Also, num_variables is useful in returning the total number of decision variables currently stored in an infinite model:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> num_variables(model)\n61\n\njulia> num_variables(model, PointVariable)\n2","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Similarly, all_variables returns a list of all the variables currently added to the model.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Finally, variable_by_name can be employed to return the appropriate GeneralVariableRef based off  of the variable name if it is unique. Returns nothing if such a name cannot be  found and errors if it is not unique. For example, we can request the reference  associated with \"y_ub\":","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> variable_by_name(model, \"y_ub\")\ny_ub(t, x)","category":"page"},{"location":"guide/variable/#Variable-Constraint-Info","page":"Variables","title":"Variable Constraint Info","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"As described above, variables in InfiniteOpt can have constraints associated with them like JuMP variables. These constraints include:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"lower bounds\nupper bounds\nfixed values\nbinary valued\ninteger valued.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, a number of methods exist to query information about these constraints.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"First, the [has/is]_[variable constraint type] methods indicate whether or  not a variable has that particular constraint type. For example, to query if a  variable y_lb has a lower bound we can use has_lower_bound:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> has_lower_bound(y_bd)\ntrue","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, y_bd does have a lower bound. The other methods are has_upper_bound, is_fixed, is_binary, and is_integer.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Next, the [ConstraintType]Ref methods return an appropriate explicit type InfOptConstraintRef that points to the constraint (errors if no such constraint exists). For example, the upper bound constraint of y_bd can be obtained via UpperBoundRef:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> UpperBoundRef(y_bd)\ny_bd(t, x) ≤ 10.0, ∀ t ∈ [0, 10], x[1] ∈ [-1, 1], x[2] ∈ [-1, 1], x[3] ∈ [-1, 1]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The other methods are LowerBoundRef, FixRef, BinaryRef, and IntegerRef.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Finally, variable constraints that entail values (i.e., lower bounds, upper bounds, and fixed values) have their values queried via the appropriate method. For example, the lower bound value of y_bd is obtained via lower_bound:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> lower_bound(y_bd)\n0.0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Note these methods error when no such constraint is associated with the variable. The other methods are upper_bound and fix_value.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The start value can also be queried via  start_value where nothing  is returned if not start value is specified:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> start_value(var_refs[1])\n0.0\n\njulia> start_value(yp)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For infinite and semi-infinite variables, the start_value_function  should be used instead:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> start_value_function(y_sin)\nsin (generic function with 17 methods)","category":"page"},{"location":"guide/variable/#Variable-Use","page":"Variables","title":"Variable Use","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"InfiniteOpt defines a number of methods to track if and how variables are used in an infinite model. For example, used_by_constraint is used to determine if a variable is used by a constraint. For example, let's see if y_bd is used by a constraint:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> used_by_constraint(y_bd)\ntrue","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Other methods include used_by_measure and used_by_objective. For infinite variables, used_by_point_variable can also be used in a similar manner.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Finally, in general is_used can be used to determine if a variable is used at all in the infinite model or not. For  example, if we check yp using is_used we find that it isn't:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> is_used(yp)\nfalse","category":"page"},{"location":"guide/variable/#Type-Specific","page":"Variables","title":"Type Specific","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"InfiniteOpt also employs a few methods for specific variable types that return information pertaining to that particular variable type. For infinite variables  and semi-infinite variables, parameter_refs returns the tuple of infinite parameters that the variable depends on. For example, consider y(t, x):","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> parameter_refs(y)\n(t, GeneralVariableRef[x[1], x[2], x[3]], ξ)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For point variables, infinite_variable_ref and parameter_values return the infinite variable it depends on and the infinite parameter point values, respectively. For example, consider the point variable yp:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> infinite_variable_ref(yp)\ny(t, x, ξ)\n\njulia> parameter_values(yp)\n(0.0, [1.0, 1.0, 1.0], 0.0)","category":"page"},{"location":"guide/variable/#Modification","page":"Variables","title":"Modification","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"InfiniteOpt employs a wide variety of methods to modify/delete variables. These are comprised of JuMP extensions and methods native only to InfiniteOpt. This section will highlight some of the more commonly used ones. All of the methods/macros are detailed in the technical manual.","category":"page"},{"location":"guide/variable/#Deletion","page":"Variables","title":"Deletion","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Like JuMP v0.19+, InfiniteOpt fully supports deletion throughout its data types. Any variable and its dependencies can be deleted via delete. Thus, when  delete is invoked any bound/type constraints associated with the variable will  be removed and it will be removed from any other constraints, measures, and/or  objectives. For example, if we delete y(t, x, ξ) it will be removed along with  its  bounds and the point variable yp will also be removed since it is a  dependent:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> delete(model, y)\n\njulia> is_valid(model, yp)\nfalse","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Another class of deletion methods correspond to variable constraints. For example, delete_lower_bound is used to delete a lower bound associated with a variable if it has one. Let's illustrate this by deleting the lower bound of y_bd:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> delete_lower_bound(y_bd)\n\njulia> has_lower_bound(y_bd)\nfalse","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Other similar methods are delete_upper_bound, unfix, unset_binary, and unset_integer.","category":"page"},{"location":"guide/variable/#Variable-Constraints","page":"Variables","title":"Variable Constraints","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Another class of methods seek to add/modify variable constraints such as bounds. For example, set_lower_bound specifies the lower bound of a variable. We can add a lower bound of 0 to z by:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> set_lower_bound(z, 0)\n\njulia> lower_bound(z)\n0.0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, adding a lower bound to z. Furthermore, we can later modify the lower bound using the same method:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> set_lower_bound(z, -2)\n\njulia> lower_bound(z)\n-2.0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Other similar methods are set_upper_bound, fix, set_binary, and set_integer.","category":"page"},{"location":"guide/variable/#Start-Values","page":"Variables","title":"Start Values","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can update the start value of a variable using  set_start_value. For example:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> set_start_value(z, 0)\n\njulia> start_value(z)\n0.0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For infinite variables, this should be done using  set_start_value_function. FOr example:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> set_start_value_function(myname, sin)\n\njulia> start_value_function(myname)\nsin (generic function with 17 methods)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Again note that such start functions must be able to accept parameter values as  arguments that exactly match the format of the infinite parameters given in  Infinite(params...).","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"A number of other techniques exist for the various variable types can be found in  the manual below.","category":"page"}]
}
