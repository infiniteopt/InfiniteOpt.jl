var documenterSearchIndex = {"docs":
[{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"DocTestFilters = [r\"≤|<=\", r\" == | = \", r\" ∈ | in \", r\" for all | ∀ \", r\"d|∂\", \n                  r\"E|𝔼\", r\"integral|∫\"]","category":"page"},{"location":"tutorials/quick_start/#Quick-Start-Guide","page":"Quick Start","title":"Quick Start Guide","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Below we exemplify and briefly explain the very basics behind defining and solving  an infinite-dimensional optimization problem in InfiniteOpt. Please refer to the  Guide on our subsequent pages for more complete information. The Basic Usage sections  on the each guide page are good places to start from. Also, the syntax of InfiniteOpt  is inspired by JuMP thus we recommend new users that haven't used JuMP, first  consult their tutorials starting  here.","category":"page"},{"location":"tutorials/quick_start/#Preliminaries","page":"Quick Start","title":"Preliminaries","text":"","category":"section"},{"location":"tutorials/quick_start/#Software-Setup","page":"Quick Start","title":"Software Setup","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"First, we need to make sure everything is installed. This will include:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"installing Julia \ninstalling the InfiniteOpt.jl, JuMP.jl, and Distributions.jl packages\ninstalling wanted optimizers e.g., Ipopt.jl and Clp.jl","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"See Installation for more information.","category":"page"},{"location":"tutorials/quick_start/#Problem-Formulation","page":"Quick Start","title":"Problem Formulation","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now we need to formulate the problem we want to solve mathematically. For example,  let's define a simple optimal control model:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"beginaligned\n\tundersetx_i(t xi) v_i(t xi) y_w(xi) u_i(t)textmin  int_t in mathcalD_t sum_i in I u_i^2(t) dt \n\ttextst  x_i(0 xi) = x0_i  forall i in I xi in mathcalD_xi\n     v_i(0 xi) = v0_i  forall i in I xi in mathcalD_xi \n\t fracpartial x_i(t xi)partial t = v_i(t xi)  forall i in I t in mathcalD_t xi in mathcalD_xi\n     xifracpartial v_i(t xi)partial t = u_i(t)  forall i in I t in mathcalD_t xi in mathcalD_xi\n     y_w(xi) = sum_i in I(x_i(t_w xi) - p_iw)^2  forall w in W xi in mathcalD_xi \n     y_w(xi) geq 0  forall w in W xi in mathcalD_xi \n     mathbbE_xileftsum_w in W y_w(xi) right leq epsilon \n     xi sim mathcalN(mu sigma^2) \n     t in mathcalD_t\nendaligned","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice this model is both dynamic with time t and random with respect to xi.","category":"page"},{"location":"tutorials/quick_start/#Parameter-Specification","page":"Quick Start","title":"Parameter Specification","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Before moving on we'll need to define the necessary constants and problem  parameters. Thus, continuing with our example we define the following in our  Julia session (these could also be put into a script as is shown at the bottom  of this page):","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> μ = 1; σ = 0.2; # set the distribution parameters \n\njulia> x0 = [0, 0]; v0 = [0, 0]; # set the initial conditions\n\njulia> p = [1 4 6 1; 1 3 0 1]; tw = [0, 25, 50, 60]; # set waypoint specifications\n\njulia> I = 1:2; W = 1:4; # set the finite domains","category":"page"},{"location":"tutorials/quick_start/#Model-Definition","page":"Quick Start","title":"Model Definition","text":"","category":"section"},{"location":"tutorials/quick_start/#Model-Initialization","page":"Quick Start","title":"Model Initialization","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"The first thing we need to do is initialize our InfiniteModel and assign an  appropriate optimizer that will be used to solve its transcripted variant. For our  little example let's choose to use Ipopt:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> using InfiniteOpt, Distributions, Ipopt;\n\njulia> model = InfiniteModel(Ipopt.Optimizer)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Learn more about InfiniteModels and optimizers on our  Infinite Models page.","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Before moving on, let's go ahead make a finite parameter via @finite_parameter  for epsilon since this likely a constant we'll want to update repeatedly  (e.g., to determine a tradeoff curve by varying it): ","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @finite_parameter(model, ϵ == 10)\nϵ","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Learn more about finite parameters on our Finite Parameters  page.","category":"page"},{"location":"tutorials/quick_start/#Infinite-Parameters","page":"Quick Start","title":"Infinite Parameters","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"The next thing we need to do is identify the infinite domains our problem contains  and define an infinite parameter(s) for each one via [@infinite_parameter]. For  this problem we have the time domain t in mathcalD_t and the random domain  xi in mathcalD_xi where xi sim mathcalN(mu sigma^2):","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @infinite_parameter(model, t in [0, 60], num_supports = 61, \n                           derivative_method = OrthogonalCollocation(2))\nt\n\njulia> @infinite_parameter(model, ξ ~ Normal(μ, σ^2), num_supports = 10)\nξ","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice we specify the domain/distribution the parameter depends on via in. Here we also specify the number of finite supports we desire for each parameter  that will ultimately be used to reformulate and solve the problem (i.e., discretize).  We also specify the derivative evaluation method associated with t that will be  used evaluate the derivatives numerically. See more information about parameters  on our Infinite Parameters page. Also learn more about  derivative methods on our Derivative Operators page.","category":"page"},{"location":"tutorials/quick_start/#Variables","page":"Quick Start","title":"Variables","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now that we have an InfiniteModel and infinite parameters let's define our  decision variables. First, infinite variables (ones that depend on infinite  parameters) are defined via  @variable  with the addition of the Infinite variable type argument to specify the  infinite parameters it depends on:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @variable(model, x[I], Infinite(t, ξ), start = 0)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{GeneralVariableRef}:\n x[1](t, ξ)\n x[2](t, ξ)\n\njulia> @variable(model, v[I], Infinite(t, ξ), start = 0)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{GeneralVariableRef}:\n v[1](t, ξ)\n v[2](t, ξ)\n\njulia> @variable(model, u[I], Infinite(t), start = 0)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{GeneralVariableRef}:\n u[1](t)\n u[2](t)\n\njulia> @variable(model, y[W] >= 0, Infinite(ξ), start = 0)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:4\nAnd data, a 4-element Vector{GeneralVariableRef}:\n y[1](ξ)\n y[2](ξ)\n y[3](ξ)\n y[4](ξ)","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice that we specifying the initial guess for all of them via start. We also  can symbolically define variable conditions like the lower bound on y.","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"That does it for this example, but other problems might also employ the following:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Finite variables: variables that do not depend on infinite parameters  (defined using @variable)\nSemi-infinite variables: infinite variables where 1 or more parameters are  set a particular point (defined using @variable with the SemiInfinite  variable type argument) \nPoint variables: infinite variables at a particular point (defined using  @variable with the Point variable type argument).","category":"page"},{"location":"tutorials/quick_start/#Objective-and-Constraints","page":"Quick Start","title":"Objective & Constraints","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now that the variables and parameters are ready to go, let's define our problem.  First, we can define the objective using  @objective:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @objective(model, Min, integral(sum(u[i]^2 for i in I), t))\n∫{t ∈ [0, 60]}[u[1](t)² + u[2](t)²]","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice that we also employ integral to define the integral. Note that  objectives must evaluate over all included infinite domains. ","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now let's define the initial conditions using  @constraint  in combination with Restricted Variables which will restrict the domain  of the variables to only be enforced at the initial time:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @constraint(model, [i in I], x[i](0, ξ) == x0[i])\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{InfOptConstraintRef}:\n x[1](0, ξ) = 0.0, ∀ ξ ~ Normal\n x[2](0, ξ) = 0.0, ∀ ξ ~ Normal\n\njulia> @constraint(model, [i in I], v[i](0, ξ) == v0[i])\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{InfOptConstraintRef}:\n v[1](0, ξ) = 0.0, ∀ ξ ~ Normal\n v[2](0, ξ) = 0.0, ∀ ξ ~ Normal","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Note it is important that we include appropriate boundary conditions when using  derivatives in our model. For more information please see  Derivative Operators.","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Next, we can add our model constraints that have derivatives using  @constraint  and deriv:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @constraint(model, c1[i in I], deriv(x[i], t) == v[i])\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{InfOptConstraintRef}:\n c1[1] : ∂/∂t[x[1](t, ξ)] - v[1](t, ξ) = 0.0, ∀ t ∈ [0, 60], ξ ~ Normal\n c1[2] : ∂/∂t[x[2](t, ξ)] - v[2](t, ξ) = 0.0, ∀ t ∈ [0, 60], ξ ~ Normal\n\njulia> @constraint(model, c2[i in I], ξ * deriv(v[i], t) == u[i])\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{InfOptConstraintRef}:\n c2[1] : ξ*∂/∂t[v[1](t, ξ)] - u[1](t) = 0.0, ∀ t ∈ [0, 60], ξ ~ Normal\n c2[2] : ξ*∂/∂t[v[2](t, ξ)] - u[2](t) = 0.0, ∀ t ∈ [0, 60], ξ ~ Normal","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Finally, we can define our last 2 constraints:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> @constraint(model, c3[w in W], y[w] == sum((x[i](tw[w], ξ) - p[i, w])^2 for i in I))\n1-dimensional DenseAxisArray{InfOptConstraintRef,1,...} with index sets:\n    Dimension 1, 1:4\nAnd data, a 4-element Vector{InfOptConstraintRef}:\n c3[1] : -x[1](0, ξ)² - x[2](0, ξ)² + y[1](ξ) + 2 x[1](0, ξ) + 2 x[2](0, ξ) = 2.0, ∀ ξ ~ Normal\n c3[2] : -x[1](25, ξ)² - x[2](25, ξ)² + y[2](ξ) + 8 x[1](25, ξ) + 6 x[2](25, ξ) = 25.0, ∀ ξ ~ Normal\n c3[3] : -x[1](50, ξ)² - x[2](50, ξ)² + y[3](ξ) + 12 x[1](50, ξ) = 36.0, ∀ ξ ~ Normal\n c3[4] : -x[1](60, ξ)² - x[2](60, ξ)² + y[4](ξ) + 2 x[1](60, ξ) + 2 x[2](60, ξ) = 2.0, ∀ ξ ~ Normal\n\njulia> @constraint(model, c4, expect(sum(y[w] for w in W), ξ) <= ϵ)\nc4 : 𝔼{ξ}[y[1](ξ) + y[2](ξ) + y[3](ξ) + y[4](ξ)] - ϵ ≤ 0.0","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Notice we are able to invoke an expectation simply by calling expect.","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"That's it, now we have our problem defined in InfiniteOpt!","category":"page"},{"location":"tutorials/quick_start/#Solution-and-Queries","page":"Quick Start","title":"Solution & Queries","text":"","category":"section"},{"location":"tutorials/quick_start/#Optimize","page":"Quick Start","title":"Optimize","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now that our model is defined, let's optimize it via optimize!:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> optimize!(model)\n","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"We can check the solution status via  termination_status:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> termination_status(model)\nLOCALLY_SOLVED::TerminationStatusCode = 4","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Thus, our model was solved successfully! For more information please see our  Optimization and Results pages.","category":"page"},{"location":"tutorials/quick_start/#Query-the-Solution","page":"Quick Start","title":"Query the Solution","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Finally, we can query a wide variety of information about our solution. Perhaps  most commonly we'll want to know the objective value and the optimal primal values  of decision variables. This is accomplished via  objective_value and  value:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> opt_obj = objective_value(model);\n\njulia> u_opt = value.(u);","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Note that u_opt will be multi-dimensional combination with the support values used  to transcribe u(t) along the domain of t. We can query those corresponding  support values via supports:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> u_ts = supports.(u)\n1-dimensional DenseAxisArray{Vector{Tuple},1,...} with index sets:\n    Dimension 1, 1:2\nAnd data, a 2-element Vector{Vector{Tuple}}:\n [(0.0,), (1.0,), (2.0,), (3.0,), (4.0,), (5.0,), (6.0,), (7.0,), (8.0,), (9.0,)  …  (51.0,), (52.0,), (53.0,), (54.0,), (55.0,), (56.0,), (57.0,), (58.0,), (59.0,), (60.0,)]\n [(0.0,), (1.0,), (2.0,), (3.0,), (4.0,), (5.0,), (6.0,), (7.0,), (8.0,), (9.0,)  …  (51.0,), (52.0,), (53.0,), (54.0,), (55.0,), (56.0,), (57.0,), (58.0,), (59.0,), (60.0,)]","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"Please see the Results page for more information. ","category":"page"},{"location":"tutorials/quick_start/#Summary-Script","page":"Quick Start","title":"Summary Script","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"The example used in the sections above is summarized in the script below:","category":"page"},{"location":"tutorials/quick_start/","page":"Quick Start","title":"Quick Start","text":"using InfiniteOpt, Distributions, Ipopt\n\n# DEFINE THE PROBLEM CONSTANTS\nμ = 1; σ = 0.2\nx0 = [0, 0]; v0 = [0, 0]\np = [1 4 6 1; 1 3 0 1]; tw = [0, 25, 50, 60]\nI = 1:2; W = 1:4\n\n# INITIALIZE THE MODEL\nmodel = InfiniteModel(Ipopt.Optimizer)\n\n# INITIALIZE THE PARAMETERS\n@finite_parameter(model, ϵ == 10)\n@infinite_parameter(model, t in [0, 60], num_supports = 61, \n                    derivative_method = OrthogonalCollocation(2))\n@infinite_parameter(model, ξ ~ Normal(μ, σ^2), num_supports = 10)\n\n# INITIALIZE THE VARIABLES\n@variable(model, x[I], Infinite(t, ξ), start = 0)\n@variable(model, v[I], Infinite(t, ξ), start = 0)\n@variable(model, u[I], Infinite(t), start = 0)\n@variable(model, y[W] >= 0, Infinite(ξ), start = 0)\n\n# SET THE OBJECTIVE\n@objective(model, Min, integral(sum(u[i]^2 for i in I), t))\n\n# SET THE INITIAL CONDITIONS\n@constraint(model, [i in I], x[i](0, ξ) == x0[i])\n@constraint(model, [i in I], v[i](0, ξ) == v0[i])\n\n# SET THE PROBLEM CONSTRAINTS\n@constraint(model, c1[i in I], @deriv(x[i], t) == v[i])\n@constraint(model, c2[i in I], ξ * @deriv(v[i], t) == u[i])\n@constraint(model, c3[w in W], y[w] == sum((x[i](tw[w], ξ) - p[i, w])^2 for i in I))\n@constraint(model, c4, expect(sum(y[w] for w in W), ξ) <= ϵ)\n\n# SOLVE THE MODEL\noptimize!(model)\n\n# GET THE RESULTS\ntermination_status(model)\nopt_obj = objective_value(model)\nu_opt = value.(u)\nu_ts = supports.(u)","category":"page"},{"location":"manual/transcribe/#transcription_manual","page":"Model Transcription","title":"Model Transcription","text":"","category":"section"},{"location":"manual/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"A technical manual for InfiniteOpt.TranscriptionOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/transcribe/#Definition","page":"Model Transcription","title":"Definition","text":"","category":"section"},{"location":"manual/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"InfiniteOpt.TranscriptionOpt.TranscriptionModel\nInfiniteOpt.TranscriptionOpt.TranscriptionData\nInfiniteOpt.TranscriptionOpt.set_parameter_supports\nInfiniteOpt.TranscriptionOpt.transcribe_finite_variables!\nInfiniteOpt.TranscriptionOpt.transcribe_infinite_variables!\nInfiniteOpt.TranscriptionOpt.transcribe_derivative_variables!\nInfiniteOpt.TranscriptionOpt.transcribe_semi_infinite_variables!\nInfiniteOpt.TranscriptionOpt.transcribe_point_variables!\nInfiniteOpt.TranscriptionOpt.transcription_expression\nInfiniteOpt.TranscriptionOpt.transcribe_measures!\nInfiniteOpt.TranscriptionOpt.transcribe_objective!\nInfiniteOpt.TranscriptionOpt.transcribe_constraints!\nInfiniteOpt.TranscriptionOpt.transcribe_derivative_evaluations!\nInfiniteOpt.TranscriptionOpt.build_transcription_model!\nInfiniteOpt.add_point_variable(::JuMP.Model,::InfiniteOpt.GeneralVariableRef,::Vector{Float64},::Val{:TransData})\nInfiniteOpt.add_semi_infinite_variable(::JuMP.Model,::InfiniteOpt.SemiInfiniteVariable,::Val{:TransData})\nInfiniteOpt.build_optimizer_model!(::InfiniteOpt.InfiniteModel,::Val{:TransData})","category":"page"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.TranscriptionModel","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.TranscriptionModel","text":"TranscriptionModel([optimizer_constructor;\n                   caching_mode::MOIU.CachingOptimizerMode = MOIU.AUTOMATIC,\n                   bridge_constraints::Bool = true])::JuMP.Model\n\nReturn a JuMP.Model with TranscriptionData included in the ext data field. Accepts the same arguments as a typical JuMP Model. More detailed variable and constraint naming can be enabled via verbose_naming.\n\nExample\n\njulia> TranscriptionModel()\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.TranscriptionData","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.TranscriptionData","text":"TranscriptionData\n\nA DataType for storing the data mapping an InfiniteOpt.InfiniteModel that has been transcribed to a regular JuMP.Model that contains the transcribed variables. This is stored in the ext field of a JuMP.Model to make what is called a TranscriptionModel via the TranscriptionModel constructor.\n\nFields\n\ninfvar_lookup::Dict{InfiniteOpt.GeneralVariableRef, Dict{Vector{Float64}, Int}}:  A lookup table of infinite variable transcriptions via support value.\ninfvar_mappings::Dict{InfiniteOpt.GeneralVariableRef, Vector{JuMP.VariableRef}}:  Map infinite variables to their transcription variables.\ninfvar_supports::Dict{InfiniteOpt.GeneralVariableRef, Vector{Tuple}}:  Map infinite variables to their support values.\ninfvar_support_labels::Dict{InfiniteOpt.GeneralVariableRef, Vector{Set{DataType}}}:   Map the infinite variables to their support labels.\nfinvar_mappings::Dict{InfiniteOpt.GeneralVariableRef, JuMP.VariableRef}:  Map finite variables to their transcription variables.\nsemi_infinite_vars::Vector{InfiniteOpt.SemiInfiniteVariable{InfiniteOpt.GeneralVariableRef}}:  Store the core semi-infinite variable objects of semi-infinite variables formed on transcription.\nsemi_lookup::Dict{Tuple{InfiniteOpt.GeneralVariableRef, Dict{Int, Float64}}, InfiniteOpt.GeneralVariableRef}:  Lookup which semi-infinite variables have already been added.\nlast_point_index::Int: The last internal point variable index added.\npoint_lookup::Dict{Tuple{InfiniteOpt.GeneralVariableRef, Vector{Float64}}, InfiniteOpt.GeneralVariableRef}:  Lookup which point variables have already been created internally.\nmeasure_lookup::Dict{InfiniteOpt.GeneralVariableRef, Dict{Vector{Float64}, Int}}:  A lookup table of measure transcriptions via support value.\nmeasure_mappings::Dict{InfiniteOpt.GeneralVariableRef, Vector{JuMP.AbstractJuMPScalar}}:  Map measures to transcription expressions.\nmeasure_supports::Dict{InfiniteOpt.GeneralVariableRef, Vector{Tuple}}:  Map measures to their supports values (if the transcribed measure is still infinite).\nmeasure_support_labels::Dict{InfiniteOpt.GeneralVariableRef, Vector{Set{DataType}}}:   Map measures to their support labels if they have any.\nconstr_mappings::Dict{InfiniteOpt.InfOptConstraintRef, Vector{JuMP.ConstraintRef}}:  Map constraints to their transcriptions.\nconstr_supports::Dict{InfiniteOpt.InfOptConstraintRef, Vector{Tuple}}:  Map constraints to their support values.\nconstr_support_labels::Dict{InfiniteOpt.InfOptConstraintRef, Vector{Set{DataType}}}:   Map constraints to their support labels.\nsupports::Tuple: Store the collected parameter supports here.\nsupport_labels::Tuple: Store the collected parameter labels here.\nhas_internal_supports::Bool: Where any internal supports collected?\n\n\n\n\n\n","category":"type"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.set_parameter_supports","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.set_parameter_supports","text":"set_parameter_supports(trans_model::JuMP.Model,\n                       inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nCollect the infinite parameter supports stored in their respective dictionaries form inf_model and process them into a tuple of vectors where each vector contains the collected supports of a particular infinite parameter. These support collections are ordered in accordance with the definition order of the parameters (i.e., their object numbers). A support collection assocciated with an independent will be a Vector{Float64} and a support collection associated with a group of dependent parameters will be a Vector{Vector{Float64}}. Note that each collection vector will include an extra final placeholder element comprised of NaNs for convenience in generating support indices via support_index_iterator. This also gathers the associated support labels. \n\nBefore this is all done, InfiniteOpt.add_generative_supports is invoked as needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_finite_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_finite_variables!","text":"transcribe_finite_variables!(trans_model::JuMP.Model,\n                           inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nCreate a transcription variable (i.e., a JuMP variable) for each FiniteVariable stored in inf_model and add it to trans_model. The variable mapping is also stored in TranscriptionData.finvar_mappings which enables transcription_variable and lookup_by_support.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_infinite_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_infinite_variables!","text":"transcribe_infinite_variables!(trans_model::JuMP.Model,\n                               inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nCreate transcription variables (i.e., JuMP variables) for each InfiniteVariable stored in inf_model and add them to trans_model. The variable mappings are also stored in TranscriptionData.infvar_mappings in accordance with TranscriptionData.infvar_lookup which enable transcription_variable and lookup_by_support. Note that the supports will not be generated until InfiniteOpt.variable_supports is invoked via InfiniteOpt.supports.  Note that TranscriptionData.infvar_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_derivative_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_derivative_variables!","text":"transcribe_derivative_variables!(trans_model::JuMP.Model,\n                                 inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nCreate transcription variables (i.e., JuMP variables) for each Derivative stored in inf_model and add them to trans_model. The variable mappings are also stored in TranscriptionData.infvar_mappings in accordance with TranscriptionData.infvar_lookup which enable transcription_variable and lookup_by_support. Note that the supports will not be generated until InfiniteOpt.variable_supports is invoked via InfiniteOpt.supports. The  futher derivative evaluation constraints are added when  transcribe_derivative_evaluations! is invoked. Note that  TranscriptionData.infvar_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_semi_infinite_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_semi_infinite_variables!","text":"transcribe_semi_infinite_variables!(trans_model::JuMP.Model,\n                              inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nMap each SemiInfiniteVariable in inf_model to transcription variables stored in trans_model. The variable mappings are also stored in TranscriptionData.infvar_mappings in accordance with TranscriptionData.infvar_lookup which enable transcription_variable and lookup_by_support. Note that transcribe_infinite_variables! must be called first. Note that the supports will not be generated until InfiniteOpt.variable_supports is invoked via InfiniteOpt.supports.  Note that TranscriptionData.infvar_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_point_variables!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_point_variables!","text":"transcribe_point_variables!(trans_model::JuMP.Model,\n                           inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nMap each PointVariable in inf_model to a transcription variable stored in trans_model. The variable mapping is also stored in TranscriptionData.finvar_mappings which enables transcription_variable and lookup_by_support. Note that transcribe_infinite_variables! must be called first and that the info constraints associated with the transcription variable will be updated in accordance with the point variable.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_expression","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_expression","text":"transcription_expression(\n    model::JuMP.Model,\n    expr::JuMP.AbstractJuMPScalar;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the transcribed expression(s) corresponding to expr. Errors if expr cannot be transcribed. Also can query via the syntax:\n\ntranscription_expression(expr::JuMP.AbstractJuMPScalar;\n                         [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n                         ndarray::Bool = false])\n\nIf the infinite model contains a built transcription model. By default, this method returns only transcribed expressions associated with public supports. All the  expressions can be returned by setting label = All.\n\nIf expr is infinite and ndarray = true then an n-dimensional array will be  returned in accordance with the infinite parameters that have unique object  numbers. In this case, label will be used to search the intersection of the supports that use the label. This is defers from the default behavior which  considers the union.\n\nExample\n\njulia> transcription_expression(trans_model, my_expr)\nx(support: 1) - y\n\njulia> transcription_expression(my_expr)\nx(support: 1) - y\n\n\n\n\n\ntranscription_expression(trans_model::JuMP.Model, expr, support::Vector{Float64})\n\nGiven the expr from an InfiniteModel, form its transcripted version in accordance with the variable mappings available in trans_model defined at support. This should only be used once all variables and measures have been transcribed (e.g., via transcribe_finite_variables!).\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_measures!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_measures!","text":"transcribe_measures!(trans_model::JuMP.Model,\n                     inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nFor each Measure in inf_model expand it via InfiniteOpt.expand_measure or analytic_expansion as appropriate and transcribe the expanded expression via transcription_expression. Then store the measure to transcripted expression mappings in TranscriptionData.measure_mappings and TranscriptionData.measure_lookup to enable transcription_variable and lookup_by_support. Note that the supports will not be generated until InfiniteOpt.variable_supports is invoked via InfiniteOpt.supports.  Note that TranscriptionData.measure_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_objective!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_objective!","text":"transcribe_objective!(trans_model::JuMP.Model,\n                      inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nForm the transcripted version of the objective stored in inf_model and add it to trans_model. Note that all the variables and measures in inf_model must by transcripted first (e.g., via transcribe_infinite_variables!).\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_constraints!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_constraints!","text":"transcribe_constraints!(trans_model::JuMP.Model,\n                        inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nFor each constraint in inf_model form its transcripted version(s) and add them to trans_model. The mappings are stored in TranscriptionData.constr_mappings and the associated supports are stored in TranscriptionData.constr_supports to enable transcription_constraint and InfiniteOpt.constraint_supports. Note that variable info constraints are simply mapped to the existing info constraints already generated along with the transcription variables. Note that the variables and measures must all first be transcripted (e.g., via transcribe_measures!). Note that  TranscriptionData.constr_support_labels is also populated.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcribe_derivative_evaluations!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcribe_derivative_evaluations!","text":"transcribe_derivative_evaluations!(trans_model::JuMP.Model, \n                                   inf_model::InfiniteOpt.InfiniteModel)::Nothing\n\nGenerate the auxiliary derivative evaluation equations and transcribe them  appropriately for all the derivatives in inf_model. These are in turn added to  trans_model. Note that no mapping information is recorded since the InfiniteModel  won't have any constraints that correspond to these equations. Also Note that the variables and measures must all first be transcripted (e.g., via transcribe_derivative_variables!).\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.build_transcription_model!","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.build_transcription_model!","text":"build_transcription_model!(trans_model::JuMP.Model,\n                           inf_model::InfiniteOpt.InfiniteModel;\n                           [check_support_dims::Bool = true])::Nothing\n\nGiven an empty trans_model build it using the information stored in inf_model. This is intended for a TranscriptionModel that serves as a internal optimizer model of inf_model. This detail is important to correctly enable internally generated semi-infinite variables during the transcription process such that inf_model is not modified. Note that this will add supports to inf_model via InfiniteOpt.fill_in_supports! for infinite parameters that contain no supports. Also a warning is thrown when the transcription model contains more than 15,000 support points to alert users when they may naively have a few independent supports whose product quickly yields a very large grid. For example having 3 independent parameters with 100 supports each would result in 1,000,000 supports if all three are together in at least 1 constraint. This  behavior can be overcome using dependent parameters. The warning can be turned off  via check_support_dims = false.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.add_point_variable-Tuple{Model, GeneralVariableRef, Vector{Float64}, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.add_point_variable","text":"InfiniteOpt.add_point_variable(model::JuMP.Model,\n                               var::InfiniteOpt.PointVariable,\n                               key::Val{:TransData}\n                               )::InfiniteOpt.GeneralVariableRef\n\nMake a PointVariableRef and map it to the appropriate transcription variable and return the GeneralVariableRef. This is an extension of add_point_variable for TranscriptionOpt.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.add_semi_infinite_variable-Tuple{Model, SemiInfiniteVariable, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.add_semi_infinite_variable","text":"InfiniteOpt.add_semi_infinite_variable(model::JuMP.Model,\n                                 var::InfiniteOpt.SemiInfiniteVariable,\n                                 key::Val{:TransData}\n                                 )::InfiniteOpt.GeneralVariableRef\n\nMake a SemiInfiniteVariableRef and add var to the transcription data  and return the GeneralVariableRef. This is an extension of  add_semi_infinite_variable  for TranscriptionOpt. Note that internal_semi_infinite_variable is also  extended to be able to access the var.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.build_optimizer_model!-Tuple{InfiniteModel, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.build_optimizer_model!","text":"InfiniteOpt.build_optimizer_model!(model::InfiniteOpt.InfiniteModel,\n                                   key::Val{:TransData};\n                                   check_support_dims::Bool = true)::Nothing\n\nTranscribe model and store it as a TranscriptionModel in the model.optimizer_model field which can be accessed with transcription_model. Ths clears the existing TranscriptionModel via InfiniteOpt.clear_optimizer_model_build! and then builds a new one using build_transcription_model!.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#Queries","page":"Model Transcription","title":"Queries","text":"","category":"section"},{"location":"manual/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"InfiniteOpt.TranscriptionOpt.is_transcription_model\nInfiniteOpt.TranscriptionOpt.transcription_data\nInfiniteOpt.TranscriptionOpt.has_internal_supports\nInfiniteOpt.TranscriptionOpt.transcription_model\nInfiniteOpt.TranscriptionOpt.transcription_variable(::JuMP.Model,::InfiniteOpt.GeneralVariableRef)\nInfiniteOpt.optimizer_model_variable(::InfiniteOpt.GeneralVariableRef,::Val{:TransData})\nInfiniteOpt.variable_supports(::JuMP.Model,::Union{InfiniteOpt.InfiniteVariableRef, InfiniteOpt.SemiInfiniteVariableRef},::Val{:TransData})\nInfiniteOpt.TranscriptionOpt.lookup_by_support(::JuMP.Model,::InfiniteOpt.GeneralVariableRef,::Vector)\nInfiniteOpt.internal_semi_infinite_variable(::InfiniteOpt.SemiInfiniteVariableRef,::Val{:TransData})\nInfiniteOpt.TranscriptionOpt.transcription_expression(::JuMP.Model,::Union{JuMP.GenericAffExpr, JuMP.GenericQuadExpr})\nInfiniteOpt.optimizer_model_expression(::Union{JuMP.GenericAffExpr, JuMP.GenericQuadExpr},::Val{:TransData})\nInfiniteOpt.expression_supports(::JuMP.Model,::Union{JuMP.GenericAffExpr, JuMP.GenericQuadExpr}, ::Val{:TransData})\nInfiniteOpt.TranscriptionOpt.transcription_constraint(::JuMP.Model,::InfiniteOpt.InfOptConstraintRef)\nInfiniteOpt.optimizer_model_constraint(::InfiniteOpt.InfOptConstraintRef,::Val{:TransData})\nInfiniteOpt.constraint_supports(::JuMP.Model,::InfiniteOpt.InfOptConstraintRef,::Val{:TransData})\nInfiniteOpt.TranscriptionOpt.parameter_supports(::JuMP.Model)","category":"page"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.is_transcription_model","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.is_transcription_model","text":"is_transcription_model(model::JuMP.Model)::Bool\n\nReturn true if model is a TranscriptionModel or false otherwise.\n\nExample\n\njulia> is_transcription_model(model)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_data","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_data","text":"transcription_data(model::JuMP.Model)::TranscriptionData\n\nReturn the TranscriptionData from a TranscriptionModel. Errors if it is not a TranscriptionModel.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.has_internal_supports","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.has_internal_supports","text":"has_internal_supports(model::JuMP.Model)::Bool\n\nReturn a Bool whether model has any internal supports that were collected.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_model","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_model","text":"transcription_model(model::InfiniteOpt.InfiniteModel)::JuMP.Model\n\nReturn the transcription model stored in model if that is what is stored in model.optimizer_model.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_variable-Tuple{Model, GeneralVariableRef}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_variable","text":"transcription_variable(model::JuMP.Model,\n    vref::InfiniteOpt.GeneralVariableRef;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n     ndarray::Bool = false])\n\nReturn the transcribed variable reference(s) corresponding to vref. Errors if no transcription variable is found. Also can query via the syntax:\n\ntranscription_variable(vref::InfiniteOpt.GeneralVariableRef; \n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n     ndarray::Bool = false])\n\nIf the infinite model contains a built transcription model. By default, this method returns only transcribed variables associated with public supports. All the  variables can be returned by setting label = All. \n\nIf vref is infinite and ndarray = true then an n-dimensional array will be  returned in accordance with the infinite parameters that have unique object  numbers. In this case, label will be used to search the intersection of variable  supports that use the label. This is defers from the default behavior which  considers the union.\n\nExample\n\njulia> transcription_variable(trans_model, infvar)\n2-element Array{VariableRef,1}:\n infvar(support: 1)\n infvar(support: 2)\n\njulia> transcription_variable(trans_model, hdvar)\nhdvar\n\njulia> transcription_variable(infvar)\n2-element Array{VariableRef,1}:\n infvar(support: 1)\n infvar(support: 2)\n\njulia> transcription_variable(hdvar)\nhdvar\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.optimizer_model_variable-Tuple{GeneralVariableRef, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.optimizer_model_variable","text":"InfiniteOpt.optimizer_model_variable(vref::InfiniteOpt.GeneralVariableRef,\n    ::Val{:TransData};\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nProper extension of InfiniteOpt.optimizer_model_variable for TranscriptionModels. This simply dispatches to transcription_variable.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.variable_supports-Tuple{Model, Union{InfiniteVariableRef, SemiInfiniteVariableRef}, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.variable_supports","text":"InfiniteOpt.variable_supports(model::JuMP.Model,\n    vref::InfiniteOpt.DecisionVariableRef,\n    key::Val{:TransData} = Val(:TransData);\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the support alias mapping associated with vref in the transcription model. Errors if vref does not have transcripted variables. See transcription_variable  for an explanation of ndarray.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.lookup_by_support-Tuple{Model, GeneralVariableRef, Vector{T} where T}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.lookup_by_support","text":"lookup_by_support(model::JuMP.Model,\n                  vref::InfiniteOpt.GeneralVariableRef,\n                  support::Vector)\n\nReturn the transcription expression of vref defined at its support. This is intended as a helper method for automated transcription.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.internal_semi_infinite_variable-Tuple{SemiInfiniteVariableRef, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.internal_semi_infinite_variable","text":"InfiniteOpt.internal_semi_infinite_variable(\n    vref::InfiniteOpt.SemiInfiniteVariableRef,\n    ::Val{:TransData}\n    )::InfiniteOpt.SemiInfiniteVariable{InfiniteOpt.GeneralVariableRef}\n\nReturn the internal semi-infinite variable associated with vref, assuming it was added internally during measure expansion at the transcription step. This extends InfiniteOpt.internal_semi_infinite_variable as described in its docstring. Errors, if no such variable can be found.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_expression-Tuple{Model, Union{GenericAffExpr, GenericQuadExpr}}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_expression","text":"transcription_expression(\n    model::JuMP.Model,\n    expr::JuMP.AbstractJuMPScalar;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the transcribed expression(s) corresponding to expr. Errors if expr cannot be transcribed. Also can query via the syntax:\n\ntranscription_expression(expr::JuMP.AbstractJuMPScalar;\n                         [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n                         ndarray::Bool = false])\n\nIf the infinite model contains a built transcription model. By default, this method returns only transcribed expressions associated with public supports. All the  expressions can be returned by setting label = All.\n\nIf expr is infinite and ndarray = true then an n-dimensional array will be  returned in accordance with the infinite parameters that have unique object  numbers. In this case, label will be used to search the intersection of the supports that use the label. This is defers from the default behavior which  considers the union.\n\nExample\n\njulia> transcription_expression(trans_model, my_expr)\nx(support: 1) - y\n\njulia> transcription_expression(my_expr)\nx(support: 1) - y\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.optimizer_model_expression-Tuple{Union{GenericAffExpr, GenericQuadExpr}, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.optimizer_model_expression","text":"InfiniteOpt.optimizer_model_expression(expr::JuMP.AbstractJuMPScalar,\n    ::Val{:TransData};\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nProper extension of InfiniteOpt.optimizer_model_expression for TranscriptionModels. This simply dispatches to transcription_expression.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.expression_supports-Tuple{Model, Union{GenericAffExpr, GenericQuadExpr}, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.expression_supports","text":"InfiniteOpt.expression_supports(model::JuMP.Model,\n    expr::JuMP.AbstractJuMPScalar,\n    key::Val{:TransData} = Val(:TransData);\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the support alias mappings associated with expr. Errors if expr cannot be transcribed.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.transcription_constraint-Tuple{Model, InfOptConstraintRef}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.transcription_constraint","text":"transcription_constraint(model::JuMP.Model,\n    cref::InfiniteOpt.InfOptConstraintRef;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the transcribed constraint reference(s) corresponding to cref. Errors if cref has not been transcribed. Also can query via the syntax:\n\ntranscription_constraint(cref::InfiniteOpt.InfOptConstraintRef;\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nIf the infinite model contains a built transcription model. By default, this method returns only transcribed constraints associated with public supports. All the  constraints can be returned by setting label = All.\n\nIf cref is infinite and ndarray = true then an n-dimensional array will be  returned in accordance with the infinite parameters that have unique object  numbers. In this case, label will be used to search the intersection of the supports that use the label. This is defers from the default behavior which  considers the union.\n\nExample\n\njulia> transcription_constraint(trans_model, fin_con)\nfin_con : x(support: 1) - y <= 3.0\n\njulia> transcription_constraint(fin_con)\nfin_con : x(support: 1) - y <= 3.0\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.optimizer_model_constraint-Tuple{InfOptConstraintRef, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.optimizer_model_constraint","text":"InfiniteOpt.optimizer_model_constraint(\n    cref::InfiniteOpt.InfOptConstraintRef,\n    ::Val{:TransData};\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel\n    ndarray::Bool = false])\n\nProper extension of InfiniteOpt.optimizer_model_constraint for TranscriptionModels. This simply dispatches to transcription_constraint.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.constraint_supports-Tuple{Model, InfOptConstraintRef, Val{:TransData}}","page":"Model Transcription","title":"InfiniteOpt.constraint_supports","text":"InfiniteOpt.constraint_supports(model::JuMP.Model,\n    cref::InfiniteOpt.InfOptConstraintRef,\n    key::Val{:TransData} = Val(:TransData);\n    [label::Type{<:InfiniteOpt.AbstractSupportLabel} = InfiniteOpt.PublicLabel,\n    ndarray::Bool = false])\n\nReturn the support alias mappings associated with cref. Errors if cref is not transcribed.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.parameter_supports-Tuple{Model}","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.parameter_supports","text":"parameter_supports(model::JuMP.Model)::Tuple\n\nReturn the collected parameter support tuple that is stored in TranscriptionData.supports.\n\n\n\n\n\n","category":"method"},{"location":"manual/transcribe/#Utilities","page":"Model Transcription","title":"Utilities","text":"","category":"section"},{"location":"manual/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"InfiniteOpt.TranscriptionOpt.support_index_iterator\nInfiniteOpt.TranscriptionOpt.index_to_support\nInfiniteOpt.TranscriptionOpt.index_to_labels\nInfiniteOpt.TranscriptionOpt.make_ndarray","category":"page"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.support_index_iterator","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.support_index_iterator","text":"support_index_iterator(model::JuMP.Model, [obj_nums::Vector{Int}])::CartesianIndices\n\nReturn the CartesianIndices that determine the indices of the unique combinations of TranscriptionData.supports stored in model. If obj_nums is specified, then the indices will only include the tuple elements uses indices are included in the object numbers obj_nums and all others will be assigned the last index which should correspond to an appropriately sized placeholder comprised of NaNs. Note this method assumes that set_parameter_supports has already been called and that the last elements of each support vector contains a placeholder value.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.index_to_support","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.index_to_support","text":"index_to_support(model::JuMP.Model, index::CartesianIndex)::Vector{Float64}\n\nGiven a particular support index generated via support_index_iterator using model, return the corresponding support from TranscriptionData.supports using placeholder NaNs as appropriate for tuple elements that are unneeded.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.index_to_labels","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.index_to_labels","text":"index_to_labels(model::JuMP.Model, index::CartesianIndex)::Set{DataType}\n\nGiven a particular support index generated via support_index_iterator using model, return the corresponding support label set from TranscriptionData.support_labels.\n\n\n\n\n\n","category":"function"},{"location":"manual/transcribe/#InfiniteOpt.TranscriptionOpt.make_ndarray","page":"Model Transcription","title":"InfiniteOpt.TranscriptionOpt.make_ndarray","text":"make_narray(model::JuMP.Model, \n            ref::Union{JuMP.AbstractJuMPScalar, InfiniteOpt.InfOptConstraintRef}, \n            info::Vector, \n            label::Type{<:InfiniteOpt.AbstractSupportLabel})::Array\n\nTake the resultsinfo associated with ref and rearrange them into an  n-dimensional array where the axes correspond to the infinite parameter dependencies  in accordance with their creation. Note that this works by querying the object  numbers. Thus, independent infinite parameters will each get their own dimension  (even if they are defined at the same time in an array) and each dependent infinite  parameter group will have its own dimension. \n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#expr_manual","page":"Expressions","title":"Expressions","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"A technical manual for variable expressions in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/expression/#par_func_manual","page":"Expressions","title":"Parameter Functions","text":"","category":"section"},{"location":"manual/expression/#Definition","page":"Expressions","title":"Definition","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"@parameter_function\nparameter_function\nbuild_parameter_function\nParameterFunction\nadd_parameter_function\nParameterFunctionData\nParameterFunctionIndex\nParameterFunctionRef","category":"page"},{"location":"manual/expression/#InfiniteOpt.@parameter_function","page":"Expressions","title":"InfiniteOpt.@parameter_function","text":"@parameter_function(model::InfiniteModel, func_expr, kwargs...)\n\nAdd an anonymous parameter function to the model model described by the keyword arguments kw_args and returns the object reference.\n\n@parameter_function(model::InfiniteModel, var_expr == func_expr, kwargs...)\n\nAdd a parameter function to model described by the expression var_expr, the function expression func_expr, and the keyword arguments kwargs. The  expression var_expr is used to define the parameter function references of the  form varname[...] where the indexing matches the container syntax of other  macros.\n\nThe expression func_expr determines the concrete Julia function that defines the  behavior of parameter function and also specifies the infinite parameters it  depends on. The accepted forms are:\n\nfunc(params...): where func is the function that takes supports of the  infinite parameters params as input and outputs a scalar value.\n(params...) -> my_func_expr: where params are the infinite parameters and  my_func_expr is the source code of the anonymous function.\n\nThe recognized keyword arguments in kwargs are the following:\n\nbase_name: Sets the name prefix used to generate object names. It corresponds to the object name for scalar parameter function, otherwise, the object names are set to base_name[...] for each index ... of the axes axes.\ncontainer: Specify the container type. Defaults to :Auto.\n\nExamples\n\njulia> @parameter_function(model, sin(t))\nsin(t)\n\njulia> func_vect = [sin, cos];\n\njulia> @parameter_function(model, [i = 1:2] == func_vect[i](t))\n2-element Array{GeneralVariableRef,1}:\n sin(t)\n cos(t)\n\njulia> f(t_val, x_vals) = t_val + sum(x_vals)\nf (generic function with 1 method)\n\njulia> @parameter_function(model, pf == f(t, x))\npf(t, x)\n\njulia> g(t_val, a; b = 0) = t_val + a + b\ng (generic function with 1 method)\n\njulia> @parameter_function(model, pf2[i = 1:2] == t -> g(t, i, b = 2 * i ))\n2-element Array{GeneralVariableRef,1}:\n pf2[1](t)\n pf2[2](t)\n\n\n\n\n\n","category":"macro"},{"location":"manual/expression/#InfiniteOpt.parameter_function","page":"Expressions","title":"InfiniteOpt.parameter_function","text":"parameter_function(func::Function, \n                   pref_inputs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}, Tuple}; \n                   [name::String = [the name of `func`]]\n                   )::GeneralVariableRef\n\nMake a parameter function and return a GeneralVariableRef that can be  embedded in InfiniteOpt expressions. This serves as a convenient wrapper for  build_parameter_function and add_parameter_function. For an  even more convenient definition method see @parameter_function.\n\nHere func denotes the function that will take a support of infinite parameters as  input (formatted like pref_inputs) and will return a scalar value. Specifically,  func should be of the form:\n\nfunc(paramvals...)::Float64\n\nwhere the formatting of paramvals is analagous to point variables (and will be  based on the tuple of infinite parameter references given in parameter_refs). Moreover, func must be a function that returns a scalar numeric value. \n\nErrors if func will not take a support formatted like pref_inputs in  combination with the fargs and fkwargs specified. Also errors if pref_inputs  follow an invalid input format.\n\nExample\n\njulia> p_func = parameter_function(sin, t)\nsin(t)\n\njulia> p_func3 = parameter_function((t_supp) -> 2 * sin(2 * t_supp), t, name = \"mysin\")\nmysin(t)\n\njulia> p_func4 = parameter_function(t, name = \"mysin\") do t_supp\n                    if t_supp <= 5\n                        return sin(t_supp)\n                    else \n                        return 2 * sin(2 * t_supp)\n                    end\n                 end\n\nmysin(t)\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.build_parameter_function","page":"Expressions","title":"InfiniteOpt.build_parameter_function","text":"build_parameter_function(\n    _error::Function, \n    func::Function, \n    parameter_refs::Union{GeneralVariableRef, AbstractArray{<:GeneralVariableRef}, Tuple}\n    )::ParameterFunction\n\nBuild an ParameterFunction object that employs a parameter function  func that takes instances of the infinite parameter(s) as input. This can  ultimately by incorporated into expressions to enable nonlinear infinite parameter  behavior and/or incorporate data over infinite domains.\n\nHere func should be of the form:\n\nfunc(paramvals...)::Float64\n\nwhere the formatting of paramvals is analagous to point variables (and will be  based on the tuple of infinite parameter references given in parameter_refs). \n\nErrors if the infinite parameter tuple is formatted incorrectly. The allowed  format follows that of infinite variables. Also errors if the function doesn't  accept a support realization of the parameter_refs as input.\n\nExample\n\njulia> f = build_parameter_function(error, sin, t);\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.ParameterFunction","page":"Expressions","title":"InfiniteOpt.ParameterFunction","text":"ParameterFunction{F <: Function, VT <: VectorTuple}\n\nA DataType for storing known functions of infinite parameters. These equate to arbitrary  functions that take support instances of infinite parameters parameter_refs in  as input and compute a scalar value as output via func. These can then can  incorporated in expressions via ParameterFunctionRefs.\n\nFields\n\nfunc::F: The function the takes infinite parameters as input and provide a            scalar number as output.\nparameter_refs::VT: The infinite parameter references that serve as                                   inputs to func. Their formatting is analagous                                   to those of infinite variables. \nparameter_nums::Vector{Int}: The parameter numbers of parameter_refs.\nobject_nums::Vector{Int}: The parameter object numbers associated with parameter_refs.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.add_parameter_function","page":"Expressions","title":"InfiniteOpt.add_parameter_function","text":"add_parameter_function(model::InfiniteModel, pfunc::ParameterFunction, \n                       [name::String])::GeneralVariableRef\n\nAdd an ParameterFunction pfunc to the model using name for  printing and return a GeneralVariableRef such that it can be embedded in  expressions. Errors if the parameter function pfunc points to do not belong to  model. Note that pfunc should be created using build_parameter_function.\n\nExample\n\njulia> f = build_parameter_function(error, sin, t);\n\njulia> fref = add_parameter_function(model, f)\nsin(t)\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.ParameterFunctionData","page":"Expressions","title":"InfiniteOpt.ParameterFunctionData","text":"ParameterFunctionData{F <: ParameterFunction} <: AbstractDataObject\n\nA mutable DataType for storing ParameterFunctions and their data.\n\nFields\n\nfunc::F: The parameter function.\nname::String: The name used for printing.\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nconstraint_indices::Vector{InfOptConstraintIndex}: Indices of dependent constraints.\nsemi_infinite_var_indices::Vector{SemiInfiniteVariableIndex}: Indices of dependent semi-infinite variables.\nderivative_indices::Vector{DerivativeIndex}: Indices of dependent derivatives.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.ParameterFunctionIndex","page":"Expressions","title":"InfiniteOpt.ParameterFunctionIndex","text":"ParameterFunctionIndex <: ObjectIndex\n\nA DataType for storing the index of a ParameterFunction.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.ParameterFunctionRef","page":"Expressions","title":"InfiniteOpt.ParameterFunctionRef","text":"ParameterFunctionRef <: DispatchVariableRef\n\nA DataType for infinite parameter function references.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::ParameterFunctionIndex: Index of the infinite parameter function.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#Queries","page":"Expressions","title":"Queries","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"JuMP.name(::ParameterFunctionRef)\nraw_function(::ParameterFunctionRef)\ncall_function\nparameter_refs(::ParameterFunctionRef)\nparameter_list(::ParameterFunctionRef)\nraw_parameter_refs(::ParameterFunctionRef)\nis_used(::ParameterFunctionRef)\nused_by_semi_infinite_variable(::ParameterFunctionRef)\nused_by_derivative(::ParameterFunctionRef)\nused_by_measure(::ParameterFunctionRef)\nused_by_constraint(::ParameterFunctionRef)","category":"page"},{"location":"manual/expression/#JuMP.name-Tuple{ParameterFunctionRef}","page":"Expressions","title":"JuMP.name","text":"JuMP.name(fref::ParameterFunctionRef)::String\n\nExtend JuMP.name to return the base name of fref.\n\nExample\n\njulia> name(fref)\n\"func_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_function-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.raw_function","text":"raw_function(fref::ParameterFunctionRef)::Function\n\nReturns the raw function behind fref that takes a particular support of fref's  infinite parameters as input. \n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.call_function","page":"Expressions","title":"InfiniteOpt.call_function","text":"call_function(fref::ParameterFunctionRef, support...)::Float64\n\nSafely evaluates the raw_function of fref at a particular support support point that matches the format of the infinite parameter tuple given when the fref  was defined. This is essentially equivalent to raw_function(fref)(supps...). \n\n\n\n\n\ncall_function(fref::GeneralVariableRef, support...)::Float64\n\nCall the parameter function of fref at support. An ArgumentError is thrown if fref is not a parameter function.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.parameter_refs-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(fref::ParameterFunctionRef)::Tuple\n\nReturn the parameter references associated with fref. This is formatted as a Tuple of containing the parameter references as they inputted to define fref.\n\nExample\n\njulia> parameter_refs(p_func)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_list-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.parameter_list","text":"parameter_list(fref::ParameterFunctionRef)::Vector{GeneralVariableRef}\n\nReturn a vector of the parameter references that fref depends on. This is primarily an internal method where parameter_refs is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_parameter_refs-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refs(fref::ParameterFunctionRef)::VectorTuple\n\nReturn the raw VectorTuple of the  parameter references that fref depends on. This is primarily an internal method  where parameter_refs  is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.is_used-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.is_used","text":"is_used(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used in the model.\n\nExample\n\njulia> is_used(fref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_semi_infinite_variable-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.used_by_semi_infinite_variable","text":"used_by_semi_infinite_variable(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used by a semi-infinite infinite variable.\n\nExample\n\njulia> used_by_semi_infinite_variable(fref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_derivative-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.used_by_derivative","text":"used_by_derivative(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used by a derivative.\n\nExample\n\njulia> used_by_derivative(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_measure-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used by a measure.\n\nExample\n\njulia> used_by_measure(fref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_constraint-Tuple{ParameterFunctionRef}","page":"Expressions","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(fref::ParameterFunctionRef)::Bool\n\nReturn a Bool indicating if fref is used by a constraint.\n\nExample\n\njulia> used_by_constraint(fref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#Modification","page":"Expressions","title":"Modification","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"JuMP.set_name(::ParameterFunctionRef, ::String)\nJuMP.delete(::InfiniteModel, ::ParameterFunctionRef)","category":"page"},{"location":"manual/expression/#JuMP.set_name-Tuple{ParameterFunctionRef, String}","page":"Expressions","title":"JuMP.set_name","text":"JuMP.set_name(fref::ParameterFunctionRef, name::String)::Nothing\n\nExtend JuMP.set_name to set the name of a parameter function.\n\nExample\n\njulia> set_name(fref, \"func_name\")\n\njulia> name(fref)\n\"func_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete-Tuple{InfiniteModel, ParameterFunctionRef}","page":"Expressions","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, fref::ParameterFunctionRef)::Nothing\n\nExtend JuMP.delete to delete parameter functions and their dependencies. Errors  if fref is invalid, meaning it has already been deleted or it belongs to  another model.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#nlp_manual","page":"Expressions","title":"Nonlinear Expressions","text":"","category":"section"},{"location":"manual/expression/#DataTypes","page":"Expressions","title":"DataTypes","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"NodeData\nNLPExpr\nRegisteredFunction","category":"page"},{"location":"manual/expression/#InfiniteOpt.NodeData","page":"Expressions","title":"InfiniteOpt.NodeData","text":"NodeData\n\nA DataType for storing values in an expression tree that is used in a  NLPExpr. Acceptable value types include:\n\nReal: Constants\nGeneralVariableRef: Optimization variables\nJuMP.GenericAffExpr{Float64, GeneralVariableRef}: Affine expressions\nJuMP.GenericQuadExpr{Float64, GeneralVariableRef}: Quadratic expressions\nSymbol: Registered NLP function name.\n\nFields\n\nvalue: The stored value.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.NLPExpr","page":"Expressions","title":"InfiniteOpt.NLPExpr","text":"NLPExpr <: JuMP.AbstractJuMPScalar\n\nA DataType for storing scalar nonlinear expressions. It stores the expression  algebraically via an expression tree where each node contains NodeData  that can store one of the following:\n\na registered function name (stored as a Symbol)\na constant\na variable \nan affine expression\na quadratic expression.\n\nSpecifically, it employs a left-child right-sibling tree  (from LeftChildRightSiblingTrees.jl) to represent the expression tree.\n\nFields\n\ntree_root::LeftChildRightSiblingTrees.Node{NodeData}: The root node of the  expression tree.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.RegisteredFunction","page":"Expressions","title":"InfiniteOpt.RegisteredFunction","text":"RegisteredFunction{F <: Function, G <: Union{Function, Nothing}, \n                   H <: Union{Function, Nothing}}\n\nA type for storing used defined registered functions and their information that  is needed by JuMP for build an NLPEvaluator. The constructor is of the form:\n\n    RegisteredFunction(name::Symbol, num_args::Int, func::Function, \n                       [gradient::Function, hessian::Function])\n\nFields\n\nname::Symbol: The name of the function that is used in NLPExprs.\nnum_args::Int: The number of function arguments.\nfunc::F: The function itself.\ngradient::G: The gradient function if one is given.\nhessian::H: The hessian function if one is given.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#Methods/Macros","page":"Expressions","title":"Methods/Macros","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"@register\nall_registered_functions\nname_to_function\nuser_registered_functions\nInfiniteOpt.ifelse\nprint_expression_tree(::NLPExpr)\nJuMP.drop_zeros!(::NLPExpr)\nmap_nlp_to_ast\nadd_registered_to_jump","category":"page"},{"location":"manual/expression/#InfiniteOpt.@register","page":"Expressions","title":"InfiniteOpt.@register","text":"@register(model::InfiniteModel, func_expr, [gradient::Function], [hessian::Function])\n\nRegister a user-defined function in accordance with func_expr such that it can  be used in NLPExprs that are used with model without being traced.\n\nArgument Information Here func_expr is of the form: myfunc(a, b) where myfunc is the function  name and the number of arguments are given symbolically. Note that the choice  of argument symbols is arbitrary. Each function argument must support anything  of type Real to specified.\n\nHere we can also specify a gradient function gradient which for 1 argument  functions must taken in the 1 argument and return its derivative. For  multi-argument functions the gradient function must be of the form:\n\nfunction gradient(g::AbstractVector{T}, args::T...) where {T <: Real}\n    # fill g vector with the gradient of the function\nend\n\nFor 1 argument functions we can also specify a hessian function with takes that  argument and return the 2nd derivative. Hessians can ge specified for  multi-argument functions, but JuMP backends do not currently support this.\n\nIf no gradient and/or hessian is given, the automatic differentation capabilities  of the backend (e.g., JuMP) will be used to determine them. Note that the  JuMP backend does not use Hessian's for user-defined multi-argument functions.\n\nNotes\n\nWhen possible, tracing is preferred over registering a function (see  Function Tracing for more info).\nOnly user-defined functions can be specified. If the function is used by a  package then it can not be used directly. However, we can readily wrap it in a  new function newfunc(a) = pkgfunc(a).\nWe can only register functions in the same scope that they are defined in.\nRegistered functions can only be used in or below the scope in which they are  registered. For instance, if we register some function inside of another  function then we can only use it inside that function (not outside of it). \nA function with a given name and number of arguments can only be registered  once in a particular model.\n\nExamples\n\njulia> @variable(model, x)\nx\n\njulia> f(a) = a^3;\n\njulia> f(x) # user-function gets traced\nx^3\n\njulia> @register(model, f(a)) # register function\nf (generic function with 2 methods)\n\njulia> f(x) # function is no longer traced and autodifferentiation will be used\nf(x)\n\njulia> f2(a) = a^2; g2(a) = 2 * a; h2(a) = 2;\n\njulia> @register(model, f2(a), g2, h2) # register with explicit gradient and hessian\nf2 (generic function with 2 methods)\n\njulia> f2(x)\nf2(x)\n\njulia> f3(a, b) = a * b^2;\n\njulia> function g3(v, a, b)\n          v[1] = b^2\n          v[2] = 2 * a * b\n          return\n       end;\n\njulia> @register(model, f3(a, b), g3) # register multi-argument function\nf3 (generic function with 4 methods)\n\njulia> f3(42, x)\nf3(42, x)\n\n\n\n\n\n","category":"macro"},{"location":"manual/expression/#InfiniteOpt.all_registered_functions","page":"Expressions","title":"InfiniteOpt.all_registered_functions","text":"all_registered_functions(model::InfiniteModel)::Vector{Function}\n\nRetrieve all the functions that are currently registered to model.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.name_to_function","page":"Expressions","title":"InfiniteOpt.name_to_function","text":"name_to_function(model::InfiniteModel, name::Symbol, num_args::Int)::Union{Function, Nothing}\n\nReturn the registered function that corresponds to name with num_args.  Returns nothing if no such registered function exists. This helps retrieve the  functions of function names stored in NLPExprs.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.user_registered_functions","page":"Expressions","title":"InfiniteOpt.user_registered_functions","text":"user_registered_functions(model::InfiniteModel)::Vector{RegisteredFunction}\n\nReturn all the functions (and their associated information) that the user has  registered to model. Each is stored as a RegisteredFunction.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.ifelse","page":"Expressions","title":"InfiniteOpt.ifelse","text":"InfiniteOpt.ifelse(cond::NLPExpr, v1::Union{AbstractInfOptExpr, Real}, \n                   v2::Union{AbstractInfOptExpr, Real})::NLPExpr\n\nA symbolic version of Core.ifelse that can be used to establish symbolic  expressions with logic conditions. Note that is must be written  InfiniteOpt.ifelse since it conflicts with Core.ifelse.\n\nExample\n\njulia> InfiniteOpt.ifelse(x >= y, 0, y^3)\nifelse(x >= y, 0, y^3)\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.print_expression_tree-Tuple{NLPExpr}","page":"Expressions","title":"InfiniteOpt.print_expression_tree","text":"print_expression_tree(nlp::NLPExpr)\n\nPrint a tree representation of the nonlinear expression nlp.\n\nExample\n\njulia> expr = (x * sin(x)^3) / 2\n(x * sin(x)^3) / 2\n\njulia> print_expression_tree(expr)\n/\n├─ *\n│  ├─ x\n│  └─ ^\n│     ├─ sin\n│     │  └─ x\n│     └─ 3\n└─ 2\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.drop_zeros!-Tuple{NLPExpr}","page":"Expressions","title":"JuMP.drop_zeros!","text":"JuMP.drop_zeros!(nlp::NLPExpr)::NLPExpr\n\nRemoves the zeros (possibly introduced by deletion) from an nonlinear expression.  Note this only uses a few simple heuristics and will not remove more complex  relationships like cos(π/2). \n\nExample\n\njulia> expr = x^2.3 * max(0, zero(NLPExpr)) - exp(1/x + 0)\nx^2.3 * max(0, 0) - exp(1 / x + 0)\n\njulia> drop_zeros!(expr)\n-exp(1 / x)\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.map_nlp_to_ast","page":"Expressions","title":"InfiniteOpt.map_nlp_to_ast","text":"map_nlp_to_ast(map_func::Function, nlp::NLPExpr)::Expr\n\nMap the nonlinear expression nlp to a Julia AST expression where each variable  is mapped via map_func and is directly interpolated into the AST expression.  This is intended as an internal method that can be helpful for developers that  wish to map a NLPExpr to a Julia AST expression that is compatible with  JuMP.add_NL_expression. \n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt.add_registered_to_jump","page":"Expressions","title":"InfiniteOpt.add_registered_to_jump","text":"add_registered_to_jump(opt_model::JuMP.Model, inf_model::InfiniteModel)::Nothing\n\nAdd the user registered functions in inf_model to a JuMP model opt_model.  This is intended as an internal method, but it is provided for developers that  extend InfiniteOpt to use other optimizer models.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#Expression-Methods","page":"Expressions","title":"Expression Methods","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"parameter_refs(::Union{JuMP.GenericAffExpr, JuMP.GenericQuadExpr})\nmap_expression","category":"page"},{"location":"manual/expression/#InfiniteOpt.parameter_refs-Tuple{Union{GenericAffExpr, GenericQuadExpr}}","page":"Expressions","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(expr)::Tuple\n\nReturn the tuple of parameter references that determine the infinite dependencies of expr.\n\nExample\n\njulia> parameter_refs(my_expr)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.map_expression","page":"Expressions","title":"InfiniteOpt.map_expression","text":"map_expression(transform::Function, \n               expr::JuMP.AbstractJuMPScalar)::JuMP.AbstractJuMPScalar\n\nMap and return a new expression of expr where each variable is transformed  via transform. This can be helpful for writing user extensions.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#GeneralVariableRef-User-Methods","page":"Expressions","title":"GeneralVariableRef User Methods","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"GeneralVariableRef\nDispatchVariableRef\nFiniteRef\nJuMP.owner_model(::GeneralVariableRef)\nJuMP.owner_model(::DispatchVariableRef)\nJuMP.index(::GeneralVariableRef)\nJuMP.index(::DispatchVariableRef)\ndispatch_variable_ref(::GeneralVariableRef)\ndispatch_variable_ref\nJuMP.name(::GeneralVariableRef)\nJuMP.set_name(::GeneralVariableRef, ::String)\nJuMP.is_valid(::InfiniteModel,::GeneralVariableRef)\nJuMP.is_valid(::InfiniteModel, ::DispatchVariableRef)\nused_by_infinite_variable(::GeneralVariableRef)\nused_by_point_variable(::GeneralVariableRef)\nused_by_semi_infinite_variable(::GeneralVariableRef)\nused_by_derivative(::GeneralVariableRef)\nused_by_measure(::GeneralVariableRef)\nused_by_objective(::GeneralVariableRef)\nused_by_constraint(::GeneralVariableRef)\nis_used(::GeneralVariableRef)\nhas_derivative_constraints(::GeneralVariableRef)\nparameter_value(::GeneralVariableRef)\nJuMP.set_value(::GeneralVariableRef, ::Real)\ninfinite_domain(::GeneralVariableRef)\ninfinite_domain(::AbstractArray{<:GeneralVariableRef})\nset_infinite_domain(::GeneralVariableRef, ::InfiniteScalarDomain)\nset_infinite_domain(::AbstractArray{<:GeneralVariableRef}, ::InfiniteArrayDomain)\nnum_supports(::GeneralVariableRef)\nnum_supports(::AbstractArray{<:GeneralVariableRef})\nhas_supports(::GeneralVariableRef)\nhas_supports(::AbstractArray{<:GeneralVariableRef})\nsupports(::GeneralVariableRef)\nsupports(::AbstractArray{<:GeneralVariableRef})\nset_supports(::GeneralVariableRef,::Union{Real, Vector{<:Real}})\nset_supports(::AbstractArray{<:GeneralVariableRef},::Union{Array{<:Real, 2}, Vector{<:AbstractArray{<:Real}}})\nadd_supports(::GeneralVariableRef,::Union{Real, Vector{<:Real}})\nadd_supports(::AbstractArray{<:GeneralVariableRef},::Union{Array{<:Real, 2}, Vector{<:AbstractArray{<:Real}}})\ndelete_supports(::GeneralVariableRef)\ndelete_supports(::AbstractArray{<:GeneralVariableRef})\nfill_in_supports!(::GeneralVariableRef)\nfill_in_supports!(::AbstractArray{<:GeneralVariableRef})\nraw_parameter_refs(::GeneralVariableRef)\nparameter_refs(::GeneralVariableRef)\nparameter_list(::GeneralVariableRef)\nraw_function(::GeneralVariableRef)\ninfinite_variable_ref(::GeneralVariableRef)\neval_supports(::GeneralVariableRef)\nraw_parameter_values(::GeneralVariableRef)\nparameter_values(::GeneralVariableRef)\nsignificant_digits(::GeneralVariableRef)\nmeasure_function(::GeneralVariableRef)\nmeasure_data(::GeneralVariableRef)\nis_analytic(::GeneralVariableRef)\nderivative_argument(::GeneralVariableRef)\noperator_parameter(::GeneralVariableRef)\nderivative_method(::GeneralVariableRef)\nevaluate(::GeneralVariableRef)\nderivative_constraints(::GeneralVariableRef)\ndelete_derivative_constraints(::GeneralVariableRef)\nInfiniteOpt.add_generative_supports(::GeneralVariableRef)\nset_derivative_method(::GeneralVariableRef, ::AbstractDerivativeMethod)\nhas_generative_supports(::GeneralVariableRef)\nhas_internal_supports(::GeneralVariableRef)\nJuMP.delete(::InfiniteModel, ::GeneralVariableRef)\nJuMP.delete(::InfiniteModel,::AbstractArray{<:GeneralVariableRef})\nJuMP.has_lower_bound(::GeneralVariableRef)\nJuMP.lower_bound(::GeneralVariableRef)\nJuMP.set_lower_bound(::GeneralVariableRef,::Real)\nJuMP.LowerBoundRef(::GeneralVariableRef)\nJuMP.delete_lower_bound(::GeneralVariableRef)\nJuMP.has_upper_bound(::GeneralVariableRef)\nJuMP.upper_bound(::GeneralVariableRef)\nJuMP.set_upper_bound(::GeneralVariableRef,::Real)\nJuMP.UpperBoundRef(::GeneralVariableRef)\nJuMP.delete_upper_bound(::GeneralVariableRef)\nJuMP.is_fixed(::GeneralVariableRef)\nJuMP.fix_value(::GeneralVariableRef)\nJuMP.fix(::GeneralVariableRef, ::Real)\nJuMP.FixRef(::GeneralVariableRef)\nJuMP.unfix(::GeneralVariableRef)\nJuMP.start_value(::GeneralVariableRef)\nJuMP.set_start_value(::GeneralVariableRef, ::Real)\nstart_value_function(::GeneralVariableRef)\nset_start_value_function(::GeneralVariableRef, ::Any)\nreset_start_value_function(::GeneralVariableRef)\nJuMP.is_binary(::GeneralVariableRef)\nJuMP.set_binary(::GeneralVariableRef)\nJuMP.BinaryRef(::GeneralVariableRef)\nJuMP.unset_binary(::GeneralVariableRef)\nJuMP.is_integer(::GeneralVariableRef)\nJuMP.set_integer(::GeneralVariableRef)\nJuMP.IntegerRef(::GeneralVariableRef)\nJuMP.unset_integer(::GeneralVariableRef)","category":"page"},{"location":"manual/expression/#InfiniteOpt.GeneralVariableRef","page":"Expressions","title":"InfiniteOpt.GeneralVariableRef","text":"GeneralVariableRef <: JuMP.AbstractVariableRef\n\nA DataType that serves as the principal variable reference in InfiniteOpt for building variable expressions. It contains the needed information to create a variable type specifc reference (e.g., InfiniteVariableRef) via dispatch_variable_ref to obtain the correct subtype of DispatchVariableRef based off of index_type. This allows us to construct expressions using concrete containers unlike previous versions of InfiniteOpt which provides us a significant performance boost.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nraw_index::Int64: The raw index to be used in the index_type constructor.\nindex_type::DataType: The concrete AbstractInfOptIndex type/constructor.\nparam_index::Int: The index of a parameter in DependentParameters. This is ignored for other variable types.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.DispatchVariableRef","page":"Expressions","title":"InfiniteOpt.DispatchVariableRef","text":"DispatchVariableRef <: JuMP.AbstractVariableRef\n\nAn abstract type for variable references that are created from GeneralVariableRefs and are used to dispatch to the appropriate methods for that particular variable/parameter/measure type.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#InfiniteOpt.FiniteRef","page":"Expressions","title":"InfiniteOpt.FiniteRef","text":"FiniteRef <: DispatchVariableRef\n\nAn abstract type for variable references that are finite.\n\n\n\n\n\n","category":"type"},{"location":"manual/expression/#JuMP.owner_model-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.owner_model","text":"JuMP.owner_model(vref::GeneralVariableRef)::InfiniteModel\n\nExtend JuMP.owner_model to return the model where vref is stored.\n\nExample\n\njulia> owner_model(vref)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariable: 1\nDerivatives: 0\nMeasures: 0\n`FiniteVariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 1 constraint\n`FiniteVariableRef`-in-`MathOptInterface.LessThan{Float64}`: 1 constraint\nNames registered in the model: vref\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.owner_model-Tuple{DispatchVariableRef}","page":"Expressions","title":"JuMP.owner_model","text":"JuMP.owner_model(vref::DispatchVariableRef)::InfiniteModel\n\nExtend JuMP.owner_model to return the model where vref is stored.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.index-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.index","text":"JuMP.index(vref::GeneralVariableRef)::AbstractInfOptIndex\n\nExtend JuMP.index to return the appropriate index of vref.\n\nExample\n\njulia> index(vref)\nFiniteVariableIndex(1)\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.index-Tuple{DispatchVariableRef}","page":"Expressions","title":"JuMP.index","text":"JuMP.index(vref::DispatchVariableRef)::AbstractInfOptIndex\n\nExtend JuMP.index to return the appropriate index of vref.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.dispatch_variable_ref-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.dispatch_variable_ref","text":"dispatch_variable_ref(vef::GeneralVariableRef)::DispatchVariableRef\n\nReturn the concrete DispatchVariableRef this associated with vref. This relies on dispatch_variable_ref being extended for the index type, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.dispatch_variable_ref","page":"Expressions","title":"InfiniteOpt.dispatch_variable_ref","text":"dispatch_variable_ref(model::InfiniteModel, index::AbstractInfOptIndex)\n\nReturn the variable reference associated the type of index. This needs to be defined for each variable reference type.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#JuMP.name-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.name","text":"JuMP.name(vref::GeneralVariableRef)::String\n\nExtend JuMP.name to return the name of vref. It relies on JuMP.name being  defined for the underlying DispatchVariableRef, otherwise an ArgumentError  is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_name-Tuple{GeneralVariableRef, String}","page":"Expressions","title":"JuMP.set_name","text":"JuMP.set_name(vref::GeneralVariableRef, name::String)::Nothing\n\nExtend JuMP.set_name to set the name of vref. It relies on JuMP.set_name  being defined for the underlying DispatchVariableRef, otherwise an  ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_valid-Tuple{InfiniteModel, GeneralVariableRef}","page":"Expressions","title":"JuMP.is_valid","text":"JuMP.is_valid(model::InfiniteModel, vref::GeneralVariableRef)::Bool\n\nExtend JuMP.is_valid to return Bool if vref is a valid reference.\n\nExample\n\njulia> is_valid(model, vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_valid-Tuple{InfiniteModel, DispatchVariableRef}","page":"Expressions","title":"JuMP.is_valid","text":"JuMP.is_valid(model::InfiniteModel, vref::DispatchVariableRef)::Bool\n\nExtend JuMP.is_valid to return Bool if vref is a valid reference.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_infinite_variable-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_infinite_variable","text":"used_by_infinite_variable(vref::GeneralVariableRef)::Bool\n\nDefine used_by_infinite_variable for general variable references. It relies on used_by_infinite_variable being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_point_variable-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_point_variable","text":"used_by_point_variable(vref::GeneralVariableRef)::Bool\n\nDefine used_by_point_variable for general variable references. It relies on used_by_point_variable being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_semi_infinite_variable-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_semi_infinite_variable","text":"used_by_semi_infinite_variable(vref::GeneralVariableRef)::Bool\n\nDefine used_by_semi_infinite_variable for general variable references. It relies on used_by_semi_infinite_variable being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_derivative-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_derivative","text":"used_by_derivative(vref::GeneralVariableRef)::Bool\n\nDefine used_by_derivative for general variable references. It relies on used_by_derivative being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_measure-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(vref::GeneralVariableRef)::Bool\n\nDefine used_by_measure for general variable references. It relies on used_by_measure being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_objective-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_objective","text":"used_by_objective(vref::GeneralVariableRef)::Bool\n\nDefine used_by_objective for general variable references. It relies on used_by_objective being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.used_by_constraint-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(vref::GeneralVariableRef)::Bool\n\nDefine used_by_constraint for general variable references. It relies on used_by_constraint being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.is_used-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.is_used","text":"is_used(vref::GeneralVariableRef)::Bool\n\nDefine is_used for general variable references. It relies on is_used being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_derivative_constraints-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.has_derivative_constraints","text":"has_derivative_constraints(vref::GeneralVariableRef)::Bool\n\nDefine has_derivative_constraints for general variable references. It relies on has_derivative_constraints being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_value-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.parameter_value","text":"parameter_value(prefs; [kwargs...])\n\nDefine parameter_value for general variable references. It relies on parameter_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_value-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.set_value","text":"JuMP.set_value(vref::DispatchVariableRef, value::Real)::Nothing\n\nExtend JuMP.set_value to set the value of vref. It relies on JuMP.set_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.infinite_domain-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(prefs; [kwargs...])\n\nDefine infinite_domain for general variable references. It relies on infinite_domain being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.infinite_domain-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(prefs; [kwargs...])\n\nDefine infinite_domain for general variable references. It relies on infinite_domain being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_infinite_domain-Tuple{GeneralVariableRef, InfiniteScalarDomain}","page":"Expressions","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(pref::GeneralVariableRef, domain::InfiniteScalarDomain)::Nothing\n\nSpecify the scalar infinite domain of the infinite parameter pref to domain. Note this will reset/delete all the supports contained in the underlying parameter object. Also, errors if pref is used by a measure. An ArgumentError is thrown if pref is not an infinite parameter.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_infinite_domain-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}, InfiniteArrayDomain}","page":"Expressions","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(prefs::AbstractArray{<:GeneralVariableRef},\n                 domain::InfiniteArrayDomain)::Nothing\n\nSpecify the multi-dimensional infinite domain of the dependent infinite parameters prefs to domain. Note this will reset/delete all the supports contained in the underlying DependentParameters object. This will error if the not all of the dependent infinite parameters are included or if any of them are used by measures. An ArgumentError is thrown if prefs are not dependent infinite parameters.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.num_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.num_supports","text":"num_supports(prefs; [kwargs...])\n\nDefine num_supports for general variable references. It relies on num_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.num_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.num_supports","text":"num_supports(prefs; [kwargs...])\n\nDefine num_supports for general variable references. It relies on num_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.has_supports","text":"has_supports(prefs; [kwargs...])\n\nDefine has_supports for general variable references. It relies on has_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.has_supports","text":"has_supports(prefs; [kwargs...])\n\nDefine has_supports for general variable references. It relies on has_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.supports","text":"supports(expr::JuMP.AbstractJuMPScalar; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel,\n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the support associated with expr. Errors if expr is not associated with the constraint mappings stored in optimizer_model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of expression_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  expressions are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(cref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\nsupports(prefs; [kwargs...])\n\nDefine supports for general variable references. It relies on supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.supports","text":"supports(prefs; [kwargs...])\n\nDefine supports for general variable references. It relies on supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_supports-Tuple{GeneralVariableRef, Union{Real, Vector{var\"#s40\"} where var\"#s40\"<:Real}}","page":"Expressions","title":"InfiniteOpt.set_supports","text":"set_supports(pref::GeneralVariableRef, supports::Union{Real, Vector{<:Real}};\n             [force::Bool = false])::Nothing\n\nSet the support points associated with a single infinite parameter pref. An ArgumentError is thrown if pref is not an independent infinite parameter.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}, Union{Matrix{var\"#s39\"} where var\"#s39\"<:Real, Vector{var\"#s38\"} where var\"#s38\"<:(AbstractArray{var\"#s37\", N} where {var\"#s37\"<:Real, N})}}","page":"Expressions","title":"InfiniteOpt.set_supports","text":"set_supports(\n    prefs::Union{Vector{GeneralVariableRef}, AbstractArray{<:GeneralVariableRef}},\n    supports::Union{Array{<:Real, 2}, Vector{<:AbstractArray{<:Real}}};\n    [force::Bool = false]\n    )::Nothing\n\nSet the support points associated with dependent infinite parameters prefs. An ArgumentError is thrown if prefs is are not dependent infinite parameters.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.add_supports-Tuple{GeneralVariableRef, Union{Real, Vector{var\"#s40\"} where var\"#s40\"<:Real}}","page":"Expressions","title":"InfiniteOpt.add_supports","text":"add_supports(pref::GeneralVariableRef,\n             supports::Union{Real, Vector{<:Real}})::Nothing\n\nAdd the support points supports to a single infinite parameter pref. An ArgumentError is thrown if pref is not an independent infinite parameter.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.add_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}, Union{Matrix{var\"#s39\"} where var\"#s39\"<:Real, Vector{var\"#s38\"} where var\"#s38\"<:(AbstractArray{var\"#s37\", N} where {var\"#s37\"<:Real, N})}}","page":"Expressions","title":"InfiniteOpt.add_supports","text":"add_supports(\n    prefs::Union{Vector{GeneralVariableRef}, AbstractArray{<:GeneralVariableRef}},\n    supports::Union{Array{<:Real, 2}, Vector{<:AbstractArray{<:Real}}}\n    )::Nothing\n\nAdd the support points supports to the dependent infinite parameters prefs. An ArgumentError is thrown if prefs is are not dependent infinite parameters.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.delete_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.delete_supports","text":"delete_supports(prefs; [kwargs...])\n\nDefine delete_supports for general variable references. It relies on delete_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.delete_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.delete_supports","text":"delete_supports(prefs; [kwargs...])\n\nDefine delete_supports for general variable references. It relies on delete_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.fill_in_supports!-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(prefs; [kwargs...])\n\nDefine fill_in_supports! for general variable references. It relies on fill_in_supports! being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.fill_in_supports!-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(prefs; [kwargs...])\n\nDefine fill_in_supports! for general variable references. It relies on fill_in_supports! being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_parameter_refs-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refsc(vref::GeneralVariableRef)\n\nDefine raw_parameter_refs for general variable references. It relies on raw_parameter_refs being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_refs-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.parameter_refs","text":"parameter_refsc(vref::GeneralVariableRef)\n\nDefine parameter_refs for general variable references. It relies on parameter_refs being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_list-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.parameter_list","text":"parameter_listc(vref::GeneralVariableRef)\n\nDefine parameter_list for general variable references. It relies on parameter_list being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_function-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.raw_function","text":"raw_function(prefs; [kwargs...])\n\nDefine raw_function for general variable references. It relies on raw_function being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.infinite_variable_ref-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.infinite_variable_ref","text":"infinite_variable_refc(vref::GeneralVariableRef)\n\nDefine infinite_variable_ref for general variable references. It relies on infinite_variable_ref being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.eval_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.eval_supports","text":"eval_supportsc(vref::GeneralVariableRef)\n\nDefine eval_supports for general variable references. It relies on eval_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.raw_parameter_values-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.raw_parameter_values","text":"raw_parameter_valuesc(vref::GeneralVariableRef)\n\nDefine raw_parameter_values for general variable references. It relies on raw_parameter_values being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.parameter_values-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.parameter_values","text":"parameter_valuesc(vref::GeneralVariableRef)\n\nDefine parameter_values for general variable references. It relies on parameter_values being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.significant_digits-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.significant_digits","text":"significant_digits(prefs; [kwargs...])\n\nDefine significant_digits for general variable references. It relies on significant_digits being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.measure_function-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.measure_function","text":"measure_function(mref::GeneralVariableRef)\n\nDefine measure_function for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.measure_data-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.measure_data","text":"measure_data(mref::GeneralVariableRef)\n\nDefine measure_data for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.is_analytic-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.is_analytic","text":"is_analytic(mref::GeneralVariableRef)\n\nDefine is_analytic for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.derivative_argument-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.derivative_argument","text":"derivative_argument(dref::GeneralVariableRef)\n\nDefine derivative_argument for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.operator_parameter-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.operator_parameter","text":"operator_parameter(dref::GeneralVariableRef)\n\nDefine operator_parameter for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.derivative_method-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.derivative_method","text":"derivative_method(prefs; [kwargs...])\n\nDefine derivative_method for general variable references. It relies on derivative_method being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.evaluate-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.evaluate","text":"evaluate(dref::GeneralVariableRef)\n\nDefine evaluate for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.derivative_constraints-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.derivative_constraints","text":"derivative_constraints(dref::GeneralVariableRef)\n\nDefine derivative_constraints for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.delete_derivative_constraints-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.delete_derivative_constraints","text":"delete_derivative_constraints(dref::GeneralVariableRef)\n\nDefine delete_derivative_constraints for general variable references. Errors if dref does not correspond to a DerivativeRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.add_generative_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.add_generative_supports","text":"add_generative_supports(prefs; [kwargs...])\n\nDefine add_generative_supports for general variable references. It relies on add_generative_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_derivative_method-Tuple{GeneralVariableRef, AbstractDerivativeMethod}","page":"Expressions","title":"InfiniteOpt.set_derivative_method","text":"set_derivative_method(pref::GeneralVariableRef,\n                      method::AbstractDerivativeMethod\n                      )::Nothing\n\nSpecify the numerical derivative evaluation technique associated with pref. An ArgumentError is thrown if pref is not an infinite parameter.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_generative_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.has_generative_supports","text":"has_generative_supports(prefs; [kwargs...])\n\nDefine has_generative_supports for general variable references. It relies on has_generative_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.has_internal_supports-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.has_internal_supports","text":"has_internal_supports(prefs; [kwargs...])\n\nDefine has_internal_supports for general variable references. It relies on has_internal_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete-Tuple{InfiniteModel, GeneralVariableRef}","page":"Expressions","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, vref::GeneralVariableRef)::Nothing\n\nExtend JuMP.delete to delete vref and its dependencies. It relies on  JuMP.delete being defined for the underlying DispatchVariableRef, otherwise  an ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete-Tuple{InfiniteModel, AbstractArray{var\"#s40\", N} where {var\"#s40\"<:GeneralVariableRef, N}}","page":"Expressions","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel,\n            prefs::AbstractArray{<:GeneralVariableRef})::Nothing\n\nExtend JuMP.delete to delete a group of dependent infinite parameters and their dependencies. An ArgumentError is thrown if prefs are not dependent infinite parameters.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.has_lower_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(vref::GeneralVariableRef)\n\nDefine JuMP.has_lower_bound for general variable references. It relies on JuMP.has_lower_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.lower_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.lower_bound","text":"JuMP.lower_bound(vref::GeneralVariableRef)\n\nDefine JuMP.lower_bound for general variable references. It relies on JuMP.lower_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_lower_bound-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(vref::GeneralVariableRef, value::Real)::Nothing\n\nDefine JuMP.set_lower_bound for general variable references. It relies on JuMP.set_lower_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.LowerBoundRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.LowerBoundRef","text":"JuMP.LowerBoundRef(vref::GeneralVariableRef)\n\nDefine JuMP.LowerBoundRef for general variable references. It relies on JuMP.LowerBoundRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete_lower_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.delete_lower_bound","text":"JuMP.delete_lower_bound(vref::GeneralVariableRef)\n\nDefine JuMP.delete_lower_bound for general variable references. It relies on JuMP.delete_lower_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.has_upper_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(vref::GeneralVariableRef)\n\nDefine JuMP.has_upper_bound for general variable references. It relies on JuMP.has_upper_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.upper_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.upper_bound","text":"JuMP.upper_bound(vref::GeneralVariableRef)\n\nDefine JuMP.upper_bound for general variable references. It relies on JuMP.upper_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_upper_bound-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(vref::GeneralVariableRef, value::Real)::Nothing\n\nDefine JuMP.set_upper_bound for general variable references. It relies on JuMP.set_upper_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.UpperBoundRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.UpperBoundRef","text":"JuMP.UpperBoundRef(vref::GeneralVariableRef)\n\nDefine JuMP.UpperBoundRef for general variable references. It relies on JuMP.UpperBoundRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.delete_upper_bound-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.delete_upper_bound","text":"JuMP.delete_upper_bound(vref::GeneralVariableRef)\n\nDefine JuMP.delete_upper_bound for general variable references. It relies on JuMP.delete_upper_bound being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_fixed-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.is_fixed","text":"JuMP.is_fixed(vref::GeneralVariableRef)\n\nDefine JuMP.is_fixed for general variable references. It relies on JuMP.is_fixed being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.fix_value-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.fix_value","text":"JuMP.fix_value(vref::GeneralVariableRef)\n\nDefine JuMP.fix_value for general variable references. It relies on JuMP.fix_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.fix-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.fix","text":"JuMP.fix(vref::GeneralVariableRef, value::Real; force::Bool = false)::Nothing\n\nDefine JuMP.fix for general variable references. It relies on JuMP.fix being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.FixRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.FixRef","text":"JuMP.FixRef(vref::GeneralVariableRef)\n\nDefine JuMP.FixRef for general variable references. It relies on JuMP.FixRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.unfix-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.unfix","text":"JuMP.unfix(vref::GeneralVariableRef)\n\nDefine JuMP.unfix for general variable references. It relies on JuMP.unfix being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.start_value-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.start_value","text":"JuMP.start_value(vref::GeneralVariableRef)\n\nDefine JuMP.start_value for general variable references. It relies on JuMP.start_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_start_value-Tuple{GeneralVariableRef, Real}","page":"Expressions","title":"JuMP.set_start_value","text":"JuMP.set_start_value(vref::GeneralVariableRef, value::Real)::Nothing\n\nDefine JuMP.set_start_value for general variable references. It relies on JuMP.set_start_value being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.start_value_function-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.start_value_function","text":"start_value_functionc(vref::GeneralVariableRef)\n\nDefine start_value_function for general variable references. It relies on start_value_function being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.set_start_value_function-Tuple{GeneralVariableRef, Any}","page":"Expressions","title":"InfiniteOpt.set_start_value_function","text":"set_start_value_function(vref::GeneralVariableRef, start::Union{Real, Function})::Nothing\n\nSet the start value function of vref. It relies on set_start_value_function being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt.reset_start_value_function-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt.reset_start_value_function","text":"reset_start_value_functionc(vref::GeneralVariableRef)\n\nDefine reset_start_value_function for general variable references. It relies on reset_start_value_function being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_binary-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.is_binary","text":"JuMP.is_binary(vref::GeneralVariableRef)\n\nDefine JuMP.is_binary for general variable references. It relies on JuMP.is_binary being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_binary-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.set_binary","text":"JuMP.set_binary(vref::GeneralVariableRef)\n\nDefine JuMP.set_binary for general variable references. It relies on JuMP.set_binary being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.BinaryRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.BinaryRef","text":"JuMP.BinaryRef(vref::GeneralVariableRef)\n\nDefine JuMP.BinaryRef for general variable references. It relies on JuMP.BinaryRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.unset_binary-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.unset_binary","text":"JuMP.unset_binary(vref::GeneralVariableRef)\n\nDefine JuMP.unset_binary for general variable references. It relies on JuMP.unset_binary being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.is_integer-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.is_integer","text":"JuMP.is_integer(vref::GeneralVariableRef)\n\nDefine JuMP.is_integer for general variable references. It relies on JuMP.is_integer being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.set_integer-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.set_integer","text":"JuMP.set_integer(vref::GeneralVariableRef)\n\nDefine JuMP.set_integer for general variable references. It relies on JuMP.set_integer being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.IntegerRef-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.IntegerRef","text":"JuMP.IntegerRef(vref::GeneralVariableRef)\n\nDefine JuMP.IntegerRef for general variable references. It relies on JuMP.IntegerRef being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#JuMP.unset_integer-Tuple{GeneralVariableRef}","page":"Expressions","title":"JuMP.unset_integer","text":"JuMP.unset_integer(vref::GeneralVariableRef)\n\nDefine JuMP.unset_integer for general variable references. It relies on JuMP.unset_integer being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#Developer-Internal-Methods","page":"Expressions","title":"Developer Internal Methods","text":"","category":"section"},{"location":"manual/expression/","page":"Expressions","title":"Expressions","text":"InfiniteOpt._add_data_object\nInfiniteOpt._data_dictionary\nInfiniteOpt._data_object\nInfiniteOpt._delete_data_object\nInfiniteOpt._core_variable_object\nInfiniteOpt._core_variable_object(::GeneralVariableRef)\nInfiniteOpt._set_core_variable_object\nInfiniteOpt._infinite_variable_dependencies\nInfiniteOpt._infinite_variable_dependencies(::GeneralVariableRef)\nInfiniteOpt._semi_infinite_variable_dependencies\nInfiniteOpt._semi_infinite_variable_dependencies(::GeneralVariableRef)\nInfiniteOpt._point_variable_dependencies\nInfiniteOpt._point_variable_dependencies(::GeneralVariableRef)\nInfiniteOpt._derivative_dependencies\nInfiniteOpt._derivative_dependencies(::GeneralVariableRef)\nInfiniteOpt._measure_dependencies\nInfiniteOpt._measure_dependencies(::GeneralVariableRef)\nInfiniteOpt._generative_measures\nInfiniteOpt._generative_measures(::GeneralVariableRef)\nInfiniteOpt._constraint_dependencies\nInfiniteOpt._constraint_dependencies(::GeneralVariableRef)\nInfiniteOpt._derivative_constraint_dependencies\nInfiniteOpt._derivative_constraint_dependencies(::GeneralVariableRef)\nInfiniteOpt._parameter_number\nInfiniteOpt._parameter_number(::GeneralVariableRef)\nInfiniteOpt._object_number\nInfiniteOpt._object_number(::GeneralVariableRef)","category":"page"},{"location":"manual/expression/#InfiniteOpt._add_data_object","page":"Expressions","title":"InfiniteOpt._add_data_object","text":"_add_data_object(model::InfiniteModel, object::AbstractDataObject)::ObjectIndex\n\nAdd object to the appropriate CleverDict in model and return the its index. This needs to be defined for the type of object. These definitions need to use MOIUC.add_item to add the object to the CleverDict.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._data_dictionary","page":"Expressions","title":"InfiniteOpt._data_dictionary","text":"_data_dictionary(vref::DispatchVariableRef)::MOIUC.CleverDict\n\nReturn the CleverDict that stores data objects for the type of vref. This needs to be defined for the type of vref.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._data_object","page":"Expressions","title":"InfiniteOpt._data_object","text":"_data_object(vref::DispatchVariableRef)::AbstractDataObject\n\nReturn the data object associated with vref, in other words the object its index points to in the InfiniteModel. This needs to be defined for the type of vref. This should use _data_dictionary to access the CleverDict that the object is stored in.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._delete_data_object","page":"Expressions","title":"InfiniteOpt._delete_data_object","text":"_delete_data_object(vref::DispatchVariableRef)::Nothing\n\nDelete the concrete AbstractDataObject associated with vref.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._core_variable_object","page":"Expressions","title":"InfiniteOpt._core_variable_object","text":"_core_variable_object(vref::DispatchVariableRef)::Union{InfOptParameter, InfOptVariable, Measure}\n\nReturn the core object that vref points to. This needs to be extended for type of vref. This should use _data_object to access the data object where the variable object is stored.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._core_variable_object-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._core_variable_object","text":"_core_variable_object(vref::GeneralVariableRef)::Union{InfOptParameter, InfOptVariable, Measure}\n\nReturn the core object that vref points to. This is enabled with appropriate definitions of _core_variable_object for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._set_core_variable_object","page":"Expressions","title":"InfiniteOpt._set_core_variable_object","text":"_set_core_variable_object(vref::DispatchVariableRef, object)::Nothing\n\nSets the core object that vref points to object. This needs to be extended for types of vref and object. This should use _data_object to access the data object where the variable object is stored.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._infinite_variable_dependencies","page":"Expressions","title":"InfiniteOpt._infinite_variable_dependencies","text":"_infinite_variable_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._infinite_variable_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._infinite_variable_dependencies","text":"_infinite_variable_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _infinite_variable_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._semi_infinite_variable_dependencies","page":"Expressions","title":"InfiniteOpt._semi_infinite_variable_dependencies","text":"_semi_infinite_variable_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._semi_infinite_variable_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._semi_infinite_variable_dependencies","text":"_semi_infinite_variable_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _semi_infinite_variable_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._point_variable_dependencies","page":"Expressions","title":"InfiniteOpt._point_variable_dependencies","text":"_point_variable_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._point_variable_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._point_variable_dependencies","text":"_point_variable_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _point_variable_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._derivative_dependencies","page":"Expressions","title":"InfiniteOpt._derivative_dependencies","text":"_derivative_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._derivative_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._derivative_dependencies","text":"_derivative_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _derivative_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._measure_dependencies","page":"Expressions","title":"InfiniteOpt._measure_dependencies","text":"_measure_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._measure_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._measure_dependencies","text":"_measure_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _measure_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._generative_measures","page":"Expressions","title":"InfiniteOpt._generative_measures","text":"_generative_measures(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._generative_measures-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._generative_measures","text":"_generative_measures(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _generative_measures for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._constraint_dependencies","page":"Expressions","title":"InfiniteOpt._constraint_dependencies","text":"_constraint_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._constraint_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._constraint_dependencies","text":"_constraint_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _constraint_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._derivative_constraint_dependencies","page":"Expressions","title":"InfiniteOpt._derivative_constraint_dependencies","text":"_derivative_constraint_dependencies(vref::DispatchVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This needs to be extended for type of vref. This should use _data_object to access the data object where the name is stored if appropriate.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._derivative_constraint_dependencies-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._derivative_constraint_dependencies","text":"_derivative_constraint_dependencies(vref::GeneralVariableRef)::Vector{AbstractInfOptIndex}\n\nReturn the indices of these entities that depend on vref. This is enabled with appropriate definitions of _derivative_constraint_dependencies for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._parameter_number","page":"Expressions","title":"InfiniteOpt._parameter_number","text":"_parameter_number(pref::DispatchVariableRef)::Int\n\nReturn the parameter creation number for pref assuming it is an infinite parameter. This needs to be defined for the type of pref. This should use the _data_object to get the number.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._parameter_number-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._parameter_number","text":"_parameter_number(pref::GeneralVariableRef)::Int\n\nReturn the parameter creation number for pref assuming it is an infinite parameter. It relies on _parameter_number being properly defined for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/expression/#InfiniteOpt._object_number","page":"Expressions","title":"InfiniteOpt._object_number","text":"_object_number(pref::DispatchVariableRef)::Int\n\nReturn the object number for pref assuming it is an infinite parameter. This needs to be defined for the type of pref. This should use the _data_object to get the number.\n\n\n\n\n\n","category":"function"},{"location":"manual/expression/#InfiniteOpt._object_number-Tuple{GeneralVariableRef}","page":"Expressions","title":"InfiniteOpt._object_number","text":"_object_number(pref::GeneralVariableRef)::Int\n\nReturn the object number for pref assuming it is an infinite parameter. It relies on _object_number being properly defined for the underlying DispatchVariableRef, otherwise an MethodError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Optimal Control/pandemic_control.jl\"","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Pandemic-Control","page":"Pandemic Control","title":"Pandemic Control","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"A stochastic optimal control problem were we seek to control the spread of a contagion with uncertain parameters.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Problem-Statement-and-Model","page":"Pandemic Control","title":"Problem Statement and Model","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"We wish to determine optimal social distancing policy to control spread of a contagion and minimize the economic impact of doing so. We'll model the spread of the virus through a given population using the SEIR Model which considers 4 population subsets that follow:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"textSusceptible rightarrow textExposed rightarrow textInfectious rightarrow textRecovered","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"This model is formalized as:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"begingathered\nfracds(t)dt = (u(t) - 1)beta si(t) \nfracde(t)dt = (1 - u(t))beta si(t) - xi e(t) \nfracdi(t)dt = xi e(t) - gamma i(t)\nfracdr(t)dt = gamma i(t) \nsi(t) = s(t) i(t)\nendgathered","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"where s(t) is the susceptible population, e(t) is the exposed population, i(t) is the infectious population, r(t) is the recovered population, and u(t) in 0 1 is the enforced population isolation (social distancing). The other values denote model parameters that will be specific to the contagion in question.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"For our case study, we'll consider the incubation constant xi to be an uncertain parameter xi sim mathcalU(underlinexi overlinexi). This introduces to infinite dependencies into our model: time t and uncertain incubation xi. Moreover we'll seek to minimize the isolation measures u(t) that are implemented while limiting the amount of infected individuals i(t) to be below a threshold i_max. Thus, the optimization problem becomes:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"beginaligned\nmin_  int_t in mathcalD_t u(t) dt \n textst  fracpartial s(t xi)partial t = (u(t) - 1)beta si(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial e(t xi)partial t = (1 - u(t))beta si(t xi) - xi e(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial i(t xi)partial t = xi e(t xi) - gamma i(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial r(t xi)partial t = gamma i(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n si(t xi) = s(t xi) i(t xi)  forall forall t in mathcalD_t xi in mathcalD_xi \n s(0 xi) = s_0 e(0 xi) = e_0 i(0 xi) = i_0 r(0 xi) = r_0  forall xi in mathcalD_xi \n i(t xi) leq i_max  forall t in mathcalD_t xi in mathcalD_xi \n u(t) in 0 08 \n xi sim mathcalU(underlinexi overlinexi)\nendaligned","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Notice that the SEIR model variables now all depend on both t and xi, except u(t) which means we need to decide our policy before knowing the true value of xi.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Modeling-in-InfiniteOpt","page":"Pandemic Control","title":"Modeling in InfiniteOpt","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Traditional modeling frameworks like JuMP cannot be used to solve this model directly because it is infinite, contains partial difference equations, and contains a time expectation. We would first have to transform it into a transcripted (discretized) variant by applying all the necessary techniques (e.g., orthogonal collocation over finite elements, trapezoid rule, etc.) which is very combersome and nontrivial in this case.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"However, we can directly model the above form in InfiniteOpt and it will take care of the rest! Let's get started by importing the needed packages and specifying the model parameters that we'll need.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"using InfiniteOpt, Ipopt, Distributions, Plots\n\n# Set the SEIR parameters\nγ = 0.303\nβ = 0.727\nN = 1e5\nξ_min = 0.1\nξ_max = 0.6\n\n# Set the domain information\ni_max = 0.02\nt0 = 0\ntf = 200\nextra_ts = [0.001, 0.002, 0.004, 0.008, 0.02, 0.04, 0.08, 0.2, 0.4, 0.8]\nnum_samples = 5\n\n# Set the intial condition values\ne0 = 1 / N\ni0 = 0\nr0 = 0\ns0 = 1 - 1 / N;\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Model-Initialization","page":"Pandemic Control","title":"Model Initialization","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Now let's setup our infinite model and select Ipopt as our optimizer that will be used to solve it. This is accomplished making an InfiniteModel:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"model = InfiniteModel(Ipopt.Optimizer);\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Infinite-Parameter-Definition","page":"Pandemic Control","title":"Infinite Parameter Definition","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"We now need to define the infinite parameters t in t_0 t_f and xi sim mathcalU(underlinexi overlinexi). This is accomplished with @infinite_parameter. We'll also include the following specifications:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"use 51 equidistant time points\nspecify that orgothonal collocation using 2 nodes should be used for time derivatives\nspecify that the number of random scenarios should equal num_samples\nadd extra_ts as extra time points","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"@infinite_parameter(model, t ∈ [t0, tf], num_supports = 51,\n                    derivative_method = OrthogonalCollocation(2))\n@infinite_parameter(model, ξ ~ Uniform(ξ_min, ξ_max), num_supports = num_samples)\nadd_supports(t, extra_ts)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Infinite-Variable-Definition","page":"Pandemic Control","title":"Infinite Variable Definition","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"With our infinite parameters defined, we can now define our infinite variables:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"s(t xi) geq 0\ne(t xi) geq 0\ni(t xi) geq 0\nr(t xi) geq 0\nsi(t xi)\n0 leq u(t) leq 08","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"@variable(model, s ≥ 0, Infinite(t, ξ))\n@variable(model, e ≥ 0, Infinite(t, ξ))\n@variable(model, i ≥ 0, Infinite(t, ξ))\n@variable(model, r ≥ 0, Infinite(t, ξ))\n@variable(model, si, Infinite(t, ξ))\n@variable(model, 0 ≤ u ≤ 0.8, Infinite(t), start = 0.2)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"u(t)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Objective-Definition","page":"Pandemic Control","title":"Objective Definition","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Now its time to add the objective min  int_t in mathcalD_t u(t) dt using @objective:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"@objective(model, Min, ∫(u, t))","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"∫{t ∈ [0, 200]}[u(t)]","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Constraint-Definition","page":"Pandemic Control","title":"Constraint Definition","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"The last step now to defining our model is to define the constraints using @constraint. This will involve defining the initial conditions:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"s(0 xi) = s_0 e(0 xi) = e_0 i(0 xi) = i_0 r(0 xi) = r_0  forall xi in mathcalD_xi","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"the model equations:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"beginaligned\n fracpartial s(t xi)partial t = (u(t) - 1)beta si(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial e(t xi)partial t = (1 - u(t))beta si(t xi) - xi e(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial i(t xi)partial t = xi e(t xi) - gamma i(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n fracpartial r(t xi)partial t = gamma i(t xi)  forall t in mathcalD_t xi in mathcalD_xi \n si(t xi) = s(t xi) i(t xi)  forall forall t in mathcalD_t xi in mathcalD_xi \nendaligned","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"and the infection limit constraint:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"i(t xi) leq i_max  forall t in mathcalD_t xi in mathcalD_xi","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"# Define the initial conditions\n@constraint(model, s(0, ξ) == s0)\n@constraint(model, e(0, ξ) == e0)\n@constraint(model, i(0, ξ) == i0)\n@constraint(model, r(0, ξ) == r0)\n\n# Define the SEIR equations\n@constraint(model, s_constr, ∂(s, t) == -(1 - u) * β * si)\n@constraint(model, e_constr, ∂(e, t) == (1 - u) * β * si - ξ * e)\n@constraint(model, i_constr, ∂(i, t) == ξ * e - γ * i)\n@constraint(model, r_constr, ∂(r, t) == γ * i)\n@constraint(model, si == s * i)\n\n# Define the infection rate limit\n@constraint(model, imax_constr, i ≤ i_max)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"imax_constr : i(t, ξ) ≤ 0.02, ∀ t ∈ [0, 200], ξ ~ Uniform","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Display-the-Infinite-Model","page":"Pandemic Control","title":"Display the Infinite Model","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Let's display model now that it is fully defined:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"print(model)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Min ∫{t ∈ [0, 200]}[u(t)]\nSubject to\n s(t, ξ) ≥ 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n e(t, ξ) ≥ 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n i(t, ξ) ≥ 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n r(t, ξ) ≥ 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n u(t) ≥ 0.0, ∀ t ∈ [0, 200]\n u(t) ≤ 0.8, ∀ t ∈ [0, 200]\n s(0, ξ) = 0.99999, ∀ ξ ~ Uniform\n e(0, ξ) = 1.0e-5, ∀ ξ ~ Uniform\n i(0, ξ) = 0.0, ∀ ξ ~ Uniform\n r(0, ξ) = 0.0, ∀ ξ ~ Uniform\n s_constr : -0.727 si(t, ξ)*u(t) + ∂/∂t[s(t, ξ)] + 0.727 si(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n e_constr : 0.727 si(t, ξ)*u(t) + ξ*e(t, ξ) + ∂/∂t[e(t, ξ)] - 0.727 si(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n i_constr : -e(t, ξ)*ξ + ∂/∂t[i(t, ξ)] + 0.303 i(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n r_constr : ∂/∂t[r(t, ξ)] - 0.303 i(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n -i(t, ξ)*s(t, ξ) + si(t, ξ) = 0.0, ∀ t ∈ [0, 200], ξ ~ Uniform\n imax_constr : i(t, ξ) ≤ 0.02, ∀ t ∈ [0, 200], ξ ~ Uniform\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Optimize-the-Model","page":"Pandemic Control","title":"Optimize the Model","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Let's solve our model and find the optimal policy. All we have to do is invoke optimize! and the model will automatically be transformed solved behind the scenes:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"optimize!(model)","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"This is Ipopt version 3.13.4, running with linear solver mumps.\nNOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n\nNumber of nonzeros in equality constraint Jacobian...:     8805\nNumber of nonzeros in inequality constraint Jacobian.:      305\nNumber of nonzeros in Lagrangian Hessian.............:      915\n\nTotal number of variables............................:     2806\n                     variables with only lower bounds:     1220\n                variables with lower and upper bounds:       61\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:     2745\nTotal number of inequality constraints...............:      305\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:      305\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  4.0000000e+01 9.90e-01 4.00e+00  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1  1.2133698e+00 6.32e-01 2.47e+02  -1.0 9.90e-01    -  1.10e-02 3.62e-01f  1\n   2  1.4983271e+00 6.11e-01 2.40e+02  -1.0 7.49e-01    -  2.29e-01 3.25e-02f  1\n   3  2.8943680e+00 4.90e-01 2.02e+02  -1.0 6.11e-01    -  8.62e-01 1.99e-01f  1\n   4  2.8973644e+00 4.89e-01 2.00e+03  -1.0 5.54e-01    -  7.29e-02 1.33e-03h  1\n   5  3.5862378e+00 4.75e-01 6.31e+02  -1.0 4.19e+00    -  5.21e-04 2.88e-02h  1\n   6  3.6139816e+00 4.74e-01 6.23e+02  -1.0 5.01e+00    -  4.67e-03 9.83e-04h  1\n   7  3.7876815e+00 4.71e-01 6.43e+02  -1.0 3.90e+00    -  4.33e-03 7.76e-03h  1\n   8  4.4053669e+00 4.59e-01 3.31e+03  -1.0 3.86e+00    -  7.05e-03 2.56e-02h  1\n   9  4.8325839e+00 4.51e-01 3.33e+03  -1.0 3.52e+00    -  2.88e-02 1.74e-02h  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  10  5.0182899e+00 4.48e-01 3.33e+03  -1.0 3.08e+00    -  7.46e-03 6.65e-03h  1\n  11  5.3543635e+00 4.43e-01 3.25e+03  -1.0 5.04e+00    -  4.20e-03 9.81e-03h  1\n  12  6.0629684e+00 4.32e-01 3.19e+03  -1.0 2.36e+00    -  2.79e-02 2.52e-02h  1\n  13  7.5546829e+00 4.11e-01 2.93e+03  -1.0 2.24e+00    -  1.25e-02 4.93e-02h  1\n  14  8.4159224e+00 4.00e-01 2.85e+03  -1.0 1.99e+00    -  1.92e-02 2.70e-02h  1\n  15  1.1108121e+01 3.70e-01 2.59e+03  -1.0 1.81e+00    -  2.31e-02 7.35e-02h  1\n  16  1.2115483e+01 3.60e-01 2.53e+03  -1.0 1.43e+00    -  4.30e-02 2.77e-02h  1\n  17  2.0133265e+01 2.87e-01 2.11e+03  -1.0 1.41e+00    -  2.01e-02 2.03e-01h  1\n  18  3.3835993e+01 1.56e-01 9.08e+02  -1.0 6.55e-01    -  4.70e-02 4.57e-01h  1\n  19  4.1660769e+01 7.74e-02 5.71e+02  -1.0 4.64e-01    -  2.49e-01 5.03e-01h  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  20  4.7786979e+01 2.87e-02 1.81e+03  -1.0 3.52e-01    -  7.49e-02 6.29e-01h  1\n  21  5.0233907e+01 1.60e-02 1.01e+03  -1.0 3.49e-01    -  2.43e-01 4.42e-01h  1\n  22  5.1360041e+01 1.01e-02 6.38e+02  -1.0 4.97e-01    -  2.46e-01 3.66e-01h  1\n  23  5.3495083e+01 5.51e-03 7.67e+02  -1.0 5.29e-01    -  2.83e-01 4.57e-01h  1\n  24  5.4707476e+01 4.38e-03 6.49e+02  -1.0 4.80e-01    -  2.41e-01 2.06e-01h  1\n  25  5.5763155e+01 3.39e-03 5.00e+02  -1.0 9.67e-01    -  2.04e-01 2.26e-01h  1\n  26  5.6917753e+01 2.66e-03 4.68e+02  -1.0 4.81e-01    -  1.78e-01 2.14e-01h  1\n  27  5.8453625e+01 1.89e-03 7.68e+02  -1.0 2.67e-01    -  1.27e-01 2.92e-01h  1\n  28  5.9935751e+01 1.26e-03 1.49e+03  -1.0 3.95e-01    -  1.44e-01 3.30e-01h  1\n  29  6.0928979e+01 9.67e-04 1.51e+03  -1.0 3.19e-01    -  1.89e-01 2.36e-01h  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  30  6.1977065e+01 7.50e-04 1.63e+03  -1.0 2.51e-01    -  1.79e-01 2.24e-01h  1\n  31  6.3603098e+01 4.90e-04 3.85e+03  -1.0 2.69e-01    -  1.35e-01 3.47e-01h  1\n  32  6.5154979e+01 3.04e-04 6.52e+03  -1.0 3.19e-01    -  1.74e-01 3.79e-01h  1\n  33  6.6185185e+01 2.24e-04 6.02e+03  -1.0 4.58e-01    -  2.27e-01 2.66e-01h  1\n  34  6.6901134e+01 1.87e-04 1.48e+03  -1.0 3.91e-01    -  2.58e-01 1.65e-01h  1\n  35  6.8490066e+01 1.31e-04 8.03e+03  -1.0 4.38e-01    -  1.59e-01 2.99e-01H  1\n  36  6.9996747e+01 7.95e-05 8.09e+03  -1.0 2.86e-01    -  4.00e-01 4.49e-01H  1\n  37  7.1300053e+01 7.35e-05 2.08e+04  -1.0 3.21e-01    -  4.19e-01 5.47e-01H  1\n  38  7.2179654e+01 5.26e-05 5.40e+04  -1.0 2.73e-01    -  6.75e-01 8.50e-01H  1\n  39  7.2601821e+01 3.42e-06 1.08e+03  -1.0 1.45e-01    -  1.00e+00 1.00e+00H  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  40  7.1371230e+01 8.15e-05 5.87e+03  -1.7 9.28e-02    -  9.53e-01 9.52e-01f  1\n  41  7.0246537e+01 1.47e-04 2.39e+03  -1.7 1.61e-01    -  1.00e+00 9.36e-01f  1\n  42  7.0298679e+01 1.38e-05 1.04e+01  -1.7 6.66e-02    -  1.00e+00 1.00e+00f  1\n  43  6.9705725e+01 1.56e-05 2.85e+05  -3.8 1.13e-01    -  7.78e-01 6.35e-01f  1\n  44  6.9353670e+01 1.27e-05 2.36e+04  -3.8 1.94e-01    -  7.54e-01 8.18e-01f  1\n  45  6.9290565e+01 1.60e-06 2.86e+02  -3.8 2.15e-01    -  8.59e-01 8.85e-01f  1\n  46  6.9284012e+01 4.82e-08 6.61e+00  -3.8 2.02e-01    -  1.00e+00 1.00e+00f  1\n  47  6.9283976e+01 2.09e-10 8.39e-03  -3.8 5.99e-02    -  1.00e+00 1.00e+00h  1\n  48  6.9276342e+01 2.36e-09 1.57e+03  -5.7 1.16e-01    -  8.47e-01 9.53e-01f  1\n  49  6.9275893e+01 1.27e-11 3.80e-03  -5.7 8.28e-02    -  1.00e+00 1.00e+00f  1\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n  50  6.9275892e+01 1.96e-16 6.74e-08  -5.7 4.27e-04    -  1.00e+00 1.00e+00h  1\n  51  6.9275791e+01 3.91e-13 5.92e-01  -8.6 3.65e-03    -  9.97e-01 1.00e+00f  1\n  52  6.9275791e+01 1.11e-16 2.33e-10  -8.6 1.70e-05    -  1.00e+00 1.00e+00h  1\n\nNumber of Iterations....: 52\n\n                                   (scaled)                 (unscaled)\nObjective...............:   6.9275790998035603e+01    6.9275790998035603e+01\nDual infeasibility......:   2.3283064365386963e-10    2.3283064365386963e-10\nConstraint violation....:   1.1102230246251565e-16    1.1102230246251565e-16\nComplementarity.........:   2.5059567217454749e-09    2.5059567217454749e-09\nOverall NLP error.......:   2.5059567217454749e-09    2.5059567217454749e-09\n\n\nNumber of objective function evaluations             = 58\nNumber of objective gradient evaluations             = 53\nNumber of equality constraint evaluations            = 58\nNumber of inequality constraint evaluations          = 58\nNumber of equality constraint Jacobian evaluations   = 53\nNumber of inequality constraint Jacobian evaluations = 53\nNumber of Lagrangian Hessian evaluations             = 52\nTotal CPU secs in IPOPT (w/o function evaluations)   =      0.962\nTotal CPU secs in NLP function evaluations           =      0.027\n\nEXIT: Optimal Solution Found.\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Retrieve-and-Plot-the-Results","page":"Pandemic Control","title":"Retrieve and Plot the Results","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Now we can retrieve the optimal results and plot them to visualize the optimal policy. Note that the values of infinite variables will be returned as arrays corresponding to how the supports were used to discretize our model. We can retrieve our values using value.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Get the results:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"r_opt = value(r, ndarray = true) * 100 # make the population fractions into percentages\ns_opt = value(s, ndarray = true) * 100\ni_opt = value(i, ndarray = true) * 100\ne_opt = value(e, ndarray = true) * 100\nu_opt = value(u)\nobj_opt = objective_value(model)\nts = value(t)\nξs = value(ξ);\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Plot the values of r(t xi) and s(t xi) over time with confidence bounds:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"r_mean = mean(r_opt, dims = 2)\nr_std = std(r_opt, dims = 2)\nplot(ts, r_mean, label = \"r(t, ξ)\", linecolor = :red, background_color = :transparent)\nplot!(ts, r_mean + r_std, linecolor = :red, linestyle = :dash, linealpha = 0.4, label = \"\")\nplot!(ts, r_mean - r_std, linecolor = :red, linestyle = :dash, linealpha = 0.4, label = \"\")\n\ns_mean = mean(s_opt, dims = 2)\ns_std = std(s_opt, dims = 2)\nplot!(ts, s_mean, label = \"s(t, ξ)\", linecolor = :blue)\nplot!(ts, s_mean + s_std, linecolor = :blue, linestyle = :dash, linealpha = 0.4, label = \"\")\nplot!(ts, s_mean - s_std, linecolor = :blue, linestyle = :dash, linealpha = 0.4, label = \"\")\nylabel!(\"Pop. (%)\")\nxlabel!(\"Time (Days)\")","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip510\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip510)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<defs>\n  <clipPath id=\"clip511\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip510)\" d=\"\nM232.389 1423.18 L2352.76 1423.18 L2352.76 47.2441 L232.389 47.2441  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<defs>\n  <clipPath id=\"clip512\">\n    <rect x=\"232\" y=\"47\" width=\"2121\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  292.4,1423.18 292.4,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  792.486,1423.18 792.486,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1292.57,1423.18 1292.57,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1792.66,1423.18 1792.66,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2292.75,1423.18 2292.75,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  232.389,1423.18 2352.76,1423.18 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  292.4,1423.18 292.4,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  792.486,1423.18 792.486,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1292.57,1423.18 1292.57,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1792.66,1423.18 1792.66,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2292.75,1423.18 2292.75,1404.28 \n  \"/>\n<path clip-path=\"url(#clip510)\" d=\"M292.4 1454.1 Q288.789 1454.1 286.96 1457.66 Q285.154 1461.2 285.154 1468.33 Q285.154 1475.44 286.96 1479.01 Q288.789 1482.55 292.4 1482.55 Q296.034 1482.55 297.84 1479.01 Q299.668 1475.44 299.668 1468.33 Q299.668 1461.2 297.84 1457.66 Q296.034 1454.1 292.4 1454.1 M292.4 1450.39 Q298.21 1450.39 301.265 1455 Q304.344 1459.58 304.344 1468.33 Q304.344 1477.06 301.265 1481.67 Q298.21 1486.25 292.4 1486.25 Q286.59 1486.25 283.511 1481.67 Q280.455 1477.06 280.455 1468.33 Q280.455 1459.58 283.511 1455 Q286.59 1450.39 292.4 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M767.185 1451.02 L785.542 1451.02 L785.542 1454.96 L771.468 1454.96 L771.468 1463.43 Q772.486 1463.08 773.505 1462.92 Q774.523 1462.73 775.542 1462.73 Q781.329 1462.73 784.708 1465.9 Q788.088 1469.08 788.088 1474.49 Q788.088 1480.07 784.616 1483.17 Q781.144 1486.25 774.824 1486.25 Q772.648 1486.25 770.38 1485.88 Q768.134 1485.51 765.727 1484.77 L765.727 1480.07 Q767.81 1481.2 770.033 1481.76 Q772.255 1482.32 774.732 1482.32 Q778.736 1482.32 781.074 1480.21 Q783.412 1478.1 783.412 1474.49 Q783.412 1470.88 781.074 1468.77 Q778.736 1466.67 774.732 1466.67 Q772.857 1466.67 770.982 1467.08 Q769.13 1467.5 767.185 1468.38 L767.185 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M807.301 1454.1 Q803.69 1454.1 801.861 1457.66 Q800.056 1461.2 800.056 1468.33 Q800.056 1475.44 801.861 1479.01 Q803.69 1482.55 807.301 1482.55 Q810.935 1482.55 812.741 1479.01 Q814.569 1475.44 814.569 1468.33 Q814.569 1461.2 812.741 1457.66 Q810.935 1454.1 807.301 1454.1 M807.301 1450.39 Q813.111 1450.39 816.167 1455 Q819.245 1459.58 819.245 1468.33 Q819.245 1477.06 816.167 1481.67 Q813.111 1486.25 807.301 1486.25 Q801.491 1486.25 798.412 1481.67 Q795.357 1477.06 795.357 1468.33 Q795.357 1459.58 798.412 1455 Q801.491 1450.39 807.301 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1252.18 1481.64 L1259.82 1481.64 L1259.82 1455.28 L1251.51 1456.95 L1251.51 1452.69 L1259.77 1451.02 L1264.45 1451.02 L1264.45 1481.64 L1272.09 1481.64 L1272.09 1485.58 L1252.18 1485.58 L1252.18 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1291.53 1454.1 Q1287.92 1454.1 1286.09 1457.66 Q1284.29 1461.2 1284.29 1468.33 Q1284.29 1475.44 1286.09 1479.01 Q1287.92 1482.55 1291.53 1482.55 Q1295.17 1482.55 1296.97 1479.01 Q1298.8 1475.44 1298.8 1468.33 Q1298.8 1461.2 1296.97 1457.66 Q1295.17 1454.1 1291.53 1454.1 M1291.53 1450.39 Q1297.34 1450.39 1300.4 1455 Q1303.48 1459.58 1303.48 1468.33 Q1303.48 1477.06 1300.4 1481.67 Q1297.34 1486.25 1291.53 1486.25 Q1285.72 1486.25 1282.64 1481.67 Q1279.59 1477.06 1279.59 1468.33 Q1279.59 1459.58 1282.64 1455 Q1285.72 1450.39 1291.53 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1321.69 1454.1 Q1318.08 1454.1 1316.25 1457.66 Q1314.45 1461.2 1314.45 1468.33 Q1314.45 1475.44 1316.25 1479.01 Q1318.08 1482.55 1321.69 1482.55 Q1325.33 1482.55 1327.13 1479.01 Q1328.96 1475.44 1328.96 1468.33 Q1328.96 1461.2 1327.13 1457.66 Q1325.33 1454.1 1321.69 1454.1 M1321.69 1450.39 Q1327.5 1450.39 1330.56 1455 Q1333.64 1459.58 1333.64 1468.33 Q1333.64 1477.06 1330.56 1481.67 Q1327.5 1486.25 1321.69 1486.25 Q1315.88 1486.25 1312.8 1481.67 Q1309.75 1477.06 1309.75 1468.33 Q1309.75 1459.58 1312.8 1455 Q1315.88 1450.39 1321.69 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1752.27 1481.64 L1759.9 1481.64 L1759.9 1455.28 L1751.59 1456.95 L1751.59 1452.69 L1759.86 1451.02 L1764.53 1451.02 L1764.53 1481.64 L1772.17 1481.64 L1772.17 1485.58 L1752.27 1485.58 L1752.27 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1781.66 1451.02 L1800.02 1451.02 L1800.02 1454.96 L1785.95 1454.96 L1785.95 1463.43 Q1786.96 1463.08 1787.98 1462.92 Q1789 1462.73 1790.02 1462.73 Q1795.81 1462.73 1799.19 1465.9 Q1802.57 1469.08 1802.57 1474.49 Q1802.57 1480.07 1799.09 1483.17 Q1795.62 1486.25 1789.3 1486.25 Q1787.13 1486.25 1784.86 1485.88 Q1782.61 1485.51 1780.21 1484.77 L1780.21 1480.07 Q1782.29 1481.2 1784.51 1481.76 Q1786.73 1482.32 1789.21 1482.32 Q1793.21 1482.32 1795.55 1480.21 Q1797.89 1478.1 1797.89 1474.49 Q1797.89 1470.88 1795.55 1468.77 Q1793.21 1466.67 1789.21 1466.67 Q1787.34 1466.67 1785.46 1467.08 Q1783.61 1467.5 1781.66 1468.38 L1781.66 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1821.78 1454.1 Q1818.17 1454.1 1816.34 1457.66 Q1814.53 1461.2 1814.53 1468.33 Q1814.53 1475.44 1816.34 1479.01 Q1818.17 1482.55 1821.78 1482.55 Q1825.41 1482.55 1827.22 1479.01 Q1829.05 1475.44 1829.05 1468.33 Q1829.05 1461.2 1827.22 1457.66 Q1825.41 1454.1 1821.78 1454.1 M1821.78 1450.39 Q1827.59 1450.39 1830.64 1455 Q1833.72 1459.58 1833.72 1468.33 Q1833.72 1477.06 1830.64 1481.67 Q1827.59 1486.25 1821.78 1486.25 Q1815.97 1486.25 1812.89 1481.67 Q1809.83 1477.06 1809.83 1468.33 Q1809.83 1459.58 1812.89 1455 Q1815.97 1450.39 1821.78 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2256.44 1481.64 L2272.76 1481.64 L2272.76 1485.58 L2250.81 1485.58 L2250.81 1481.64 Q2253.47 1478.89 2258.06 1474.26 Q2262.66 1469.61 2263.85 1468.27 Q2266.09 1465.74 2266.97 1464.01 Q2267.87 1462.25 2267.87 1460.56 Q2267.87 1457.8 2265.93 1456.07 Q2264.01 1454.33 2260.91 1454.33 Q2258.71 1454.33 2256.25 1455.09 Q2253.82 1455.86 2251.04 1457.41 L2251.04 1452.69 Q2253.87 1451.55 2256.32 1450.97 Q2258.78 1450.39 2260.81 1450.39 Q2266.18 1450.39 2269.38 1453.08 Q2272.57 1455.77 2272.57 1460.26 Q2272.57 1462.39 2271.76 1464.31 Q2270.97 1466.2 2268.87 1468.8 Q2268.29 1469.47 2265.19 1472.69 Q2262.09 1475.88 2256.44 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2292.57 1454.1 Q2288.96 1454.1 2287.13 1457.66 Q2285.33 1461.2 2285.33 1468.33 Q2285.33 1475.44 2287.13 1479.01 Q2288.96 1482.55 2292.57 1482.55 Q2296.21 1482.55 2298.01 1479.01 Q2299.84 1475.44 2299.84 1468.33 Q2299.84 1461.2 2298.01 1457.66 Q2296.21 1454.1 2292.57 1454.1 M2292.57 1450.39 Q2298.38 1450.39 2301.44 1455 Q2304.52 1459.58 2304.52 1468.33 Q2304.52 1477.06 2301.44 1481.67 Q2298.38 1486.25 2292.57 1486.25 Q2286.76 1486.25 2283.68 1481.67 Q2280.63 1477.06 2280.63 1468.33 Q2280.63 1459.58 2283.68 1455 Q2286.76 1450.39 2292.57 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2322.73 1454.1 Q2319.12 1454.1 2317.29 1457.66 Q2315.49 1461.2 2315.49 1468.33 Q2315.49 1475.44 2317.29 1479.01 Q2319.12 1482.55 2322.73 1482.55 Q2326.37 1482.55 2328.17 1479.01 Q2330 1475.44 2330 1468.33 Q2330 1461.2 2328.17 1457.66 Q2326.37 1454.1 2322.73 1454.1 M2322.73 1450.39 Q2328.54 1450.39 2331.6 1455 Q2334.68 1459.58 2334.68 1468.33 Q2334.68 1477.06 2331.6 1481.67 Q2328.54 1486.25 2322.73 1486.25 Q2316.92 1486.25 2313.84 1481.67 Q2310.79 1477.06 2310.79 1468.33 Q2310.79 1459.58 2313.84 1455 Q2316.92 1450.39 2322.73 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1098.39 1520.52 L1138.59 1520.52 L1138.59 1525.93 L1121.72 1525.93 L1121.72 1568.04 L1115.26 1568.04 L1115.26 1525.93 L1098.39 1525.93 L1098.39 1520.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1142.53 1532.4 L1148.39 1532.4 L1148.39 1568.04 L1142.53 1568.04 L1142.53 1532.4 M1142.53 1518.52 L1148.39 1518.52 L1148.39 1525.93 L1142.53 1525.93 L1142.53 1518.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1188.4 1539.24 Q1190.59 1535.29 1193.65 1533.41 Q1196.71 1531.54 1200.84 1531.54 Q1206.41 1531.54 1209.44 1535.45 Q1212.46 1539.33 1212.46 1546.53 L1212.46 1568.04 L1206.57 1568.04 L1206.57 1546.72 Q1206.57 1541.59 1204.76 1539.11 Q1202.94 1536.63 1199.22 1536.63 Q1194.67 1536.63 1192.03 1539.65 Q1189.38 1542.68 1189.38 1547.9 L1189.38 1568.04 L1183.5 1568.04 L1183.5 1546.72 Q1183.5 1541.56 1181.68 1539.11 Q1179.87 1536.63 1176.08 1536.63 Q1171.59 1536.63 1168.95 1539.68 Q1166.31 1542.71 1166.31 1547.9 L1166.31 1568.04 L1160.42 1568.04 L1160.42 1532.4 L1166.31 1532.4 L1166.31 1537.93 Q1168.31 1534.66 1171.11 1533.1 Q1173.92 1531.54 1177.77 1531.54 Q1181.65 1531.54 1184.36 1533.51 Q1187.09 1535.48 1188.4 1539.24 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1254.63 1548.76 L1254.63 1551.62 L1227.71 1551.62 Q1228.09 1557.67 1231.33 1560.85 Q1234.61 1564 1240.44 1564 Q1243.81 1564 1246.96 1563.17 Q1250.15 1562.35 1253.26 1560.69 L1253.26 1566.23 Q1250.11 1567.57 1246.8 1568.27 Q1243.49 1568.97 1240.09 1568.97 Q1231.56 1568.97 1226.56 1564 Q1221.59 1559.04 1221.59 1550.57 Q1221.59 1541.82 1226.31 1536.69 Q1231.05 1531.54 1239.07 1531.54 Q1246.26 1531.54 1250.43 1536.18 Q1254.63 1540.8 1254.63 1548.76 M1248.78 1547.04 Q1248.71 1542.23 1246.07 1539.37 Q1243.46 1536.5 1239.13 1536.5 Q1234.23 1536.5 1231.27 1539.27 Q1228.34 1542.04 1227.9 1547.07 L1248.78 1547.04 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1299.03 1518.58 Q1294.77 1525.9 1292.7 1533.06 Q1290.63 1540.23 1290.63 1547.58 Q1290.63 1554.93 1292.7 1562.16 Q1294.8 1569.35 1299.03 1576.64 L1293.94 1576.64 Q1289.17 1569.16 1286.78 1561.93 Q1284.42 1554.71 1284.42 1547.58 Q1284.42 1540.48 1286.78 1533.29 Q1289.14 1526.09 1293.94 1518.58 L1299.03 1518.58 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1317.08 1525.81 L1317.08 1562.76 L1324.85 1562.76 Q1334.68 1562.76 1339.23 1558.3 Q1343.82 1553.85 1343.82 1544.24 Q1343.82 1534.69 1339.23 1530.26 Q1334.68 1525.81 1324.85 1525.81 L1317.08 1525.81 M1310.65 1520.52 L1323.86 1520.52 Q1337.67 1520.52 1344.13 1526.28 Q1350.6 1532.01 1350.6 1544.24 Q1350.6 1556.52 1344.1 1562.28 Q1337.61 1568.04 1323.86 1568.04 L1310.65 1568.04 L1310.65 1520.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1376.79 1550.12 Q1369.69 1550.12 1366.96 1551.75 Q1364.22 1553.37 1364.22 1557.29 Q1364.22 1560.4 1366.26 1562.25 Q1368.32 1564.07 1371.86 1564.07 Q1376.73 1564.07 1379.66 1560.63 Q1382.62 1557.16 1382.62 1551.43 L1382.62 1550.12 L1376.79 1550.12 M1388.47 1547.71 L1388.47 1568.04 L1382.62 1568.04 L1382.62 1562.63 Q1380.61 1565.88 1377.62 1567.44 Q1374.63 1568.97 1370.3 1568.97 Q1364.82 1568.97 1361.58 1565.91 Q1358.36 1562.82 1358.36 1557.67 Q1358.36 1551.65 1362.37 1548.6 Q1366.41 1545.54 1374.4 1545.54 L1382.62 1545.54 L1382.62 1544.97 Q1382.62 1540.93 1379.94 1538.73 Q1377.3 1536.5 1372.49 1536.5 Q1369.44 1536.5 1366.54 1537.23 Q1363.65 1537.97 1360.97 1539.43 L1360.97 1534.02 Q1364.19 1532.78 1367.21 1532.17 Q1370.23 1531.54 1373.1 1531.54 Q1380.83 1531.54 1384.65 1535.55 Q1388.47 1539.56 1388.47 1547.71 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1415.37 1571.35 Q1412.88 1577.72 1410.53 1579.66 Q1408.17 1581.6 1404.23 1581.6 L1399.55 1581.6 L1399.55 1576.7 L1402.99 1576.7 Q1405.4 1576.7 1406.74 1575.56 Q1408.08 1574.41 1409.7 1570.14 L1410.75 1567.47 L1396.33 1532.4 L1402.54 1532.4 L1413.68 1560.28 L1424.82 1532.4 L1431.03 1532.4 L1415.37 1571.35 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1461.84 1533.45 L1461.84 1538.98 Q1459.35 1537.71 1456.68 1537.07 Q1454.01 1536.44 1451.14 1536.44 Q1446.78 1536.44 1444.59 1537.77 Q1442.42 1539.11 1442.42 1541.79 Q1442.42 1543.82 1443.98 1545 Q1445.54 1546.15 1450.25 1547.2 L1452.26 1547.64 Q1458.49 1548.98 1461.1 1551.43 Q1463.75 1553.85 1463.75 1558.21 Q1463.75 1563.17 1459.8 1566.07 Q1455.88 1568.97 1449.01 1568.97 Q1446.15 1568.97 1443.03 1568.39 Q1439.94 1567.85 1436.5 1566.74 L1436.5 1560.69 Q1439.75 1562.38 1442.9 1563.24 Q1446.05 1564.07 1449.14 1564.07 Q1453.27 1564.07 1455.5 1562.66 Q1457.73 1561.23 1457.73 1558.65 Q1457.73 1556.27 1456.11 1554.99 Q1454.52 1553.72 1449.07 1552.54 L1447.04 1552.07 Q1441.59 1550.92 1439.17 1548.56 Q1436.76 1546.18 1436.76 1542.04 Q1436.76 1537.01 1440.32 1534.27 Q1443.89 1531.54 1450.44 1531.54 Q1453.69 1531.54 1456.55 1532.01 Q1459.42 1532.49 1461.84 1533.45 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1472.15 1518.58 L1477.24 1518.58 Q1482.02 1526.09 1484.37 1533.29 Q1486.76 1540.48 1486.76 1547.58 Q1486.76 1554.71 1484.37 1561.93 Q1482.02 1569.16 1477.24 1576.64 L1472.15 1576.64 Q1476.38 1569.35 1478.45 1562.16 Q1480.55 1554.93 1480.55 1547.58 Q1480.55 1540.23 1478.45 1533.06 Q1476.38 1525.9 1472.15 1518.58 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  232.389,1335.78 2352.76,1335.78 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  232.389,1035.33 2352.76,1035.33 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  232.389,734.876 2352.76,734.876 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  232.389,434.423 2352.76,434.423 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  232.389,133.969 2352.76,133.969 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  232.389,1423.18 232.389,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  232.389,1335.78 251.287,1335.78 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  232.389,1035.33 251.287,1035.33 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  232.389,734.876 251.287,734.876 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  232.389,434.423 251.287,434.423 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  232.389,133.969 251.287,133.969 \n  \"/>\n<path clip-path=\"url(#clip510)\" d=\"M184.445 1321.58 Q180.834 1321.58 179.005 1325.15 Q177.2 1328.69 177.2 1335.82 Q177.2 1342.92 179.005 1346.49 Q180.834 1350.03 184.445 1350.03 Q188.079 1350.03 189.885 1346.49 Q191.713 1342.92 191.713 1335.82 Q191.713 1328.69 189.885 1325.15 Q188.079 1321.58 184.445 1321.58 M184.445 1317.88 Q190.255 1317.88 193.311 1322.48 Q196.389 1327.07 196.389 1335.82 Q196.389 1344.54 193.311 1349.15 Q190.255 1353.73 184.445 1353.73 Q178.635 1353.73 175.556 1349.15 Q172.501 1344.54 172.501 1335.82 Q172.501 1327.07 175.556 1322.48 Q178.635 1317.88 184.445 1317.88 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M149.306 1048.67 L165.626 1048.67 L165.626 1052.61 L143.681 1052.61 L143.681 1048.67 Q146.343 1045.92 150.927 1041.29 Q155.533 1036.64 156.714 1035.29 Q158.959 1032.77 159.839 1031.04 Q160.741 1029.28 160.741 1027.59 Q160.741 1024.83 158.797 1023.1 Q156.876 1021.36 153.774 1021.36 Q151.575 1021.36 149.121 1022.12 Q146.691 1022.89 143.913 1024.44 L143.913 1019.72 Q146.737 1018.58 149.191 1018 Q151.644 1017.42 153.681 1017.42 Q159.052 1017.42 162.246 1020.11 Q165.44 1022.79 165.44 1027.29 Q165.44 1029.41 164.63 1031.34 Q163.843 1033.23 161.737 1035.83 Q161.158 1036.5 158.056 1039.72 Q154.954 1042.91 149.306 1048.67 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M175.487 1018.05 L193.843 1018.05 L193.843 1021.98 L179.769 1021.98 L179.769 1030.46 Q180.788 1030.11 181.806 1029.95 Q182.825 1029.76 183.843 1029.76 Q189.63 1029.76 193.01 1032.93 Q196.389 1036.1 196.389 1041.52 Q196.389 1047.1 192.917 1050.2 Q189.445 1053.28 183.126 1053.28 Q180.95 1053.28 178.681 1052.91 Q176.436 1052.54 174.028 1051.8 L174.028 1047.1 Q176.112 1048.23 178.334 1048.79 Q180.556 1049.35 183.033 1049.35 Q187.038 1049.35 189.375 1047.24 Q191.713 1045.13 191.713 1041.52 Q191.713 1037.91 189.375 1035.8 Q187.038 1033.7 183.033 1033.7 Q181.158 1033.7 179.283 1034.11 Q177.431 1034.53 175.487 1035.41 L175.487 1018.05 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M144.329 717.596 L162.686 717.596 L162.686 721.531 L148.612 721.531 L148.612 730.003 Q149.63 729.656 150.649 729.494 Q151.667 729.309 152.686 729.309 Q158.473 729.309 161.852 732.48 Q165.232 735.651 165.232 741.068 Q165.232 746.647 161.76 749.748 Q158.288 752.827 151.968 752.827 Q149.792 752.827 147.524 752.457 Q145.279 752.086 142.871 751.346 L142.871 746.647 Q144.954 747.781 147.177 748.336 Q149.399 748.892 151.876 748.892 Q155.88 748.892 158.218 746.786 Q160.556 744.679 160.556 741.068 Q160.556 737.457 158.218 735.35 Q155.88 733.244 151.876 733.244 Q150.001 733.244 148.126 733.661 Q146.274 734.077 144.329 734.957 L144.329 717.596 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M184.445 720.675 Q180.834 720.675 179.005 724.239 Q177.2 727.781 177.2 734.911 Q177.2 742.017 179.005 745.582 Q180.834 749.123 184.445 749.123 Q188.079 749.123 189.885 745.582 Q191.713 742.017 191.713 734.911 Q191.713 727.781 189.885 724.239 Q188.079 720.675 184.445 720.675 M184.445 716.971 Q190.255 716.971 193.311 721.577 Q196.389 726.161 196.389 734.911 Q196.389 743.637 193.311 748.244 Q190.255 752.827 184.445 752.827 Q178.635 752.827 175.556 748.244 Q172.501 743.637 172.501 734.911 Q172.501 726.161 175.556 721.577 Q178.635 716.971 184.445 716.971 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M144.098 417.143 L166.32 417.143 L166.32 419.133 L153.774 451.703 L148.89 451.703 L160.695 421.078 L144.098 421.078 L144.098 417.143 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M175.487 417.143 L193.843 417.143 L193.843 421.078 L179.769 421.078 L179.769 429.55 Q180.788 429.203 181.806 429.041 Q182.825 428.855 183.843 428.855 Q189.63 428.855 193.01 432.027 Q196.389 435.198 196.389 440.615 Q196.389 446.193 192.917 449.295 Q189.445 452.374 183.126 452.374 Q180.95 452.374 178.681 452.003 Q176.436 451.633 174.028 450.892 L174.028 446.193 Q176.112 447.328 178.334 447.883 Q180.556 448.439 183.033 448.439 Q187.038 448.439 189.375 446.332 Q191.713 444.226 191.713 440.615 Q191.713 437.004 189.375 434.897 Q187.038 432.791 183.033 432.791 Q181.158 432.791 179.283 433.207 Q177.431 433.624 175.487 434.504 L175.487 417.143 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M114.931 147.314 L122.57 147.314 L122.57 120.948 L114.26 122.615 L114.26 118.356 L122.524 116.689 L127.2 116.689 L127.2 147.314 L134.839 147.314 L134.839 151.249 L114.931 151.249 L114.931 147.314 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M154.283 119.768 Q150.672 119.768 148.843 123.333 Q147.038 126.874 147.038 134.004 Q147.038 141.11 148.843 144.675 Q150.672 148.217 154.283 148.217 Q157.917 148.217 159.723 144.675 Q161.552 141.11 161.552 134.004 Q161.552 126.874 159.723 123.333 Q157.917 119.768 154.283 119.768 M154.283 116.064 Q160.093 116.064 163.149 120.671 Q166.227 125.254 166.227 134.004 Q166.227 142.731 163.149 147.337 Q160.093 151.92 154.283 151.92 Q148.473 151.92 145.394 147.337 Q142.339 142.731 142.339 134.004 Q142.339 125.254 145.394 120.671 Q148.473 116.064 154.283 116.064 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M184.445 119.768 Q180.834 119.768 179.005 123.333 Q177.2 126.874 177.2 134.004 Q177.2 141.11 179.005 144.675 Q180.834 148.217 184.445 148.217 Q188.079 148.217 189.885 144.675 Q191.713 141.11 191.713 134.004 Q191.713 126.874 189.885 123.333 Q188.079 119.768 184.445 119.768 M184.445 116.064 Q190.255 116.064 193.311 120.671 Q196.389 125.254 196.389 134.004 Q196.389 142.731 193.311 147.337 Q190.255 151.92 184.445 151.92 Q178.635 151.92 175.556 147.337 Q172.501 142.731 172.501 134.004 Q172.501 125.254 175.556 120.671 Q178.635 116.064 184.445 116.064 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M21.7677 859.025 L39.6235 859.025 L39.6235 850.941 Q39.6235 846.453 37.3 844.002 Q34.9765 841.551 30.6797 841.551 Q26.4147 841.551 24.0912 844.002 Q21.7677 846.453 21.7677 850.941 L21.7677 859.025 M16.4842 865.454 L16.4842 850.941 Q16.4842 842.952 20.1126 838.878 Q23.7092 834.772 30.6797 834.772 Q37.7138 834.772 41.3104 838.878 Q44.907 842.952 44.907 850.941 L44.907 859.025 L64.0042 859.025 L64.0042 865.454 L16.4842 865.454 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M32.4621 814.911 Q32.4621 819.621 36.1542 822.358 Q39.8145 825.096 46.212 825.096 Q52.6095 825.096 56.3017 822.39 Q59.9619 819.653 59.9619 814.911 Q59.9619 810.232 56.2698 807.495 Q52.5777 804.757 46.212 804.757 Q39.8781 804.757 36.186 807.495 Q32.4621 810.232 32.4621 814.911 M27.4968 814.911 Q27.4968 807.272 32.4621 802.911 Q37.4273 798.551 46.212 798.551 Q54.9649 798.551 59.9619 802.911 Q64.9272 807.272 64.9272 814.911 Q64.9272 822.581 59.9619 826.942 Q54.9649 831.27 46.212 831.27 Q37.4273 831.27 32.4621 826.942 Q27.4968 822.581 27.4968 814.911 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M58.657 783.178 L77.5631 783.178 L77.5631 789.066 L28.3562 789.066 L28.3562 783.178 L33.7671 783.178 Q30.5842 781.332 29.0564 778.531 Q27.4968 775.698 27.4968 771.783 Q27.4968 765.29 32.6531 761.248 Q37.8093 757.174 46.212 757.174 Q54.6147 757.174 59.771 761.248 Q64.9272 765.29 64.9272 771.783 Q64.9272 775.698 63.3994 778.531 Q61.8398 781.332 58.657 783.178 M46.212 763.253 Q39.7508 763.253 36.0905 765.927 Q32.3984 768.568 32.3984 773.215 Q32.3984 777.862 36.0905 780.536 Q39.7508 783.178 46.212 783.178 Q52.6732 783.178 56.3653 780.536 Q60.0256 777.862 60.0256 773.215 Q60.0256 768.568 56.3653 765.927 Q52.6732 763.253 46.212 763.253 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M55.9197 746.638 L55.9197 739.923 L64.0042 739.923 L64.0042 746.638 L55.9197 746.638 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M14.5426 691.957 Q21.8632 696.222 29.0246 698.291 Q36.186 700.36 43.5384 700.36 Q50.8908 700.36 58.1159 698.291 Q65.3091 696.19 72.5979 691.957 L72.5979 697.05 Q65.1182 701.824 57.8931 704.211 Q50.668 706.566 43.5384 706.566 Q36.4406 706.566 29.2474 704.211 Q22.0542 701.856 14.5426 697.05 L14.5426 691.957 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M43.0928 639.344 Q43.0928 642.114 45.4481 643.705 Q47.8034 645.265 52.0048 645.265 Q56.1425 645.265 58.5296 643.705 Q60.885 642.114 60.885 639.344 Q60.885 636.639 58.5296 635.079 Q56.1425 633.488 52.0048 633.488 Q47.8353 633.488 45.48 635.079 Q43.0928 636.639 43.0928 639.344 M39.0506 639.344 Q39.0506 634.316 42.5517 631.355 Q46.0529 628.395 52.0048 628.395 Q57.9567 628.395 61.4579 631.387 Q64.9272 634.347 64.9272 639.344 Q64.9272 644.437 61.4579 647.397 Q57.9567 650.357 52.0048 650.357 Q46.021 650.357 42.5517 647.397 Q39.0506 644.405 39.0506 639.344 M19.667 672.191 Q19.667 674.929 22.0542 676.52 Q24.4095 678.08 28.5472 678.08 Q32.7485 678.08 35.1038 676.52 Q37.4592 674.961 37.4592 672.191 Q37.4592 669.422 35.1038 667.863 Q32.7485 666.271 28.5472 666.271 Q24.4413 666.271 22.0542 667.863 Q19.667 669.454 19.667 672.191 M15.6248 643.45 L15.6248 638.358 L64.9272 668.086 L64.9272 673.178 L15.6248 643.45 M15.6248 672.191 Q15.6248 667.163 19.1259 664.171 Q22.5952 661.179 28.5472 661.179 Q34.5628 661.179 38.0321 664.171 Q41.5014 667.131 41.5014 672.191 Q41.5014 677.252 38.0321 680.212 Q34.5309 683.14 28.5472 683.14 Q22.6271 683.14 19.1259 680.18 Q15.6248 677.22 15.6248 672.191 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M14.5426 619.579 L14.5426 614.486 Q22.0542 609.712 29.2474 607.357 Q36.4406 604.97 43.5384 604.97 Q50.668 604.97 57.8931 607.357 Q65.1182 609.712 72.5979 614.486 L72.5979 619.579 Q65.3091 615.346 58.1159 613.277 Q50.8908 611.176 43.5384 611.176 Q36.186 611.176 29.0246 613.277 Q21.8632 615.346 14.5426 619.579 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip512)\" style=\"stroke:#ff0000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  292.4,1335.78 292.41,1335.78 292.42,1335.78 292.44,1335.78 292.48,1335.78 292.6,1335.78 292.8,1335.78 293.2,1335.78 294.4,1335.78 296.4,1335.78 \n  300.401,1335.78 332.407,1335.77 372.414,1335.72 412.42,1335.56 452.427,1334.93 492.434,1332.65 532.441,1326.15 572.448,1316.42 612.455,1306.57 652.462,1296.58 \n  692.469,1286.39 732.476,1275.98 772.483,1265.31 812.49,1254.33 852.497,1243 892.503,1231.27 932.51,1219.18 972.517,1207.33 1012.52,1195.65 1052.53,1184.07 \n  1092.54,1172.48 1132.54,1160.75 1172.55,1148.68 1212.56,1136.01 1252.57,1122.3 1292.57,1106.94 1332.58,1088.97 1372.59,1071.71 1412.59,1056.29 1452.6,1042.12 \n  1492.61,1028.74 1532.61,1015.78 1572.62,1002.93 1612.63,989.922 1652.63,976.509 1692.64,962.449 1732.65,947.494 1772.66,931.389 1812.66,913.872 1852.67,896.902 \n  1892.68,880.527 1932.68,864.639 1972.69,849.142 2012.7,833.992 2052.7,819.344 2092.71,805.122 2132.72,791.263 2172.72,778.085 2212.73,765.65 2252.74,752.536 \n  2292.75,739.575 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ff0000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:0.4; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  292.4,1335.78 292.41,1335.78 292.42,1335.78 292.44,1335.78 292.48,1335.78 292.6,1335.78 292.8,1335.78 293.2,1335.78 294.4,1335.78 296.4,1335.78 \n  300.401,1335.78 332.407,1335.76 372.414,1335.67 412.42,1335.31 452.427,1333.86 492.434,1328.49 532.441,1312.95 572.448,1289.74 612.455,1266.34 652.462,1242.67 \n  692.469,1218.68 732.476,1194.3 772.483,1169.45 812.49,1144.05 852.497,1118.02 892.503,1091.27 932.51,1063.96 972.517,1037.43 1012.52,1011.6 1052.53,986.362 \n  1092.54,961.619 1132.54,937.259 1172.55,913.162 1212.56,889.193 1252.57,865.187 1292.57,840.916 1332.58,816.036 1372.59,795.002 1412.59,778.533 1452.6,765.385 \n  1492.61,754.616 1532.61,745.535 1572.62,737.651 1612.63,730.621 1652.63,724.215 1692.64,718.287 1732.65,712.759 1772.66,707.604 1812.66,702.831 1852.67,698.896 \n  1892.68,695.754 1932.68,693.324 1972.69,691.527 2012.7,690.288 2052.7,689.538 2092.71,689.198 2132.72,689.193 2172.72,689.449 2212.73,689.888 2252.74,690.45 \n  2292.75,691.019 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#ff0000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:0.4; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  292.4,1335.78 292.41,1335.78 292.42,1335.78 292.44,1335.78 292.48,1335.78 292.6,1335.78 292.8,1335.78 293.2,1335.78 294.4,1335.78 296.4,1335.78 \n  300.401,1335.78 332.407,1335.78 372.414,1335.78 412.42,1335.81 452.427,1335.99 492.434,1336.82 532.441,1339.35 572.448,1343.1 612.455,1346.81 652.462,1350.48 \n  692.469,1354.1 732.476,1357.67 772.483,1361.17 812.49,1364.61 852.497,1367.98 892.503,1371.26 932.51,1374.4 972.517,1377.23 1012.52,1379.7 1052.53,1381.77 \n  1092.54,1383.34 1132.54,1384.24 1172.55,1384.21 1212.56,1382.82 1252.57,1379.42 1292.57,1372.96 1332.58,1361.91 1372.59,1348.42 1412.59,1334.04 1452.6,1318.85 \n  1492.61,1302.86 1532.61,1286.02 1572.62,1268.21 1612.63,1249.22 1652.63,1228.8 1692.64,1206.61 1732.65,1182.23 1772.66,1155.17 1812.66,1124.91 1852.67,1094.91 \n  1892.68,1065.3 1932.68,1035.95 1972.69,1006.76 2012.7,977.697 2052.7,949.149 2092.71,921.046 2132.72,893.332 2172.72,866.721 2212.73,841.412 2252.74,814.623 \n  2292.75,788.131 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#0000ff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  292.4,133.981 292.41,133.981 292.42,133.981 292.44,133.981 292.48,133.981 292.6,133.981 292.8,133.981 293.2,133.981 294.4,133.981 296.4,133.981 \n  300.401,133.982 332.407,134.007 372.414,134.109 412.42,134.478 452.427,135.848 492.434,140.719 532.441,153.726 572.448,167.255 612.455,176.061 652.462,186.278 \n  692.469,196.732 732.476,207.466 772.483,218.525 812.49,229.956 852.497,241.809 892.503,254.135 932.51,266.732 972.517,278.127 1012.52,289.708 1052.53,301.339 \n  1092.54,313.172 1132.54,325.423 1172.55,338.41 1212.56,352.612 1252.57,368.767 1292.57,388.005 1332.58,411.991 1372.59,427.021 1412.59,439.298 1452.6,452.329 \n  1492.61,465.191 1532.61,478.158 1572.62,491.479 1612.63,505.4 1652.63,520.173 1692.64,536.063 1732.65,553.352 1772.66,572.329 1812.66,593.268 1852.67,607.362 \n  1892.68,622.634 1932.68,637.77 1972.69,652.678 2012.7,667.252 2052.7,680.775 2092.71,694.244 2132.72,707.467 2172.72,718.907 2212.73,729.736 2252.74,745.826 \n  2292.75,757.597 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#0000ff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:0.4; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  292.4,133.981 292.41,133.981 292.42,133.981 292.44,133.981 292.48,133.981 292.6,133.981 292.8,133.981 293.2,133.981 294.4,133.981 296.4,133.981 \n  300.401,133.982 332.407,133.99 372.414,133.994 412.42,133.931 452.427,133.527 492.434,131.762 532.441,126.785 572.448,121.695 612.455,118.481 652.462,114.882 \n  692.469,111.344 732.476,107.874 772.483,104.48 812.49,101.171 852.497,97.964 892.503,94.8866 932.51,92.0468 972.517,89.8125 1012.52,87.9761 1052.53,86.7032 \n  1092.54,86.1857 1132.54,86.732 1172.55,88.8338 1212.56,93.2709 1252.57,101.263 1292.57,114.661 1332.58,136.101 1372.59,151.749 1412.59,166.073 1452.6,182.691 \n  1492.61,200.256 1532.61,218.945 1572.62,239.012 1612.63,260.785 1652.63,284.681 1692.64,311.197 1732.65,340.907 1772.66,374.432 1812.66,412.379 1852.67,438.47 \n  1892.68,467.32 1932.68,496.44 1972.69,525.589 2012.7,554.482 2052.7,581.612 2092.71,608.894 2132.72,635.873 2172.72,659.333 2212.73,681.593 2252.74,714.348 \n  2292.75,737.482 \n  \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#0000ff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:0.4; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  292.4,133.981 292.41,133.981 292.42,133.981 292.44,133.981 292.48,133.981 292.6,133.981 292.8,133.981 293.2,133.981 294.4,133.981 296.4,133.982 \n  300.401,133.983 332.407,134.025 372.414,134.225 412.42,135.026 452.427,138.17 492.434,149.677 532.441,180.667 572.448,212.815 612.455,233.641 652.462,257.675 \n  692.469,282.12 732.476,307.057 772.483,332.569 812.49,358.74 852.497,385.653 892.503,413.384 932.51,441.417 972.517,466.441 1012.52,491.44 1052.53,515.974 \n  1092.54,540.158 1132.54,564.115 1172.55,587.986 1212.56,611.953 1252.57,636.271 1292.57,661.35 1332.58,687.882 1372.59,702.293 1412.59,712.524 1452.6,721.968 \n  1492.61,730.127 1532.61,737.37 1572.62,743.947 1612.63,750.015 1652.63,755.666 1692.64,760.93 1732.65,765.797 1772.66,770.225 1812.66,774.157 1852.67,776.254 \n  1892.68,777.948 1932.68,779.1 1972.69,779.768 2012.7,780.021 2052.7,779.938 2092.71,779.594 2132.72,779.061 2172.72,778.481 2212.73,777.88 2252.74,777.305 \n  2292.75,777.713 \n  \"/>\n<path clip-path=\"url(#clip510)\" d=\"\nM1916.27 248.629 L2282.08 248.629 L2282.08 93.1086 L1916.27 93.1086  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1916.27,248.629 2282.08,248.629 2282.08,93.1086 1916.27,93.1086 1916.27,248.629 \n  \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#ff0000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1939.83,144.949 2081.19,144.949 \n  \"/>\n<path clip-path=\"url(#clip510)\" d=\"M2119.94 140.284 Q2119.22 139.868 2118.36 139.682 Q2117.53 139.474 2116.51 139.474 Q2112.9 139.474 2110.95 141.835 Q2109.03 144.173 2109.03 148.571 L2109.03 162.229 L2104.75 162.229 L2104.75 136.303 L2109.03 136.303 L2109.03 140.331 Q2110.38 137.969 2112.53 136.835 Q2114.68 135.678 2117.76 135.678 Q2118.2 135.678 2118.73 135.747 Q2119.26 135.794 2119.91 135.909 L2119.94 140.284 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2134.63 126.257 Q2131.53 131.581 2130.03 136.789 Q2128.52 141.997 2128.52 147.344 Q2128.52 152.692 2130.03 157.946 Q2131.56 163.178 2134.63 168.479 L2130.93 168.479 Q2127.46 163.039 2125.72 157.784 Q2124.01 152.53 2124.01 147.344 Q2124.01 142.182 2125.72 136.951 Q2127.44 131.72 2130.93 126.257 L2134.63 126.257 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2147.11 128.942 L2147.11 136.303 L2155.88 136.303 L2155.88 139.613 L2147.11 139.613 L2147.11 153.687 Q2147.11 156.858 2147.97 157.761 Q2148.85 158.664 2151.51 158.664 L2155.88 158.664 L2155.88 162.229 L2151.51 162.229 Q2146.58 162.229 2144.7 160.4 Q2142.83 158.548 2142.83 153.687 L2142.83 139.613 L2139.7 139.613 L2139.7 136.303 L2142.83 136.303 L2142.83 128.942 L2147.11 128.942 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2162.57 156.349 L2167.46 156.349 L2167.46 160.33 L2163.66 167.738 L2160.68 167.738 L2162.57 160.33 L2162.57 156.349 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2204.06 159.289 Q2207.11 159.312 2208.94 161.048 Q2210.88 162.877 2210.88 165.655 Q2210.88 168.317 2209.17 170.168 Q2207.32 172.182 2203.55 172.182 Q2203.55 170.446 2203.55 168.687 Q2205.14 168.803 2206.12 167.784 Q2206.86 166.974 2206.86 166.117 Q2206.86 164.891 2206.12 163.872 Q2205.4 162.9 2204.06 162.9 Q2189.63 162.9 2189.63 152.784 Q2189.63 145.84 2197.34 143.803 Q2190.86 142.969 2190.86 136.951 Q2190.86 132.391 2195.95 130.493 L2191.14 130.493 L2191.14 126.21 L2209.4 126.21 L2209.4 130.493 Q2194.84 130.493 2194.84 137.229 Q2194.84 141.65 2207.06 141.858 L2207.06 145.794 Q2193.87 145.284 2193.92 152.784 Q2193.94 159.057 2204.06 159.289 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2217.39 126.257 L2221.09 126.257 Q2224.56 131.72 2226.28 136.951 Q2228.01 142.182 2228.01 147.344 Q2228.01 152.53 2226.28 157.784 Q2224.56 163.039 2221.09 168.479 L2217.39 168.479 Q2220.47 163.178 2221.97 157.946 Q2223.5 152.692 2223.5 147.344 Q2223.5 141.997 2221.97 136.789 Q2220.47 131.581 2217.39 126.257 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip510)\" style=\"stroke:#0000ff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1939.83,196.789 2081.19,196.789 \n  \"/>\n<path clip-path=\"url(#clip510)\" d=\"M2123.18 188.907 L2123.18 192.934 Q2121.37 192.009 2119.43 191.546 Q2117.48 191.083 2115.4 191.083 Q2112.23 191.083 2110.63 192.055 Q2109.06 193.027 2109.06 194.971 Q2109.06 196.453 2110.19 197.309 Q2111.32 198.143 2114.75 198.907 L2116.21 199.231 Q2120.75 200.203 2122.64 201.985 Q2124.56 203.745 2124.56 206.916 Q2124.56 210.527 2121.69 212.633 Q2118.85 214.74 2113.85 214.74 Q2111.76 214.74 2109.5 214.323 Q2107.25 213.93 2104.75 213.12 L2104.75 208.721 Q2107.11 209.948 2109.4 210.573 Q2111.69 211.175 2113.94 211.175 Q2116.95 211.175 2118.57 210.157 Q2120.19 209.115 2120.19 207.24 Q2120.19 205.504 2119.01 204.578 Q2117.85 203.652 2113.89 202.796 L2112.41 202.448 Q2108.45 201.615 2106.69 199.902 Q2104.94 198.166 2104.94 195.157 Q2104.94 191.499 2107.53 189.509 Q2110.12 187.518 2114.89 187.518 Q2117.25 187.518 2119.33 187.865 Q2121.42 188.212 2123.18 188.907 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2141.58 178.097 Q2138.48 183.421 2136.97 188.629 Q2135.47 193.837 2135.47 199.184 Q2135.47 204.532 2136.97 209.786 Q2138.5 215.018 2141.58 220.319 L2137.87 220.319 Q2134.4 214.879 2132.67 209.624 Q2130.95 204.37 2130.95 199.184 Q2130.95 194.022 2132.67 188.791 Q2134.38 183.56 2137.87 178.097 L2141.58 178.097 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2154.06 180.782 L2154.06 188.143 L2162.83 188.143 L2162.83 191.453 L2154.06 191.453 L2154.06 205.527 Q2154.06 208.698 2154.91 209.601 Q2155.79 210.504 2158.45 210.504 L2162.83 210.504 L2162.83 214.069 L2158.45 214.069 Q2153.52 214.069 2151.65 212.24 Q2149.77 210.388 2149.77 205.527 L2149.77 191.453 L2146.65 191.453 L2146.65 188.143 L2149.77 188.143 L2149.77 180.782 L2154.06 180.782 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2169.52 208.189 L2174.4 208.189 L2174.4 212.17 L2170.61 219.578 L2167.62 219.578 L2169.52 212.17 L2169.52 208.189 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2211 211.129 Q2214.06 211.152 2215.88 212.888 Q2217.83 214.717 2217.83 217.495 Q2217.83 220.157 2216.12 222.008 Q2214.26 224.022 2210.49 224.022 Q2210.49 222.286 2210.49 220.527 Q2212.09 220.643 2213.06 219.624 Q2213.8 218.814 2213.8 217.957 Q2213.8 216.731 2213.06 215.712 Q2212.34 214.74 2211 214.74 Q2196.58 214.74 2196.58 204.624 Q2196.58 197.68 2204.29 195.643 Q2197.81 194.809 2197.81 188.791 Q2197.81 184.231 2202.9 182.333 L2198.08 182.333 L2198.08 178.05 L2216.35 178.05 L2216.35 182.333 Q2201.79 182.333 2201.79 189.069 Q2201.79 193.49 2214.01 193.698 L2214.01 197.634 Q2200.81 197.124 2200.86 204.624 Q2200.88 210.897 2211 211.129 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2224.33 178.097 L2228.04 178.097 Q2231.51 183.56 2233.22 188.791 Q2234.96 194.022 2234.96 199.184 Q2234.96 204.37 2233.22 209.624 Q2231.51 214.879 2228.04 220.319 L2224.33 220.319 Q2227.41 215.018 2228.92 209.786 Q2230.44 204.532 2230.44 199.184 Q2230.44 193.837 2228.92 188.629 Q2227.41 183.421 2224.33 178.097 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Plot the values of i(t xi) and e(t xi) over time with confidence bounds:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"i_mean = mean(i_opt, dims = 2)\ni_std = std(i_opt, dims = 2)\nplot(ts, i_mean, label = \"i(t, ξ)\", linecolor = :green, background_color = :transparent)\nplot!(ts, i_mean + i_std, linecolor = :green, linestyle = :dash, linealpha = 0.4, label = \"\")\nplot!(ts, i_mean - i_std, linecolor = :green, linestyle = :dash, linealpha = 0.4, label = \"\")\n\ne_mean = mean(e_opt, dims = 2)\ne_std = std(e_opt, dims = 2)\nplot!(ts, e_mean, label = \"e(t, ξ)\", linecolor = :purple)\nplot!(ts, e_mean + e_std, linecolor = :purple, linestyle = :dash, linealpha = 0.4, label = \"\")\nplot!(ts, e_mean - e_std, linecolor = :purple, linestyle = :dash, linealpha = 0.4, label = \"\")\nylabel!(\"Pop. (%)\")\nxlabel!(\"Time (Days)\")","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip540\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip540)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<defs>\n  <clipPath id=\"clip541\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip540)\" d=\"\nM174.149 1423.18 L2352.76 1423.18 L2352.76 47.2441 L174.149 47.2441  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<defs>\n  <clipPath id=\"clip542\">\n    <rect x=\"174\" y=\"47\" width=\"2180\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  235.808,1423.18 235.808,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  749.63,1423.18 749.63,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1263.45,1423.18 1263.45,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1777.27,1423.18 1777.27,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2291.1,1423.18 2291.1,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,1423.18 2352.76,1423.18 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  235.808,1423.18 235.808,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  749.63,1423.18 749.63,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1263.45,1423.18 1263.45,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1777.27,1423.18 1777.27,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2291.1,1423.18 2291.1,1404.28 \n  \"/>\n<path clip-path=\"url(#clip540)\" d=\"M235.808 1454.1 Q232.197 1454.1 230.368 1457.66 Q228.562 1461.2 228.562 1468.33 Q228.562 1475.44 230.368 1479.01 Q232.197 1482.55 235.808 1482.55 Q239.442 1482.55 241.247 1479.01 Q243.076 1475.44 243.076 1468.33 Q243.076 1461.2 241.247 1457.66 Q239.442 1454.1 235.808 1454.1 M235.808 1450.39 Q241.618 1450.39 244.673 1455 Q247.752 1459.58 247.752 1468.33 Q247.752 1477.06 244.673 1481.67 Q241.618 1486.25 235.808 1486.25 Q229.997 1486.25 226.919 1481.67 Q223.863 1477.06 223.863 1468.33 Q223.863 1459.58 226.919 1455 Q229.997 1450.39 235.808 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M724.329 1451.02 L742.686 1451.02 L742.686 1454.96 L728.612 1454.96 L728.612 1463.43 Q729.63 1463.08 730.649 1462.92 Q731.667 1462.73 732.686 1462.73 Q738.473 1462.73 741.852 1465.9 Q745.232 1469.08 745.232 1474.49 Q745.232 1480.07 741.76 1483.17 Q738.287 1486.25 731.968 1486.25 Q729.792 1486.25 727.524 1485.88 Q725.278 1485.51 722.871 1484.77 L722.871 1480.07 Q724.954 1481.2 727.176 1481.76 Q729.399 1482.32 731.875 1482.32 Q735.88 1482.32 738.218 1480.21 Q740.556 1478.1 740.556 1474.49 Q740.556 1470.88 738.218 1468.77 Q735.88 1466.67 731.875 1466.67 Q730 1466.67 728.125 1467.08 Q726.274 1467.5 724.329 1468.38 L724.329 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M764.445 1454.1 Q760.834 1454.1 759.005 1457.66 Q757.199 1461.2 757.199 1468.33 Q757.199 1475.44 759.005 1479.01 Q760.834 1482.55 764.445 1482.55 Q768.079 1482.55 769.885 1479.01 Q771.713 1475.44 771.713 1468.33 Q771.713 1461.2 769.885 1457.66 Q768.079 1454.1 764.445 1454.1 M764.445 1450.39 Q770.255 1450.39 773.31 1455 Q776.389 1459.58 776.389 1468.33 Q776.389 1477.06 773.31 1481.67 Q770.255 1486.25 764.445 1486.25 Q758.635 1486.25 755.556 1481.67 Q752.5 1477.06 752.5 1468.33 Q752.5 1459.58 755.556 1455 Q758.635 1450.39 764.445 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1223.06 1481.64 L1230.7 1481.64 L1230.7 1455.28 L1222.39 1456.95 L1222.39 1452.69 L1230.65 1451.02 L1235.33 1451.02 L1235.33 1481.64 L1242.97 1481.64 L1242.97 1485.58 L1223.06 1485.58 L1223.06 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1262.41 1454.1 Q1258.8 1454.1 1256.97 1457.66 Q1255.17 1461.2 1255.17 1468.33 Q1255.17 1475.44 1256.97 1479.01 Q1258.8 1482.55 1262.41 1482.55 Q1266.04 1482.55 1267.85 1479.01 Q1269.68 1475.44 1269.68 1468.33 Q1269.68 1461.2 1267.85 1457.66 Q1266.04 1454.1 1262.41 1454.1 M1262.41 1450.39 Q1268.22 1450.39 1271.28 1455 Q1274.36 1459.58 1274.36 1468.33 Q1274.36 1477.06 1271.28 1481.67 Q1268.22 1486.25 1262.41 1486.25 Q1256.6 1486.25 1253.52 1481.67 Q1250.47 1477.06 1250.47 1468.33 Q1250.47 1459.58 1253.52 1455 Q1256.6 1450.39 1262.41 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1292.57 1454.1 Q1288.96 1454.1 1287.13 1457.66 Q1285.33 1461.2 1285.33 1468.33 Q1285.33 1475.44 1287.13 1479.01 Q1288.96 1482.55 1292.57 1482.55 Q1296.21 1482.55 1298.01 1479.01 Q1299.84 1475.44 1299.84 1468.33 Q1299.84 1461.2 1298.01 1457.66 Q1296.21 1454.1 1292.57 1454.1 M1292.57 1450.39 Q1298.38 1450.39 1301.44 1455 Q1304.52 1459.58 1304.52 1468.33 Q1304.52 1477.06 1301.44 1481.67 Q1298.38 1486.25 1292.57 1486.25 Q1286.76 1486.25 1283.68 1481.67 Q1280.63 1477.06 1280.63 1468.33 Q1280.63 1459.58 1283.68 1455 Q1286.76 1450.39 1292.57 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1736.88 1481.64 L1744.52 1481.64 L1744.52 1455.28 L1736.21 1456.95 L1736.21 1452.69 L1744.47 1451.02 L1749.15 1451.02 L1749.15 1481.64 L1756.79 1481.64 L1756.79 1485.58 L1736.88 1485.58 L1736.88 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1766.28 1451.02 L1784.64 1451.02 L1784.64 1454.96 L1770.56 1454.96 L1770.56 1463.43 Q1771.58 1463.08 1772.6 1462.92 Q1773.62 1462.73 1774.64 1462.73 Q1780.42 1462.73 1783.8 1465.9 Q1787.18 1469.08 1787.18 1474.49 Q1787.18 1480.07 1783.71 1483.17 Q1780.24 1486.25 1773.92 1486.25 Q1771.74 1486.25 1769.47 1485.88 Q1767.23 1485.51 1764.82 1484.77 L1764.82 1480.07 Q1766.9 1481.2 1769.13 1481.76 Q1771.35 1482.32 1773.83 1482.32 Q1777.83 1482.32 1780.17 1480.21 Q1782.51 1478.1 1782.51 1474.49 Q1782.51 1470.88 1780.17 1468.77 Q1777.83 1466.67 1773.83 1466.67 Q1771.95 1466.67 1770.08 1467.08 Q1768.22 1467.5 1766.28 1468.38 L1766.28 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1806.4 1454.1 Q1802.78 1454.1 1800.96 1457.66 Q1799.15 1461.2 1799.15 1468.33 Q1799.15 1475.44 1800.96 1479.01 Q1802.78 1482.55 1806.4 1482.55 Q1810.03 1482.55 1811.83 1479.01 Q1813.66 1475.44 1813.66 1468.33 Q1813.66 1461.2 1811.83 1457.66 Q1810.03 1454.1 1806.4 1454.1 M1806.4 1450.39 Q1812.21 1450.39 1815.26 1455 Q1818.34 1459.58 1818.34 1468.33 Q1818.34 1477.06 1815.26 1481.67 Q1812.21 1486.25 1806.4 1486.25 Q1800.58 1486.25 1797.51 1481.67 Q1794.45 1477.06 1794.45 1468.33 Q1794.45 1459.58 1797.51 1455 Q1800.58 1450.39 1806.4 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2254.79 1481.64 L2271.11 1481.64 L2271.11 1485.58 L2249.16 1485.58 L2249.16 1481.64 Q2251.83 1478.89 2256.41 1474.26 Q2261.02 1469.61 2262.2 1468.27 Q2264.44 1465.74 2265.32 1464.01 Q2266.22 1462.25 2266.22 1460.56 Q2266.22 1457.8 2264.28 1456.07 Q2262.36 1454.33 2259.26 1454.33 Q2257.06 1454.33 2254.6 1455.09 Q2252.17 1455.86 2249.4 1457.41 L2249.4 1452.69 Q2252.22 1451.55 2254.67 1450.97 Q2257.13 1450.39 2259.16 1450.39 Q2264.53 1450.39 2267.73 1453.08 Q2270.92 1455.77 2270.92 1460.26 Q2270.92 1462.39 2270.11 1464.31 Q2269.33 1466.2 2267.22 1468.8 Q2266.64 1469.47 2263.54 1472.69 Q2260.44 1475.88 2254.79 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2290.92 1454.1 Q2287.31 1454.1 2285.48 1457.66 Q2283.68 1461.2 2283.68 1468.33 Q2283.68 1475.44 2285.48 1479.01 Q2287.31 1482.55 2290.92 1482.55 Q2294.56 1482.55 2296.36 1479.01 Q2298.19 1475.44 2298.19 1468.33 Q2298.19 1461.2 2296.36 1457.66 Q2294.56 1454.1 2290.92 1454.1 M2290.92 1450.39 Q2296.73 1450.39 2299.79 1455 Q2302.87 1459.58 2302.87 1468.33 Q2302.87 1477.06 2299.79 1481.67 Q2296.73 1486.25 2290.92 1486.25 Q2285.11 1486.25 2282.03 1481.67 Q2278.98 1477.06 2278.98 1468.33 Q2278.98 1459.58 2282.03 1455 Q2285.11 1450.39 2290.92 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2321.09 1454.1 Q2317.47 1454.1 2315.65 1457.66 Q2313.84 1461.2 2313.84 1468.33 Q2313.84 1475.44 2315.65 1479.01 Q2317.47 1482.55 2321.09 1482.55 Q2324.72 1482.55 2326.53 1479.01 Q2328.35 1475.44 2328.35 1468.33 Q2328.35 1461.2 2326.53 1457.66 Q2324.72 1454.1 2321.09 1454.1 M2321.09 1450.39 Q2326.9 1450.39 2329.95 1455 Q2333.03 1459.58 2333.03 1468.33 Q2333.03 1477.06 2329.95 1481.67 Q2326.9 1486.25 2321.09 1486.25 Q2315.28 1486.25 2312.2 1481.67 Q2309.14 1477.06 2309.14 1468.33 Q2309.14 1459.58 2312.2 1455 Q2315.28 1450.39 2321.09 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1069.27 1520.52 L1109.47 1520.52 L1109.47 1525.93 L1092.6 1525.93 L1092.6 1568.04 L1086.14 1568.04 L1086.14 1525.93 L1069.27 1525.93 L1069.27 1520.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1113.41 1532.4 L1119.27 1532.4 L1119.27 1568.04 L1113.41 1568.04 L1113.41 1532.4 M1113.41 1518.52 L1119.27 1518.52 L1119.27 1525.93 L1113.41 1525.93 L1113.41 1518.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1159.28 1539.24 Q1161.47 1535.29 1164.53 1533.41 Q1167.58 1531.54 1171.72 1531.54 Q1177.29 1531.54 1180.32 1535.45 Q1183.34 1539.33 1183.34 1546.53 L1183.34 1568.04 L1177.45 1568.04 L1177.45 1546.72 Q1177.45 1541.59 1175.64 1539.11 Q1173.82 1536.63 1170.1 1536.63 Q1165.55 1536.63 1162.91 1539.65 Q1160.26 1542.68 1160.26 1547.9 L1160.26 1568.04 L1154.38 1568.04 L1154.38 1546.72 Q1154.38 1541.56 1152.56 1539.11 Q1150.75 1536.63 1146.96 1536.63 Q1142.47 1536.63 1139.83 1539.68 Q1137.19 1542.71 1137.19 1547.9 L1137.19 1568.04 L1131.3 1568.04 L1131.3 1532.4 L1137.19 1532.4 L1137.19 1537.93 Q1139.19 1534.66 1141.99 1533.1 Q1144.8 1531.54 1148.65 1531.54 Q1152.53 1531.54 1155.24 1533.51 Q1157.97 1535.48 1159.28 1539.24 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1225.51 1548.76 L1225.51 1551.62 L1198.59 1551.62 Q1198.97 1557.67 1202.21 1560.85 Q1205.49 1564 1211.32 1564 Q1214.69 1564 1217.84 1563.17 Q1221.02 1562.35 1224.14 1560.69 L1224.14 1566.23 Q1220.99 1567.57 1217.68 1568.27 Q1214.37 1568.97 1210.97 1568.97 Q1202.44 1568.97 1197.44 1564 Q1192.47 1559.04 1192.47 1550.57 Q1192.47 1541.82 1197.19 1536.69 Q1201.93 1531.54 1209.95 1531.54 Q1217.14 1531.54 1221.31 1536.18 Q1225.51 1540.8 1225.51 1548.76 M1219.66 1547.04 Q1219.59 1542.23 1216.95 1539.37 Q1214.34 1536.5 1210.01 1536.5 Q1205.11 1536.5 1202.15 1539.27 Q1199.22 1542.04 1198.78 1547.07 L1219.66 1547.04 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1269.91 1518.58 Q1265.65 1525.9 1263.58 1533.06 Q1261.51 1540.23 1261.51 1547.58 Q1261.51 1554.93 1263.58 1562.16 Q1265.68 1569.35 1269.91 1576.64 L1264.82 1576.64 Q1260.05 1569.16 1257.66 1561.93 Q1255.3 1554.71 1255.3 1547.58 Q1255.3 1540.48 1257.66 1533.29 Q1260.01 1526.09 1264.82 1518.58 L1269.91 1518.58 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1287.96 1525.81 L1287.96 1562.76 L1295.73 1562.76 Q1305.56 1562.76 1310.11 1558.3 Q1314.7 1553.85 1314.7 1544.24 Q1314.7 1534.69 1310.11 1530.26 Q1305.56 1525.81 1295.73 1525.81 L1287.96 1525.81 M1281.53 1520.52 L1294.74 1520.52 Q1308.55 1520.52 1315.01 1526.28 Q1321.48 1532.01 1321.48 1544.24 Q1321.48 1556.52 1314.98 1562.28 Q1308.49 1568.04 1294.74 1568.04 L1281.53 1568.04 L1281.53 1520.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1347.67 1550.12 Q1340.57 1550.12 1337.84 1551.75 Q1335.1 1553.37 1335.1 1557.29 Q1335.1 1560.4 1337.14 1562.25 Q1339.2 1564.07 1342.74 1564.07 Q1347.61 1564.07 1350.54 1560.63 Q1353.5 1557.16 1353.5 1551.43 L1353.5 1550.12 L1347.67 1550.12 M1359.35 1547.71 L1359.35 1568.04 L1353.5 1568.04 L1353.5 1562.63 Q1351.49 1565.88 1348.5 1567.44 Q1345.51 1568.97 1341.18 1568.97 Q1335.7 1568.97 1332.46 1565.91 Q1329.24 1562.82 1329.24 1557.67 Q1329.24 1551.65 1333.25 1548.6 Q1337.29 1545.54 1345.28 1545.54 L1353.5 1545.54 L1353.5 1544.97 Q1353.5 1540.93 1350.82 1538.73 Q1348.18 1536.5 1343.37 1536.5 Q1340.32 1536.5 1337.42 1537.23 Q1334.53 1537.97 1331.85 1539.43 L1331.85 1534.02 Q1335.07 1532.78 1338.09 1532.17 Q1341.11 1531.54 1343.98 1531.54 Q1351.71 1531.54 1355.53 1535.55 Q1359.35 1539.56 1359.35 1547.71 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1386.25 1571.35 Q1383.76 1577.72 1381.41 1579.66 Q1379.05 1581.6 1375.11 1581.6 L1370.43 1581.6 L1370.43 1576.7 L1373.87 1576.7 Q1376.28 1576.7 1377.62 1575.56 Q1378.96 1574.41 1380.58 1570.14 L1381.63 1567.47 L1367.21 1532.4 L1373.42 1532.4 L1384.56 1560.28 L1395.7 1532.4 L1401.91 1532.4 L1386.25 1571.35 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1432.72 1533.45 L1432.72 1538.98 Q1430.23 1537.71 1427.56 1537.07 Q1424.89 1536.44 1422.02 1536.44 Q1417.66 1536.44 1415.47 1537.77 Q1413.3 1539.11 1413.3 1541.79 Q1413.3 1543.82 1414.86 1545 Q1416.42 1546.15 1421.13 1547.2 L1423.14 1547.64 Q1429.37 1548.98 1431.98 1551.43 Q1434.63 1553.85 1434.63 1558.21 Q1434.63 1563.17 1430.68 1566.07 Q1426.76 1568.97 1419.89 1568.97 Q1417.03 1568.97 1413.91 1568.39 Q1410.82 1567.85 1407.38 1566.74 L1407.38 1560.69 Q1410.63 1562.38 1413.78 1563.24 Q1416.93 1564.07 1420.02 1564.07 Q1424.15 1564.07 1426.38 1562.66 Q1428.61 1561.23 1428.61 1558.65 Q1428.61 1556.27 1426.99 1554.99 Q1425.4 1553.72 1419.95 1552.54 L1417.92 1552.07 Q1412.47 1550.92 1410.05 1548.56 Q1407.64 1546.18 1407.64 1542.04 Q1407.64 1537.01 1411.2 1534.27 Q1414.77 1531.54 1421.32 1531.54 Q1424.57 1531.54 1427.43 1532.01 Q1430.3 1532.49 1432.72 1533.45 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1443.03 1518.58 L1448.12 1518.58 Q1452.9 1526.09 1455.25 1533.29 Q1457.64 1540.48 1457.64 1547.58 Q1457.64 1554.71 1455.25 1561.93 Q1452.9 1569.16 1448.12 1576.64 L1443.03 1576.64 Q1447.26 1569.35 1449.33 1562.16 Q1451.43 1554.93 1451.43 1547.58 Q1451.43 1540.23 1449.33 1533.06 Q1447.26 1525.9 1443.03 1518.58 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  174.149,1298.52 2352.76,1298.52 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  174.149,965.855 2352.76,965.855 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  174.149,633.186 2352.76,633.186 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  174.149,300.517 2352.76,300.517 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,1423.18 174.149,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,1298.52 193.047,1298.52 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,965.855 193.047,965.855 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,633.186 193.047,633.186 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,300.517 193.047,300.517 \n  \"/>\n<path clip-path=\"url(#clip540)\" d=\"M126.205 1284.32 Q122.593 1284.32 120.765 1287.89 Q118.959 1291.43 118.959 1298.56 Q118.959 1305.67 120.765 1309.23 Q122.593 1312.77 126.205 1312.77 Q129.839 1312.77 131.644 1309.23 Q133.473 1305.67 133.473 1298.56 Q133.473 1291.43 131.644 1287.89 Q129.839 1284.32 126.205 1284.32 M126.205 1280.62 Q132.015 1280.62 135.07 1285.23 Q138.149 1289.81 138.149 1298.56 Q138.149 1307.29 135.07 1311.89 Q132.015 1316.48 126.205 1316.48 Q120.394 1316.48 117.316 1311.89 Q114.26 1307.29 114.26 1298.56 Q114.26 1289.81 117.316 1285.23 Q120.394 1280.62 126.205 1280.62 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M118.242 979.2 L125.88 979.2 L125.88 952.835 L117.57 954.501 L117.57 950.242 L125.834 948.575 L130.51 948.575 L130.51 979.2 L138.149 979.2 L138.149 983.135 L118.242 983.135 L118.242 979.2 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M121.83 646.531 L138.149 646.531 L138.149 650.466 L116.205 650.466 L116.205 646.531 Q118.867 643.777 123.45 639.147 Q128.056 634.494 129.237 633.152 Q131.482 630.629 132.362 628.892 Q133.265 627.133 133.265 625.443 Q133.265 622.689 131.32 620.953 Q129.399 619.217 126.297 619.217 Q124.098 619.217 121.644 619.98 Q119.214 620.744 116.436 622.295 L116.436 617.573 Q119.26 616.439 121.714 615.86 Q124.168 615.281 126.205 615.281 Q131.575 615.281 134.769 617.967 Q137.964 620.652 137.964 625.142 Q137.964 627.272 137.154 629.193 Q136.367 631.092 134.26 633.684 Q133.681 634.355 130.58 637.573 Q127.478 640.767 121.83 646.531 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M131.019 299.163 Q134.376 299.881 136.251 302.149 Q138.149 304.418 138.149 307.751 Q138.149 312.867 134.63 315.668 Q131.112 318.469 124.63 318.469 Q122.455 318.469 120.14 318.029 Q117.848 317.612 115.394 316.756 L115.394 312.242 Q117.339 313.376 119.654 313.955 Q121.968 314.534 124.492 314.534 Q128.89 314.534 131.181 312.797 Q133.496 311.061 133.496 307.751 Q133.496 304.696 131.343 302.983 Q129.214 301.247 125.394 301.247 L121.367 301.247 L121.367 297.404 L125.58 297.404 Q129.029 297.404 130.857 296.038 Q132.686 294.649 132.686 292.057 Q132.686 289.395 130.788 287.983 Q128.913 286.548 125.394 286.548 Q123.473 286.548 121.274 286.964 Q119.075 287.381 116.436 288.261 L116.436 284.094 Q119.098 283.353 121.413 282.983 Q123.751 282.612 125.811 282.612 Q131.135 282.612 134.237 285.043 Q137.339 287.45 137.339 291.571 Q137.339 294.441 135.695 296.432 Q134.052 298.399 131.019 299.163 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M21.7677 859.025 L39.6235 859.025 L39.6235 850.941 Q39.6235 846.453 37.3 844.002 Q34.9765 841.551 30.6797 841.551 Q26.4147 841.551 24.0912 844.002 Q21.7677 846.453 21.7677 850.941 L21.7677 859.025 M16.4842 865.454 L16.4842 850.941 Q16.4842 842.952 20.1126 838.878 Q23.7092 834.772 30.6797 834.772 Q37.7138 834.772 41.3104 838.878 Q44.907 842.952 44.907 850.941 L44.907 859.025 L64.0042 859.025 L64.0042 865.454 L16.4842 865.454 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M32.4621 814.911 Q32.4621 819.621 36.1542 822.358 Q39.8145 825.096 46.212 825.096 Q52.6095 825.096 56.3017 822.39 Q59.9619 819.653 59.9619 814.911 Q59.9619 810.232 56.2698 807.495 Q52.5777 804.757 46.212 804.757 Q39.8781 804.757 36.186 807.495 Q32.4621 810.232 32.4621 814.911 M27.4968 814.911 Q27.4968 807.272 32.4621 802.911 Q37.4273 798.551 46.212 798.551 Q54.9649 798.551 59.9619 802.911 Q64.9272 807.272 64.9272 814.911 Q64.9272 822.581 59.9619 826.942 Q54.9649 831.27 46.212 831.27 Q37.4273 831.27 32.4621 826.942 Q27.4968 822.581 27.4968 814.911 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M58.657 783.178 L77.5631 783.178 L77.5631 789.066 L28.3562 789.066 L28.3562 783.178 L33.7671 783.178 Q30.5842 781.332 29.0564 778.531 Q27.4968 775.698 27.4968 771.783 Q27.4968 765.29 32.6531 761.248 Q37.8093 757.174 46.212 757.174 Q54.6147 757.174 59.771 761.248 Q64.9272 765.29 64.9272 771.783 Q64.9272 775.698 63.3994 778.531 Q61.8398 781.332 58.657 783.178 M46.212 763.253 Q39.7508 763.253 36.0905 765.927 Q32.3984 768.568 32.3984 773.215 Q32.3984 777.862 36.0905 780.536 Q39.7508 783.178 46.212 783.178 Q52.6732 783.178 56.3653 780.536 Q60.0256 777.862 60.0256 773.215 Q60.0256 768.568 56.3653 765.927 Q52.6732 763.253 46.212 763.253 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M55.9197 746.638 L55.9197 739.923 L64.0042 739.923 L64.0042 746.638 L55.9197 746.638 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M14.5426 691.957 Q21.8632 696.222 29.0246 698.291 Q36.186 700.36 43.5384 700.36 Q50.8908 700.36 58.1159 698.291 Q65.3091 696.19 72.5979 691.957 L72.5979 697.05 Q65.1182 701.824 57.8931 704.211 Q50.668 706.566 43.5384 706.566 Q36.4406 706.566 29.2474 704.211 Q22.0542 701.856 14.5426 697.05 L14.5426 691.957 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M43.0928 639.344 Q43.0928 642.114 45.4481 643.705 Q47.8034 645.265 52.0048 645.265 Q56.1425 645.265 58.5296 643.705 Q60.885 642.114 60.885 639.344 Q60.885 636.639 58.5296 635.079 Q56.1425 633.488 52.0048 633.488 Q47.8353 633.488 45.48 635.079 Q43.0928 636.639 43.0928 639.344 M39.0506 639.344 Q39.0506 634.316 42.5517 631.355 Q46.0529 628.395 52.0048 628.395 Q57.9567 628.395 61.4579 631.387 Q64.9272 634.347 64.9272 639.344 Q64.9272 644.437 61.4579 647.397 Q57.9567 650.357 52.0048 650.357 Q46.021 650.357 42.5517 647.397 Q39.0506 644.405 39.0506 639.344 M19.667 672.191 Q19.667 674.929 22.0542 676.52 Q24.4095 678.08 28.5472 678.08 Q32.7485 678.08 35.1038 676.52 Q37.4592 674.961 37.4592 672.191 Q37.4592 669.422 35.1038 667.863 Q32.7485 666.271 28.5472 666.271 Q24.4413 666.271 22.0542 667.863 Q19.667 669.454 19.667 672.191 M15.6248 643.45 L15.6248 638.358 L64.9272 668.086 L64.9272 673.178 L15.6248 643.45 M15.6248 672.191 Q15.6248 667.163 19.1259 664.171 Q22.5952 661.179 28.5472 661.179 Q34.5628 661.179 38.0321 664.171 Q41.5014 667.131 41.5014 672.191 Q41.5014 677.252 38.0321 680.212 Q34.5309 683.14 28.5472 683.14 Q22.6271 683.14 19.1259 680.18 Q15.6248 677.22 15.6248 672.191 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M14.5426 619.579 L14.5426 614.486 Q22.0542 609.712 29.2474 607.357 Q36.4406 604.97 43.5384 604.97 Q50.668 604.97 57.8931 607.357 Q65.1182 609.712 72.5979 614.486 L72.5979 619.579 Q65.3091 615.346 58.1159 613.277 Q50.8908 611.176 43.5384 611.176 Q36.186 611.176 29.0246 613.277 Q21.8632 615.346 14.5426 619.579 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip542)\" style=\"stroke:#008000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  235.808,1298.52 235.818,1298.52 235.828,1298.52 235.849,1298.52 235.89,1298.52 236.013,1298.52 236.219,1298.52 236.63,1298.52 237.863,1298.5 239.918,1298.49 \n  244.029,1298.46 276.913,1298.22 318.019,1297.46 359.125,1294.67 400.231,1284.14 441.337,1246.64 482.442,1149.97 523.548,1076.34 564.654,1073.61 605.76,1070.17 \n  646.866,1065.94 687.971,1060.82 729.077,1054.78 770.183,1047.74 811.289,1039.69 852.394,1030.58 893.5,1022.55 934.606,1027.84 975.712,1031.79 1016.82,1033.98 \n  1057.92,1033.86 1099.03,1030.61 1140.14,1022.99 1181.24,1009.02 1222.35,985.531 1263.45,947.623 1304.56,888.186 1345.66,904.249 1386.77,946.264 1427.88,974.945 \n  1468.98,992.986 1510.09,1002.53 1551.19,1005.04 1592.3,1001.45 1633.4,992.195 1674.51,977.406 1715.62,956.974 1756.72,930.698 1797.83,898.46 1838.93,910.951 \n  1880.04,924.542 1921.15,935.665 1962.25,944.59 2003.36,952.528 2044.46,963.965 2085.57,973.728 2126.67,981.988 2167.78,997.561 2208.89,1014.53 2249.99,999.025 \n  2291.1,1002.5 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#008000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:0.4; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  235.808,1298.52 235.818,1298.52 235.828,1298.52 235.849,1298.52 235.89,1298.52 236.013,1298.52 236.219,1298.52 236.63,1298.51 237.863,1298.49 239.918,1298.47 \n  244.029,1298.43 276.913,1298.02 318.019,1296.43 359.125,1290.15 400.231,1265.49 441.337,1175.82 482.442,943.707 523.548,768.449 564.654,763.868 605.76,757.895 \n  646.866,750.347 687.971,741.047 729.077,729.828 770.183,716.552 811.289,701.151 852.394,683.674 893.5,669.25 934.606,686.011 975.712,700.752 1016.82,713.248 \n  1057.92,723.351 1099.03,730.836 1140.14,735.193 1181.24,735.196 1222.35,727.789 1263.45,705.255 1304.56,649.331 1345.66,690.951 1386.77,750.975 1427.88,779.327 \n  1468.98,789.181 1510.09,788.304 1551.19,780.163 1592.3,765.787 1633.4,744.828 1674.51,716.073 1715.62,677.751 1756.72,627.876 1797.83,564.755 1838.93,581.051 \n  1880.04,598.548 1921.15,610.85 1962.25,618.805 2003.36,625.116 2044.46,638.985 2085.57,650.539 2126.67,660.17 2167.78,685.743 2208.89,715.436 2249.99,680.132 \n  2291.1,684.32 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#008000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:0.4; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  235.808,1298.52 235.818,1298.52 235.828,1298.52 235.849,1298.52 235.89,1298.52 236.013,1298.52 236.219,1298.52 236.63,1298.52 237.863,1298.51 239.918,1298.51 \n  244.029,1298.49 276.913,1298.43 318.019,1298.49 359.125,1299.18 400.231,1302.79 441.337,1317.46 482.442,1356.24 523.548,1384.24 564.654,1383.34 605.76,1382.45 \n  646.866,1381.53 687.971,1380.6 729.077,1379.72 770.183,1378.94 811.289,1378.22 852.394,1377.49 893.5,1375.85 934.606,1369.67 975.712,1362.84 1016.82,1354.72 \n  1057.92,1344.36 1099.03,1330.38 1140.14,1310.79 1181.24,1282.85 1222.35,1243.27 1263.45,1189.99 1304.56,1127.04 1345.66,1117.55 1386.77,1141.55 1427.88,1170.56 \n  1468.98,1196.79 1510.09,1216.75 1551.19,1229.93 1592.3,1237.11 1633.4,1239.56 1674.51,1238.74 1715.62,1236.2 1756.72,1233.52 1797.83,1232.17 1838.93,1240.85 \n  1880.04,1250.54 1921.15,1260.48 1962.25,1270.38 2003.36,1279.94 2044.46,1288.94 2085.57,1296.92 2126.67,1303.81 2167.78,1309.38 2208.89,1313.62 2249.99,1317.92 \n  2291.1,1320.68 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#800080; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  235.808,1298.19 235.818,1298.19 235.828,1298.19 235.849,1298.19 235.89,1298.19 236.013,1298.19 236.219,1298.2 236.63,1298.2 237.863,1298.21 239.918,1298.22 \n  244.029,1298.24 276.913,1298.07 318.019,1297.31 359.125,1294.56 400.231,1284.61 441.337,1250.15 482.442,1166.84 523.548,1135.26 564.654,1166.83 605.76,1164.22 \n  646.866,1160.97 687.971,1157.06 729.077,1152.43 770.183,1146.99 811.289,1140.66 852.394,1133.31 893.5,1127.13 934.606,1134.5 975.712,1133.25 1016.82,1129.74 \n  1057.92,1123.09 1099.03,1111.92 1140.14,1094 1181.24,1065.74 1222.35,1021.39 1263.45,952.059 1304.56,844.883 1345.66,890.656 1386.77,935.733 1427.88,938.522 \n  1468.98,934.765 1510.09,925.059 1551.19,909.497 1592.3,887.799 1633.4,859.402 1674.51,823.539 1715.62,779.366 1756.72,726.17 1797.83,663.681 1838.93,730.791 \n  1880.04,747.733 1921.15,757.414 1962.25,764.789 2003.36,772.796 2044.46,792.514 2085.57,803.576 2126.67,812.929 2167.78,845.455 2208.89,872.938 2249.99,806.06 \n  2291.1,835.529 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#800080; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:0.4; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  235.808,1298.19 235.818,1298.19 235.828,1298.19 235.849,1298.19 235.89,1298.19 236.013,1298.19 236.219,1298.19 236.63,1298.2 237.863,1298.2 239.918,1298.21 \n  244.029,1298.22 276.913,1297.99 318.019,1296.58 359.125,1290.85 400.231,1268.5 441.337,1188.31 482.442,992.564 523.548,920.22 564.654,996.13 605.76,991.662 \n  646.866,986.111 687.971,979.373 729.077,971.35 770.183,961.972 811.289,951.229 852.394,939.196 893.5,931.2 934.606,954.342 975.712,960.529 1016.82,965.017 \n  1057.92,967.36 1099.03,966.471 1140.14,959.566 1181.24,939.147 1222.35,886.5 1263.45,770.259 1304.56,562.073 1345.66,597.279 1386.77,648.897 1427.88,638.169 \n  1468.98,622.021 1510.09,599.827 1551.19,570.162 1592.3,530.906 1633.4,479.303 1674.51,412.107 1715.62,325.923 1756.72,217.813 1797.83,86.1857 1838.93,199.856 \n  1880.04,218.226 1921.15,222.78 1962.25,223.497 2003.36,226.636 2044.46,255.275 2085.57,268.046 2126.67,278.925 2167.78,339.935 2208.89,392.365 2249.99,247.611 \n  2291.1,306.525 \n  \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#800080; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:0.4; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  235.808,1298.19 235.818,1298.19 235.828,1298.19 235.849,1298.19 235.89,1298.19 236.013,1298.2 236.219,1298.2 236.63,1298.2 237.863,1298.22 239.918,1298.24 \n  244.029,1298.27 276.913,1298.15 318.019,1298.03 359.125,1298.28 400.231,1300.71 441.337,1312 482.442,1341.11 523.548,1350.3 564.654,1337.53 605.76,1336.77 \n  646.866,1335.84 687.971,1334.76 729.077,1333.51 770.183,1332 811.289,1330.08 852.394,1327.42 893.5,1323.06 934.606,1314.66 975.712,1305.96 1016.82,1294.46 \n  1057.92,1278.82 1099.03,1257.37 1140.14,1228.43 1181.24,1192.32 1222.35,1156.28 1263.45,1133.86 1304.56,1127.69 1345.66,1184.03 1386.77,1222.57 1427.88,1238.87 \n  1468.98,1247.51 1510.09,1250.29 1551.19,1248.83 1592.3,1244.69 1633.4,1239.5 1674.51,1234.97 1715.62,1232.81 1756.72,1234.53 1797.83,1241.18 1838.93,1261.73 \n  1880.04,1277.24 1921.15,1292.05 1962.25,1306.08 2003.36,1318.96 2044.46,1329.75 2085.57,1339.11 2126.67,1346.93 2167.78,1350.98 2208.89,1353.51 2249.99,1364.51 \n  2291.1,1364.53 \n  \"/>\n<path clip-path=\"url(#clip540)\" d=\"\nM1903.44 248.629 L2280.14 248.629 L2280.14 93.1086 L1903.44 93.1086  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1903.44,248.629 2280.14,248.629 2280.14,93.1086 1903.44,93.1086 1903.44,248.629 \n  \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#008000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1927.65,144.949 2072.89,144.949 \n  \"/>\n<path clip-path=\"url(#clip540)\" d=\"M2097.09 136.303 L2101.35 136.303 L2101.35 162.229 L2097.09 162.229 L2097.09 136.303 M2097.09 126.21 L2101.35 126.21 L2101.35 131.604 L2097.09 131.604 L2097.09 126.21 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2120.5 126.257 Q2117.39 131.581 2115.89 136.789 Q2114.38 141.997 2114.38 147.344 Q2114.38 152.692 2115.89 157.946 Q2117.42 163.178 2120.5 168.479 L2116.79 168.479 Q2113.32 163.039 2111.58 157.784 Q2109.87 152.53 2109.87 147.344 Q2109.87 142.182 2111.58 136.951 Q2113.3 131.72 2116.79 126.257 L2120.5 126.257 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2132.97 128.942 L2132.97 136.303 L2141.75 136.303 L2141.75 139.613 L2132.97 139.613 L2132.97 153.687 Q2132.97 156.858 2133.83 157.761 Q2134.71 158.664 2137.37 158.664 L2141.75 158.664 L2141.75 162.229 L2137.37 162.229 Q2132.44 162.229 2130.57 160.4 Q2128.69 158.548 2128.69 153.687 L2128.69 139.613 L2125.57 139.613 L2125.57 136.303 L2128.69 136.303 L2128.69 128.942 L2132.97 128.942 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2148.44 156.349 L2153.32 156.349 L2153.32 160.33 L2149.52 167.738 L2146.54 167.738 L2148.44 160.33 L2148.44 156.349 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2189.92 159.289 Q2192.97 159.312 2194.8 161.048 Q2196.75 162.877 2196.75 165.655 Q2196.75 168.317 2195.03 170.168 Q2193.18 172.182 2189.41 172.182 Q2189.41 170.446 2189.41 168.687 Q2191 168.803 2191.98 167.784 Q2192.72 166.974 2192.72 166.117 Q2192.72 164.891 2191.98 163.872 Q2191.26 162.9 2189.92 162.9 Q2175.5 162.9 2175.5 152.784 Q2175.5 145.84 2183.2 143.803 Q2176.72 142.969 2176.72 136.951 Q2176.72 132.391 2181.82 130.493 L2177 130.493 L2177 126.21 L2195.26 126.21 L2195.26 130.493 Q2180.7 130.493 2180.7 137.229 Q2180.7 141.65 2192.93 141.858 L2192.93 145.794 Q2179.73 145.284 2179.78 152.784 Q2179.8 159.057 2189.92 159.289 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2203.25 126.257 L2206.95 126.257 Q2210.43 131.72 2212.14 136.951 Q2213.88 142.182 2213.88 147.344 Q2213.88 152.53 2212.14 157.784 Q2210.43 163.039 2206.95 168.479 L2203.25 168.479 Q2206.33 163.178 2207.83 157.946 Q2209.36 152.692 2209.36 147.344 Q2209.36 141.997 2207.83 136.789 Q2206.33 131.581 2203.25 126.257 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip540)\" style=\"stroke:#800080; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1927.65,196.789 2072.89,196.789 \n  \"/>\n<path clip-path=\"url(#clip540)\" d=\"M2121.12 200.041 L2121.12 202.124 L2101.54 202.124 Q2101.82 206.522 2104.18 208.837 Q2106.56 211.129 2110.8 211.129 Q2113.25 211.129 2115.54 210.527 Q2117.86 209.925 2120.13 208.721 L2120.13 212.749 Q2117.83 213.721 2115.43 214.231 Q2113.02 214.74 2110.54 214.74 Q2104.34 214.74 2100.7 211.129 Q2097.09 207.518 2097.09 201.36 Q2097.09 194.995 2100.52 191.268 Q2103.97 187.518 2109.8 187.518 Q2115.03 187.518 2118.07 190.897 Q2121.12 194.254 2121.12 200.041 M2116.86 198.791 Q2116.82 195.296 2114.89 193.212 Q2113 191.129 2109.85 191.129 Q2106.28 191.129 2104.13 193.143 Q2102 195.157 2101.68 198.814 L2116.86 198.791 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2138.34 178.097 Q2135.24 183.421 2133.74 188.629 Q2132.23 193.837 2132.23 199.184 Q2132.23 204.532 2133.74 209.786 Q2135.26 215.018 2138.34 220.319 L2134.64 220.319 Q2131.17 214.879 2129.43 209.624 Q2127.72 204.37 2127.72 199.184 Q2127.72 194.022 2129.43 188.791 Q2131.14 183.56 2134.64 178.097 L2138.34 178.097 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2150.82 180.782 L2150.82 188.143 L2159.59 188.143 L2159.59 191.453 L2150.82 191.453 L2150.82 205.527 Q2150.82 208.698 2151.68 209.601 Q2152.56 210.504 2155.22 210.504 L2159.59 210.504 L2159.59 214.069 L2155.22 214.069 Q2150.29 214.069 2148.41 212.24 Q2146.54 210.388 2146.54 205.527 L2146.54 191.453 L2143.41 191.453 L2143.41 188.143 L2146.54 188.143 L2146.54 180.782 L2150.82 180.782 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2166.28 208.189 L2171.17 208.189 L2171.17 212.17 L2167.37 219.578 L2164.38 219.578 L2166.28 212.17 L2166.28 208.189 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2207.76 211.129 Q2210.82 211.152 2212.65 212.888 Q2214.59 214.717 2214.59 217.495 Q2214.59 220.157 2212.88 222.008 Q2211.03 224.022 2207.25 224.022 Q2207.25 222.286 2207.25 220.527 Q2208.85 220.643 2209.82 219.624 Q2210.56 218.814 2210.56 217.957 Q2210.56 216.731 2209.82 215.712 Q2209.11 214.74 2207.76 214.74 Q2193.34 214.74 2193.34 204.624 Q2193.34 197.68 2201.05 195.643 Q2194.57 194.809 2194.57 188.791 Q2194.57 184.231 2199.66 182.333 L2194.85 182.333 L2194.85 178.05 L2213.11 178.05 L2213.11 182.333 Q2198.55 182.333 2198.55 189.069 Q2198.55 193.49 2210.77 193.698 L2210.77 197.634 Q2197.58 197.124 2197.63 204.624 Q2197.65 210.897 2207.76 211.129 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2221.1 178.097 L2224.8 178.097 Q2228.27 183.56 2229.99 188.791 Q2231.72 194.022 2231.72 199.184 Q2231.72 204.37 2229.99 209.624 Q2228.27 214.879 2224.8 220.319 L2221.1 220.319 Q2224.18 215.018 2225.68 209.786 Q2227.21 204.532 2227.21 199.184 Q2227.21 193.837 2225.68 188.629 Q2224.18 183.421 2221.1 178.097 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Plot the values of u(t) over time:","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"plot(ts, u_opt, linecolor = :orange, label = \"u(t)\", ylims = (-0.02, 1.02),\n     background_color = :transparent)\nxlabel!(\"Time (Days)\")\nylabel!(\"Distancing Ratio\")","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip570\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip570)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<defs>\n  <clipPath id=\"clip571\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip570)\" d=\"\nM249.542 1423.18 L2352.76 1423.18 L2352.76 47.2441 L249.542 47.2441  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<defs>\n  <clipPath id=\"clip572\">\n    <rect x=\"249\" y=\"47\" width=\"2104\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  309.067,1423.18 309.067,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  805.108,1423.18 805.108,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1301.15,1423.18 1301.15,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1797.19,1423.18 1797.19,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2293.23,1423.18 2293.23,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  249.542,1423.18 2352.76,1423.18 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  309.067,1423.18 309.067,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  805.108,1423.18 805.108,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1301.15,1423.18 1301.15,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1797.19,1423.18 1797.19,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2293.23,1423.18 2293.23,1404.28 \n  \"/>\n<path clip-path=\"url(#clip570)\" d=\"M309.067 1454.1 Q305.456 1454.1 303.627 1457.66 Q301.822 1461.2 301.822 1468.33 Q301.822 1475.44 303.627 1479.01 Q305.456 1482.55 309.067 1482.55 Q312.701 1482.55 314.507 1479.01 Q316.335 1475.44 316.335 1468.33 Q316.335 1461.2 314.507 1457.66 Q312.701 1454.1 309.067 1454.1 M309.067 1450.39 Q314.877 1450.39 317.933 1455 Q321.011 1459.58 321.011 1468.33 Q321.011 1477.06 317.933 1481.67 Q314.877 1486.25 309.067 1486.25 Q303.257 1486.25 300.178 1481.67 Q297.123 1477.06 297.123 1468.33 Q297.123 1459.58 300.178 1455 Q303.257 1450.39 309.067 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M779.807 1451.02 L798.164 1451.02 L798.164 1454.96 L784.09 1454.96 L784.09 1463.43 Q785.108 1463.08 786.127 1462.92 Q787.145 1462.73 788.164 1462.73 Q793.951 1462.73 797.33 1465.9 Q800.71 1469.08 800.71 1474.49 Q800.71 1480.07 797.238 1483.17 Q793.765 1486.25 787.446 1486.25 Q785.27 1486.25 783.002 1485.88 Q780.756 1485.51 778.349 1484.77 L778.349 1480.07 Q780.432 1481.2 782.654 1481.76 Q784.877 1482.32 787.353 1482.32 Q791.358 1482.32 793.696 1480.21 Q796.034 1478.1 796.034 1474.49 Q796.034 1470.88 793.696 1468.77 Q791.358 1466.67 787.353 1466.67 Q785.478 1466.67 783.603 1467.08 Q781.752 1467.5 779.807 1468.38 L779.807 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M819.923 1454.1 Q816.312 1454.1 814.483 1457.66 Q812.677 1461.2 812.677 1468.33 Q812.677 1475.44 814.483 1479.01 Q816.312 1482.55 819.923 1482.55 Q823.557 1482.55 825.362 1479.01 Q827.191 1475.44 827.191 1468.33 Q827.191 1461.2 825.362 1457.66 Q823.557 1454.1 819.923 1454.1 M819.923 1450.39 Q825.733 1450.39 828.788 1455 Q831.867 1459.58 831.867 1468.33 Q831.867 1477.06 828.788 1481.67 Q825.733 1486.25 819.923 1486.25 Q814.113 1486.25 811.034 1481.67 Q807.978 1477.06 807.978 1468.33 Q807.978 1459.58 811.034 1455 Q814.113 1450.39 819.923 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1260.76 1481.64 L1268.39 1481.64 L1268.39 1455.28 L1260.08 1456.95 L1260.08 1452.69 L1268.35 1451.02 L1273.02 1451.02 L1273.02 1481.64 L1280.66 1481.64 L1280.66 1485.58 L1260.76 1485.58 L1260.76 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1300.11 1454.1 Q1296.5 1454.1 1294.67 1457.66 Q1292.86 1461.2 1292.86 1468.33 Q1292.86 1475.44 1294.67 1479.01 Q1296.5 1482.55 1300.11 1482.55 Q1303.74 1482.55 1305.55 1479.01 Q1307.38 1475.44 1307.38 1468.33 Q1307.38 1461.2 1305.55 1457.66 Q1303.74 1454.1 1300.11 1454.1 M1300.11 1450.39 Q1305.92 1450.39 1308.97 1455 Q1312.05 1459.58 1312.05 1468.33 Q1312.05 1477.06 1308.97 1481.67 Q1305.92 1486.25 1300.11 1486.25 Q1294.3 1486.25 1291.22 1481.67 Q1288.16 1477.06 1288.16 1468.33 Q1288.16 1459.58 1291.22 1455 Q1294.3 1450.39 1300.11 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1330.27 1454.1 Q1326.66 1454.1 1324.83 1457.66 Q1323.02 1461.2 1323.02 1468.33 Q1323.02 1475.44 1324.83 1479.01 Q1326.66 1482.55 1330.27 1482.55 Q1333.9 1482.55 1335.71 1479.01 Q1337.54 1475.44 1337.54 1468.33 Q1337.54 1461.2 1335.71 1457.66 Q1333.9 1454.1 1330.27 1454.1 M1330.27 1450.39 Q1336.08 1450.39 1339.13 1455 Q1342.21 1459.58 1342.21 1468.33 Q1342.21 1477.06 1339.13 1481.67 Q1336.08 1486.25 1330.27 1486.25 Q1324.46 1486.25 1321.38 1481.67 Q1318.32 1477.06 1318.32 1468.33 Q1318.32 1459.58 1321.38 1455 Q1324.46 1450.39 1330.27 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1756.8 1481.64 L1764.44 1481.64 L1764.44 1455.28 L1756.13 1456.95 L1756.13 1452.69 L1764.39 1451.02 L1769.07 1451.02 L1769.07 1481.64 L1776.7 1481.64 L1776.7 1485.58 L1756.8 1485.58 L1756.8 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1786.19 1451.02 L1804.55 1451.02 L1804.55 1454.96 L1790.48 1454.96 L1790.48 1463.43 Q1791.5 1463.08 1792.51 1462.92 Q1793.53 1462.73 1794.55 1462.73 Q1800.34 1462.73 1803.72 1465.9 Q1807.1 1469.08 1807.1 1474.49 Q1807.1 1480.07 1803.63 1483.17 Q1800.15 1486.25 1793.83 1486.25 Q1791.66 1486.25 1789.39 1485.88 Q1787.14 1485.51 1784.74 1484.77 L1784.74 1480.07 Q1786.82 1481.2 1789.04 1481.76 Q1791.26 1482.32 1793.74 1482.32 Q1797.75 1482.32 1800.08 1480.21 Q1802.42 1478.1 1802.42 1474.49 Q1802.42 1470.88 1800.08 1468.77 Q1797.75 1466.67 1793.74 1466.67 Q1791.87 1466.67 1789.99 1467.08 Q1788.14 1467.5 1786.19 1468.38 L1786.19 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1826.31 1454.1 Q1822.7 1454.1 1820.87 1457.66 Q1819.06 1461.2 1819.06 1468.33 Q1819.06 1475.44 1820.87 1479.01 Q1822.7 1482.55 1826.31 1482.55 Q1829.94 1482.55 1831.75 1479.01 Q1833.58 1475.44 1833.58 1468.33 Q1833.58 1461.2 1831.75 1457.66 Q1829.94 1454.1 1826.31 1454.1 M1826.31 1450.39 Q1832.12 1450.39 1835.18 1455 Q1838.25 1459.58 1838.25 1468.33 Q1838.25 1477.06 1835.18 1481.67 Q1832.12 1486.25 1826.31 1486.25 Q1820.5 1486.25 1817.42 1481.67 Q1814.37 1477.06 1814.37 1468.33 Q1814.37 1459.58 1817.42 1455 Q1820.5 1450.39 1826.31 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2256.92 1481.64 L2273.24 1481.64 L2273.24 1485.58 L2251.3 1485.58 L2251.3 1481.64 Q2253.96 1478.89 2258.54 1474.26 Q2263.15 1469.61 2264.33 1468.27 Q2266.58 1465.74 2267.46 1464.01 Q2268.36 1462.25 2268.36 1460.56 Q2268.36 1457.8 2266.41 1456.07 Q2264.49 1454.33 2261.39 1454.33 Q2259.19 1454.33 2256.74 1455.09 Q2254.31 1455.86 2251.53 1457.41 L2251.53 1452.69 Q2254.35 1451.55 2256.81 1450.97 Q2259.26 1450.39 2261.3 1450.39 Q2266.67 1450.39 2269.86 1453.08 Q2273.06 1455.77 2273.06 1460.26 Q2273.06 1462.39 2272.25 1464.31 Q2271.46 1466.2 2269.35 1468.8 Q2268.78 1469.47 2265.67 1472.69 Q2262.57 1475.88 2256.92 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2293.06 1454.1 Q2289.45 1454.1 2287.62 1457.66 Q2285.81 1461.2 2285.81 1468.33 Q2285.81 1475.44 2287.62 1479.01 Q2289.45 1482.55 2293.06 1482.55 Q2296.69 1482.55 2298.5 1479.01 Q2300.33 1475.44 2300.33 1468.33 Q2300.33 1461.2 2298.5 1457.66 Q2296.69 1454.1 2293.06 1454.1 M2293.06 1450.39 Q2298.87 1450.39 2301.92 1455 Q2305 1459.58 2305 1468.33 Q2305 1477.06 2301.92 1481.67 Q2298.87 1486.25 2293.06 1486.25 Q2287.25 1486.25 2284.17 1481.67 Q2281.11 1477.06 2281.11 1468.33 Q2281.11 1459.58 2284.17 1455 Q2287.25 1450.39 2293.06 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2323.22 1454.1 Q2319.61 1454.1 2317.78 1457.66 Q2315.97 1461.2 2315.97 1468.33 Q2315.97 1475.44 2317.78 1479.01 Q2319.61 1482.55 2323.22 1482.55 Q2326.85 1482.55 2328.66 1479.01 Q2330.49 1475.44 2330.49 1468.33 Q2330.49 1461.2 2328.66 1457.66 Q2326.85 1454.1 2323.22 1454.1 M2323.22 1450.39 Q2329.03 1450.39 2332.08 1455 Q2335.16 1459.58 2335.16 1468.33 Q2335.16 1477.06 2332.08 1481.67 Q2329.03 1486.25 2323.22 1486.25 Q2317.41 1486.25 2314.33 1481.67 Q2311.27 1477.06 2311.27 1468.33 Q2311.27 1459.58 2314.33 1455 Q2317.41 1450.39 2323.22 1450.39 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1106.96 1520.52 L1147.16 1520.52 L1147.16 1525.93 L1130.29 1525.93 L1130.29 1568.04 L1123.83 1568.04 L1123.83 1525.93 L1106.96 1525.93 L1106.96 1520.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1151.11 1532.4 L1156.97 1532.4 L1156.97 1568.04 L1151.11 1568.04 L1151.11 1532.4 M1151.11 1518.52 L1156.97 1518.52 L1156.97 1525.93 L1151.11 1525.93 L1151.11 1518.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1196.97 1539.24 Q1199.17 1535.29 1202.23 1533.41 Q1205.28 1531.54 1209.42 1531.54 Q1214.99 1531.54 1218.01 1535.45 Q1221.04 1539.33 1221.04 1546.53 L1221.04 1568.04 L1215.15 1568.04 L1215.15 1546.72 Q1215.15 1541.59 1213.33 1539.11 Q1211.52 1536.63 1207.8 1536.63 Q1203.24 1536.63 1200.6 1539.65 Q1197.96 1542.68 1197.96 1547.9 L1197.96 1568.04 L1192.07 1568.04 L1192.07 1546.72 Q1192.07 1541.56 1190.26 1539.11 Q1188.44 1536.63 1184.66 1536.63 Q1180.17 1536.63 1177.53 1539.68 Q1174.89 1542.71 1174.89 1547.9 L1174.89 1568.04 L1169 1568.04 L1169 1532.4 L1174.89 1532.4 L1174.89 1537.93 Q1176.89 1534.66 1179.69 1533.1 Q1182.49 1531.54 1186.34 1531.54 Q1190.23 1531.54 1192.93 1533.51 Q1195.67 1535.48 1196.97 1539.24 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1263.21 1548.76 L1263.21 1551.62 L1236.28 1551.62 Q1236.66 1557.67 1239.91 1560.85 Q1243.19 1564 1249.01 1564 Q1252.39 1564 1255.54 1563.17 Q1258.72 1562.35 1261.84 1560.69 L1261.84 1566.23 Q1258.69 1567.57 1255.38 1568.27 Q1252.07 1568.97 1248.66 1568.97 Q1240.13 1568.97 1235.14 1564 Q1230.17 1559.04 1230.17 1550.57 Q1230.17 1541.82 1234.88 1536.69 Q1239.62 1531.54 1247.65 1531.54 Q1254.84 1531.54 1259.01 1536.18 Q1263.21 1540.8 1263.21 1548.76 M1257.35 1547.04 Q1257.29 1542.23 1254.65 1539.37 Q1252.04 1536.5 1247.71 1536.5 Q1242.81 1536.5 1239.85 1539.27 Q1236.92 1542.04 1236.47 1547.07 L1257.35 1547.04 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1307.61 1518.58 Q1303.35 1525.9 1301.28 1533.06 Q1299.21 1540.23 1299.21 1547.58 Q1299.21 1554.93 1301.28 1562.16 Q1303.38 1569.35 1307.61 1576.64 L1302.52 1576.64 Q1297.74 1569.16 1295.36 1561.93 Q1293 1554.71 1293 1547.58 Q1293 1540.48 1295.36 1533.29 Q1297.71 1526.09 1302.52 1518.58 L1307.61 1518.58 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1325.66 1525.81 L1325.66 1562.76 L1333.42 1562.76 Q1343.26 1562.76 1347.81 1558.3 Q1352.39 1553.85 1352.39 1544.24 Q1352.39 1534.69 1347.81 1530.26 Q1343.26 1525.81 1333.42 1525.81 L1325.66 1525.81 M1319.23 1520.52 L1332.44 1520.52 Q1346.25 1520.52 1352.71 1526.28 Q1359.17 1532.01 1359.17 1544.24 Q1359.17 1556.52 1352.68 1562.28 Q1346.19 1568.04 1332.44 1568.04 L1319.23 1568.04 L1319.23 1520.52 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1385.37 1550.12 Q1378.27 1550.12 1375.53 1551.75 Q1372.79 1553.37 1372.79 1557.29 Q1372.79 1560.4 1374.83 1562.25 Q1376.9 1564.07 1380.43 1564.07 Q1385.3 1564.07 1388.23 1560.63 Q1391.19 1557.16 1391.19 1551.43 L1391.19 1550.12 L1385.37 1550.12 M1397.05 1547.71 L1397.05 1568.04 L1391.19 1568.04 L1391.19 1562.63 Q1389.19 1565.88 1386.19 1567.44 Q1383.2 1568.97 1378.87 1568.97 Q1373.4 1568.97 1370.15 1565.91 Q1366.94 1562.82 1366.94 1557.67 Q1366.94 1551.65 1370.95 1548.6 Q1374.99 1545.54 1382.98 1545.54 L1391.19 1545.54 L1391.19 1544.97 Q1391.19 1540.93 1388.52 1538.73 Q1385.88 1536.5 1381.07 1536.5 Q1378.01 1536.5 1375.12 1537.23 Q1372.22 1537.97 1369.55 1539.43 L1369.55 1534.02 Q1372.76 1532.78 1375.79 1532.17 Q1378.81 1531.54 1381.68 1531.54 Q1389.41 1531.54 1393.23 1535.55 Q1397.05 1539.56 1397.05 1547.71 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1423.94 1571.35 Q1421.46 1577.72 1419.11 1579.66 Q1416.75 1581.6 1412.8 1581.6 L1408.12 1581.6 L1408.12 1576.7 L1411.56 1576.7 Q1413.98 1576.7 1415.32 1575.56 Q1416.65 1574.41 1418.28 1570.14 L1419.33 1567.47 L1404.91 1532.4 L1411.12 1532.4 L1422.26 1560.28 L1433.4 1532.4 L1439.6 1532.4 L1423.94 1571.35 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1470.41 1533.45 L1470.41 1538.98 Q1467.93 1537.71 1465.26 1537.07 Q1462.58 1536.44 1459.72 1536.44 Q1455.36 1536.44 1453.16 1537.77 Q1451 1539.11 1451 1541.79 Q1451 1543.82 1452.56 1545 Q1454.12 1546.15 1458.83 1547.2 L1460.83 1547.64 Q1467.07 1548.98 1469.68 1551.43 Q1472.32 1553.85 1472.32 1558.21 Q1472.32 1563.17 1468.38 1566.07 Q1464.46 1568.97 1457.59 1568.97 Q1454.72 1568.97 1451.6 1568.39 Q1448.52 1567.85 1445.08 1566.74 L1445.08 1560.69 Q1448.32 1562.38 1451.48 1563.24 Q1454.63 1564.07 1457.71 1564.07 Q1461.85 1564.07 1464.08 1562.66 Q1466.31 1561.23 1466.31 1558.65 Q1466.31 1556.27 1464.68 1554.99 Q1463.09 1553.72 1457.65 1552.54 L1455.61 1552.07 Q1450.17 1550.92 1447.75 1548.56 Q1445.33 1546.18 1445.33 1542.04 Q1445.33 1537.01 1448.9 1534.27 Q1452.46 1531.54 1459.02 1531.54 Q1462.27 1531.54 1465.13 1532.01 Q1467.99 1532.49 1470.41 1533.45 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1480.73 1518.58 L1485.82 1518.58 Q1490.59 1526.09 1492.95 1533.29 Q1495.33 1540.48 1495.33 1547.58 Q1495.33 1554.71 1492.95 1561.93 Q1490.59 1569.16 1485.82 1576.64 L1480.73 1576.64 Q1484.96 1569.35 1487.03 1562.16 Q1489.13 1554.93 1489.13 1547.58 Q1489.13 1540.23 1487.03 1533.06 Q1484.96 1525.9 1480.73 1518.58 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  249.542,1396.72 2352.76,1396.72 \n  \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  249.542,1065.97 2352.76,1065.97 \n  \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  249.542,735.212 2352.76,735.212 \n  \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  249.542,404.458 2352.76,404.458 \n  \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  249.542,73.7044 2352.76,73.7044 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  249.542,1423.18 249.542,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  249.542,1396.72 268.44,1396.72 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  249.542,1065.97 268.44,1065.97 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  249.542,735.212 268.44,735.212 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  249.542,404.458 268.44,404.458 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  249.542,73.7044 268.44,73.7044 \n  \"/>\n<path clip-path=\"url(#clip570)\" d=\"M126.205 1382.52 Q122.593 1382.52 120.765 1386.08 Q118.959 1389.62 118.959 1396.75 Q118.959 1403.86 120.765 1407.43 Q122.593 1410.97 126.205 1410.97 Q129.839 1410.97 131.644 1407.43 Q133.473 1403.86 133.473 1396.75 Q133.473 1389.62 131.644 1386.08 Q129.839 1382.52 126.205 1382.52 M126.205 1378.81 Q132.015 1378.81 135.07 1383.42 Q138.149 1388 138.149 1396.75 Q138.149 1405.48 135.07 1410.09 Q132.015 1414.67 126.205 1414.67 Q120.394 1414.67 117.316 1410.09 Q114.26 1405.48 114.26 1396.75 Q114.26 1388 117.316 1383.42 Q120.394 1378.81 126.205 1378.81 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M146.366 1408.12 L151.251 1408.12 L151.251 1414 L146.366 1414 L146.366 1408.12 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M171.436 1382.52 Q167.825 1382.52 165.996 1386.08 Q164.19 1389.62 164.19 1396.75 Q164.19 1403.86 165.996 1407.43 Q167.825 1410.97 171.436 1410.97 Q175.07 1410.97 176.876 1407.43 Q178.704 1403.86 178.704 1396.75 Q178.704 1389.62 176.876 1386.08 Q175.07 1382.52 171.436 1382.52 M171.436 1378.81 Q177.246 1378.81 180.301 1383.42 Q183.38 1388 183.38 1396.75 Q183.38 1405.48 180.301 1410.09 Q177.246 1414.67 171.436 1414.67 Q165.626 1414.67 162.547 1410.09 Q159.491 1405.48 159.491 1396.75 Q159.491 1388 162.547 1383.42 Q165.626 1378.81 171.436 1378.81 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M201.598 1382.52 Q197.987 1382.52 196.158 1386.08 Q194.352 1389.62 194.352 1396.75 Q194.352 1403.86 196.158 1407.43 Q197.987 1410.97 201.598 1410.97 Q205.232 1410.97 207.037 1407.43 Q208.866 1403.86 208.866 1396.75 Q208.866 1389.62 207.037 1386.08 Q205.232 1382.52 201.598 1382.52 M201.598 1378.81 Q207.408 1378.81 210.463 1383.42 Q213.542 1388 213.542 1396.75 Q213.542 1405.48 210.463 1410.09 Q207.408 1414.67 201.598 1414.67 Q195.787 1414.67 192.709 1410.09 Q189.653 1405.48 189.653 1396.75 Q189.653 1388 192.709 1383.42 Q195.787 1378.81 201.598 1378.81 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M127.2 1051.76 Q123.589 1051.76 121.76 1055.33 Q119.955 1058.87 119.955 1066 Q119.955 1073.11 121.76 1076.67 Q123.589 1080.21 127.2 1080.21 Q130.834 1080.21 132.64 1076.67 Q134.468 1073.11 134.468 1066 Q134.468 1058.87 132.64 1055.33 Q130.834 1051.76 127.2 1051.76 M127.2 1048.06 Q133.01 1048.06 136.066 1052.67 Q139.144 1057.25 139.144 1066 Q139.144 1074.73 136.066 1079.33 Q133.01 1083.92 127.2 1083.92 Q121.39 1083.92 118.311 1079.33 Q115.256 1074.73 115.256 1066 Q115.256 1057.25 118.311 1052.67 Q121.39 1048.06 127.2 1048.06 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M147.362 1077.37 L152.246 1077.37 L152.246 1083.25 L147.362 1083.25 L147.362 1077.37 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M166.459 1079.31 L182.778 1079.31 L182.778 1083.25 L160.834 1083.25 L160.834 1079.31 Q163.496 1076.56 168.079 1071.93 Q172.686 1067.27 173.866 1065.93 Q176.112 1063.41 176.991 1061.67 Q177.894 1059.91 177.894 1058.22 Q177.894 1055.47 175.95 1053.73 Q174.028 1052 170.927 1052 Q168.727 1052 166.274 1052.76 Q163.843 1053.52 161.065 1055.07 L161.065 1050.35 Q163.89 1049.22 166.343 1048.64 Q168.797 1048.06 170.834 1048.06 Q176.204 1048.06 179.399 1050.75 Q182.593 1053.43 182.593 1057.92 Q182.593 1060.05 181.783 1061.97 Q180.996 1063.87 178.889 1066.46 Q178.311 1067.13 175.209 1070.35 Q172.107 1073.55 166.459 1079.31 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M192.639 1048.69 L210.996 1048.69 L210.996 1052.62 L196.922 1052.62 L196.922 1061.09 Q197.94 1060.75 198.959 1060.58 Q199.977 1060.4 200.996 1060.4 Q206.783 1060.4 210.162 1063.57 Q213.542 1066.74 213.542 1072.16 Q213.542 1077.74 210.07 1080.84 Q206.598 1083.92 200.278 1083.92 Q198.102 1083.92 195.834 1083.55 Q193.588 1083.18 191.181 1082.44 L191.181 1077.74 Q193.264 1078.87 195.487 1079.43 Q197.709 1079.98 200.186 1079.98 Q204.19 1079.98 206.528 1077.88 Q208.866 1075.77 208.866 1072.16 Q208.866 1068.55 206.528 1066.44 Q204.19 1064.33 200.186 1064.33 Q198.311 1064.33 196.436 1064.75 Q194.584 1065.17 192.639 1066.05 L192.639 1048.69 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M126.205 721.011 Q122.593 721.011 120.765 724.575 Q118.959 728.117 118.959 735.247 Q118.959 742.353 120.765 745.918 Q122.593 749.46 126.205 749.46 Q129.839 749.46 131.644 745.918 Q133.473 742.353 133.473 735.247 Q133.473 728.117 131.644 724.575 Q129.839 721.011 126.205 721.011 M126.205 717.307 Q132.015 717.307 135.07 721.913 Q138.149 726.497 138.149 735.247 Q138.149 743.973 135.07 748.58 Q132.015 753.163 126.205 753.163 Q120.394 753.163 117.316 748.58 Q114.26 743.973 114.26 735.247 Q114.26 726.497 117.316 721.913 Q120.394 717.307 126.205 717.307 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M146.366 746.612 L151.251 746.612 L151.251 752.492 L146.366 752.492 L146.366 746.612 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M161.482 717.932 L179.839 717.932 L179.839 721.867 L165.765 721.867 L165.765 730.339 Q166.783 729.992 167.802 729.83 Q168.82 729.645 169.839 729.645 Q175.626 729.645 179.005 732.816 Q182.385 735.987 182.385 741.404 Q182.385 746.983 178.913 750.085 Q175.44 753.163 169.121 753.163 Q166.945 753.163 164.677 752.793 Q162.431 752.423 160.024 751.682 L160.024 746.983 Q162.107 748.117 164.329 748.673 Q166.552 749.228 169.028 749.228 Q173.033 749.228 175.371 747.122 Q177.709 745.015 177.709 741.404 Q177.709 737.793 175.371 735.687 Q173.033 733.58 169.028 733.58 Q167.153 733.58 165.278 733.997 Q163.427 734.413 161.482 735.293 L161.482 717.932 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M201.598 721.011 Q197.987 721.011 196.158 724.575 Q194.352 728.117 194.352 735.247 Q194.352 742.353 196.158 745.918 Q197.987 749.46 201.598 749.46 Q205.232 749.46 207.037 745.918 Q208.866 742.353 208.866 735.247 Q208.866 728.117 207.037 724.575 Q205.232 721.011 201.598 721.011 M201.598 717.307 Q207.408 717.307 210.463 721.913 Q213.542 726.497 213.542 735.247 Q213.542 743.973 210.463 748.58 Q207.408 753.163 201.598 753.163 Q195.787 753.163 192.709 748.58 Q189.653 743.973 189.653 735.247 Q189.653 726.497 192.709 721.913 Q195.787 717.307 201.598 717.307 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M127.2 390.257 Q123.589 390.257 121.76 393.822 Q119.955 397.363 119.955 404.493 Q119.955 411.599 121.76 415.164 Q123.589 418.706 127.2 418.706 Q130.834 418.706 132.64 415.164 Q134.468 411.599 134.468 404.493 Q134.468 397.363 132.64 393.822 Q130.834 390.257 127.2 390.257 M127.2 386.553 Q133.01 386.553 136.066 391.16 Q139.144 395.743 139.144 404.493 Q139.144 413.22 136.066 417.826 Q133.01 422.409 127.2 422.409 Q121.39 422.409 118.311 417.826 Q115.256 413.22 115.256 404.493 Q115.256 395.743 118.311 391.16 Q121.39 386.553 127.2 386.553 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M147.362 415.859 L152.246 415.859 L152.246 421.738 L147.362 421.738 L147.362 415.859 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M161.251 387.178 L183.473 387.178 L183.473 389.169 L170.927 421.738 L166.042 421.738 L177.848 391.113 L161.251 391.113 L161.251 387.178 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M192.639 387.178 L210.996 387.178 L210.996 391.113 L196.922 391.113 L196.922 399.586 Q197.94 399.238 198.959 399.076 Q199.977 398.891 200.996 398.891 Q206.783 398.891 210.162 402.062 Q213.542 405.234 213.542 410.65 Q213.542 416.229 210.07 419.331 Q206.598 422.409 200.278 422.409 Q198.102 422.409 195.834 422.039 Q193.588 421.669 191.181 420.928 L191.181 416.229 Q193.264 417.363 195.487 417.919 Q197.709 418.474 200.186 418.474 Q204.19 418.474 206.528 416.368 Q208.866 414.261 208.866 410.65 Q208.866 407.039 206.528 404.933 Q204.19 402.826 200.186 402.826 Q198.311 402.826 196.436 403.243 Q194.584 403.66 192.639 404.539 L192.639 387.178 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M117.015 87.0492 L124.654 87.0492 L124.654 60.6836 L116.343 62.3503 L116.343 58.0911 L124.607 56.4244 L129.283 56.4244 L129.283 87.0492 L136.922 87.0492 L136.922 90.9844 L117.015 90.9844 L117.015 87.0492 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M146.366 85.1048 L151.251 85.1048 L151.251 90.9844 L146.366 90.9844 L146.366 85.1048 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M171.436 59.5031 Q167.825 59.5031 165.996 63.0679 Q164.19 66.6095 164.19 73.7391 Q164.19 80.8456 165.996 84.4104 Q167.825 87.952 171.436 87.952 Q175.07 87.952 176.876 84.4104 Q178.704 80.8456 178.704 73.7391 Q178.704 66.6095 176.876 63.0679 Q175.07 59.5031 171.436 59.5031 M171.436 55.7994 Q177.246 55.7994 180.301 60.4059 Q183.38 64.9892 183.38 73.7391 Q183.38 82.4659 180.301 87.0724 Q177.246 91.6557 171.436 91.6557 Q165.626 91.6557 162.547 87.0724 Q159.491 82.4659 159.491 73.7391 Q159.491 64.9892 162.547 60.4059 Q165.626 55.7994 171.436 55.7994 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M201.598 59.5031 Q197.987 59.5031 196.158 63.0679 Q194.352 66.6095 194.352 73.7391 Q194.352 80.8456 196.158 84.4104 Q197.987 87.952 201.598 87.952 Q205.232 87.952 207.037 84.4104 Q208.866 80.8456 208.866 73.7391 Q208.866 66.6095 207.037 63.0679 Q205.232 59.5031 201.598 59.5031 M201.598 55.7994 Q207.408 55.7994 210.463 60.4059 Q213.542 64.9892 213.542 73.7391 Q213.542 82.4659 210.463 87.0724 Q207.408 91.6557 201.598 91.6557 Q195.787 91.6557 192.709 87.0724 Q189.653 82.4659 189.653 73.7391 Q189.653 64.9892 192.709 60.4059 Q195.787 55.7994 201.598 55.7994 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M21.7677 990.7 L58.7206 990.7 L58.7206 982.933 Q58.7206 973.098 54.2646 968.547 Q49.8086 963.964 40.1964 963.964 Q30.6479 963.964 26.2237 968.547 Q21.7677 973.098 21.7677 982.933 L21.7677 990.7 M16.4842 997.129 L16.4842 983.92 Q16.4842 970.107 22.2451 963.645 Q27.9743 957.184 40.1964 957.184 Q52.4822 957.184 58.2432 963.677 Q64.0042 970.17 64.0042 983.92 L64.0042 997.129 L16.4842 997.129 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M28.3562 947.19 L28.3562 941.334 L64.0042 941.334 L64.0042 947.19 L28.3562 947.19 M14.479 947.19 L14.479 941.334 L21.895 941.334 L21.895 947.19 L14.479 947.19 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M29.4065 906.354 L34.9447 906.354 Q33.6716 908.837 33.035 911.51 Q32.3984 914.184 32.3984 917.048 Q32.3984 921.409 33.7352 923.605 Q35.072 925.769 37.7456 925.769 Q39.7826 925.769 40.9603 924.21 Q42.1061 922.65 43.1565 917.94 L43.6021 915.934 Q44.9389 909.696 47.3897 907.086 Q49.8086 904.444 54.1691 904.444 Q59.1344 904.444 62.0308 908.391 Q64.9272 912.306 64.9272 919.181 Q64.9272 922.045 64.3543 925.165 Q63.8132 928.252 62.6992 931.69 L56.6518 931.69 Q58.3387 928.443 59.198 925.292 Q60.0256 922.141 60.0256 919.054 Q60.0256 914.916 58.6251 912.688 Q57.1929 910.46 54.6147 910.46 Q52.2276 910.46 50.9545 912.083 Q49.6813 913.675 48.5037 919.117 L48.0262 921.154 Q46.8804 926.597 44.5251 929.016 Q42.138 931.435 38.0002 931.435 Q32.9713 931.435 30.2341 927.87 Q27.4968 924.305 27.4968 917.749 Q27.4968 914.502 27.9743 911.638 Q28.4517 908.773 29.4065 906.354 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M18.2347 889.326 L28.3562 889.326 L28.3562 877.263 L32.9077 877.263 L32.9077 889.326 L52.2594 889.326 Q56.6199 889.326 57.8613 888.148 Q59.1026 886.939 59.1026 883.278 L59.1026 877.263 L64.0042 877.263 L64.0042 883.278 Q64.0042 890.058 61.4897 892.636 Q58.9434 895.214 52.2594 895.214 L32.9077 895.214 L32.9077 899.511 L28.3562 899.511 L28.3562 895.214 L18.2347 895.214 L18.2347 889.326 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M46.0847 853.359 Q46.0847 860.457 47.7079 863.195 Q49.3312 865.932 53.2461 865.932 Q56.3653 865.932 58.2114 863.895 Q60.0256 861.826 60.0256 858.293 Q60.0256 853.423 56.5881 850.495 Q53.1188 847.535 47.3897 847.535 L46.0847 847.535 L46.0847 853.359 M43.6657 841.678 L64.0042 841.678 L64.0042 847.535 L58.5933 847.535 Q61.8398 849.54 63.3994 852.532 Q64.9272 855.524 64.9272 859.853 Q64.9272 865.327 61.8716 868.574 Q58.7843 871.788 53.6281 871.788 Q47.6125 871.788 44.5569 867.778 Q41.5014 863.736 41.5014 855.747 L41.5014 847.535 L40.9285 847.535 Q36.8862 847.535 34.6901 850.208 Q32.4621 852.85 32.4621 857.656 Q32.4621 860.712 33.1941 863.608 Q33.9262 866.505 35.3903 869.178 L29.9795 869.178 Q28.7381 865.964 28.1334 862.94 Q27.4968 859.916 27.4968 857.052 Q27.4968 849.317 31.5072 845.498 Q35.5176 841.678 43.6657 841.678 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M42.4881 799.983 L64.0042 799.983 L64.0042 805.839 L42.679 805.839 Q37.6183 805.839 35.1038 807.813 Q32.5894 809.786 32.5894 813.733 Q32.5894 818.475 35.6131 821.213 Q38.6368 823.95 43.8567 823.95 L64.0042 823.95 L64.0042 829.838 L28.3562 829.838 L28.3562 823.95 L33.8944 823.95 Q30.6797 821.849 29.0883 819.016 Q27.4968 816.152 27.4968 812.428 Q27.4968 806.285 31.3163 803.134 Q35.1038 799.983 42.4881 799.983 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M29.7248 762.648 L35.1993 762.648 Q33.8307 765.131 33.1623 767.645 Q32.4621 770.128 32.4621 772.674 Q32.4621 778.371 36.0905 781.522 Q39.6872 784.674 46.212 784.674 Q52.7369 784.674 56.3653 781.522 Q59.9619 778.371 59.9619 772.674 Q59.9619 770.128 59.2935 767.645 Q58.5933 765.131 57.2247 762.648 L62.6355 762.648 Q63.7814 765.099 64.3543 767.741 Q64.9272 770.351 64.9272 773.311 Q64.9272 781.363 59.8664 786.106 Q54.8057 790.848 46.212 790.848 Q37.491 790.848 32.4939 786.074 Q27.4968 781.268 27.4968 772.929 Q27.4968 770.223 28.0697 767.645 Q28.6108 765.067 29.7248 762.648 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M28.3562 752.463 L28.3562 746.607 L64.0042 746.607 L64.0042 752.463 L28.3562 752.463 M14.479 752.463 L14.479 746.607 L21.895 746.607 L21.895 752.463 L14.479 752.463 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M42.4881 704.72 L64.0042 704.72 L64.0042 710.577 L42.679 710.577 Q37.6183 710.577 35.1038 712.55 Q32.5894 714.523 32.5894 718.47 Q32.5894 723.213 35.6131 725.95 Q38.6368 728.687 43.8567 728.687 L64.0042 728.687 L64.0042 734.575 L28.3562 734.575 L28.3562 728.687 L33.8944 728.687 Q30.6797 726.586 29.0883 723.754 Q27.4968 720.889 27.4968 717.165 Q27.4968 711.022 31.3163 707.871 Q35.1038 704.72 42.4881 704.72 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M45.7664 669.582 Q39.4007 669.582 35.8996 672.223 Q32.3984 674.833 32.3984 679.576 Q32.3984 684.286 35.8996 686.928 Q39.4007 689.538 45.7664 689.538 Q52.1003 689.538 55.6014 686.928 Q59.1026 684.286 59.1026 679.576 Q59.1026 674.833 55.6014 672.223 Q52.1003 669.582 45.7664 669.582 M59.58 663.725 Q68.683 663.725 73.1071 667.767 Q77.5631 671.81 77.5631 680.149 Q77.5631 683.236 77.0857 685.973 Q76.6401 688.71 75.6852 691.289 L69.9879 691.289 Q71.3884 688.71 72.0568 686.196 Q72.7252 683.682 72.7252 681.072 Q72.7252 675.311 69.7015 672.446 Q66.7096 669.582 60.6303 669.582 L57.7339 669.582 Q60.885 671.396 62.4446 674.228 Q64.0042 677.061 64.0042 681.008 Q64.0042 687.565 59.0071 691.575 Q54.01 695.585 45.7664 695.585 Q37.491 695.585 32.4939 691.575 Q27.4968 687.565 27.4968 681.008 Q27.4968 677.061 29.0564 674.228 Q30.616 671.396 33.7671 669.582 L28.3562 669.582 L28.3562 663.725 L59.58 663.725 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M41.7242 608.152 Q42.4244 606.084 44.7161 604.142 Q47.0077 602.169 51.0181 600.195 L64.0042 593.67 L64.0042 600.577 L51.8138 606.657 Q47.0395 609.012 45.48 611.24 Q43.9204 613.436 43.9204 617.255 L43.9204 624.258 L64.0042 624.258 L64.0042 630.687 L16.4842 630.687 L16.4842 616.173 Q16.4842 608.025 19.8898 604.015 Q23.2955 600.004 30.1704 600.004 Q34.6582 600.004 37.6183 602.105 Q40.5784 604.174 41.7242 608.152 M21.7677 624.258 L38.6368 624.258 L38.6368 616.173 Q38.6368 611.526 36.5043 609.171 Q34.34 606.784 30.1704 606.784 Q26.0009 606.784 23.9002 609.171 Q21.7677 611.526 21.7677 616.173 L21.7677 624.258 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M46.0847 570.881 Q46.0847 577.979 47.7079 580.716 Q49.3312 583.454 53.2461 583.454 Q56.3653 583.454 58.2114 581.416 Q60.0256 579.348 60.0256 575.815 Q60.0256 570.945 56.5881 568.017 Q53.1188 565.057 47.3897 565.057 L46.0847 565.057 L46.0847 570.881 M43.6657 559.2 L64.0042 559.2 L64.0042 565.057 L58.5933 565.057 Q61.8398 567.062 63.3994 570.054 Q64.9272 573.046 64.9272 577.374 Q64.9272 582.849 61.8716 586.095 Q58.7843 589.31 53.6281 589.31 Q47.6125 589.31 44.5569 585.3 Q41.5014 581.257 41.5014 573.268 L41.5014 565.057 L40.9285 565.057 Q36.8862 565.057 34.6901 567.73 Q32.4621 570.372 32.4621 575.178 Q32.4621 578.234 33.1941 581.13 Q33.9262 584.026 35.3903 586.7 L29.9795 586.7 Q28.7381 583.485 28.1334 580.462 Q27.4968 577.438 27.4968 574.573 Q27.4968 566.839 31.5072 563.02 Q35.5176 559.2 43.6657 559.2 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M18.2347 541.344 L28.3562 541.344 L28.3562 529.281 L32.9077 529.281 L32.9077 541.344 L52.2594 541.344 Q56.6199 541.344 57.8613 540.167 Q59.1026 538.957 59.1026 535.297 L59.1026 529.281 L64.0042 529.281 L64.0042 535.297 Q64.0042 542.076 61.4897 544.655 Q58.9434 547.233 52.2594 547.233 L32.9077 547.233 L32.9077 551.53 L28.3562 551.53 L28.3562 547.233 L18.2347 547.233 L18.2347 541.344 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M28.3562 521.579 L28.3562 515.722 L64.0042 515.722 L64.0042 521.579 L28.3562 521.579 M14.479 521.579 L14.479 515.722 L21.895 515.722 L21.895 521.579 L14.479 521.579 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M32.4621 489.655 Q32.4621 494.365 36.1542 497.103 Q39.8145 499.84 46.212 499.84 Q52.6095 499.84 56.3017 497.135 Q59.9619 494.397 59.9619 489.655 Q59.9619 484.976 56.2698 482.239 Q52.5777 479.502 46.212 479.502 Q39.8781 479.502 36.186 482.239 Q32.4621 484.976 32.4621 489.655 M27.4968 489.655 Q27.4968 482.016 32.4621 477.655 Q37.4273 473.295 46.212 473.295 Q54.9649 473.295 59.9619 477.655 Q64.9272 482.016 64.9272 489.655 Q64.9272 497.326 59.9619 501.686 Q54.9649 506.015 46.212 506.015 Q37.4273 506.015 32.4621 501.686 Q27.4968 497.326 27.4968 489.655 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip572)\" style=\"stroke:#ffa500; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  309.067,1396.71 309.077,1396.72 309.087,1396.72 309.107,1396.72 309.146,1396.72 309.265,1396.72 309.464,1396.72 309.861,1396.72 311.051,1396.72 313.035,1396.72 \n  317.004,1396.72 348.75,1396.72 388.434,1277.22 428.117,1278.4 467.8,1277.23 507.483,1272.5 547.167,1223.88 586.85,898.03 626.533,614.248 666.216,705.748 \n  705.9,723.811 745.583,742.937 785.266,763.222 824.95,784.776 864.633,807.72 904.316,832.195 943.999,848.169 983.683,806.004 1023.37,847.511 1063.05,874.76 \n  1102.73,903.998 1142.42,935.452 1182.1,969.383 1221.78,1006.09 1261.47,1045.94 1301.15,1089.35 1340.83,1136.82 1380.52,750.289 1420.2,677.889 1459.88,758.899 \n  1499.57,780.179 1539.25,802.823 1578.93,826.967 1618.62,852.765 1658.3,880.392 1697.98,910.05 1737.67,941.973 1777.35,976.429 1817.03,1013.73 1856.71,738.125 \n  1896.4,836.092 1936.08,871.245 1975.76,900.222 2015.45,923.632 2055.13,912.647 2094.81,961.104 2134.5,997.126 2174.18,939.374 2213.86,968.533 2253.55,1396.72 \n  2293.23,1090.11 \n  \"/>\n<path clip-path=\"url(#clip570)\" d=\"\nM1971.44 196.789 L2282.65 196.789 L2282.65 93.1086 L1971.44 93.1086  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1971.44,196.789 2282.65,196.789 2282.65,93.1086 1971.44,93.1086 1971.44,196.789 \n  \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#ffa500; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1994.8,144.949 2135.02,144.949 \n  \"/>\n<path clip-path=\"url(#clip570)\" d=\"M2158.39 151.997 L2158.39 136.303 L2162.65 136.303 L2162.65 151.835 Q2162.65 155.516 2164.08 157.368 Q2165.52 159.196 2168.39 159.196 Q2171.84 159.196 2173.83 156.997 Q2175.84 154.798 2175.84 151.002 L2175.84 136.303 L2180.1 136.303 L2180.1 162.229 L2175.84 162.229 L2175.84 158.247 Q2174.29 160.608 2172.23 161.766 Q2170.19 162.9 2167.49 162.9 Q2163.02 162.9 2160.7 160.122 Q2158.39 157.344 2158.39 151.997 M2169.11 135.678 L2169.11 135.678 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2199.11 126.257 Q2196 131.581 2194.5 136.789 Q2192.99 141.997 2192.99 147.344 Q2192.99 152.692 2194.5 157.946 Q2196.03 163.178 2199.11 168.479 L2195.4 168.479 Q2191.93 163.039 2190.19 157.784 Q2188.48 152.53 2188.48 147.344 Q2188.48 142.182 2190.19 136.951 Q2191.91 131.72 2195.4 126.257 L2199.11 126.257 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2211.58 128.942 L2211.58 136.303 L2220.36 136.303 L2220.36 139.613 L2211.58 139.613 L2211.58 153.687 Q2211.58 156.858 2212.44 157.761 Q2213.32 158.664 2215.98 158.664 L2220.36 158.664 L2220.36 162.229 L2215.98 162.229 Q2211.05 162.229 2209.17 160.4 Q2207.3 158.548 2207.3 153.687 L2207.3 139.613 L2204.17 139.613 L2204.17 136.303 L2207.3 136.303 L2207.3 128.942 L2211.58 128.942 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2225.29 126.257 L2228.99 126.257 Q2232.46 131.72 2234.17 136.951 Q2235.91 142.182 2235.91 147.344 Q2235.91 152.53 2234.17 157.784 Q2232.46 163.039 2228.99 168.479 L2225.29 168.479 Q2228.36 163.178 2229.87 157.946 Q2231.4 152.692 2231.4 147.344 Q2231.4 141.997 2229.87 136.789 Q2228.36 131.581 2225.29 126.257 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/Optimal Control/pandemic_control/#Maintenance-Tests","page":"Pandemic Control","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"using Test\n@test termination_status(model) == MOI.LOCALLY_SOLVED\n@test has_values(model)\n@test u_opt isa Vector{<:Real}","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"Test Passed","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"","category":"page"},{"location":"examples/Optimal Control/pandemic_control/","page":"Pandemic Control","title":"Pandemic Control","text":"This page was generated using Literate.jl.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"DocTestFilters = [r\"≤|<=\", r\"≥|>=\", r\" == | = \", r\" ∈ | in \", \n                  r\"MathOptInterface|MOI\", r\" for all | ∀ \"]","category":"page"},{"location":"guide/constraint/#constr_docs","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"A guide for constraints in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/constraint/#Overview","page":"Constraints","title":"Overview","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Constraints are a key part of infinite dimensional problems and serve  as a fundamental utility of InfiniteOpt. In particular, InfiniteOpt supports  finite constraints that entail finite variables and/or measures that fully remove any  infinite parameter dependencies (e.g., first stage constraints), infinite  constraints that are enforced over the entire domain of its infinite parameter  dependencies (e.g., path constraints), and restricted constraints which  are enforced over some specified sub-domain of its infinite parameter  dependencies (e.g., boundary conditions). This page will highlight how to  implement these types of constraints in InfiniteOpt.","category":"page"},{"location":"guide/constraint/#Basic-Usage","page":"Constraints","title":"Basic Usage","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Principally, the  @constraint  macro is used to define constraints. First, let's setup an infinite model with  variables that we can add constraints to:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @infinite_parameter(model, x[1:2] in [-2, 2]);\n\njulia> @variable(model, ya, Infinite(t, x));\n\njulia> @variable(model, yb, Infinite(t));\n\njulia> @variable(model, z[1:2]);","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nUnlike previous versions, InfiniteOpt now supports all of the constraints  offered by JuMP, including vector and semi-definite constraints! Please  see JuMP's constraint documentation  for a thorough explanation of the supported types and syntax.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nNonlinear constraints are defined simply by using  @constraint and not  using JuMP.@NLconstraint. See Nonlinear Expressions for  more information. ","category":"page"},{"location":"guide/constraint/#Scalar-Constraints","page":"Constraints","title":"Scalar Constraints","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Scalar constraints use scalar functions of variables. For example, let's define  the constraint  z^2 + 2y_a(t x) leq 0  forall t in 0 10 x in -2 2^2  using @constraint:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, c1, sum(z[i]^2 for i = 1:2) + 2ya <= 0)\nc1 : z[1]² + z[2]² + 2 ya(t, x) ≤ 0.0, ∀ t ∈ [0, 10], x[1] ∈ [-2, 2], x[2] ∈ [-2, 2]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Thus, we added an infinite constraint (which infinite with respect to t and x)  to model and stored the corresponding constraint reference to c1. Note that   this is enforced over the full infinite domains of the infinite parameters t  and x which are implicitly used by c1. For scalar constraints like this one,  the allowed constraint operators are ==, <=, ≤, >=, and ≥.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nLinear algebra constraints can also be used when defining constraints  when . is added in front of the constraint operators (e.g., .<=). This  behavior is further explained in  JuMP's constraint documentation. ","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Similarly, we can define an array of constraints with varied indexes by including  an additional argument before the constraint expression. For example,  let's define 3z_i - 14 = 0  forall i in 12:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, c2[i = 1:2], 3z[i] - 14 == 0)\n2-element Vector{InfOptConstraintRef}:\n c2[1] : 3 z[1] = 14.0\n c2[2] : 3 z[2] = 14.0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Thus, we added two constraints to model and stored a vector of the corresponding  constraint references to the Julia variable c2. To learn more about building  containers of constraints please see  JuMP's constraint container documentation.","category":"page"},{"location":"guide/constraint/#Multi-Dimensional-Constraints","page":"Constraints","title":"Multi-Dimensional Constraints","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Building upon JuMP we support a variety of multi-dimensional constraint types.  For example, we can define the vector constraint:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> A = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> b = [5, 6]\n2-element Vector{Int64}:\n 5\n 6\n\njulia> @constraint(model, A * z - b in MOI.Nonnegatives(2))\n[z[1] + 2 z[2] - 5, 3 z[1] + 4 z[2] - 6] ∈ MathOptInterface.Nonnegatives(2)","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"See JuMP's constraint documentation  for a thorough tutorial on the accepted syntax and constraint types.","category":"page"},{"location":"guide/constraint/#Restricted-Constraints","page":"Constraints","title":"Restricted Constraints","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Restricted constraints entail an infinite domain (determined by the infinite  parameters they explicitly/implicitly depend on) that is restricted to a certain  sub-domain. Such constraints are common for enforcing initial/boundary conditions  and for enforcing path constraints over a certain sub-domain.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"warning: Warning\nPrevious versions of InfiniteOpt referred to restricted constraints as  \"bounded constraints\" and used @BDconstraint to define them. This has been  deprecated in favor of the more intuitive domain restricted nomenclature.# Old syntax\n@BDconstraint(model, name_expr(restricts...), constr_expr)\n\n# New syntax\n@constraint(model, name_expr, constr_expr, DomainRestrictions(restricts...))","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"These types of constraints are defined adding DomainRestrictions. For  example, let's add the initial condition y_b(0) = 0:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, initial, yb == 0, DomainRestrictions(t => 0))\ninitial : yb(t) = 0.0, ∀ t = 0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Thus, we have added a constraint to model defined over the sub-domain t = 0  in accordance with the initial condition.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"tip: Tip\nBoundary conditions can often be more efficiently defined using  Restricted Variables. For example, the above initial condition  can be expressed:julia> @constraint(model, yb(0) == 0)\nyb(0) = 0.0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"More complex sub-domains can be specified by simply adding more restrictions. To  illustrate this, let's define the constraint  2y_b^2(t x) + z_1 geq 3  forall t = 0  x in -1 1^2:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, 2ya^2 + z[1] >= 3, DomainRestrictions(t => 0, x => [-1, 1]))\n2 ya(t, x)² + z[1] ≥ 3.0, ∀ t = 0, x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Now we have added constraints to our model and it is ready to be solved!","category":"page"},{"location":"guide/constraint/#Data-Structure","page":"Constraints","title":"Data Structure","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Here we detail the data structures used to store constraints in InfiniteOpt.  In general, constraints in JuMP are of the form: function in set where  function corresponds to a JuMP expression and set corresponds to a MOI  set. This leads to the following data structures:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Constraint Type Function Type Set Type\nScalar JuMP.AbstractJuMPScalar MOI.AbstractScalarSet\nVector Vector{<:JuMP.AbstractJuMPScalar} MOI.AbstractVectorSet\nMatrix Matrix{<:JuMP.AbstractJuMPScalar} MOI.AbstractVectorSet via vectorization","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"The above combos are then stored in  JuMP.ScalarConstraints  and `JuMP.VectorConstraints. ","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Restricted constraints are built upon this data structure where the underlying  constraint is created in the same manner. Then the specified  DomainRestrictions are added by creating a  DomainRestrictedConstraint which stores the JuMP.AbstractConstraint  and the restrictions.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"These constraint objects are what store constraints in InfiniteModels. And  these are pointed to by InfOptConstraintRefs.","category":"page"},{"location":"guide/constraint/#Definition","page":"Constraints","title":"Definition","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"In this section, we describe the ins and outs of defining constraints. Note that  this process is analogous to the manner in which variables are defined and added  to the model.","category":"page"},{"location":"guide/constraint/#Manual-Definition","page":"Constraints","title":"Manual Definition","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Defining a constraint principally involves the following steps:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Define the constraint information (i.e., function, set, and domain restrictions)\nConstruct a concrete subtype of JuMP.AbstractConstraint to store the  constraint information\nAdd the AbstractConstraint object to an InfiniteModel and assign a name\nCreate an InfOptConstraintRef that points to the constraint object  stored in the model.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"The constraint objects are specified via JuMP.build_constraint which requires  that the user provides a function, set, and optionally include domain  restrictions. For example, let's build a scalar constraint  3y_a(t x) - y_b^2(t) leq 0  forall t in 0 10 x in -2 2^2 over  its full infinite domain (i.e., have no DomainRestrictions):","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> constr = build_constraint(error, 3ya - yb^2, MOI.LessThan(0.0));","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Now the built constraint object can be added to the infinite model via  add_constraint. Let's do so with our example and assign it the name of  c3 (note that adding a name is optional):","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> cref = add_constraint(model, constr, \"c3\")\nc3 : -yb(t)² + 3 ya(t, x) ≤ 0.0, ∀ t ∈ [0, 10], x[1] ∈ [-2, 2], x[2] ∈ [-2, 2]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Thus, we have made our constraint and added it model and now have a constraint  reference cref that we can use to access it.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"The @constraint  and @SDconstraint  macros automate the above steps.","category":"page"},{"location":"guide/constraint/#Macro-Definition","page":"Constraints","title":"Macro Definition","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"As mentioned above in the Basic Usage section, the  @constraint  macro should be used to define constraints with the syntax:  @constraint(model::InfiniteModel, [container/name_expr], constr_expr, [rs::DomainRestrictions]).","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"The second argument is optional and is used to assign a name and/or define  indexing variables to be used in the constraint expr. When a name is provided it  is registered and cannot be used again for another constraint or variable name.  The indexing expression can be used to produce an array of constraints as shown  below (notice this is equivalent to looping over individual @constraint calls):","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> crefs = @constraint(model, [i = 1:2], 2z[i] - yb == 0)\n2-element Vector{InfOptConstraintRef}:\n 2 z[1] - yb(t) = 0.0, ∀ t ∈ [0, 10]\n 2 z[2] - yb(t) = 0.0, ∀ t ∈ [0, 10]\n\njulia> crefs = Vector{InfOptConstraintRef}(undef, 2);\n\njulia> for i = 1:2\n           crefs[i] = @constraint(model, 2z[i] - yb == 0)\n       end\n\njulia> crefs\n2-element Vector{InfOptConstraintRef}:\n 2 z[1] - yb(t) = 0.0, ∀ t ∈ [0, 10]\n 2 z[2] - yb(t) = 0.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Please refer to  JuMP's constraint container documentation  for a thorough tutorial on creating containers of constraints.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Any constraint type supported by JuMP can be specified in the constr_expr  argument. This includes a wealth of constraint types including:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Variable constraints\nScalar constraints\nVector constraints\nConic constraints \nIndicator constraints\nSemi-definite constraints","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"For example, we could define the following semi-definite constraint using  @SDconstraint:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @SDconstraint(model, [yb 2yb; 3yb 4yb] >= ones(2, 2))\n[yb(t) - 1    2 yb(t) - 1;\n 3 yb(t) - 1  4 yb(t) - 1] ∈ PSDCone(), ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"See JuMP's constraint documentation  for a thorough tutorial on the accepted syntax and constraint types.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Finally, restrictions on the inherent infinite domain of a constraint can be  specified via DomainRestrictions with the rs argument. The accepted  syntax is DomainRestrictions(restricts...) where each argument of restricts  can be any of the following forms:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"pref => value\npref => [lb, ub]\npref => IntervalDomain(lb, ub)\nprefs => value\nprefs => [lb, ub]\nprefs => IntervalDomain(lb, ub).","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Note that pref and prefs must correspond to infinite parameters.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"For example, we can define the constraint y_a^2(t x) + z_i leq 1 and  restrict the infinite domain of x_i to be 0 1:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, [i = 1:2], ya^2 + z[i] <= 1, DomainRestrictions(x[i] => [0, 1]))\n2-element Vector{InfOptConstraintRef}:\n ya(t, x)² + z[1] ≤ 1.0, ∀ t ∈ [0, 10], x[1] ∈ [0, 1], x[2] ∈ [-2, 2]\n ya(t, x)² + z[2] ≤ 1.0, ∀ t ∈ [0, 10], x[1] ∈ [-2, 2], x[2] ∈ [0, 1]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"tip: Tip\nWhere possible, using Restricted Variables will tend to be more  performant than using DomainRestrictions instead.","category":"page"},{"location":"guide/constraint/#Queries","page":"Constraints","title":"Queries","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"In this section, we describe a variety of methods to extract constraint information.","category":"page"},{"location":"guide/constraint/#Basic","page":"Constraints","title":"Basic","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"A number of constraint properties can be extracted via constraint references.  Principally, the validity, name, model, index, and constraint object can be queried  via is_valid,  name,  owner_model,  index,  and constraint_object, respectively. These methods all constitute   extensions of JuMP methods and follow exactly the same behavior. Let's try  them out with the following example:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> is_valid(model, c1) # check if contained in model\ntrue\n\njulia> name(c1) # get the name\n\"c1\"\n\njulia> m = owner_model(c1); # get the model it is added to\n\njulia> index(c1) # get the constraint's index\nInfOptConstraintIndex(1)\n\njulia> constr = constraint_object(c1); # get the raw constraint datatype","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Also, constraint_by_name can be used to retrieve a constraint reference  if only the name is known and its name is unique. For example, let's extract the  reference for \"c1\":","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> cref = constraint_by_name(model, \"c1\")\nc1 : z[1]² + z[2]² + 2 ya(t, x) ≤ 0.0, ∀ t ∈ [0, 10], x[1] ∈ [-2, 2], x[2] ∈ [-2, 2]","category":"page"},{"location":"guide/constraint/#Domain-Restrictions","page":"Constraints","title":"Domain Restrictions","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"As explained above, restricted constraints serve as a key capability of  InfiniteOpt. Information about domain restrictions can be obtained via  has_domain_restrictions and domain_restrictions which indicate  if a constraint is restricted and what its DomainRestrictions are,  respectively. These are exemplified below:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> has_domain_restrictions(c1) # check if constraint is bounded\nfalse\n\njulia> has_domain_restrictions(initial)\ntrue\n\njulia> domain_restrictions(initial)\nSubdomain restrictions (1): t = 0","category":"page"},{"location":"guide/constraint/#General","page":"Constraints","title":"General","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Constraints can be defined in a number of ways symbolically that differ from  how it is actually stored in the model. This principally occurs since like terms  and constants are combined together where possible with the variable terms on the  left hand side and the constant on the right hand side. For instance, the  constraint 2y_b(t) + 3y_b(t) - 2 leq 1 + z_1 would be normalized   5y_b(t) - z_1 leq 3. In accordance with this behavior,   normalized_rhs and normalized_coefficient  can be used to query the normalized right hand side and the coefficient of a  particular variable reference, respectively. Let's employ the above example to  illustrate this:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> @constraint(model, constr, 2yb + 3yb - 2 <= 1 + z[1])\nconstr : 5 yb(t) - z[1] ≤ 3.0, ∀ t ∈ [0, 10]\n\njulia> normalized_rhs(constr)\n3.0\n\njulia> normalized_coefficient(constr, yb)\n5.0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"There also exist a number of methods for querying an infinite model about what  constraints it contains.  list_of_constraint_types can be used query what types of constraints   have been added to a model. This is provided as a list of tuples where the first  element is the expression type and the second element is the set type (recall  that constraints are stored in the form func-in-set). Thus, for our current  model we obtain:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> list_of_constraint_types(model)\n4-element Vector{Tuple{DataType,DataType}}:\n (GenericQuadExpr{Float64, GeneralVariableRef}, MathOptInterface.LessThan{Float64})\n (GenericQuadExpr{Float64, GeneralVariableRef}, MathOptInterface.GreaterThan{Float64})\n (GenericAffExpr{Float64, GeneralVariableRef}, MathOptInterface.LessThan{Float64})\n (GenericAffExpr{Float64, GeneralVariableRef}, MathOptInterface.EqualTo{Float64})","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"This information is useful when used in combination with the  num_constraints and all_constraints methods which can take  the expression type and/or the set type as inputs. Here num_constraints  provides the number of constraints that match a certain type  and all_constraints  returns a list of constraint references matching the criteria provided. These have  been extended beyond JuMP functionality such additional methods have been  provided for the cases in which one wants to query solely off of set or off  expression type. Let's illustrate this with num_constraints:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> num_constraints(model) # total number of constraints\n16\n\njulia> num_constraints(model, GenericQuadExpr{Float64, GeneralVariableRef})\n5\n\njulia> num_constraints(model, MOI.LessThan{Float64})\n5\n\njulia> num_constraints(model, GenericQuadExpr{Float64, GeneralVariableRef},\n                       MOI.LessThan{Float64})\n4                   ","category":"page"},{"location":"guide/constraint/#Modification","page":"Constraints","title":"Modification","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"In this section, we highlight a number of methods that can be used to modify  existing constraints.","category":"page"},{"location":"guide/constraint/#Deletion","page":"Constraints","title":"Deletion","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"All constraints in InfiniteOpt can be removed in like manner to typical JuMP  constraints with the appropriate extension of  delete. This will  remove the corresponding constraint object from the model. However, please note  any registered names will remain registered in the infinite model. This means  that a constraint with a registered name cannot be repeatedly added and removed  using the same name. To exemplify this, let's delete the constraint c1:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> delete(model, c1)","category":"page"},{"location":"guide/constraint/#General-2","page":"Constraints","title":"General","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"There also are a number of ways to modify information and characteristics of  constraints. First, set_name  can be used to specify a new name for a particular constraint. For instance,  let's update the name of initial to \"init_cond\":","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> set_name(initial, \"init_cond\")\n\njulia> initial\ninit_cond : yb(t) = 0.0, ∀ t = 0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"We can also update the normalized right hand side constant value or normalized  left hand side variable coefficient value using  set_normalized_rhs and set_normalized_coefficient,  respectively. Let's again consider the constraint 5y_b(t) - z_1 leq 3 as an  example. Let's change the constant term to -1 and the y_b(t) coefficient to 2.5:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> set_normalized_rhs(constr, -1)\n\njulia> set_normalized_coefficient(constr, yb, 2.5)\n\njulia> constr\nconstr : 2.5 yb(t) - z[1] ≤ -1.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nIn some cases, it may be more convenient to dynamically modify coefficients  and other values via the use of finite parameters. This provides an avenue  to update parameters without having to be concerned about the normalized form.  For more information, see the Finite Parameters page. ","category":"page"},{"location":"guide/constraint/#Domain-Restrictions-2","page":"Constraints","title":"Domain Restrictions","text":"","category":"section"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Domain Restrictions can be added to, modified, or removed from any constraint in  InfiniteOpt. Principally, this is accomplished via   add_domain_restrictions, set_domain_restrictions,  and delete_domain_restrictions.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"note: Note\nPrevious versions of InfiniteOpt used @[set/add]_parameter_bounds which  have been deprecated in favor of using DomainRestrictions with the  the methods described used in this section.","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"First, domain restrictions can be added to a constraint via  add_domain_restrictions. For example, let's add the bound  t in 0 1 to constr:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> add_domain_restrictions(constr, DomainRestrictions(t => [0, 1]))\n\njulia> constr\nconstr : 2.5 yb(t) - z[1] ≤ -1.0, ∀ t ∈ [0, 1]","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"In similar manner, set_domain_restrictions can be employed to specify  what restrictions a constraint has (overwriting any existing ones if forced). It   follows the same syntax, so let's use it to change the bounds on t to t = 0:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> set_domain_restrictions(constr, DomainRestrictions(t => 0), force = true)\n\njulia> constr\nconstr : 2.5 yb(t) - z[1] ≤ -1.0, ∀ t = 0","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"Finally, constraint restrictions can be deleted via  delete_domain_restrictions. Now let's delete the domain restrictions  associated with our example:","category":"page"},{"location":"guide/constraint/","page":"Constraints","title":"Constraints","text":"julia> delete_domain_restrictions(constr)\n\njulia> constr\nconstr : 2.5 yb(t) - z[1] ≤ -1.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"manual/measure/#measure_manual","page":"Measures","title":"Measure Operators","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"A technical manual for measures in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/measure/#Measure-Data","page":"Measures","title":"Measure Data","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"AbstractMeasureData\nDiscreteMeasureData(::GeneralVariableRef, ::Vector{<:Real}, ::Vector{<:Real})\nDiscreteMeasureData(::AbstractArray{GeneralVariableRef}, ::Vector{<:Real}, ::Vector{<:AbstractArray{<:Real}})\nDiscreteMeasureData\nFunctionalDiscreteMeasureData(::GeneralVariableRef,::Function,::Int,::Type{<:AbstractSupportLabel})\nFunctionalDiscreteMeasureData(::AbstractArray{GeneralVariableRef},::Function,::Int,::Type{<:AbstractSupportLabel})\nFunctionalDiscreteMeasureData\nparameter_refs(::AbstractMeasureData)\nsupport_label(::AbstractMeasureData)\ngenerative_support_info(::AbstractMeasureData)\nJuMP.lower_bound(::AbstractMeasureData)\nJuMP.upper_bound(::AbstractMeasureData)\nsupports(::AbstractMeasureData)\nnum_supports(::AbstractMeasureData)\nmin_num_supports(::AbstractMeasureData)\ncoefficient_function(::AbstractMeasureData)\ncoefficients(::AbstractMeasureData)\nweight_function(::AbstractMeasureData)\ndefault_weight","category":"page"},{"location":"manual/measure/#InfiniteOpt.AbstractMeasureData","page":"Measures","title":"InfiniteOpt.AbstractMeasureData","text":"AbstractMeasureData\n\nAn abstract type to define data for measures to define the behavior of Measure.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.DiscreteMeasureData-Tuple{GeneralVariableRef, Vector{var\"#s40\"} where var\"#s40\"<:Real, Vector{var\"#s39\"} where var\"#s39\"<:Real}","page":"Measures","title":"InfiniteOpt.DiscreteMeasureData","text":"DiscreteMeasureData(pref::GeneralVariableRef,\n    coefficients::Vector{<:Real},\n    supports::Vector{<:Real};\n    [label::Type{<:AbstractSupportLabel} = generate_unique_label(),\n    weight_function::Function = [`default_weight`](@ref),\n    lower_bound::Real = NaN,\n    upper_bound::Real = NaN,\n    is_expect::Bool = false]\n    )::DiscreteMeasureData\n\nReturns a 1-dimensional DiscreteMeasureData object that can be utilized to define measures using measure. This accepts input for a scalar (single) infinite parameter. A description of the other arguments is provided in the documentation for DiscreteMeasureData. Errors if supports are out bounds or an unequal number of supports and coefficients are given. Note that by default a unique label is generated via generate_unique_label to ensure the supports can be located in the infinite parameter support storage. Advanced implementations, may choose a different behavior but should do so with caution.\n\nExample\n\njulia> data = DiscreteMeasureData(pref, [0.5, 0.5], [1, 2]);\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.DiscreteMeasureData-Tuple{AbstractArray{GeneralVariableRef, N} where N, Vector{var\"#s40\"} where var\"#s40\"<:Real, Vector{var\"#s39\"} where var\"#s39\"<:(AbstractArray{var\"#s38\", N} where {var\"#s38\"<:Real, N})}","page":"Measures","title":"InfiniteOpt.DiscreteMeasureData","text":"DiscreteMeasureData(prefs::AbstractArray{GeneralVariableRef},\n    coefficients::Vector{<:Real},\n    supports::Vector{<:AbstractArray{<:Real}};\n    label::Type{<:AbstractSupportLabel} = generate_unique_label(),\n    weight_function::Function = [`default_weight`](@ref),\n    lower_bounds::AbstractArray{<:Real} = [NaN...],\n    upper_bounds::AbstractArray{<:Real} = [NaN...],\n    is_expect::Bool = false\n    )::DiscreteMeasureData\n\nReturns a DiscreteMeasureData object that can be utilized to define measures using measure. This accepts input for an array (multi) parameter. The inner arrays in the supports vector need to match the formatting of the array used for parameter_refs. A description of the other arguments is provided in the documentation for DiscreteMeasureData. Errors if supports are out bounds, an unequal number of supports and coefficients are given, the array formats do not match, or if mixed infinite parameter types are given. Note that by default a unique label is generated via generate_unique_label to ensure the supports can be located in the infinite parameter support storage. Advanced implementations, may choose a different behavior but should do so with caution.\n\nExample\n\njulia> data = DiscreteMeasureData(prefs, [0.5, 0.5], [[1, 1], [2, 2]]);\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.DiscreteMeasureData","page":"Measures","title":"InfiniteOpt.DiscreteMeasureData","text":"DiscreteMeasureData{P <: Union{JuMP.AbstractVariableRef,\n                    Vector{<:JuMP.AbstractVariableRef}},\n                    N, B <: Union{Float64, Vector{Float64}},\n                    F <: Function\n                    } <: AbstractMeasureData\n\nA DataType for immutable measure abstraction data where the abstraction is of the form: measure = int_tau in T f(tau) w(tau) dtau approx sum_i = 1^N alpha_i f(tau_i) w(tau_i). The supports and coefficients are immutable (i.e., they will not change even if supports are changed for the underlying infinite parameter.) This type can be used for both 1-dimensional and multi-dimensional measures.\n\nFields\n\nparameter_refs::P: The infinite parameter(s) over which the integration occurs.                      These can be comprised of multiple independent parameters,                      but dependent parameters cannot be mixed with other types.\ncoefficients::Vector{Float64}: Coefficients alpha_i for the above                                  measure abstraction.\nsupports::Array{Float64, N}: Supports points tau_i. This is a Vector                                if only one parameter is given, otherwise it is                                a Matrix where the supports are stored column-wise.\nlabel::DataType: Label for the support points tau_i when stored in the                  infinite parameter(s), stemming from AbstractSupportLabel.\nweight_function::F: Weighting function w must map an individual                              support value to a Real scalar value.\nlower_bounds::B: Lower bound in accordance with T, this denotes the                   intended interval of the measure and should be NaN if ignored\nupper_bounds::B: Same as above but the upper bound.\nis_expect::Bool: Is this data associated with an expectation call?\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.FunctionalDiscreteMeasureData-Tuple{GeneralVariableRef, Function, Int64, Type{var\"#s40\"} where var\"#s40\"<:AbstractSupportLabel}","page":"Measures","title":"InfiniteOpt.FunctionalDiscreteMeasureData","text":"FunctionalDiscreteMeasureData(pref::GeneralVariableRef,\n    coeff_func::Function,\n    min_num_supports::Int,\n    label::Type{<:AbstractSupportLabel};\n    [weight_function::Function = [`default_weight`](@ref),\n    lower_bound::Real = NaN,\n    upper_bound::Real = NaN,\n    is_expect::Bool = false,\n    generative_support_info::AbstractGenerativeInfo = NoGenerativeSupports()]\n    )::FunctionalDiscreteMeasureData\n\nReturns a 1-dimensional FunctionalDiscreteMeasureData object that can be utilized to define measures using measure. This accepts input for a scalar (single) infinite parameter. A description of the other arguments is provided in the documentation for FunctionalDiscreteMeasureData. Errors if pref is not an infinite parameter. Built-in choices for label include:\n\nAll: Use all of the supports stored in pref\nMCSample: Use Monte Carlo samples associated with pref\nWeightedSample: Use weighted Monte Carlo samples associated with pref\nUniformGrid: Use uniform grid points associated with pref.\n\nExample\n\njulia> data = FunctionalDiscreteMeasureData(pref, my_func, 20, UniformGrid);\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.FunctionalDiscreteMeasureData-Tuple{AbstractArray{GeneralVariableRef, N} where N, Function, Int64, Type{var\"#s40\"} where var\"#s40\"<:AbstractSupportLabel}","page":"Measures","title":"InfiniteOpt.FunctionalDiscreteMeasureData","text":"FunctionalDiscreteMeasureData(prefs::AbstractArray{GeneralVariableRef},\n    coeff_func::Function,\n    min_num_supports::Int,\n    label::Type{<:AbstractSupportLabel};\n    [weight_function::Function = [`default_weight`](@ref),\n    lower_bounds::AbstractArray{<:Real} = [NaN...],\n    upper_bounds::AbstractArray{<:Real} = [NaN...],\n    is_expect::Bool = false]\n    )::FunctionalDiscreteMeasureData\n\nReturns a multi-dimensional FunctionalDiscreteMeasureData object that can be utilized to define measures using measure. This accepts input for an array of infinite parameters. A description of the other arguments is provided in the documentation for FunctionalDiscreteMeasureData. Errors if prefs are not infinite parameters or if the mixed parameter types are provided. Built-in choices for label include:\n\nAll: Use all of the supports stored in prefs\nMCSample: Use Monte Carlo samples associated with prefs\nWeightedSample: Use weighted Monte Carlo samples associated with prefs\nUniformGrid: Use uniform grid points associated with prefs.\n\nExample\n\njulia> data = FunctionalDiscreteMeasureData(prefs, my_func, 20, MCSample);\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.FunctionalDiscreteMeasureData","page":"Measures","title":"InfiniteOpt.FunctionalDiscreteMeasureData","text":"FunctionalDiscreteMeasureData{P <: Union{JuMP.AbstractVariableRef,\n                              Vector{<:JuMP.AbstractVariableRef}},\n                              B <: Union{Float64, Vector{Float64}},\n                              I <: AbstractGenerativeInfo,\n                              F1 <: Function,\n                              F2 <: Function\n                              } <: AbstractMeasureData\n\nA DataType for mutable measure abstraction data where the abstraction is of the form: measure = int_tau in T f(tau) w(tau) dtau approx sum_i = 1^N alpha_i f(tau_i) w(tau_i). This abstraction is equivalent to that of DiscreteMeasureData, but the difference is that the supports are not fully known at the time of measure creation. Thus, functions are stored that will be used to generate the concrete support points tau_i and their coefficients alpha_i when the measure is evaluated (expanded). These supports are identified/generated in accordance with the label with a gaurantee that at least num_supports are generated. For example, if label = MCSample and num_supports = 100 then the measure will use all of the supports stored in the parameter_refs with the label MCSample and will ensure there are at least 100 are generated. This type can be used for both 1-dimensional and multi-dimensional measures.\n\nFor 1-dimensional measures over independent infinite parameters, the  generative_supp_info specifies the info needed to make generative supports based  on those with that exist with label. Note that only 1 kind of generative  supports are allowed for each infinite parameter.\n\nFields\n\nparameter_refs::P: The infinite parameter(s) over which the integration occurs.                    These can be comprised of multiple independent parameters,                    but dependent parameters cannot be mixed with other types.\ncoeff_function::F1: Coefficient generation function making alpha_i                             for the above measure abstraction. It should take                             all the supports as input (formatted as an Array)                             and return the corresponding vector of coefficients.\nmin_num_supports::Int: Specifies the minimum number of supports tau_i                      desired in association with parameter_refs and label.\nlabel::DataType: Label for the support points tau_i which are/will be                  stored in the infinite parameter(s), stemming from AbstractSupportLabel.\ngenerative_supp_info::I: Information needed to generate supports based on other   existing ones.\nweight_function::F2: Weighting function w must map an individual                             support value to a Real scalar value.\nlower_bounds::B: Lower bounds in accordance with T, this denotes the                 intended interval of the measure and should be NaN if ignored\nupper_bounds::B: Same as above but the upper bounds.\nis_expect::Bool: Is this data associated with an expectation call?\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.parameter_refs-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(data::AbstractMeasureData)::Union{GeneralVariableRef,\n                                                 AbstractArray{GeneralVariableRef}}\n\nReturn the infinite parameter reference(s) in data. This is intended as an internal function to be used with measure addition. User-defined measure data types will need to extend this function otherwise an error is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.support_label-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.support_label","text":"support_label(data::AbstractMeasureData)::Type{<:AbstractSupportLabel}\n\nReturn the label stored in data associated with its supports. This is intended as en internal method for measure creation and ensures any new supports are added to parameters with such a label. User-defined measure data types should extend this functionif supports are used, otherwise an error is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.generative_support_info-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.generative_support_info","text":"generative_support_info(data::AbstractMeasureData)::AbstractGenerativeInfo\n\nReturn the generative support creation info that corresponds to data. This is  intended as an internal method and only needs to be extended for user-defined  measure data types that use generative supports.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#JuMP.lower_bound-Tuple{AbstractMeasureData}","page":"Measures","title":"JuMP.lower_bound","text":"JuMP.lower_bound(data::AbstractMeasureData)::Union{Float64, Vector{Float64}}\n\nReturn the lower bound associated with data that defines its domain. This is intended as an internal method, but may be useful for extensions. User-defined measure data types should extend this function if desired, otherwise NaN is returned\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#JuMP.upper_bound-Tuple{AbstractMeasureData}","page":"Measures","title":"JuMP.upper_bound","text":"JuMP.upper_bound(data::AbstractMeasureData)::Union{Float64, Vector{Float64}}\n\nReturn the lower bound associated with data that defines its domain. This is intended as an internal method, but may be useful for extensions. User-defined measure data types should extend this function if desired, otherwise NaN is returned.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.supports-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.supports","text":"supports(data::AbstractMeasureData)::Array{Float64}\n\nReturn the supports associated with data and its infinite parameters. This is intended as en internal method for measure creation and ensures any new supports are added to parameters. User-defined measure data types should extend this function if appropriate, otherwise an empty vector is returned.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.num_supports-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.num_supports","text":"num_supports(data::AbstractMeasureData)::Int\n\nReturn the number supports associated with data and its infinite parameters. This is intended as an internal method for measure creation. User-defined measure data types should extend this function if appropriate, otherwise 0 is returned.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.min_num_supports-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.min_num_supports","text":"min_num_supports(data::AbstractMeasureData)::Int\n\nReturn the minimum number of supports associated with data. By fallback, this will just return num_supports(data). This is primarily intended for internal queries of FunctionalDiscreteMeasureData, but can be extended for other measure data types if needed.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.coefficient_function-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.coefficient_function","text":"coefficient_function(data::AbstractMeasureData)::Function\n\nReturn the coefficient function stored in data associated with its expansion abstraction is there is such a function. This is intended as an internal method for measure creation. User-defined measure data types should extend this function if appropriate, otherwise an error is thrown for unsupported types.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.coefficients-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.coefficients","text":"coefficients(data::AbstractMeasureData)::Vector{<:Real}\n\nReturn the coefficients associated with data associated with its expansion abstraction. This is intended as en internal method for measure creation. User-defined measure data types should extend this function if appropriate, otherwise an empty vector is returned.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.weight_function-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.weight_function","text":"weight_function(data::AbstractMeasureData)::Function\n\nReturn the weight function stored in data associated with its expansion abstraction. This is intended as en internal method for measure creation. User-defined measure data types should extend this function if appropriate, otherwise an error is thrown.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.default_weight","page":"Measures","title":"InfiniteOpt.default_weight","text":"default_weight(t) = 1\n\nDefault weight function for DiscreteMeasureData and FunctionalDiscreteMeasureData. Returns 1 regardless of the input value.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#Definition","page":"Measures","title":"Definition","text":"","category":"section"},{"location":"manual/measure/#General","page":"Measures","title":"General","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"measure\n@measure\nbuild_measure\nMeasure\nadd_measure\nInfiniteOpt.add_supports_to_parameters(::AbstractMeasureData)\nMeasureIndex\nMeasureData\nMeasureRef","category":"page"},{"location":"manual/measure/#InfiniteOpt.measure","page":"Measures","title":"InfiniteOpt.measure","text":"measure(expr::JuMP.AbstractJuMPScalar,\n        data::AbstractMeasureData;\n        [name::String = \"measure\"])::GeneralVariableRef\n\nReturn a measure reference that evaluates expr using according to data. The measure data data determines how the measure is to be evaluated. Typically, the DiscreteMeasureData and the FunctionalDiscreteMeasureData constructors can be used to for data. The variable expression expr can contain InfiniteOpt variables, infinite parameters, other measure references (meaning measures can be nested), and constants. Typically, this is called inside of JuMP.@expression, JuMP.@objective, and JuMP.@constraint in a manner similar  to sum. Note measures are not explicitly evaluated until  build_optimizer_model! is called or unless they are expanded via  expand or expand_all_measures!.\n\nExample\n\njulia> tdata = DiscreteMeasureData(t, [0.5, 0.5], [1, 2]);\n\njulia> xdata = DiscreteMeasureData(xs, [0.5, 0.5], [[-1, -1], [1, 1]]);\n\njulia> constr_RHS = @expression(model, measure(g - s + 2, tdata) + s^2)\nmeasure{t}[g(t) - s + 2] + s²\n\njulia> @objective(model, Min, measure(g - 1  + measure(T, xdata), tdata))\nmeasure{xs}[g(t) - 1 + measure{xs}[T(t, x)]]\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.@measure","page":"Measures","title":"InfiniteOpt.@measure","text":"@measure(expr::JuMP.AbstractJuMPScalar,\n         data::AbstractMeasureData;\n         [name::String = \"measure\"])::GeneralVariableRef\n\nAn efficient wrapper for measure, please see its doc string for more information.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.build_measure","page":"Measures","title":"InfiniteOpt.build_measure","text":"build_measure(expr::JuMP.AbstractJuMPScalar,\n              data::AbstractMeasureData)::Measure\n\nBuild and return a Measure given the expression to be measured expr using measure data data. This principally serves as an internal method for measure definition. Errors if the supports associated with data violate an finite variable parameter bounds of finite variables that are included in the measure.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.Measure","page":"Measures","title":"InfiniteOpt.Measure","text":"Measure{T <: JuMP.AbstractJuMPScalar, V <: AbstractMeasureData}\n\nA DataType for measure abstractions. The abstraction is determined by data and is enacted on func when the measure is evaluated (expended).\n\nFields\n\nfunc::T The InfiniteOpt expression to be measured.\ndata::V Data of the abstraction as described in a AbstractMeasureData           concrete subtype.\nobject_nums::Vector{Int}: The parameter object numbers of the evaluated                             measure expression (i.e., the object numbers of                             func excluding those that belong to data).\nparameter_nums::Vector{Int}: The parameter numbers that parameterize the                                evaluated measure expression. (i.e., the                                parameter numbers of func excluding those                                that belong to data).\nconstant_func::Bool: Indicates if func is not parameterized by the infinite                        parameters in data. (i.e., do the object numbers of                        func and data have no intersection?) This is useful                        to enable analytic evaluations if possible.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.add_measure","page":"Measures","title":"InfiniteOpt.add_measure","text":"add_measure(model::InfiniteModel, meas::Measure,\n            name::String = \"measure\")::GeneralVariableRef\n\nAdd a measure to model and return the corresponding measure reference. This operates in a manner similar to JuMP.add_variable. Note this intended as an internal method.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.add_supports_to_parameters-Tuple{AbstractMeasureData}","page":"Measures","title":"InfiniteOpt.add_supports_to_parameters","text":"add_supports_to_parameters(data::AbstractMeasureData)::Nothing\n\nAdd supports as appropriate with data to the underlying infinite parameters. This is an internal method with by add_measure and should be defined for user-defined measure data types.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureIndex","page":"Measures","title":"InfiniteOpt.MeasureIndex","text":"MeasureIndex <: ObjectIndex\n\nA DataType for storing the index of a Measure.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureData","page":"Measures","title":"InfiniteOpt.MeasureData","text":"MeasureData{M <: Measure} <: AbstractDataObject\n\nA mutable DataType for storing Measures and their data.\n\nFields\n\nmeasure::M: The measure structure.\nname::String: The base name used for printing name(meas_expr d(par)).\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nconstraint_indices::Vector{InfOptConstraintIndex}: Indices of dependent constraints.\nderivative_indices::Vector{DerivativeIndex}: Indices of dependent derivatives.\nin_objective::Bool: Is this used in objective?\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureRef","page":"Measures","title":"InfiniteOpt.MeasureRef","text":"MeasureRef <: DispatchVariableRef\n\nA DataType for referring to measure abstractions.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::MeasureIndex: Index of the measure in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#Integrals","page":"Measures","title":"Integrals","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"InfiniteOpt.MeasureToolbox.integral(::JuMP.AbstractJuMPScalar,::InfiniteOpt.GeneralVariableRef,::Real,::Real)\nInfiniteOpt.MeasureToolbox.∫(::JuMP.AbstractJuMPScalar,::InfiniteOpt.GeneralVariableRef,::Real,::Real)\nInfiniteOpt.MeasureToolbox.uni_integral_defaults\nInfiniteOpt.MeasureToolbox.set_uni_integral_defaults\nInfiniteOpt.MeasureToolbox.clear_uni_integral_defaults\nInfiniteOpt.MeasureToolbox.integral(::JuMP.AbstractJuMPScalar,::AbstractArray{InfiniteOpt.GeneralVariableRef},::Union{Real, AbstractArray{<:Real}},::Union{Real, AbstractArray{<:Real}})\nInfiniteOpt.MeasureToolbox.∫(::JuMP.AbstractJuMPScalar,::AbstractArray{InfiniteOpt.GeneralVariableRef},::Union{Real, AbstractArray{<:Real}},::Union{Real, AbstractArray{<:Real}})\nInfiniteOpt.MeasureToolbox.multi_integral_defaults\nInfiniteOpt.MeasureToolbox.set_multi_integral_defaults\nInfiniteOpt.MeasureToolbox.clear_multi_integral_defaults\nInfiniteOpt.MeasureToolbox.@integral\nInfiniteOpt.MeasureToolbox.@∫\nInfiniteOpt.MeasureToolbox.AbstractIntegralMethod\nInfiniteOpt.MeasureToolbox.Automatic\nInfiniteOpt.MeasureToolbox.AbstractUnivariateMethod\nInfiniteOpt.MeasureToolbox.UniTrapezoid\nInfiniteOpt.MeasureToolbox.UniMCSampling\nInfiniteOpt.MeasureToolbox.UniIndepMCSampling\nInfiniteOpt.MeasureToolbox.Quadrature\nInfiniteOpt.MeasureToolbox.GaussHermite\nInfiniteOpt.MeasureToolbox.GaussLegendre\nInfiniteOpt.MeasureToolbox.GaussRadau\nInfiniteOpt.MeasureToolbox.GaussLobatto\nInfiniteOpt.MeasureToolbox.GaussJacobi\nInfiniteOpt.MeasureToolbox.FEGaussLobatto\nInfiniteOpt.MeasureToolbox.GaussChebyshev\nInfiniteOpt.MeasureToolbox.GaussLaguerre\nInfiniteOpt.MeasureToolbox.AbstractMultivariateMethod\nInfiniteOpt.MeasureToolbox.MultiMCSampling\nInfiniteOpt.MeasureToolbox.MultiIndepMCSampling\nInfiniteOpt.MeasureToolbox.generate_integral_data","category":"page"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.integral-Tuple{AbstractJuMPScalar, GeneralVariableRef, Real, Real}","page":"Measures","title":"InfiniteOpt.MeasureToolbox.integral","text":"integral(expr::JuMP.AbstractJuMPScalar,\n         pref::GeneralVariableRef,\n         [lower_bound::Real = lower_bound(pref),\n         upper_bound::Real = upper_bound(pref);\n         kwargs...])::GeneralVariableRef\n\nReturns a measure reference that evaluates the integral of expr with respect to infinite parameter pref from lower_bound to upper_bound. This thus considers integrals of the form: int_p in P expr(p) w(p) dp where p is an infinite parameter and w is the weight function is 1 by default. This function provides a high-level interface that ultimately constructs an appropriate concrete form of AbstractMeasureData via generate_integral_data in accordance with the keyword arugment eval_method that is then used with measure. Note that it is preferred to call @integral when expr is not just a single variable reference. Errors for bad bound input.\n\nThe keyword arguments are as follows:\n\neval_method::AbstractUnivariateMethod: Used to determine the   numerical evaluation scheme. Possible choices include:\nAutomatic()\nUniTrapezoid()\nUniMCSampling()\nUniIndepMCSampling()\nQuadrature()\nGaussHermite()\nGaussLegendre()\nFEGaussLobatto()\nGaussLageurre()\nGaussLobatto()\nGaussChebyshev(order)\nGaussRadau()\nGaussJacobi(α, β)\nnum_supports: The minimum number of supports to be generated (if used by   eval_method)\nweight_func: w(p) above with parameter value inputs and scalar output\n\nSee set_uni_integral_defaults to update the default keyword argument values for all one-dimensional integral calls.\n\nExample\n\njulia> @infinite_parameter(model, x in [0, 1])\nx\n\njulia> @variable(model, f, Infinite(x))\nf(x)\n\njulia> int = integral(f, x)\n∫{x ∈ [0, 1]}[f(x)]\n\njulia> expand(int)\n0.2 f(0.8236475079774124) + 0.2 f(0.9103565379264364) + 0.2 f(0.16456579813368521) + 0.2 f(0.17732884646626457) + 0.2 f(0.278880109331201)\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.∫-Tuple{AbstractJuMPScalar, GeneralVariableRef, Real, Real}","page":"Measures","title":"InfiniteOpt.MeasureToolbox.∫","text":"∫(expr::JuMP.AbstractJuMPScalar,\n  pref::GeneralVariableRef,\n  [lower_bound::Real = NaN,\n  upper_bound::Real = NaN;\n  kwargs...])::GeneralVariableRef\n\nA convenient wrapper for integral. The ∫ unicode symbol is produced  via \\int.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.uni_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.uni_integral_defaults","text":"uni_integral_defaults()::Dict{Symbol, Any}\n\nGet the default keyword argument values for defining one-dimensional integrals.\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.set_uni_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.set_uni_integral_defaults","text":"set_uni_integral_defaults(; kwargs...)::Nothing\n\nSet the default keyword argument settings for one-dimensional integrals. The keyword arguments of this function will be recorded in the default keyword argument dictionary. These will determine the default keyword argument values when calling integral with a single infinite parameter.\n\nExample\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\njulia> set_uni_integral_defaults(num_supports = 5, eval_method = Quadrature(),\n                                 new_kwarg = true)\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 3 entries:\n  :new_kwarg             => true\n  :num_supports          => 5\n  :eval_method           => Quadrature()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.clear_uni_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.clear_uni_integral_defaults","text":"clear_uni_integral_defaults()::Nothing\n\nClears and resets the keyword argument defaults for univariate integrals to their  default state. \n\nExample\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 3 entries:\n  :new_kwarg             => true\n  :num_supports          => 5\n  :eval_method           => Quadrature()\n\njulia> clear_uni_integral_defaults()\n\njulia> uni_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.integral-Tuple{AbstractJuMPScalar, AbstractArray{GeneralVariableRef, N} where N, Union{Real, AbstractArray{var\"#s40\", N} where {var\"#s40\"<:Real, N}}, Union{Real, AbstractArray{var\"#s39\", N} where {var\"#s39\"<:Real, N}}}","page":"Measures","title":"InfiniteOpt.MeasureToolbox.integral","text":"integral(expr::JuMP.AbstractJuMPScalar,\n         prefs::AbstractArray{GeneralVariableRef},\n         [lower_bounds::Union{Real, AbstractArray{<:Real}} = [lower_bound(pref)...],\n         upper_bounds::Union{Real, AbstractArray{<:Real}} = [upper_bound(pref)...];\n         kwargs...])::GeneralVariableRef\n\nReturns a measure reference that evaluates the integral of expr with respect to infinite parameters prefs from lower_bounds to upper_bounds. This thus considers integrals of the form: int_p in P expr(p) w(p) dp where p is an infinite parameter and w is the weight function is 1 by default. This function provides a high-level interface that ultimately constructs an appropriate concrete form of AbstractMeasureData via generate_integral_data in accordance with the keyword arugment eval_method that is then used with measure. Note that it is preferred to call @integral when expr is not just a single variable reference. Errors when the container types and dimensions do not match or the bounds are invalid.\n\nThe keyword arguments are as follows:\n\neval_method::AbstractMultivariateMethod: Used to determine the   numerical evaluation scheme. Possible choices include:\nAutomatic()\nMultiMCSampling()\nMultiIndepMCSampling()\nnum_supports: The minimum number of supports to be generated (if used by   eval_method)\nweight_func: w(p) above with parameter value inputs and scalar output\n\nSee set_multi_integral_defaults to update the default keyword argument values for all multi-dimensional integral calls.\n\nExample\n\njulia> @infinite_parameter(model, x[1:2] in [0, 1], independent = true);\n\njulia> @variable(model, f, Infinite(x));\n\njulia> int = integral(f, x)\n∫{x ∈ [0, 1]^2}[f(x)]\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.∫-Tuple{AbstractJuMPScalar, AbstractArray{GeneralVariableRef, N} where N, Union{Real, AbstractArray{var\"#s40\", N} where {var\"#s40\"<:Real, N}}, Union{Real, AbstractArray{var\"#s39\", N} where {var\"#s39\"<:Real, N}}}","page":"Measures","title":"InfiniteOpt.MeasureToolbox.∫","text":"∫(expr::JuMP.AbstractJuMPScalar,\n  prefs::AbstractArray{GeneralVariableRef},\n  [lower_bounds::Union{Real, AbstractArray{<:Real}} = NaN,\n  upper_bounds::Union{Real, AbstractArray{<:Real}} = NaN;\n  kwargs...])::GeneralVariableRef\n\nA convenient wrapper for integral. The unicode symbol ∫ is produced  via \\int.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.multi_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.multi_integral_defaults","text":"multi_integral_defaults()::Dict{Symbol, Any}\n\nGet the default keyword argument values for defining multi-dimensional integrals.\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.set_multi_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.set_multi_integral_defaults","text":"set_multi_integral_defaults(; kwargs...)::Nothing\n\nSet the default keyword argument settings for multi-dimesnional integrals. The keyword arguments of this function will be recorded in the default keyword argument dictionary. These will determine the default keyword argument values when calling integral with an array of infinite parameters.\n\nExample\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\njulia> set_multi_integral_defaults(num_supports = 5, new_kwarg = true)\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 3 entries:\n  :new_kwarg             => true\n  :num_supports          => 5\n  :eval_method           => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.clear_multi_integral_defaults","page":"Measures","title":"InfiniteOpt.MeasureToolbox.clear_multi_integral_defaults","text":"clear_multi_integral_defaults()::Nothing\n\nClears and resets the keyword argument defaults for multivariate integrals to their  default state. \n\nExample\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 3 entries:\n  :new_kwarg             => true\n  :num_supports          => 5\n  :eval_method           => Automatic()\n\njulia> clear_multi_integral_defaults()\n\njulia> multi_integral_defaults()\nDict{Symbol,Any} with 1 entry:\n  :eval_method => Automatic()\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@integral","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@integral","text":"@integral(expr::JuMP.AbstractJuMPScalar,\n          prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}},\n          [lower_bounds::Union{Real, AbstractArray{<:Real}} = default_bounds,\n          upper_bounds::Union{Real, AbstractArray{<:Real}} = default_bounds;\n          kwargs...])::GeneralVariableRef\n\nAn efficient wrapper for integral and integral. Please see the above doc strings for more information.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@∫","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@∫","text":"@∫(expr::JuMP.AbstractJuMPScalar,\n   prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}},\n   [lower_bounds::Union{Real, AbstractArray{<:Real}} = default_bounds,\n   upper_bounds::Union{Real, AbstractArray{<:Real}} = default_bounds;\n   kwargs...])::GeneralVariableRef\n\nA convenient wrapper for @integral. The unicode symbol ∫ is produced  via \\int.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.AbstractIntegralMethod","page":"Measures","title":"InfiniteOpt.MeasureToolbox.AbstractIntegralMethod","text":"AbstractIntegralMethod\n\nAn abstract type for integral evaluation methods use in combination with integral and generate_integral_data.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.Automatic","page":"Measures","title":"InfiniteOpt.MeasureToolbox.Automatic","text":"Automatic <: AbstractIntegralMethod\n\nAn integral evaluation type for automically selecting an appropriate integral evaluation method. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.AbstractUnivariateMethod","page":"Measures","title":"InfiniteOpt.MeasureToolbox.AbstractUnivariateMethod","text":"AbstractUnivariateMethod <: AbstractIntegralMethod\n\nAn abstract type for integral evaluation methods for 1-dimensional integrals.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.UniTrapezoid","page":"Measures","title":"InfiniteOpt.MeasureToolbox.UniTrapezoid","text":"UniTrapezoid <: AbstractUnivariateMethod\n\nAn integral evalution method that uses the trapezoid rule to in combination with all parameter supports available when the integral is expanded and/or when the infinite model is optimized, whichever comes first. Note this method will ignore the num_supports keyword argument. The upper and lower bounds of the integral  will automatically be added as supports. Note this is valid only for finite integral domains. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.UniMCSampling","page":"Measures","title":"InfiniteOpt.MeasureToolbox.UniMCSampling","text":"UniMCSampling <: AbstractUnivariateMethod\n\nAn integral evaluation method that uses uniform Monte Carlo sampling to approximate the integral. This variant will add more supports to the model as needed to satisfy num_supports and it will include all supports with the MCSample label up till the integral is expanded and/or when the infinite model is optimized, whichever comes first. Note this is valid only for finite integral domains. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.UniIndepMCSampling","page":"Measures","title":"InfiniteOpt.MeasureToolbox.UniIndepMCSampling","text":"UniIndepMCSampling <: AbstractUnivariateMethod\n\nAn integral evaluation method that uses uniform Monte Carlo sampling to approximate the integral similar to UniMCSampling. However, this variant will generate its own set of supports and ignore all other supports with the MCSample label. Note this is valid only for finite integral domains. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.Quadrature","page":"Measures","title":"InfiniteOpt.MeasureToolbox.Quadrature","text":"Quadrature <: AbstractUnivariateMethod\n\nA general integral evaluation method that will automatically select the appropriate quadrature method to approximate the integral. Please note that this will generate a unique set of parameter supports and will ignore existing supports when the integral is evaluated and thus should be used with caution. However, this method is able to handle infinite and semi-infinite integral domains. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussHermite","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussHermite","text":"GaussHermite <: AbstractUnivariateMethod\n\nAn integral evaulation method that uses Gauss-Hermite quadrature to evaluate integrals. This is valid for infinite integral domains.  It will take this form:\n\nint_-^ f(x) e^-x^2 approx sum_i=1^n alpha_i f(x_i)\n\nUsing the weight function: w(x) = e^-x^2\n\nNote this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussLegendre","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussLegendre","text":"GaussLegendre <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Legendre quadrature to evaluate integrals. This is valid for finite integral domains. Note this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussRadau","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussRadau","text":"GaussRadau <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Radau quadrature to evaluate integrals. This is valid for finite integral domains. Note this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussLobatto","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussLobatto","text":"GaussLobatto <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Lobatto quadrature to evaluate integrals. This is valid for finite integral domains. Note this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussJacobi","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussJacobi","text":"GaussJacobi <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Jacobi quadrature to evaluate integrals. It will take this form:\n\nint_-1^1 f(x) (1-x)^alpha (1+x)^beta dx approx sum_i=1^n alpha_i f(x_i)\n\nWhere, \n\n(1-x)^alpha (1+x)^beta \n\nis the weight function. This is valid for finite integral domains. This requires the user to input the alpha and beta shape parameters for their function. This will then generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters. If α or β is < -1, an error will be returned.  \n\nFields\n\nα::Float64: Shape parameter that must be > -1\nβ::Float64: Shape parameter that must be > -1\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.FEGaussLobatto","page":"Measures","title":"InfiniteOpt.MeasureToolbox.FEGaussLobatto","text":"FEGaussLobatto <: AbstractUnivariateMethod\n\nIntegral evaluation method that allows for the user to specify supports to be included in quadrature evaluation. The upper and lower bounds of the integral will automatically  be added as supports. This method uses Gauss Lobatto quadrature to decompose the overall Integral into smaller integrals that span the user defined supports as follows:\n\nint_x_1^x_3 f(x) dx = int_x_1^x_2 f(x) dx + int_x_2^x_3 f(x) dx\n\nwhere the integrals are evaluated using Gauss Lobatto quadrature:\n\nint f(x) dx approx sum_i=1^n alpha_i f(x_i)\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussChebyshev","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussChebyshev","text":"GaussChebyshev <: FiniteGaussQuad\n\nAn integral evaulation method that uses Gauss-Chebyshev quadrature to evaluate integrals. This is valid for finite integral domains. This requires the user to input the order of Guass-Chebyshev Quadrature they want to use.  If the order is not between 1 and 4 an error will be returned.  The integral evaluated is as follows:\n\nint_-1^1 f(x) w(x) approx sum_i=1^n alpha_i f(x_i)\n\nThe weight functions are as follows: \n\n1st order: w(x)  =  frac1sqrt1-x^2\n2nd order: w(x) = sqrt1-x^2\n3rd order: w(x) = sqrt(1+x)(1-x)\n4th order: w(x) = sqrt(1-x)(1+x)\n\nThis will then generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters.\n\nFields\n\norder::Int: Specifies the order of Gauss-Chebyshev Quadrature. Must be between 1 and 4.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.GaussLaguerre","page":"Measures","title":"InfiniteOpt.MeasureToolbox.GaussLaguerre","text":"GaussLaguerre <: AbstractUnivariateMethod\n\nAn integral evaulation method that uses Gauss-Laguerre quadrature to evaluate integrals. This is valid for semi-infinite integral domains. \n\nThis method evaluates the following integral:\n\nint_0^+ f(x) e^-x approx sum_i=1^n alpha_i f(x_i)\n\nUsing the weight function:\n\nw(x) = e^-x\n\nNote this will generate its own set of supports and will ignore other parameter supports. This is not compatible with individual dependent parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.AbstractMultivariateMethod","page":"Measures","title":"InfiniteOpt.MeasureToolbox.AbstractMultivariateMethod","text":"AbstractMultivariateMethod <: AbstractIntegralMethod\n\nAn abstract type for integral evaluation methods for multi-dimensional integrals.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.MultiMCSampling","page":"Measures","title":"InfiniteOpt.MeasureToolbox.MultiMCSampling","text":"MultiMCSampling <: AbstractMultivariateMethod\n\nAn integral evaluation method that uses uniform Monte Carlo sampling to approximate the integral. This variant will add more supports to the model as needed to satisfy num_supports and it will include all supports with the MCSample label up till the integral is expanded and/or when the infinite model is optimized, whichever comes first. Note this is valid only for finite integral domains. If an array of independent infinite parameters is specified, they must use the same amount of supports. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.MultiIndepMCSampling","page":"Measures","title":"InfiniteOpt.MeasureToolbox.MultiIndepMCSampling","text":"MultiIndepMCSampling <: AbstractMultivariateMethod\n\nAn integral evaluation method that uses uniform Monte Carlo sampling to approximate the integral similar to MultiMCSampling. However, this variant will generate its own set of supports and ignore all other supports with the MCSample label. Note this is valid only for finite integral domains. Contains no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.generate_integral_data","page":"Measures","title":"InfiniteOpt.MeasureToolbox.generate_integral_data","text":"generate_integral_data(\n    prefs::Union{InfiniteOpt.GeneralVariableRef, Vector{InfiniteOpt.GeneralVariableRef}},\n    lower_bounds::Union{Real, Vector{<:Real}},\n    upper_bounds::Union{Real, Vector{<:Real}},\n    method::V; [num_supports::Int = InfiniteOpt.DefaultNumSupports,\n    weight_func::Function = InfiniteOpt.default_weight,\n    extra_kwargs...]\n    )::InfiniteOpt.AbstractMeasureData where {V <: AbstractIntegralMethod}\n\nGenerate the appropriate concrete realization of AbstractMeasureData using method. Here prefs, lower_bounds, and upper_bounds will always have a 1 to 1 correspondence when this is called from integral. Please refer to the method docstrings for an explanation of each one.\n\nUser-defined method extensions should first define a concrete method type inheriting from AbstractUnivariateMethod or AbstractMultivariateMethod as appropriate and then implement extend this method using that type for method.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#Expectations","page":"Measures","title":"Expectations","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"InfiniteOpt.MeasureToolbox.expect\nInfiniteOpt.MeasureToolbox.@expect\nInfiniteOpt.MeasureToolbox.𝔼\nInfiniteOpt.MeasureToolbox.@𝔼\nInfiniteOpt.MeasureToolbox.generate_expect_data","category":"page"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.expect","page":"Measures","title":"InfiniteOpt.MeasureToolbox.expect","text":"expect(expr::JuMP.AbstractJuMPScalar,\n       prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef};\n       [num_supports::Int = DefaultNumSupports])::GeneralVariableRef\n\nMakes a measure for expr based on its expectation with respect to prefs. For  prefs with distribution domains this is essentially equivalent to \n\n1/total_num_supports * support_sum(expr, prefs, label = WeightedSample)\n\nThus, for these domain types it only considers supports that are added to prefs  via generation on creation (i.e., specifying the num_supports keyword when  creating prefs). For incorporating other supports consider  calling integral and using the weight_func argument to specify the  probability density function.\n\nFor a single infinite parameter defined over a bounded interval domain the syntax  becomes:\n\n    expect(expr::JuMP.AbstractJuMPScalar,\n           prefs::GeneralVariableRef;\n           [num_supports::Int = DefaultNumSupports,\n           pdf::Function = (supp) -> 1 / (ub - lb)])::GeneralVariableRef\n\nThe behavior with the default pdf is equivalent to evaluating the mean value  theorem for integrals for expr with respect to pref using  UniTrapezoid. Other density functions can be given via pdf. Errors  if the interval domain is not bounded.\n\nNote that num_supports should be 0 if a single dependent parameter is given. Also, note that it is preferred to call @expect when expr is not just a single variable reference.\n\nExample\n\njulia> @infinite_parameter(model, x ~ Normal(), num_supports = 2)\nx\n\njulia> @variable(model, f, Infinite(x))\nf(x)\n\njulia> meas = expect(f, x)\n𝔼{x}[f(x)]\n\njulia> expand(meas)\n0.5 f(0.6791074260357777) + 0.5 f(0.8284134829000359)\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@expect","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@expect","text":"@expect(expr::JuMP.AbstractJuMPScalar,\n        prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef};\n        [num_supports::Int = DefaultNumSupports, \n        kwargs...]\n        )::GeneralVariableRef\n\nAn efficient wrapper for expect. Please see its doc string more information.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.𝔼","page":"Measures","title":"InfiniteOpt.MeasureToolbox.𝔼","text":"𝔼(expr::JuMP.AbstractJuMPScalar,\n  prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}};\n  [num_supports::Int = DefaultNumSupports, \n  kwargs...]\n  )::GeneralVariableRef)\n\nA convenient wrapper for expect. The unicode symbol 𝔼 is produced by  \\bbE.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@𝔼","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@𝔼","text":"@𝔼(expr::JuMP.AbstractJuMPScalar,\n   prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef};\n   [num_supports::Int = DefaultNumSupports],\n   kwargs...)::GeneralVariableRef\n\nA convenient wrapper for @expect. The unicode symbol 𝔼 is produced by  \\bbE.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.generate_expect_data","page":"Measures","title":"InfiniteOpt.MeasureToolbox.generate_expect_data","text":"generate_expect_data(domain::AbstractInfiniteDomain, \n                     prefs::Union{GeneralVariableRef, Vector{GeneralVariableRef}}, \n                     num_supports::Int; \n                     [kwargs...])::AbstractMeasureData\n\nGenerate a concrete instance of AbstractMeasureData in accordance with the  domain and infinite parameter(s) prefs given for computing the expectation.  This is intended as an internal method, but should be extended for user defined  infinite domain types.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#Support-Sum","page":"Measures","title":"Support Sum","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"InfiniteOpt.MeasureToolbox.@support_sum\nInfiniteOpt.MeasureToolbox.support_sum","category":"page"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.@support_sum","page":"Measures","title":"InfiniteOpt.MeasureToolbox.@support_sum","text":"@support_sum(expr::JuMP.AbstractJuMPScalar,\n             prefs::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}};\n             label = All\n             )::GeneralVariableRef\n\nAn efficient wrapper for support_sum please see its doc string for more information.\n\n\n\n\n\n","category":"macro"},{"location":"manual/measure/#InfiniteOpt.MeasureToolbox.support_sum","page":"Measures","title":"InfiniteOpt.MeasureToolbox.support_sum","text":"support_sum(expr::JuMP.AbstractJuMPScalar,\n            params::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}};\n            label = All\n            )::GeneralVariableRef\n\nCreates a measure that represents the sum of the expression over a parameter(s) using all of its supports corresponding to label. Also, note that it is  preferred to call @support_sum when expr is not just a  single variable reference.\n\nExample\n\njulia> @infinite_parameter(model, x in [0, 1], supports = [0.3, 0.7])\nx\n\njulia> @variable(model, f, Infinite(x))\nf(x)\n\njulia> meas = support_sum(f, x)\nsupport_sum{x}[f(x)]\n\njulia> expand(meas)\nf(0.3) + f(0.7)\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#Queries","page":"Measures","title":"Queries","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"JuMP.name(::MeasureRef)\nnum_measures\nall_measures\nmeasure_function\nmeasure_data\nis_analytic\nparameter_refs(::MeasureRef)\nis_used(::MeasureRef)\nused_by_constraint(::MeasureRef)\nused_by_measure(::MeasureRef)\nused_by_objective(::MeasureRef)","category":"page"},{"location":"manual/measure/#JuMP.name-Tuple{MeasureRef}","page":"Measures","title":"JuMP.name","text":"JuMP.name(mref::MeasureRef)::String\n\nExtend JuMP.name to return the name associated with a measure reference.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.num_measures","page":"Measures","title":"InfiniteOpt.num_measures","text":"num_measures(model::InfiniteModel)::Int\n\nReturn the number of measures defined in model.\n\nExample\n\njulia> num_measures(model)\n2\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.all_measures","page":"Measures","title":"InfiniteOpt.all_measures","text":"all_measures(model::InfiniteModel)::Vector{GeneralVariableRef}\n\nReturn the list of all measures added to model.\n\nExamples\n\njulia> all_measures(model)\n2-element Array{GeneralVariableRef,1}:\n ∫{t ∈ [0, 6]}[w(t, x)]\n 𝔼{x}[w(t, x)]\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.measure_function","page":"Measures","title":"InfiniteOpt.measure_function","text":"measure_function(mref::MeasureRef)::JuMP.AbstractJuMPScalar\n\nReturn the function associated with mref.\n\nExample\n\njulia> measure_function(meas)\ny(x, t) + 2\n\n\n\n\n\nmeasure_function(mref::GeneralVariableRef)\n\nDefine measure_function for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.measure_data","page":"Measures","title":"InfiniteOpt.measure_data","text":"measure_data(mref::MeasureRef)::AbstractMeasureData\n\nReturn the measure data associated with mref.\n\nExample\n\njulia> data = measure_data(meas);\n\njulia> typeof(data)\nFunctionalDiscreteMeasureData{Vector{GeneralVariableRef},Vector{Float64}}\n\n\n\n\n\nmeasure_data(mref::GeneralVariableRef)\n\nDefine measure_data for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.is_analytic","page":"Measures","title":"InfiniteOpt.is_analytic","text":"is_analytic(mref::MeasureRef)::Bool\n\nReturn if mref is evaluated analytically.\n\nExample\n\njulia> is_analytic(meas)\nfalse\n\n\n\n\n\nis_analytic(mref::GeneralVariableRef)\n\nDefine is_analytic for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.parameter_refs-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(mref::MeasureRef)::Tuple\n\nReturn the tuple of infinite parameters that the measured expression associated mref depends on once the measure has been evaluated. Note that this will correspond to the parameter dependencies of the measure function excluding those included in the measure data.\n\nExample\n\njulia> parameter_refs(meas)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.is_used-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.is_used","text":"is_used(mref::MeasureRef)::Bool\n\nReturn a Bool indicating if mref is used in the model.\n\nExample\n\njulia> is_used(mref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.used_by_constraint-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(mref::MeasureRef)::Bool\n\nReturn a Bool indicating if mref is used by a constraint.\n\nExample\n\njulia> used_by_constraint(mref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.used_by_measure-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(mref::MeasureRef)::Bool\n\nReturn a Bool indicating if mref is used by a measure.\n\nExample\n\njulia> used_by_measure(mref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.used_by_objective-Tuple{MeasureRef}","page":"Measures","title":"InfiniteOpt.used_by_objective","text":"used_by_objective(mref::MeasureRef)::Bool\n\nReturn a Bool indicating if mref is used by the objective.\n\nExample\n\njulia> used_by_objective(mref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#Modification","page":"Measures","title":"Modification","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"JuMP.set_name(::MeasureRef, ::String)\nJuMP.delete(::InfiniteModel, ::MeasureRef)","category":"page"},{"location":"manual/measure/#JuMP.set_name-Tuple{MeasureRef, String}","page":"Measures","title":"JuMP.set_name","text":"JuMP.set_name(mref::MeasureRef, name::String)::Nothing\n\nExtend JuMP.set_name to specify the name of a measure reference.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#JuMP.delete-Tuple{InfiniteModel, MeasureRef}","page":"Measures","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, mref::MeasureRef)::Nothing\n\nExtend JuMP.delete to delete measures. Errors if measure is invalid, meaning it does not belong to the model or it has already been deleted.\n\nExample\n\njulia> print(model)\nMin ∫{t ∈ [0, 6]}[g(t)] + z\nSubject to\n z ≥ 0.0\n ∫{t ∈ [0, 6]}[g(t)] = 0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n g(0.5) = 0\n\njulia> delete(model, meas)\n\njulia> print(model)\nMin z\nSubject to\n z ≥ 0.0\n 0 = 0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n g(0.5) = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#Expansion","page":"Measures","title":"Expansion","text":"","category":"section"},{"location":"manual/measure/","page":"Measures","title":"Measures","text":"expand\nexpand_all_measures!\nInfiniteOpt.expand_measure\nInfiniteOpt.analytic_expansion\nInfiniteOpt.expand_measures\nmake_point_variable_ref\nmake_semi_infinite_variable_ref\nadd_point_variable(::JuMP.Model, ::Any, ::Any, ::Any)\nadd_semi_infinite_variable(::JuMP.Model, ::Any, ::Any)\ninternal_semi_infinite_variable","category":"page"},{"location":"manual/measure/#InfiniteOpt.expand","page":"Measures","title":"InfiniteOpt.expand","text":"expand(mref::MeasureRef)::JuMP.AbstractJuMPScalar\n\nReturn a JuMP scalar function containing the explicit expansion of the measure mref. This expansion is done according to the measure data. Note that variables are added to the model as necessary to accomodate the expansion (i.e., point variables and semi-infinite variables are made as needed). Errors if expansion is undefined for the measure data and/or the measure expression. If desired this can be used in combination with measure to expand measures on the fly.\n\nThis is useful for extensions that employ a custom optimizer model since it can be used evaluate measures before expressions are translated to the new model. This method can also be extended to handle custom measure data types by extending expand_measure. Optionally, analytic_expansion can also be extended which is triggered by is_analytic for such types if analytic expansion is possible in certain cases.\n\nExample\n\njulia> tdata = DiscreteMeasureData(t, [0.5, 0.5], [0, 1])\n\njulia> expr = expand(measure(g + z + T - h - 2, tdata))\n0.5 g(0) + 0.5 g(1) + z + 0.5 T(0, x) + 0.5 T(1, x) - h(x) - 2\n\n\n\n\n\nexpand(mref::GeneralVariableRef)\n\nDefine expand for general variable references. Errors if mref does not correspond to a MeasureRef. See the underlying docstrings for more information.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.expand_all_measures!","page":"Measures","title":"InfiniteOpt.expand_all_measures!","text":"expand_all_measures!(model::InfiniteModel)::Nothing\n\nExpand all of the measures used in the objective and/or constraints of model. The objective and constraints are updated accordingly. Note that variables are added to the model as necessary to accomodate the expansion (i.e., point variables and semi-infinite variables are made as needed). Errors if expansion is undefined for the measure data and/or the measure expression.\n\nThis is useful for extensions that employ a custom optimizer model since it can be used evaluate measures before model is translated into the new model. This method can also be extended to handle custom measure data types by extending expand_measure. Note that this method leverages expand_measure via expand_measures. Optionally, analytic_expansion can also be extended which is triggered by is_analytic for such types if analytic expansion is possible in certain cases.\n\nExample\n\njulia> print(model)\nMin integral{t ∈ [0, 6]}[g(t)*t] + z\nSubject to\n T(t, x) ≥ 0.0, ∀ t ∈ [0, 6], xi ∈ [-1, 1]\n z ≥ 0.0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n integral{t ∈ [0, 6]}[T(t, x)] ≥ 0.0, ∀ x ∈ [-1, 1]\n\njulia> expand_all_measures!(model)\n\njulia> print(model)\nMin 3 g(6) + z\nSubject to\n T(t, x) ≥ 0.0, ∀ t ∈ [0, 6], xi ∈ [-1, 1]\n z ≥ 0.0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n 0.5 T(0, x) + 0.5 T(6, xi) ≥ 0.0, ∀ x ∈ [-1, 1]\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.expand_measure","page":"Measures","title":"InfiniteOpt.expand_measure","text":"expand_measure(expr, data::AbstractMeasureData,\n               write_model::JuMP.AbstractModel)::JuMP.AbstractJuMPScalar\n\nReturn the finite reformulation of a measure containing a variable/parameter expression expr with measure data data. Here write_model is the target model where this expanded expression will be used. Thus, any variables that need to be created will be added to write_model. The methods make_point_variable_ref and make_semi_infinite_variable_ref should be used as appropriate to create these variables. Note this is intended as an internal function, but will need to be extended for unsupported expr types and for user-defined measure data types. Principally, this is leveraged to enable the user methods expand and expand_all_measures!.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.analytic_expansion","page":"Measures","title":"InfiniteOpt.analytic_expansion","text":"analytic_expansion(expr, data::AbstractMeasureData,\n                   write_model::JuMP.AbstractModel)::JuMP.AbstractJuMPScalar\n\nAnalytically, evaluate measure in the simple case where the measure expression expr doesn't depend on data and thus expr can be treated as a constant in conjunction with an analytic result of the data. This is intended as an internal method that is used by expand and expand_measures. For unrecognized data types, expand_measure is called instead. User defined measure data type may choose to extend this method if desired. This is triggered when is_analytic(mref) = true.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.expand_measures","page":"Measures","title":"InfiniteOpt.expand_measures","text":"expand_measures(expr, write_model::JuMP.AbstractModel)::JuMP.AbstractJuMPScalar\n\nExpand all MeasureRefs in expr in-place via expand_measure and return the expanded expression. This is an internal method used by expand_all_measures! and TranscriptionOpt but can be useful for user-defined optimizer model extensions that add implement add_point_variable/add_semi_infinite_variable in combination  with expand_measure. write_model is the model that the measure variables are  added to as described in expand_measure.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.make_point_variable_ref","page":"Measures","title":"InfiniteOpt.make_point_variable_ref","text":"make_point_variable_ref(write_model::Union{InfiniteModel, JuMP.Model},\n                        ivref::GeneralVariableRef,\n                        support::Vector{Float64}\n                        )::GeneralVariableRef\n\nMake a point variable for infinite variable/derivative ivref at support, add it to the write_model, and return the GeneralVariableRef. This is an internal method for point variables produced by expanding measures via expand_measure. This is also useful for those writing extension optimizer models and wish to expand measures without modifiying the InfiniteModel. In such cases, write_model should be the optimizer model and  add_point_variable  should be extended appropriately for point variables. Errors if write_model is an optimizer model and add_point_variable is not properly extended. \n\nNote this is also accomodates infinite parameter functions, in which case the  infinite parameter function is called with the support as input. \n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.make_semi_infinite_variable_ref","page":"Measures","title":"InfiniteOpt.make_semi_infinite_variable_ref","text":"make_semi_infinite_variable_ref(write_model::Union{InfiniteModel, JuMP.Model},\n                                ivref::GeneralVariableRef,\n                                indices::Vector{Int},\n                                values::Vector{Float64}\n                                )::GeneralVariableRef\n\nMake a semi-infinite variable for infinite variable/derivative/parameter  function ivref at support, add it to the write_model, and return the  GeneralVariableRef. This is an internal method for semi-infinite variables  produced by expanding measures via expand_measure. This is also useful  for those writing extension optimizer models and wish to expand measures without  modifiying the InfiniteModel. In such cases, write_model should be the  optimizer model and  add_semi_infinite_variable  should be extended appropriately for semi-infinite variables. Errors if  write_model is an optimizer model and add_semi_infinite_variable is not  properly extended. Note this is only intended for optimizer models that are  currently stored in InfiniteModel.optimizer_model.\n\n\n\n\n\n","category":"function"},{"location":"manual/measure/#InfiniteOpt.add_point_variable-Tuple{Model, Any, Any, Any}","page":"Measures","title":"InfiniteOpt.add_point_variable","text":"add_point_variable(model::JuMP.Model, ivref::GeneralVariableRef, \n                   support::Vector{Float64}, key::Val{:ext_key_name}\n                   )::GeneralVariableRef\n\nAdd a point variable (defined by restricting ivref to support) to the  optimizer model model (with key) and return the correct InfiniteOpt  variable reference. This is an internal method used by  make_point_variable_ref to make point variables when the write_model  is an optimizer model. This is useful for extensions that wish to expand  measures, but without changing the original InfiniteModel. An error is thrown  for unextended optimizer model types.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.add_semi_infinite_variable-Tuple{Model, Any, Any}","page":"Measures","title":"InfiniteOpt.add_semi_infinite_variable","text":"add_semi_infinite_variable(model::JuMP.Model, var::SemiInfiniteVariable, \n                           key::Val{:ext_key_name})::GeneralVariableRef\n\nAdd a semi-infinite variable var to the optimizer model model (with key)  and return the correct InfiniteOpt variable reference. This is an internal  method used by make_semi_infinite_variable_ref to make semi-infinite  variables when the write_model is an optimizer model. This is useful for  extensions that wish to expand measures, but without changing the original  InfiniteModel. An error is thrown for optimizer model types. Note if this is  extended, than internal_semi_infinite_variable should also be extended  in order to direct semi-infinite variables references to the underlying  SemiInfiniteVariable.\n\n\n\n\n\n","category":"method"},{"location":"manual/measure/#InfiniteOpt.internal_semi_infinite_variable","page":"Measures","title":"InfiniteOpt.internal_semi_infinite_variable","text":"internal_semi_infinite_variable(vref::SemiInfiniteVariableRef,\n                                key::Val{:my_ext_key})::SemiInfiniteVariable\n\nReturn the semi-infinite variable object of vref assuming it is an internal variable made during measure expansion within an optimizer model. This will apply to optimizer model extensions that utilize add_measure_variable in combination with expand_measure.\n\n\n\n\n\n","category":"function"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Optimal Control/hovercraft.jl\"","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Hovercraft-Path-Planning","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"In this case study, we seek to determine an optimal control policy for the trajectory of a hovercraft that travels to a set of dynamic waypoints while trying to minimize the thrust input.","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Formulation","page":"Hovercraft Path Planning","title":"Formulation","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"The corresponding dynamic optimization problem is expressed:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"beginaligned\n\tundersetx(t) v(t) u(t)textmin  int_t in T u(t)_2^2 dt  \n\ttextst  v(0) = v0\n\t fracdxdt = v(t)  t in T\n     fracdvdt = u(t)  t in T\n     x(t_i) = xw_i  i in I\nendaligned","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"where x(t) is the Cartesian position, v(t) is the velocity, u(t) is the thrust input, xw_i  i in I are the waypoints, and T is the time horizon.","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Model-Definition","page":"Hovercraft Path Planning","title":"Model Definition","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Let's implement this in InfiniteOpt and first import the packages we need:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"using InfiniteOpt, Ipopt","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Next we'll specify our waypoint data:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"xw = [1 4 6 1; 1 3 0 1] # positions\ntw = [0, 25, 50, 60];    # times\n","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"We initialize the infinite model and opt to use the Ipopt solver:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"m = InfiniteModel(optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0));\n","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Let's specify our infinite parameter which is time t in 0 60:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@infinite_parameter(m, t in [0, 60], num_supports = 61)","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"t","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Now let's specify the decision variables:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@variables(m, begin\n    # state variables\n    x[1:2], Infinite(t)\n    v[1:2], Infinite(t)\n    # control variables\n    u[1:2], Infinite(t), (start = 0)\nend)","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Specify the objective:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@objective(m, Min, ∫(u[1]^2 + u[2]^2, t))","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"∫{t ∈ [0, 60]}[u[1](t)² + u[2](t)²]","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Set the initial conditions with respect to the velocity:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@constraint(m, [i = 1:2], v[i](0) == 0)","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"2-element Vector{InfOptConstraintRef}:\n v[1](0) = 0.0\n v[2](0) = 0.0","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Define the point physics ODEs which serve as our system model:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@constraint(m, [i = 1:2], ∂(x[i], t) == v[i])\n@constraint(m, [i = 1:2], ∂(v[i], t) == u[i])","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"2-element Vector{InfOptConstraintRef}:\n ∂/∂t[v[1](t)] - u[1](t) = 0.0, ∀ t ∈ [0, 60]\n ∂/∂t[v[2](t)] - u[2](t) = 0.0, ∀ t ∈ [0, 60]","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Ensure we hit all the waypoints:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"@constraint(m, [i = 1:2, j = eachindex(tw)], x[i](tw[j]) == xw[i, j])","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"2×4 Matrix{InfOptConstraintRef}:\n x[1](0) = 1.0  x[1](25) = 4.0  x[1](50) = 6.0  x[1](60) = 1.0\n x[2](0) = 1.0  x[2](25) = 3.0  x[2](50) = 0.0  x[2](60) = 1.0","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Problem-Solution","page":"Hovercraft Path Planning","title":"Problem Solution","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Optimize the model:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"optimize!(m)","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Extract the results:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"x_opt = value.(x);\n","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Plot the results:","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"using Plots\nscatter(xw[1,:], xw[2,:], label = \"Waypoints\", background_color = :transparent)\nplot!(x_opt[1], x_opt[2], label = \"Trajectory\")\nxlabel!(\"x_1\")\nylabel!(\"x_2\")","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip480\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip480)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<defs>\n  <clipPath id=\"clip481\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip480)\" d=\"\nM174.149 1423.18 L2352.76 1423.18 L2352.76 47.2441 L174.149 47.2441  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<defs>\n  <clipPath id=\"clip482\">\n    <rect x=\"174\" y=\"47\" width=\"2180\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  235.808,1423.18 235.808,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  571.956,1423.18 571.956,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  908.105,1423.18 908.105,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1244.25,1423.18 1244.25,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1580.4,1423.18 1580.4,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1916.55,1423.18 1916.55,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2252.7,1423.18 2252.7,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,1423.18 2352.76,1423.18 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  235.808,1423.18 235.808,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  571.956,1423.18 571.956,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  908.105,1423.18 908.105,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1244.25,1423.18 1244.25,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1580.4,1423.18 1580.4,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1916.55,1423.18 1916.55,1404.28 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2252.7,1423.18 2252.7,1404.28 \n  \"/>\n<path clip-path=\"url(#clip480)\" d=\"M226.19 1481.64 L233.828 1481.64 L233.828 1455.28 L225.518 1456.95 L225.518 1452.69 L233.782 1451.02 L238.458 1451.02 L238.458 1481.64 L246.097 1481.64 L246.097 1485.58 L226.19 1485.58 L226.19 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M566.609 1481.64 L582.928 1481.64 L582.928 1485.58 L560.984 1485.58 L560.984 1481.64 Q563.646 1478.89 568.229 1474.26 Q572.836 1469.61 574.016 1468.27 Q576.262 1465.74 577.141 1464.01 Q578.044 1462.25 578.044 1460.56 Q578.044 1457.8 576.1 1456.07 Q574.178 1454.33 571.076 1454.33 Q568.877 1454.33 566.424 1455.09 Q563.993 1455.86 561.215 1457.41 L561.215 1452.69 Q564.039 1451.55 566.493 1450.97 Q568.947 1450.39 570.984 1450.39 Q576.354 1450.39 579.549 1453.08 Q582.743 1455.77 582.743 1460.26 Q582.743 1462.39 581.933 1464.31 Q581.146 1466.2 579.039 1468.8 Q578.461 1469.47 575.359 1472.69 Q572.257 1475.88 566.609 1481.64 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M912.352 1466.95 Q915.709 1467.66 917.584 1469.93 Q919.482 1472.2 919.482 1475.53 Q919.482 1480.65 915.963 1483.45 Q912.445 1486.25 905.963 1486.25 Q903.787 1486.25 901.473 1485.81 Q899.181 1485.39 896.727 1484.54 L896.727 1480.02 Q898.672 1481.16 900.987 1481.74 Q903.301 1482.32 905.824 1482.32 Q910.223 1482.32 912.514 1480.58 Q914.829 1478.84 914.829 1475.53 Q914.829 1472.48 912.676 1470.77 Q910.547 1469.03 906.727 1469.03 L902.699 1469.03 L902.699 1465.19 L906.912 1465.19 Q910.361 1465.19 912.19 1463.82 Q914.019 1462.43 914.019 1459.84 Q914.019 1457.18 912.121 1455.77 Q910.246 1454.33 906.727 1454.33 Q904.806 1454.33 902.607 1454.75 Q900.408 1455.16 897.769 1456.04 L897.769 1451.88 Q900.431 1451.14 902.746 1450.77 Q905.084 1450.39 907.144 1450.39 Q912.468 1450.39 915.57 1452.83 Q918.672 1455.23 918.672 1459.35 Q918.672 1462.22 917.028 1464.21 Q915.385 1466.18 912.352 1466.95 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1247.26 1455.09 L1235.46 1473.54 L1247.26 1473.54 L1247.26 1455.09 M1246.04 1451.02 L1251.92 1451.02 L1251.92 1473.54 L1256.85 1473.54 L1256.85 1477.43 L1251.92 1477.43 L1251.92 1485.58 L1247.26 1485.58 L1247.26 1477.43 L1231.66 1477.43 L1231.66 1472.92 L1246.04 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1570.68 1451.02 L1589.04 1451.02 L1589.04 1454.96 L1574.96 1454.96 L1574.96 1463.43 Q1575.98 1463.08 1577 1462.92 Q1578.02 1462.73 1579.04 1462.73 Q1584.82 1462.73 1588.2 1465.9 Q1591.58 1469.08 1591.58 1474.49 Q1591.58 1480.07 1588.11 1483.17 Q1584.64 1486.25 1578.32 1486.25 Q1576.14 1486.25 1573.87 1485.88 Q1571.63 1485.51 1569.22 1484.77 L1569.22 1480.07 Q1571.3 1481.2 1573.53 1481.76 Q1575.75 1482.32 1578.23 1482.32 Q1582.23 1482.32 1584.57 1480.21 Q1586.91 1478.1 1586.91 1474.49 Q1586.91 1470.88 1584.57 1468.77 Q1582.23 1466.67 1578.23 1466.67 Q1576.35 1466.67 1574.48 1467.08 Q1572.62 1467.5 1570.68 1468.38 L1570.68 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1916.96 1466.44 Q1913.81 1466.44 1911.96 1468.59 Q1910.13 1470.74 1910.13 1474.49 Q1910.13 1478.22 1911.96 1480.39 Q1913.81 1482.55 1916.96 1482.55 Q1920.1 1482.55 1921.93 1480.39 Q1923.78 1478.22 1923.78 1474.49 Q1923.78 1470.74 1921.93 1468.59 Q1920.1 1466.44 1916.96 1466.44 M1926.24 1451.78 L1926.24 1456.04 Q1924.48 1455.21 1922.67 1454.77 Q1920.89 1454.33 1919.13 1454.33 Q1914.5 1454.33 1912.05 1457.45 Q1909.62 1460.58 1909.27 1466.9 Q1910.64 1464.89 1912.7 1463.82 Q1914.76 1462.73 1917.23 1462.73 Q1922.44 1462.73 1925.45 1465.9 Q1928.48 1469.05 1928.48 1474.49 Q1928.48 1479.82 1925.33 1483.03 Q1922.19 1486.25 1916.96 1486.25 Q1910.96 1486.25 1907.79 1481.67 Q1904.62 1477.06 1904.62 1468.33 Q1904.62 1460.14 1908.51 1455.28 Q1912.39 1450.39 1918.95 1450.39 Q1920.71 1450.39 1922.49 1450.74 Q1924.29 1451.09 1926.24 1451.78 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2241.59 1451.02 L2263.81 1451.02 L2263.81 1453.01 L2251.26 1485.58 L2246.38 1485.58 L2258.18 1454.96 L2241.59 1454.96 L2241.59 1451.02 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1244.98 1532.4 L1232.09 1549.74 L1245.64 1568.04 L1238.74 1568.04 L1228.36 1554.04 L1217.99 1568.04 L1211.08 1568.04 L1224.92 1549.39 L1212.26 1532.4 L1219.16 1532.4 L1228.62 1545.1 L1238.07 1532.4 L1244.98 1532.4 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1281.01 1578.87 L1281.01 1583.42 L1247.14 1583.42 L1247.14 1578.87 L1281.01 1578.87 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1288.45 1562.63 L1298.96 1562.63 L1298.96 1526.38 L1287.53 1528.67 L1287.53 1522.82 L1298.89 1520.52 L1305.32 1520.52 L1305.32 1562.63 L1315.83 1562.63 L1315.83 1568.04 L1288.45 1568.04 L1288.45 1562.63 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  174.149,1384.24 2352.76,1384.24 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  174.149,954.878 2352.76,954.878 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  174.149,525.517 2352.76,525.517 \n  \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  174.149,96.157 2352.76,96.157 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,1423.18 174.149,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,1384.24 193.047,1384.24 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,954.878 193.047,954.878 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,525.517 193.047,525.517 \n  \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  174.149,96.157 193.047,96.157 \n  \"/>\n<path clip-path=\"url(#clip480)\" d=\"M126.205 1370.04 Q122.593 1370.04 120.765 1373.6 Q118.959 1377.14 118.959 1384.27 Q118.959 1391.38 120.765 1394.94 Q122.593 1398.49 126.205 1398.49 Q129.839 1398.49 131.644 1394.94 Q133.473 1391.38 133.473 1384.27 Q133.473 1377.14 131.644 1373.6 Q129.839 1370.04 126.205 1370.04 M126.205 1366.33 Q132.015 1366.33 135.07 1370.94 Q138.149 1375.52 138.149 1384.27 Q138.149 1393 135.07 1397.61 Q132.015 1402.19 126.205 1402.19 Q120.394 1402.19 117.316 1397.61 Q114.26 1393 114.26 1384.27 Q114.26 1375.52 117.316 1370.94 Q120.394 1366.33 126.205 1366.33 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M118.242 968.223 L125.88 968.223 L125.88 941.857 L117.57 943.524 L117.57 939.265 L125.834 937.598 L130.51 937.598 L130.51 968.223 L138.149 968.223 L138.149 972.158 L118.242 972.158 L118.242 968.223 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M121.83 538.862 L138.149 538.862 L138.149 542.797 L116.205 542.797 L116.205 538.862 Q118.867 536.108 123.45 531.478 Q128.056 526.825 129.237 525.483 Q131.482 522.96 132.362 521.223 Q133.265 519.464 133.265 517.774 Q133.265 515.02 131.32 513.284 Q129.399 511.548 126.297 511.548 Q124.098 511.548 121.644 512.311 Q119.214 513.075 116.436 514.626 L116.436 509.904 Q119.26 508.77 121.714 508.191 Q124.168 507.612 126.205 507.612 Q131.575 507.612 134.769 510.298 Q137.964 512.983 137.964 517.473 Q137.964 519.603 137.154 521.524 Q136.367 523.423 134.26 526.015 Q133.681 526.686 130.58 529.904 Q127.478 533.098 121.83 538.862 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M131.019 94.8029 Q134.376 95.5205 136.251 97.789 Q138.149 100.057 138.149 103.391 Q138.149 108.506 134.63 111.307 Q131.112 114.108 124.63 114.108 Q122.455 114.108 120.14 113.669 Q117.848 113.252 115.394 112.395 L115.394 107.881 Q117.339 109.016 119.654 109.594 Q121.968 110.173 124.492 110.173 Q128.89 110.173 131.181 108.437 Q133.496 106.701 133.496 103.391 Q133.496 100.335 131.343 98.6223 Q129.214 96.8862 125.394 96.8862 L121.367 96.8862 L121.367 93.0436 L125.58 93.0436 Q129.029 93.0436 130.857 91.6779 Q132.686 90.289 132.686 87.6964 Q132.686 85.0344 130.788 83.6224 Q128.913 82.1872 125.394 82.1872 Q123.473 82.1872 121.274 82.6039 Q119.075 83.0205 116.436 83.9001 L116.436 79.7335 Q119.098 78.9928 121.413 78.6224 Q123.751 78.252 125.811 78.252 Q131.135 78.252 134.237 80.6826 Q137.339 83.09 137.339 87.2103 Q137.339 90.0807 135.695 92.0714 Q134.052 94.039 131.019 94.8029 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M28.3562 753.434 L45.7028 766.324 L64.0042 752.765 L64.0042 759.672 L49.9996 770.048 L64.0042 780.424 L64.0042 787.331 L45.3526 773.486 L28.3562 786.154 L28.3562 779.247 L41.0558 769.794 L28.3562 760.341 L28.3562 753.434 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M74.8259 717.404 L79.3773 717.404 L79.3773 751.269 L74.8259 751.269 L74.8259 717.404 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M58.5933 705.532 L58.5933 683.093 L64.0042 683.093 L64.0042 713.266 L58.5933 713.266 Q54.8057 709.606 48.44 703.304 Q42.0425 696.97 40.1964 695.347 Q36.7271 692.259 34.34 691.05 Q31.921 689.809 29.5975 689.809 Q25.8099 689.809 23.4228 692.482 Q21.0356 695.124 21.0356 699.389 Q21.0356 702.413 22.086 705.786 Q23.1363 709.128 25.2688 712.948 L18.7758 712.948 Q17.2162 709.065 16.4205 705.691 Q15.6248 702.317 15.6248 699.516 Q15.6248 692.132 19.3169 687.74 Q23.009 683.347 29.1837 683.347 Q32.112 683.347 34.7537 684.461 Q37.3637 685.544 40.9285 688.44 Q41.8515 689.236 46.2757 693.501 Q50.668 697.766 58.5933 705.532 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip482)\" cx=\"235.808\" cy=\"954.878\" r=\"14\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#ffffff\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip482)\" cx=\"1244.25\" cy=\"96.157\" r=\"14\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#ffffff\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip482)\" cx=\"1916.55\" cy=\"1384.24\" r=\"14\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#ffffff\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip482)\" cx=\"235.808\" cy=\"954.878\" r=\"14\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#ffffff\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#e26f46; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  235.808,954.878 239.06,946.173 245.545,929.521 255.246,905.68 268.142,875.408 284.217,839.462 303.45,798.6 325.823,753.581 351.318,705.161 379.916,654.1 \n  411.598,601.154 446.345,547.081 484.14,492.64 524.962,438.587 568.795,385.682 615.618,334.681 665.414,286.343 718.164,241.425 773.848,200.686 832.449,164.882 \n  893.947,134.773 958.325,111.115 1025.56,94.6667 1095.64,86.1857 1168.55,86.4298 1244.25,96.157 1322.75,116.125 1403.21,145.456 1484.82,183.271 1566.76,228.692 \n  1648.22,280.841 1728.38,338.84 1806.42,401.81 1881.52,468.874 1952.87,539.153 2019.64,611.768 2081.02,685.843 2136.2,760.497 2184.35,834.854 2224.65,908.035 \n  2256.3,979.162 2278.47,1047.36 2290.34,1111.74 2291.1,1171.43 2279.92,1225.56 2256,1273.24 2218.52,1313.6 2166.64,1345.76 2099.57,1368.84 2016.48,1381.96 \n  1916.55,1384.24 1798.97,1374.81 1665.5,1354.83 1517.9,1325.48 1357.95,1287.94 1187.4,1243.36 1008.03,1192.93 821.593,1137.81 629.862,1079.17 434.6,1018.2 \n  235.808,954.878 \n  \"/>\n<path clip-path=\"url(#clip480)\" d=\"\nM1795.41 248.629 L2280.14 248.629 L2280.14 93.1086 L1795.41 93.1086  Z\n  \" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"0\"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#ffffff; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1795.41,248.629 2280.14,248.629 2280.14,93.1086 1795.41,93.1086 1795.41,248.629 \n  \"/>\n<circle clip-path=\"url(#clip480)\" cx=\"1892.23\" cy=\"144.949\" r=\"23\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#ffffff\" stroke-opacity=\"1\" stroke-width=\"5.12\"/>\n<path clip-path=\"url(#clip480)\" d=\"M1989.06 127.669 L1993.78 127.669 L2001.05 156.881 L2008.3 127.669 L2013.55 127.669 L2020.82 156.881 L2028.07 127.669 L2032.81 127.669 L2024.13 162.229 L2018.25 162.229 L2010.96 132.229 L2003.6 162.229 L1997.72 162.229 L1989.06 127.669 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2047.58 149.196 Q2042.42 149.196 2040.43 150.377 Q2038.44 151.557 2038.44 154.405 Q2038.44 156.673 2039.92 158.016 Q2041.42 159.335 2043.99 159.335 Q2047.53 159.335 2049.66 156.835 Q2051.82 154.312 2051.82 150.145 L2051.82 149.196 L2047.58 149.196 M2056.07 147.437 L2056.07 162.229 L2051.82 162.229 L2051.82 158.293 Q2050.36 160.655 2048.18 161.789 Q2046.01 162.9 2042.86 162.9 Q2038.88 162.9 2036.51 160.678 Q2034.18 158.432 2034.18 154.682 Q2034.18 150.307 2037.09 148.085 Q2040.03 145.863 2045.84 145.863 L2051.82 145.863 L2051.82 145.446 Q2051.82 142.507 2049.87 140.909 Q2047.95 139.289 2044.45 139.289 Q2042.23 139.289 2040.13 139.821 Q2038.02 140.354 2036.08 141.419 L2036.08 137.483 Q2038.41 136.581 2040.61 136.141 Q2042.81 135.678 2044.89 135.678 Q2050.52 135.678 2053.3 138.594 Q2056.07 141.511 2056.07 147.437 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2075.64 164.636 Q2073.83 169.266 2072.12 170.678 Q2070.4 172.09 2067.53 172.09 L2064.13 172.09 L2064.13 168.525 L2066.63 168.525 Q2068.39 168.525 2069.36 167.692 Q2070.33 166.858 2071.51 163.756 L2072.28 161.812 L2061.79 136.303 L2066.31 136.303 L2074.41 156.581 L2082.51 136.303 L2087.02 136.303 L2075.64 164.636 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2097.02 158.34 L2097.02 172.09 L2092.74 172.09 L2092.74 136.303 L2097.02 136.303 L2097.02 140.238 Q2098.37 137.923 2100.4 136.812 Q2102.46 135.678 2105.31 135.678 Q2110.03 135.678 2112.97 139.428 Q2115.94 143.178 2115.94 149.289 Q2115.94 155.4 2112.97 159.15 Q2110.03 162.9 2105.31 162.9 Q2102.46 162.9 2100.4 161.789 Q2098.37 160.655 2097.02 158.34 M2111.51 149.289 Q2111.51 144.59 2109.57 141.928 Q2107.65 139.243 2104.27 139.243 Q2100.89 139.243 2098.95 141.928 Q2097.02 144.59 2097.02 149.289 Q2097.02 153.988 2098.95 156.673 Q2100.89 159.335 2104.27 159.335 Q2107.65 159.335 2109.57 156.673 Q2111.51 153.988 2111.51 149.289 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2133.04 139.289 Q2129.62 139.289 2127.63 141.974 Q2125.63 144.636 2125.63 149.289 Q2125.63 153.942 2127.6 156.627 Q2129.59 159.289 2133.04 159.289 Q2136.44 159.289 2138.44 156.604 Q2140.43 153.918 2140.43 149.289 Q2140.43 144.682 2138.44 141.997 Q2136.44 139.289 2133.04 139.289 M2133.04 135.678 Q2138.6 135.678 2141.77 139.289 Q2144.94 142.9 2144.94 149.289 Q2144.94 155.655 2141.77 159.289 Q2138.6 162.9 2133.04 162.9 Q2127.46 162.9 2124.29 159.289 Q2121.14 155.655 2121.14 149.289 Q2121.14 142.9 2124.29 139.289 Q2127.46 135.678 2133.04 135.678 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2152 136.303 L2156.26 136.303 L2156.26 162.229 L2152 162.229 L2152 136.303 M2152 126.21 L2156.26 126.21 L2156.26 131.604 L2152 131.604 L2152 126.21 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2186.72 146.581 L2186.72 162.229 L2182.46 162.229 L2182.46 146.719 Q2182.46 143.039 2181.03 141.21 Q2179.59 139.382 2176.72 139.382 Q2173.27 139.382 2171.28 141.581 Q2169.29 143.78 2169.29 147.576 L2169.29 162.229 L2165.01 162.229 L2165.01 136.303 L2169.29 136.303 L2169.29 140.331 Q2170.82 137.993 2172.88 136.835 Q2174.96 135.678 2177.67 135.678 Q2182.14 135.678 2184.43 138.456 Q2186.72 141.21 2186.72 146.581 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2199.43 128.942 L2199.43 136.303 L2208.2 136.303 L2208.2 139.613 L2199.43 139.613 L2199.43 153.687 Q2199.43 156.858 2200.29 157.761 Q2201.17 158.664 2203.83 158.664 L2208.2 158.664 L2208.2 162.229 L2203.83 162.229 Q2198.9 162.229 2197.02 160.4 Q2195.15 158.548 2195.15 153.687 L2195.15 139.613 L2192.02 139.613 L2192.02 136.303 L2195.15 136.303 L2195.15 128.942 L2199.43 128.942 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2230.33 137.067 L2230.33 141.094 Q2228.53 140.169 2226.58 139.706 Q2224.64 139.243 2222.56 139.243 Q2219.38 139.243 2217.79 140.215 Q2216.21 141.187 2216.21 143.131 Q2216.21 144.613 2217.35 145.469 Q2218.48 146.303 2221.91 147.067 L2223.37 147.391 Q2227.9 148.363 2229.8 150.145 Q2231.72 151.905 2231.72 155.076 Q2231.72 158.687 2228.85 160.793 Q2226 162.9 2221 162.9 Q2218.92 162.9 2216.65 162.483 Q2214.41 162.09 2211.91 161.28 L2211.91 156.881 Q2214.27 158.108 2216.56 158.733 Q2218.85 159.335 2221.1 159.335 Q2224.11 159.335 2225.73 158.317 Q2227.35 157.275 2227.35 155.4 Q2227.35 153.664 2226.17 152.738 Q2225.01 151.812 2221.05 150.956 L2219.57 150.608 Q2215.61 149.775 2213.85 148.062 Q2212.09 146.326 2212.09 143.317 Q2212.09 139.659 2214.69 137.669 Q2217.28 135.678 2222.05 135.678 Q2224.41 135.678 2226.49 136.025 Q2228.57 136.372 2230.33 137.067 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#e26f46; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1819.61,196.789 1964.85,196.789 \n  \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1989.06 179.509 L2018.3 179.509 L2018.3 183.444 L2006.03 183.444 L2006.03 214.069 L2001.33 214.069 L2001.33 183.444 L1989.06 183.444 L1989.06 179.509 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2030.68 192.124 Q2029.96 191.708 2029.11 191.522 Q2028.27 191.314 2027.26 191.314 Q2023.64 191.314 2021.7 193.675 Q2019.78 196.013 2019.78 200.411 L2019.78 214.069 L2015.5 214.069 L2015.5 188.143 L2019.78 188.143 L2019.78 192.171 Q2021.12 189.809 2023.27 188.675 Q2025.43 187.518 2028.51 187.518 Q2028.95 187.518 2029.48 187.587 Q2030.01 187.634 2030.66 187.749 L2030.68 192.124 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2046.93 201.036 Q2041.77 201.036 2039.78 202.217 Q2037.79 203.397 2037.79 206.245 Q2037.79 208.513 2039.27 209.856 Q2040.77 211.175 2043.34 211.175 Q2046.89 211.175 2049.01 208.675 Q2051.17 206.152 2051.17 201.985 L2051.17 201.036 L2046.93 201.036 M2055.43 199.277 L2055.43 214.069 L2051.17 214.069 L2051.17 210.133 Q2049.71 212.495 2047.53 213.629 Q2045.36 214.74 2042.21 214.74 Q2038.23 214.74 2035.87 212.518 Q2033.53 210.272 2033.53 206.522 Q2033.53 202.147 2036.45 199.925 Q2039.39 197.703 2045.2 197.703 L2051.17 197.703 L2051.17 197.286 Q2051.17 194.347 2049.22 192.749 Q2047.3 191.129 2043.81 191.129 Q2041.58 191.129 2039.48 191.661 Q2037.37 192.194 2035.43 193.259 L2035.43 189.323 Q2037.76 188.421 2039.96 187.981 Q2042.16 187.518 2044.25 187.518 Q2049.87 187.518 2052.65 190.434 Q2055.43 193.351 2055.43 199.277 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2064.2 188.143 L2068.46 188.143 L2068.46 214.532 Q2068.46 219.485 2066.56 221.707 Q2064.69 223.93 2060.5 223.93 L2058.88 223.93 L2058.88 220.319 L2060.01 220.319 Q2062.44 220.319 2063.32 219.184 Q2064.2 218.073 2064.2 214.532 L2064.2 188.143 M2064.2 178.05 L2068.46 178.05 L2068.46 183.444 L2064.2 183.444 L2064.2 178.05 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2099.55 200.041 L2099.55 202.124 L2079.96 202.124 Q2080.24 206.522 2082.6 208.837 Q2084.99 211.129 2089.22 211.129 Q2091.68 211.129 2093.97 210.527 Q2096.28 209.925 2098.55 208.721 L2098.55 212.749 Q2096.26 213.721 2093.85 214.231 Q2091.45 214.74 2088.97 214.74 Q2082.76 214.74 2079.13 211.129 Q2075.52 207.518 2075.52 201.36 Q2075.52 194.995 2078.95 191.268 Q2082.39 187.518 2088.23 187.518 Q2093.46 187.518 2096.49 190.897 Q2099.55 194.254 2099.55 200.041 M2095.29 198.791 Q2095.24 195.296 2093.32 193.212 Q2091.42 191.129 2088.27 191.129 Q2084.71 191.129 2082.56 193.143 Q2080.43 195.157 2080.1 198.814 L2095.29 198.791 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2125.19 189.138 L2125.19 193.12 Q2123.39 192.124 2121.56 191.638 Q2119.76 191.129 2117.9 191.129 Q2113.76 191.129 2111.47 193.768 Q2109.18 196.384 2109.18 201.129 Q2109.18 205.874 2111.47 208.513 Q2113.76 211.129 2117.9 211.129 Q2119.76 211.129 2121.56 210.643 Q2123.39 210.133 2125.19 209.138 L2125.19 213.073 Q2123.41 213.907 2121.49 214.323 Q2119.59 214.74 2117.44 214.74 Q2111.58 214.74 2108.13 211.059 Q2104.69 207.379 2104.69 201.129 Q2104.69 194.786 2108.16 191.152 Q2111.65 187.518 2117.72 187.518 Q2119.69 187.518 2121.56 187.935 Q2123.44 188.328 2125.19 189.138 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2136.82 180.782 L2136.82 188.143 L2145.59 188.143 L2145.59 191.453 L2136.82 191.453 L2136.82 205.527 Q2136.82 208.698 2137.67 209.601 Q2138.55 210.504 2141.21 210.504 L2145.59 210.504 L2145.59 214.069 L2141.21 214.069 Q2136.28 214.069 2134.41 212.24 Q2132.53 210.388 2132.53 205.527 L2132.53 191.453 L2129.41 191.453 L2129.41 188.143 L2132.53 188.143 L2132.53 180.782 L2136.82 180.782 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2161.24 191.129 Q2157.81 191.129 2155.82 193.814 Q2153.83 196.476 2153.83 201.129 Q2153.83 205.782 2155.8 208.467 Q2157.79 211.129 2161.24 211.129 Q2164.64 211.129 2166.63 208.444 Q2168.62 205.758 2168.62 201.129 Q2168.62 196.522 2166.63 193.837 Q2164.64 191.129 2161.24 191.129 M2161.24 187.518 Q2166.79 187.518 2169.96 191.129 Q2173.13 194.74 2173.13 201.129 Q2173.13 207.495 2169.96 211.129 Q2166.79 214.74 2161.24 214.74 Q2155.66 214.74 2152.49 211.129 Q2149.34 207.495 2149.34 201.129 Q2149.34 194.74 2152.49 191.129 Q2155.66 187.518 2161.24 187.518 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2195.22 192.124 Q2194.5 191.708 2193.64 191.522 Q2192.81 191.314 2191.79 191.314 Q2188.18 191.314 2186.24 193.675 Q2184.32 196.013 2184.32 200.411 L2184.32 214.069 L2180.03 214.069 L2180.03 188.143 L2184.32 188.143 L2184.32 192.171 Q2185.66 189.809 2187.81 188.675 Q2189.96 187.518 2193.04 187.518 Q2193.48 187.518 2194.01 187.587 Q2194.55 187.634 2195.19 187.749 L2195.22 192.124 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2210.47 216.476 Q2208.67 221.106 2206.95 222.518 Q2205.24 223.93 2202.37 223.93 L2198.97 223.93 L2198.97 220.365 L2201.47 220.365 Q2203.23 220.365 2204.2 219.532 Q2205.17 218.698 2206.35 215.596 L2207.12 213.652 L2196.63 188.143 L2201.14 188.143 L2209.25 208.421 L2217.35 188.143 L2221.86 188.143 L2210.47 216.476 Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"That's it, now we have our optimal trajectory!","category":"page"},{"location":"examples/Optimal Control/hovercraft/#Maintenance-Tests","page":"Hovercraft Path Planning","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"using Test\n@test termination_status(m) == MOI.LOCALLY_SOLVED\n@test has_values(m)\n@test x_opt isa Vector{<:Vector{<:Real}}","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"Test Passed","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"","category":"page"},{"location":"examples/Optimal Control/hovercraft/","page":"Hovercraft Path Planning","title":"Hovercraft Path Planning","text":"This page was generated using Literate.jl.","category":"page"},{"location":"install/#Installation-Guide","page":"Installation","title":"Installation Guide","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"A complete guide to installing all that is necessary to use InfiniteOpt.jl.","category":"page"},{"location":"install/#Install-Julia","page":"Installation","title":"Install Julia","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"InfiniteOpt is a Julia package. Thus, we first need have an installation of Julia to get started. An appropriate download can be found here. We recommend using  VSCode to edit and run Julia scripts.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"note: Note\nThis version of InfiniteOpt requires that Julia 1.0 or newer be used.","category":"page"},{"location":"install/#Install-Packages","page":"Installation","title":"Install Packages","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Now that Julia has been installed we can add the needed packages. Open up a Julia terminal and enter the package manager:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> ]\n\n(v1.6) pkg>","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"tip: Tip\nWe recommend you create a Pkg environment for each project you use InfiniteOpt for, instead of adding lots of packages to the global environment. The Pkg manager documentation has more information on this topic.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Use the add command in the package to manager to add the following packages:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Distributions (required for stochastic programming)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"For example, to install Distributions we would enter:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add Distributions","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Now let's install InfiniteOpt:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add InfiniteOpt","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"info: Info\nInstallation troubles? Check the Common Installation Problems section below.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Alternatively, we can install the current experimental version of  InfiniteOpt via:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add https://github.com/pulsipher/InfiniteOpt.jl","category":"page"},{"location":"install/#Install-Optimization-Solvers","page":"Installation","title":"Install Optimization Solvers","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"InfiniteOpt relies on solvers to solve optimization problems. Many solvers are not native to Julia and might require commercial licenses. A list of currently supported solvers and their corresponding Julia packages is provided in Supported Optimizers.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"For example, we can install Ipopt which is an open-source nonlinear solver:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add Ipopt","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Now Ipopt can be used as the optimizer (solver) for an infinite model by running:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> using InfiniteOpt, Ipopt\n\njulia> model = InfiniteModel(Ipopt.Optimizer)","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Most solver packages follow the ModuleName.Optimizer naming convention, but this may not always be the case. See Infinite Models for more information on defining infinite models and specifying solvers.","category":"page"},{"location":"install/#Common-Installation-Problems","page":"Installation","title":"Common Installation Problems","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"tip: Tip\nWhen in doubt, run import Pkg; Pkg.update() to see if updating your packages fixes the issue. Remember you will need to exit Julia and start a new session for the changes to take effect.","category":"page"},{"location":"install/#Check-the-version-of-your-packages","page":"Installation","title":"Check the version of your packages","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Each package is versioned with a three-part number of the form vX.Y.Z. You can check which versions you have installed with:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> ]\n\n(v1.6) pkg> status","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"This should almost always be the most-recent release. You can check the releases of a package by going to the relevant Github page, and navigating to the \"releases\" page. For example, the list of JuMP releases is available at: https://github.com/pulsipher/InfiniteOpt.jl/releases.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"If you need to ask question for help, please include the output of status!","category":"page"},{"location":"install/#Unsatisfiable-requirements-detected","page":"Installation","title":"Unsatisfiable requirements detected","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Did you get an error like  Unsatisfiable requirements detected for package InfiniteOpt? The Pkg  documentation has a  section on how to understand and manage these conflicts.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Typically, these conflicts can be resolved by using  package environments.","category":"page"},{"location":"install/#Installing-new-packages-can-make-InfiniteOpt-downgrade-to-an-earlier-version","page":"Installation","title":"Installing new packages can make InfiniteOpt downgrade to an earlier version","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Another common issue is that after adding a new package, code that previously  worked no longer runs.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"This usually happens because the new package is not compatible with the latest version of InfiniteOpt. Therefore, the package manager downgrades InfiniteOpt  to an earlier version!","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Thus, please pay careful attention to the output of the package manager when  adding new packages, especially when you see a package being downgraded!","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"DocTestFilters = [r\"≤|<=\", r\"≥|>=\", r\" == | = \", r\" ∈ | in \", \n                  r\"MathOptInterface|MOI\", r\" for all | ∀ \", r\"d|∂\", \n                  r\"E|𝔼\", r\"integral|∫\"]","category":"page"},{"location":"develop/extensions/#Extensions","page":"Extensions","title":"Extensions","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Here we provide guidance to various ways InfiniteOpt can be extended.","category":"page"},{"location":"develop/extensions/#Overview","page":"Extensions","title":"Overview","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Extendibility is one of the core ideas of InfiniteOpt so that it can serve as a  convenient tool for those developing and implementing advanced techniques for  infinite dimensional optimization problems. Thus, InfiniteOpt is developed in  a modular manner to readily accommodate user-defined functionality and/or to  serve as useful base in writing a JuMP extension. Admittedly, this modularity  is not perfect and comments/suggestions are welcomed to help us improve this.","category":"page"},{"location":"develop/extensions/#Infinite-Domains","page":"Extensions","title":"Infinite Domains","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Infinite domains are used to characterize the behavior of infinite parameters and  used to govern the behavior of supports in InfiniteOpt. Here we walk through  how user-defined domains can be added to various degrees of functionality. A  template is provided in  ./test/extensions/infinite_domain.jl.  The extension steps employed are:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define the new struct infinite domain type (only thing required as bare minimum)\nExtend InfiniteOpt.supports_in_domain (enables error checking of supports)\nExtend InfiniteOpt.generate_support_values (enables support generation via num_supports keyword arguments)\nIf a lower bound and upper bound can be reported, extend JuMP lower bound and upper bound methods (enables automatic bound detection in integral)\nExtend InfiniteOpt.MeasureToolbox.generate_expect_data (enables the use of expect) ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"As an example, let's create a univariate disjoint interval domain as an infinite  domain type. This corresponds to the domain lb_1 ub_1 cup lb_2 ub_2  where ub_1 leq lb_2. First, we need to create the DataType with  inheritance from InfiniteScalarDomain:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt\n\nstruct DisjointDomain <: InfiniteOpt.InfiniteScalarDomain\n    lb1::Float64\n    ub1::Float64\n    lb2::Float64\n    ub2::Float64\n    # constructor\n    function DisjointDomain(lb1::Number, ub1::Number, lb2::Number, ub2::Number)\n        if lb1 > ub1 || lb2 > ub2 || ub1 > lb2\n            error(\"Invalid bounds\")\n        end\n        return new(convert(Float64, lb1), convert(Float64, ub1),\n                   convert(Float64, lb2), convert(Float64, ub2))\n    end\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Notice that we also define the constructor function to error check and convert as  needed (this is recommended, but not required). For basic functionality this is  all we have to do to add a domain in InfiniteOpt.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We can now define infinite parameters using this domain via  @infinite_parameter both anonymously and explicitly:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> model = InfiniteModel();\n\njulia> t = @infinite_parameter(model, domain = DisjointDomain(0, 1, 3, 4), base_name = \"t\")\nt\n\njulia> @infinite_parameter(model, t in DisjointDomain(0, 1, 3, 4))\nt","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Once defined (without further extension), these parameters can be used as normal  with the following limitations:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Supports must be specified manually (num_supports is not enabled)\nSupports will not be checked if they are in the domain of the infinite domain\nDomain bounds cannot be queried.\nThe DiscreteMeasureData or FunctionalDiscreteMeasureData  must be provided explicitly to evaluate measures","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"However, all of these limitations except for the last one can be eliminated by  extending a few functions as outlined above. To address the last one, we need  to extend generate_integral_data. See [Measure Evaluation Techniques]  for details. ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"To enable support domain checking which is useful to avoid strange bugs, we will  extend InfiniteOpt.supports_in_domain. This returns a Bool to  indicate if a vector of supports are in the domain:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.supports_in_domain(\n    supports::Union{Number, Vector{<:Number}},\n    domain::DisjointDomain\n    )::Bool\n    return all((domain.lb1 .<= supports .<= domain.ub1) .| (domain.lb2 .<= supports .<= domain.ub2))\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now the checks are enabled, so the following would yield an error because the  support is not in the domain domain:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> @infinite_parameter(model, domain = DisjointDomain(0, 1, 3, 4), supports = 2)\nERROR: At none:1: `@infinite_parameter(model, domain = DisjointDomain(0, 1, 3, 4), supports = 2)`: Supports violate the domain bounds.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"To enable automatic support generation via the num_supports keyword and with  functions such as fill_in_supports!, we will extend  InfiniteOpt.generate_support_values:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"struct DisjointGrid <: InfiniteOpt.PublicLabel end\n\nfunction InfiniteOpt.generate_support_values(\n    domain::DisjointDomain;\n    num_supports::Int = InfiniteOpt.DefaultNumSupports,\n    sig_digits::Int = InfiniteOpt.DefaultSigDigits\n    )::Tuple{Vector{Float64}, DataType}\n    length_ratio = (domain.ub1 - domain.lb1) / (domain.ub1 - domain.lb1 + domain.ub2 - domain.lb2)\n    num_supports1 = Int64(ceil(length_ratio * num_supports))\n    num_supports2 = num_supports - num_supports1\n    supports1 = collect(range(domain.lb1, stop = domain.ub1, length = num_supports1))\n    supports2 = collect(range(domain.lb2, stop = domain.ub2, length = num_supports2))\n    return round.([supports1; supports2], sigdigits = sig_digits), DisjointGrid\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now automatic support generation is enabled, for example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> par = @infinite_parameter(model, domain = DisjointDomain(0, 2, 3, 4), num_supports = 10)\nnoname\n\njulia> supports(par)\n10-element Vector{Float64}:\n 0.0\n 0.333333333333\n 0.666666666667\n 1.0\n 1.33333333333\n 1.66666666667\n 2.0\n 3.0\n 3.5\n 4.0","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We can extend the appropriate JuMP upper and lower bound functions  if desired which are:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"JuMP.has_lower_bound\nJuMP.lower_bound\nJuMP.set_lower_bound\nJuMP.has_upper_bound\nJuMP.upper_bound\nJuMP.set_upper_bound","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"However, if we want has_lower_bound = false and has_upper_bound = false then  no extension is needed. For our current example we won't do this since lower  and upper bounds aren't exactly clear for a disjoint interval. Please refer to  the template in ./InfiniteOpt/test/extensions/infinite_domain.jl to see how  this is done.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Finally, we can optionally enable the use of expect taken with respect  to infinite parameters with this new domain type by extending  InfiniteOpt.MeasureToolbox.generate_expect_data:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.MeasureToolbox.generate_expect_data(domain::DisjointDomain, \n    pref::GeneralVariableRef, \n    num_supports::Int; \n    kwargs...\n    )\n    for (k, _) in kwargs\n        error(\"Keyword argument `$k` not supported for expectations over \",\n              \"disjoint domains.\")\n    end\n    coeff_func = (supps) -> ones(size(supps)[end]) ./ size(supps)[end] \n    return InfiniteOpt.FunctionalDiscreteMeasureData(pref, coeff_func, 0, All)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"The above implementation simply sums over all the supports associated with pref  and divides by the total number. Now we can use expect:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> @variable(model, y, Infinite(t))\ny(t)\n\njulia> expect(y, t)\n𝔼{t}[y(t)]","category":"page"},{"location":"develop/extensions/#Derivative-Evaluation-Methods","page":"Extensions","title":"Derivative Evaluation Methods","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Derivative evaluation methods are used to dictate how we form the auxiliary  derivative evaluation equations (derivative constraints) when we evaluate  derivatives in InfiniteOpt. Users may wish to implement their own methods beyond  the finite difference and orthogonal collocation ones we natively provide. Thus,  we provide an API to do just this. A complete template is provided in  ./test/extensions/derivative_method.jl  to help streamline this process. The extension steps are:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define the new method struct that inherits from the correct  AbstractDerivativeMethod subtype\nExtend InfiniteOpt.generative_support_info  if the method is a GenerativeDerivativeMethod\nExtend InfiniteOpt.evaluate_derivative.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"To exemplify this process let's implement explicit Euler which is already  implemented via FiniteDifference(Forward()), but let's make our own anyway for  the sake of example. For a first order derivative fracd y(t)dt explicit  Euler is expressed:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"y(t_n+1) = y(t_n) + (t_n+1 - t_n)fracd y(t_n)dt  forall n = 0 1 dots k-1","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Let's get started with step 1 and define our new method struct:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt\n\nstruct ExplicitEuler <: NonGenerativeDerivativeMethod end","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Notice that our method ExplicitEuler inherits from  NonGenerativeDerivativeMethod since explicit Euler uses the existing  support scheme without adding any additional supports. If our desired method  needed to add additional supports (e.g., orthogonal collocation over finite  elements) then we would need to have used GenerativeDerivativeMethod.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Since, this is a NonGenerativeDerivativeMethod we skip step 2. This is  however exemplified in the extension template.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now we just need to do step 3 which is to extend  InfiniteOpt.evaluate_derivative. This function generates all the  expressions necessary to build the derivative evaluation equations (derivative  constraints). We assume these relations to be of the form h = 0 where h  is a vector of expressions and is what the output of  InfiniteOpt.evaluate_derivative should be. Thus, mathematically h should  be of the form:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"beginaligned\n y(t_1) - y(0) - (t_1 - t_0)fracd y(0)dt \n vdots \n y(t_n+1) - y(t_n) - (t_n+1 - t_n)fracd y(t_n)dt \n vdots \n y(t_k) - y(k-1) - (t_k - t_k-1)fracd y(k-1)dt \nendaligned","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"With this in mind let's now extend InfiniteOpt.evaluate_derivative:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.evaluate_derivative(\n    dref::GeneralVariableRef, \n    method::ExplicitEuler,\n    write_model::JuMP.AbstractModel\n    )::Vector{JuMP.AbstractJuMPScalar}\n    # get the basic derivative information \n    vref = derivative_argument(dref)\n    pref = operator_parameter(dref)\n    # generate the derivative expressions h_i corresponding to the equations of \n    # the form h_i = 0\n    supps = supports(pref, label = All)\n    exprs = Vector{JuMP.AbstractJuMPScalar}(undef, length(supps) - 1)\n    for i in eachindex(exprs)\n        d = InfiniteOpt.make_reduced_expr(dref, pref, supps[i], write_model)\n        v1 = InfiniteOpt.make_reduced_expr(vref, pref, supps[i], write_model)\n        v2 = InfiniteOpt.make_reduced_expr(vref, pref, supps[i + 1], write_model)\n        change = supps[i + 1] - supps[i]\n        exprs[i] = JuMP.@expression(write_model, v2 - v1 - change * d)\n    end\n    return exprs\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We used InfiniteOpt.make_reduced_expr as a convenient helper function  to generate the semi-infinite variables/expressions we need to generate at each  support point. Also note that InfiniteOpt.add_generative_supports needs  to be included for GenerativeDerivativeMethods, but is not necessary in this  example.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now that we have have completed all the necessary steps, let's try it out! ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10], num_supports = 3, \n                           derivative_method = ExplicitEuler());\n\njulia> @variable(model, y, Infinite(t));\n\njulia> dy = deriv(y, t);\n\njulia> evaluate(dy)\n\njulia> derivative_constraints(dy)\n2-element Vector{InfOptConstraintRef}:\n y(5) - y(0) - 5 ∂/∂t[y(t)](0) = 0.0\n y(10) - y(5) - 5 ∂/∂t[y(t)](5) = 0.0","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We implemented explicit Euler and it works! Now go and extend away!","category":"page"},{"location":"develop/extensions/#Measure-Evaluation-Techniques","page":"Extensions","title":"Measure Evaluation Techniques","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Measure evaluation methods are used to dictate how to evaluate measures. Users  may wish to apply evaluation methods other than Monte Carlo sampling and/or  Gaussian quadrature methods. To create multiple measures using the same new  evaluation methods, users may want to embed the new evaluation method under the  integral function that does not require explicit construction of  AbstractMeasureData.","category":"page"},{"location":"develop/extensions/#Creating-a-DiscreteMeasureData-Object","page":"Extensions","title":"Creating a DiscreteMeasureData Object","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"The basic way to do that is to write a function that creates  DiscreteMeasureData object and pass the object to measure.  For instance, let's consider defining a function that enables the definition of a  uniform grid for a univariate or multivariate infinite parameter in  IntervalDomain. The function, denoted uniform_grid, generates uniform  grid points as supports for univariate parameter and each component of  independent multivariate parameter. The univariate version of this function  can be defined as follows:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function uniform_grid(\n    param::GeneralVariableRef, \n    lb::Real, \n    ub::Real, \n    num_supports::Int\n    )::DiscreteMeasureData\n    increment = (ub - lb) / (num_supports - 1)\n    supps = [lb + (i - 1) * increment for i in 1:num_supports]\n    coeffs = ones(num_supports) / num_supports * (ub - lb)\n    return DiscreteMeasureData(param, coeffs, supps, lower_bound = lb, upper_bound = ub)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"It is necessary to pass the infinite parameter reference since the  construction of measure data object needs parameter information. Now let's  apply the new uniform_grid function to infinite parameters in  intervals. We consider a time parameter t and 2D spatial parameter x, and  two variables f(t) and g(x) parameterized by t and x, respectively:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> m = InfiniteModel();\n\njulia> @infinite_parameter(m, t in [0, 5]);\n\njulia> @variable(m, y, Infinite(t));","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now we can use uniform_grid to construct a DiscreteMeasureData and  create a measure using the measure data, as shown below:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> tdata = uniform_grid(t, 0, 5, 6);\n\njulia> y_meas = measure(y, tdata)\nmeasure{t ∈ [0, 5]}[y(t)]\n\njulia> expand(y_meas)\n0.8333333333333333 y(0) + 0.8333333333333333 y(1) + 0.8333333333333333 y(2) + 0.8333333333333333 y(3) + 0.8333333333333333 y(4) + 0.8333333333333333 y(5)","category":"page"},{"location":"develop/extensions/#Integral-Evaluation-Methods","page":"Extensions","title":"Integral Evaluation Methods","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For integrals, we can implement a new approximation method via the extension of  InfiniteOpt.MeasureToolbox.generate_integral_data. This will  allow users to use their custom measure evaluation methods in the  integral function that does not explicitly require a measure data  object. A template for how such an extension is accomplished is provided in  ./test/extensions/measure_eval.jl. In general, such an extension can be created as follows: ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define a new empty struct (e.g. my_new_fn) that dispatches your function\nExtend InfiniteOpt.MeasureToolbox.generate_integral_data,  where method is of the type my_new_fn, and domain needs to be a subtype  of AbstractInfiniteDomain that you wish to apply the new evaluation  method to.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Note that this procedure can be used to generate new measure evaluation methods  not only for existing infinite domains, but also for user-defined infinite  domains. ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For example, an extension of  InfiniteOpt.MeasureToolbox.generate_integral_data that implements  uniform grid for univariate and multivariate parameters in  IntervalDomain can be created as follows:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"struct UnifGrid <: InfiniteOpt.MeasureToolbox.AbstractUnivariateMethod end\n\nfunction InfiniteOpt.MeasureToolbox.generate_integral_data(\n    pref::InfiniteOpt.GeneralVariableRef,\n    lower_bound::Real,\n    upper_bound::Real,\n    method::UnifGrid;\n    num_supports::Int = InfiniteOpt.DefaultNumSupports,\n    weight_func::Function = InfiniteOpt.default_weight\n    )::InfiniteOpt.DiscreteMeasureData\n    increment = (upper_bound - lower_bound) / (num_supports - 1)\n    supports = [lower_bound + (i - 1) * increment for i in 1:num_supports]\n    coeffs = ones(num_supports) / num_supports * (upper_bound - lower_bound)\n    return InfiniteOpt.DiscreteMeasureData(\n        pref, coeffs, supports,\n        weight_function = weight_func,\n        lower_bound = lower_bound, \n        upper_bound = upper_bound)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Also notice that users are free to pass keyword arguments for their new  functions in addition to the required positional arguments. This might be needed  in case if the new evaluation method requires additional information not  captured in the default positional arguments. For example, the multivariate  parameter version above needs to know if the multivariate parameter is  independent in order to throw a warning when needed.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We create measure for y using the uniform_grid method:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> y_int = integral(y, t, num_supports = 6, eval_method = UnifGrid())\n∫{t ∈ [0, 5]}[y(t)]\n\njulia> expand(y_int)\n0.8333333333333333 y(0) + 0.8333333333333333 y(1) + 0.8333333333333333 y(2) + 0.8333333333333333 y(3) + 0.8333333333333333 y(4) + 0.8333333333333333 y(5)","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Here we go! We can freely use UnifGrid for infinite parameters residing in  IntervalDomains now.","category":"page"},{"location":"develop/extensions/#meas_data_ext","page":"Extensions","title":"Measure Data","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Measures are used to evaluate over infinite domains. Users may wish to employ  measure abstractions that cannot be readily represented with coefficients and  discretized supports, and thus may wish to extend InfiniteOpt's  measure framework to accommodate other paradigms. This can be accomplished by   implementing a user-defined measure data structure that inherits from  AbstractMeasureData. A template for how such an extension is  accomplished is provided in  ./test/extensions/measure_data.jl.  The extension steps employed are:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define the new data struct inheriting from AbstractMeasureData (required)\nExtend InfiniteOpt.parameter_refs (required)\nExtend InfiniteOpt.expand_measure (required)\nExtend InfiniteOpt.supports (required if parameter supports are employed in any way)\nExtend InfiniteOpt.add_supports_to_parameters (required if parameter supports are employed in measure evaluation)\nExtend InfiniteOpt.coefficients (useful getter method if applicable)\nExtend InfiniteOpt.weight_function (useful getter method if applicable)\nExtend InfiniteOpt.support_label (needed to enable deletion if supports are added.)\nExtend InfiniteOpt.generative_support_info (Needed if the measure will cause the creation of generative supports)\nMake simple measure constructor wrapper of measure to ease definition.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"To illustrate how this process can be done, let's consider extending InfiniteOpt  to include measure support for assessing the variance of random expressions. The  variance of an expression f(x xi) where x in mathbbR^n are finite  variables and xi in mathbbR^m are random infinite parameters is defined:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"mathbbVf(x xi) = mathbbEleft(f(x xi) - mathbbEf(x xi))^2 right","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Note, we could just accomplish this by nested use of expect, but we  implement this example to illustrate the mechanics of extension.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"First, let's define our new struct inheriting from AbstractMeasureData:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt, Distributions\n\nstruct DiscreteVarianceData <: AbstractMeasureData\n    parameter_refs::Union{GeneralVariableRef, Vector{GeneralVariableRef}}\n    supports::Vector\n    label::DataType\n    # constructor\n    function DiscreteVarianceData(\n        parameter_refs::Union{GeneralVariableRef, AbstractArray{<:GeneralVariableRef}},\n        supports::Vector,\n        label::DataType = InfiniteOpt.generate_unique_label()\n        )\n        # convert input as necessary to proper array format\n        if parameter_refs isa AbstractArray\n            parameter_refs = convert(Vector, parameter_refs)\n            supports = [convert(Vector, arr) for arr in supports]\n        end\n        return new(parameter_refs, supports, label)\n    end\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We have defined our data type, so let's extend the measure data query  methods to enable its definition. These include:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"parameter_refs\nsupports\nsupport_label","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.parameter_refs(data::DiscreteVarianceData)\n    return data.parameter_refs\nend\n\nfunction InfiniteOpt.supports(data::DiscreteVarianceData)::Vector\n    return data.supports\nend\n\nfunction InfiniteOpt.support_label(data::DiscreteVarianceData)::DataType\n    return data.label\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We also need to extend InfiniteOpt.add_supports_to_parameters  since support points will be used for measure evaluation later:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.add_supports_to_parameters(data::DiscreteVarianceData)::Nothing\n    pref = parameter_refs(data)\n    supps = supports(data)\n    label = support_label(data)\n    add_supports(pref, supps, label = label)\n    return\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Note that extending supports is not needed for abstractions that don't involve  discretization of the infinite parameter(s), such as the case for certain  outer approximation techniques. Our extension is now sufficiently constructed to  allow us to define out the new variance measure via measure. For  example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"# Setup the infinite model\nmodel = InfiniteModel()\n@infinite_parameter(model, xi ~ Normal(), num_supports = 2) # few for simplicity\n@variable(model, y, Infinite(xi))\n@variable(model, z)\n\n# Define out new variance measure\ndata = DiscreteVarianceData(xi, supports(xi))\nmref = measure(2y + z, data, name = \"Var\")\n\n# output\nVar{xi}[2 y(xi) + z]","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Thus, we can define measure references that employ this our new data type.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We can define variance measures now, but now let's extend  expand_measure so that they can be expanded into finite expressions:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.expand_measure(\n    expr::JuMP.AbstractJuMPScalar,\n    data::DiscreteVarianceData,\n    write_model::JuMP.AbstractModel\n    )::JuMP.AbstractJuMPScalar\n    # define the expectation data\n    expect_data = DiscreteMeasureData(\n                      data.parameter_refs,\n                      1 / length(data.supports) * ones(length(data.supports)),\n                      data.supports, is_expect = true, label = data.label)\n    # define the mean\n    mean = measure(expr, expect_data)\n    # return the expansion of the variance using the data mean\n    return expand_measure((copy(expr) - mean)^2, expect_data, write_model)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Notice that we reformulated our abstraction in terms of measures with  DiscreteMeasureData so that we could leverage the existing  expand_measure library. Now, new the measure type can be expanded and  moreover infinite models using this new type can be optimized. Let's try  expanding the measure we already defined:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> expand(mref)\ny(-0.556026876146)² + 0 z*y(-0.556026876146) - 2 y(-0.44438335711)*y(-0.556026876146) + 0 z² + 0 z*y(-0.44438335711) + y(-0.44438335711)²","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Finally, as per recommendation let's make a wrapper method to make defining  variance measures more convenient:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function variance(\n    expr::Union{JuMP.GenericAffExpr, GeneralVariableRef},\n    params::Union{GeneralVariableRef, AbstractArray{GeneralVariableRef}};\n    name::String = \"Var\", \n    num_supports::Int = 10,\n    use_existing::Bool = false\n    )::GeneralVariableRef\n    # get the supports\n    if use_existing\n        supps = supports.(params)\n    else\n        supps = generate_support_values(infinite_domain(first(params)),\n                                        num_supports = num_supports)\n    end\n    # make the data\n    data = DiscreteVarianceData(params, supps)\n    # built the measure\n    return measure(expr, data, name = name)\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Notice in this case that we only permit linear expressions for expr since  it will be squared by our new measure and we currently only support quadratic  expressions. (This could be overcome by defining a place holder variable  for expr.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now let's use our constructor to repeat the above measure example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> expand(variance(2y + z, xi, use_existing = true))\ny(-0.556026876146)² + 0 z*y(-0.556026876146) - 2 y(-0.44438335711)*y(-0.556026876146) + 0 z² + 0 z*y(-0.44438335711) + y(-0.44438335711)²","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We have done it! Now go and extend away!","category":"page"},{"location":"develop/extensions/#Generative-Support-Information","page":"Extensions","title":"Generative Support Information","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"As discussed in the Generative Supports section, generative  supports help enable measure and/or derivative evaluation techniques that require  the creation of generative supports (e.g., orthogonal collocation). Natively, we  provide UniformGenerativeInfo to help accomplish this which works for  creating generative supports uniformly over finite elements as is the case for  orthogonal collocation (note this includes scaling them as need to the size of  each finite element). However, more complex generative support schemes can be  enabled by defining a new concrete AbstractGenerativeInfo subtype. This  section will detail how this can be accomplished in InfiniteOpt. A template for  implementing this is provided in  ./test/extensions/generative_info.jl.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"A new generative support information type can be created via the following:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define a concrete subtype of AbstractGenerativeInfo (required)\nMake a unique support label that inherits InternalLabel (recommended)\nExtend InfiniteOpt.support_label (required)\nExtend InfiniteOpt.make_generative_supports (required).","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For the sake of example, let's suppose we want to make a method that generates a  certain amount of random supports for each finite element. First, let's define  our struct RandomGenerativeInfo:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt, Random\n\nstruct RandomGenerativeInfo <: InfiniteOpt.AbstractGenerativeInfo\n    amount::Int # amount of random supports per finite element\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"With that done, let's define a unique support label RandomInternal for these  types of supports and extend support_label:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"struct RandomInternal <: InternalLabel end\n\nfunction InfiniteOpt.support_label(info::RandomGenerativeInfo)::Type{RandomInternal}\n    return RandomInternal\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Finally, let's extend make_generative_supports to create a vector of the  generative supports based on a RandomGenerativeInfo and the existing model  supports which are passed in the function as input:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.make_generative_supports(info::RandomGenerativeInfo, pref, supps)::Vector{Float64}\n    num_existing = length(supps)\n    num_existing <= 1 && error(\"`$pref` doesn't have enough supports.\")\n    num_internal = info.attr\n    gen_supps = Float64[]\n    for i = 1:num_existing-1 \n        lb = supps[i]\n        ub = supps[i+1]\n        append!(gen_supps, rand(num_internal) * (ub - lb) .+ lb)\n    end\n    return gen_supps\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Our extension is done and now RandomGenerativeInfo can be incorporated by a  GenerativeDerivativeMethod we create or an AbstractMeasureData object of our  choice like FunctionalDiscreteMeasureData. ","category":"page"},{"location":"develop/extensions/#extend_optimizer_model","page":"Extensions","title":"Optimizer Models","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"InfiniteOpt provides a convenient interface and abstraction for modeling  infinite-dimensional optimization problems. By default, InfiniteModels are  reformulated into a solvable JuMP.Model (referred to as an optimizer model)  via TranscriptionOpt which discretizes the model in accordance with the  infinite parameter supports. However, users may wish to employ some other  reformulation method to produce the optimizer model. This section will explain  how this can be done in InfiniteOpt. A template for implementing this  extension is provided in  ./test/extensions/optimizer_model.jl.  Our default sub-module InfiniteOpt.TranscriptionOpt also serves as a good  example.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"A new reformulation method and its corresponding optimizer model can be  extended using the following steps:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Define a mutable struct for variable/constraint mappings and other needed info (required)\nDefine a JuMP.Model constructor that uses (1.) in Model.ext[:my_ext_key] (recommended)\nExtend build_optimizer_model! to in accordance with the new optimizer model (required)\nExtend optimizer_model_variable if possible (enables result queries)\nExtend optimizer_model_expression if possible (enables result queries)\nExtend optimizer_model_constraint if possible (enables result queries)\nExtend InfiniteOpt.variable_supports if appropriate\nExtend InfiniteOpt.expression_supports if appropriate\nExtend InfiniteOpt.constraint_supports if appropriate\nIf steps 4-6 are skipped then extend the following:\nInfiniteOpt.map_value (enables JuMP.value)\nInfiniteOpt.map_optimizer_index (enables JuMP.optimizer_index)\nInfiniteOpt.map_dual (enables JuMP.dual)\nExtend InfiniteOpt.add_point_variable and   InfiniteOpt.add_semi_infinite_variable to use   expand_measure without modifying the infinite model.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For the sake of example, let's suppose we want to define a reformulation method  for InfiniteModels that are 2-stage stochastic programs (i.e., only  DistributionDomains are used, infinite variables are random 2nd stage variables,  and finite variables are 1st stage variables). In particular, let's make a simple  method that replaces the infinite parameters with their mean values, giving us  the deterministic mean-valued problem.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"First, let's define the mutable struct that will be used to store our variable  and constraint mappings. This case it is quite simple since our deterministic  model will have a 1-to-1 mapping:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using InfiniteOpt, Distributions\n\nmutable struct DeterministicData\n    # variable and constraint mapping\n    infvar_to_detvar::Dict{GeneralVariableRef, VariableRef}\n    infconstr_to_detconstr::Dict{InfOptConstraintRef, ConstraintRef}\n    # constructor\n    function DeterministicData()\n        return new(Dict{GeneralVariableRef, VariableRef}(),\n                   Dict{InfOptConstraintRef, ConstraintRef}())\n    end\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now let's define a constructor for optimizer models that will use  DeterministicData and let's define a method to access that data:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"const DetermKey = :DetermData\n\nfunction DeterministicModel(args...; kwargs...)::Model\n    # initialize the JuMP Model\n    model = Model(args...; kwargs...)\n    model.ext[DetermKey] = DeterministicData()\n    return model\nend\n\nfunction deterministic_data(model::Model)::DeterministicData\n    haskey(model.ext, DetermKey) || error(\"Model is not a DeterministicModel.\")\n    return model.ext[DetermKey]\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"note: Note\nThe use of an extension key such as DetermKey is required since it used to  dispatch reformulation and querying methods making optimizer model  extensions possible.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"With the constructor we can now specify that a given InfiniteModel uses a  DeterministicModel instead of a TranscriptionModel using the OptimizerModel  keyword argument or via set_optimizer_model:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"using Ipopt\n\n# Make model using Ipopt and DeterministicModels\nmodel = InfiniteModel(optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0),\n                      OptimizerModel = DeterministicModel)\n\n# Or equivalently\nmodel = InfiniteModel()\nset_optimizer_model(model, DeterministicModel())\nset_optimizer(model, optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0))","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now model uses a DeterministicModel as its optimizer model! With that we can build our InfiniteModel as normal, for example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"@infinite_parameter(model, ξ ~ Uniform())\n@variable(model, y[1:2] >= 0, Infinite(ξ))\n@variable(model, z)\n@objective(model, Min, z + expect(y[1] + y[2], ξ))\n@constraint(model, 2y[1] - z <= 42)\n@constraint(model, y[2]^2 + ξ == 2)\n@constraint(model, sin(z) >= -1)\nprint(model)\n\n# output\nMin z + 𝔼{ξ}[y[1](ξ) + y[2](ξ)]\nSubject to\n y[1](ξ) ≥ 0.0, ∀ ξ ~ Uniform\n y[2](ξ) ≥ 0.0, ∀ ξ ~ Uniform\n 2 y[1](ξ) - z ≤ 42.0, ∀ ξ ~ Uniform\n y[2](ξ)² + ξ = 2.0, ∀ ξ ~ Uniform\n sin(z) - -1 ≥ 0.0","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"We have defined our InfiniteModel, but now we need to specify how to  reformulate it into a DeterministicModel. This is accomplished by extending  build_optimizer_model!. This will enable the use of optimize!. First,  let's define an internal function _make_expression that will use dispatch to  convert and InfiniteOpt expression into a JuMP expression using the mappings  stored in opt_model in its DeterministicData:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"## Make dispatch methods for converting InfiniteOpt expressions\n# GeneralVariableRef\nfunction _make_expression(opt_model::Model, expr::GeneralVariableRef)\n    return _make_expression(opt_model, expr, index(expr))\nend\n# IndependentParameterRef\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef, \n    ::IndependentParameterIndex\n    )\n    return mean(infinite_domain(expr).distribution) # assuming univariate\nend\n# FiniteParameterRef\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef, \n    ::FiniteParameterIndex\n    )\n    return parameter_value(expr)\nend\n# DependentParameterRef\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef, \n    ::DependentParameterIndex\n    )\n    return mean(infinite_domain(expr).distribution) # assuming valid dist.\nend\n# DecisionVariableRef\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef, \n    ::Union{InfiniteVariableIndex, FiniteVariableIndex}\n    )\n    return deterministic_data(opt_model).infvar_to_detvar[expr]\nend\n# MeasureRef --> assume is expectation\nfunction _make_expression(\n    opt_model::Model, \n    expr::GeneralVariableRef,\n    ::MeasureIndex\n    )\n    return _make_expression(opt_model, measure_function(expr))\nend\n# AffExpr/QuadExpr\nfunction _make_expression(opt_model::Model, expr::Union{GenericAffExpr, GenericQuadExpr})\n    return map_expression(v -> _make_expression(opt_model, v), expr)\nend\n# NLPExpr\nfunction _make_expression(opt_model::Model, expr::NLPExpr)\n    return add_NL_expression(opt_model, map_nlp_to_ast(v -> _make_expression(opt_model, v), expr))\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"For simplicity in example, above we assume that only DistributionDomains are  used, there are not any PointVariableRefs, and all MeasureRefs correspond to  expectations. Naturally, a full extension should include checks to enforce that  such assumptions hold. Notice that map_expression and  map_nlp_to_ast are useful for converting expressions.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now let's extend build_optimizer_model! for DeterministicModels.  Such extensions should build an optimizer model in place and in general should  employ the following: ","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"clear_optimizer_model_build!\nset_optimizer_model_ready.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"In place builds without the use of clear_optimizer_model_build! are also  possible, but will require some sort of active mapping scheme to update in  accordance with the InfiniteModel in the case that the  optimizer model is built more than once. Thus, for simplicity we extend  build_optimizer_model! below using an initial clearing scheme:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.build_optimizer_model!(\n    model::InfiniteModel,\n    key::Val{DetermKey}\n    )::Nothing\n    # TODO check that `model` is a stochastic model\n    # clear the model for a build/rebuild\n    determ_model = InfiniteOpt.clear_optimizer_model_build!(model)\n\n    # add the registered functions if there are any\n    add_registered_to_jump(determ_model, model)\n\n    # add variables\n    for vref in all_variables(model)\n        dvref = dispatch_variable_ref(vref)\n        if dvref isa InfiniteVariableRef # have to handle the infinite variable functional start value\n            inf_var = InfiniteOpt._core_variable_object(dvref)\n            info = InfiniteOpt.TranscriptionOpt._format_infinite_info(inf_var, zeros(length(raw_parameter_refs(dvref))))\n        else\n            info = InfiniteOpt._variable_info(dvref)\n        end\n        new_vref = add_variable(determ_model, ScalarVariable(info),\n                                name(dvref)) # TODO update infinite variable names\n        deterministic_data(determ_model).infvar_to_detvar[vref] = new_vref\n    end\n\n    # add the objective\n    obj_func = _make_expression(determ_model, objective_function(model))\n    if obj_func isa NonlinearExpression\n        set_NL_objective(determ_model, objective_sense(model), obj_func)\n    else\n        set_objective(determ_model, objective_sense(model), obj_func)\n    end\n\n    # add the constraints\n    for cref in all_constraints(model)\n        if !InfiniteOpt._is_info_constraint(cref)\n            constr = constraint_object(cref)\n            new_func = _make_expression(determ_model, constr.func)\n            if new_func isa NonlinearExpression\n                if constr.set isa MOI.LessThan\n                    ex = :($new_func <= $(constr.set.upper))\n                elseif constr.set isa MOI.GreaterThan\n                    ex = :($new_func >= $(constr.set.lower))\n                else # assume it is MOI.EqualTo\n                    ex = :($new_func == $(constr.set.value))\n                end\n                new_cref = add_NL_constraint(determ_model, ex)\n            else\n                new_constr = build_constraint(error, new_func, constr.set)\n                new_cref = add_constraint(determ_model, new_constr, name(cref))\n            end\n            deterministic_data(determ_model).infconstr_to_detconstr[cref] = new_cref\n        end\n    end\n\n    # update the status\n    set_optimizer_model_ready(model, true)\n    return\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now we can build our optimizer model to obtain a DeterministicModel which can  be leveraged to call optimize!","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"optimize!(model)\nprint(optimizer_model(model))\n\n# output\nMin z + y[1] + y[2]\nSubject to\n 2 y[1] - z ≤ 42.0\n y[2]² = 1.5\n y[1] ≥ 0.0\n y[2] ≥ 0.0\n subexpression[1] - 0.0 ≥ 0\nWith NL expressions\n subexpression[1]: sin(z) - -1.0","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Note that better variable naming could be used with the reformulated infinite  variables. Moreover, in general extensions of build_optimizer_model!  should account for the possibility that InfiniteModel contains constraints wiht  DomainRestrictions as accessed via domain_restrictions.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Now that we have optimized out InfiniteModel via the use the of a  DeterministicModel, we probably will want to access the results. All queries  are enabled when we extend optimizer_model_variable,  optimizer_model_expression, and optimizer_model_constraint  to return the variable(s)/expression(s)/constraint(s) in the  optimizer model corresponding to their InfiniteModel counterparts. These will  use the mutable struct of mapping data and should error if no mapping can be  found, Let's continue our example using DeterministicModels:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"function InfiniteOpt.optimizer_model_variable(\n    vref::GeneralVariableRef,\n    key::Val{DetermKey}\n    )\n    model = optimizer_model(JuMP.owner_model(vref))\n    map_dict = deterministic_data(model).infvar_to_detvar\n    haskey(map_dict, vref) || error(\"Variable $vref not used in the optimizer model.\")\n    return map_dict[vref]\nend\n\nfunction InfiniteOpt.optimizer_model_expression(\n    expr::JuMP.AbstractJuMPScalar,\n    key::Val{DetermKey}\n    )\n    model = optimizer_model(JuMP.owner_model(vref))\n    return _make_expression(model, expr)\nend\n\nfunction InfiniteOpt.optimizer_model_constraint(\n    cref::InfOptConstraintRef,\n    key::Val{DetermKey}\n    )\n    model = optimizer_model(JuMP.owner_model(cref))\n    map_dict = deterministic_data(model).infconstr_to_detconstr\n    haskey(map_dict, cref) || error(\"Constraint $cref not used in the optimizer model.\")\n    return map_dict[cref]\nend","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"With these extensions we can now access all the result queries. For example:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"julia> termination_status(model)\nLOCALLY_SOLVED::TerminationStatusCode = 4\n\njulia> result_count(model)\n1\n\njulia> value.(y)\n2-element Vector{Float64}:\n 0.0\n 1.224744871391589\n\njulia> optimizer_index(z)\nMathOptInterface.VariableIndex(3)","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"note: Note\nIf optimizer_model_variable, optimizer_model_expression,  and/or optimizer_model_constraint cannot be extended due to the  nature of the reformulation then please refer to step 10 of the extension  steps listed at the beginning of this section.","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Furthermore, if appropriate for the given reformulation the following should be  extended:","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"InfiniteOpt.variable_supports to enable supports on variables)\nInfiniteOpt.expression_supports to enable supports on expressions)\nInfiniteOpt.constraint_supports to enable supports on constraints)","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"That's it!","category":"page"},{"location":"develop/extensions/#Wrapper-Packages","page":"Extensions","title":"Wrapper Packages","text":"","category":"section"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"InfiniteOpt provides a convenient modular interface for defining infinite  dimensional optimization problems, implementing many tedious JuMP extensions  such as facilitating mixed variable expressions. Thus, InfiniteOpt can serve  as a base package for specific types of infinite dimensional problems and/or  solution techniques. These extension packages can implement any of the extensions  shown above and likely will want to introduce wrapper functions and macros to  use package specific terminology (e.g., using random variables instead of  infinite variables).","category":"page"},{"location":"develop/extensions/","page":"Extensions","title":"Extensions","text":"Please reach out to us via the  discussion forum to  discuss your plans before starting this on your own.","category":"page"},{"location":"guide/domains/#infinite_domains_docs","page":"Infinite Domains","title":"Infinite Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"A guide for infinite domains in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"note: Note\nPrevious versions of InfiniteOpt referred to infinite domains as infinite  sets. Hence, all of the methods and datatypes have been updated accordingly. ","category":"page"},{"location":"guide/domains/#Basic-Usage","page":"Infinite Domains","title":"Basic Usage","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Interval domains are what characterize the behavior of infinite parameters in  InfiniteOpt, since they comprise the domains of infinite parameters. However,  most users will not need to work directly with infinite domains and can instead  focus on the use of infinite parameters as defined via @infinite_parameter  and as discussed on the Infinite Parameters page.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"However, for convenience below we summary the infinite domains associated with  InfiniteOpt:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Domain Type Domain Type\nIntervalDomain lb ub InfiniteScalarDomain\nUniDistributionDomain sim mathcalD subseteq mathbbR InfiniteScalarDomain\nMultiDistributionDomain sim mathcalD subseteq mathbbR^n InfiniteArrayDomain\nCollectionDomain Combination of Univariate Domains InfiniteArrayDomain","category":"page"},{"location":"guide/domains/#Infinite-Domain-Classes","page":"Infinite Domains","title":"Infinite Domain Classes","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"The domain of a given infinite parameter(s) is described by an infinite domain (domain)  inherited from AbstractInfiniteDomain. InfiniteOpt natively supports  two domain sub-groups, namely InfiniteScalarDomains and InfiniteArrayDomains.  These correspond to a single independent infinite parameter and a dependent multi-dimensional  group of infinite parameters, respectively. We describe each group's natively  supported domains below.","category":"page"},{"location":"guide/domains/#Univariate-Domains","page":"Infinite Domains","title":"Univariate Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Univariate infinite domains (i.e., InfiniteScalarDomains) are one-dimensional  domains (subseteq mathbbR) that describe the behavior of one single independent  infinite parameter (i.e., infinite parameters made using independent = true). The  two natively supported concrete types are IntervalDomains and UniDistributionDomains.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"IntervalDomains describe a continuous interval from some lower bound up to  some upper bound. Where the range is inclusive of the bounds. Such domains often  arise for parameters that pertain to time and/or spatial position. For example,  to define a position interval -2 2 we would use:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> domain = IntervalDomain(-2, 2)\n[-2, 2]","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Note that (semi-)infinite bounds are acceptable, as shown in the following example:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> infinite_domain = IntervalDomain(-Inf, Inf)\n[-Inf, Inf]","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"UniDistributionDomains pertain to the co-domain of a univariate distribution.  In other words, these correspond to the underlying distributions that characterize  uncertain scalar parameters. These domains are compatible with any univariate  distribution native to Distributions.jl. For example, let's make a UniDistributionDomain that depends on a Beta distribution:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> using Distributions;\n\njulia> domain = UniDistributionDomain(Beta(2,2))\nBeta{Float64}(α=2.0, β=2.0)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"User-defined distributions are also permissible so long as they are created in accordance with Distributions.jl.","category":"page"},{"location":"guide/domains/#Multivariate-Domains","page":"Infinite Domains","title":"Multivariate Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Multivariate infinite domains (i.e., [InfiniteArrayDomain])(@ref)s are multi-dimensional  domains that define the behavior of a group of dependent infinite parameters  (i.e., an array of infinite parameters where independent = false). This is a  unique feature to InfiniteOpt that enables a much richer set of possibilities  for modeling infinite domain. Natively two domain types are supported:  MultiDistributionDomains and CollectionDomains. ","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"MultiDistributionDomains correspond to the co-domain of a multi-variate  (or matrix-variate) distribution which characterizes the behavior of multi-dimensional  uncertain parameters. Again, these correspond to any appropriate distribution  defined in Distributions.jl. For example, we can make a MultiDistributionDomain  that depends on a 2D normal distribution as follows:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> using Distributions;\n\njulia> dist = MvNormal([0., 0.], [1. 0.; 0. 2.]);\n\njulia> domain = MultiDistributionDomain(dist)\nFullNormal(\ndim: 2\nμ: [0.0, 0.0]\nΣ: [1.0 0.0; 0.0 2.0]\n)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"note: Note\nThe dimensions (shape) of a chosen distribution used in an MultiDistriubtionDomain  must match those of the corresponding infinite parameter array.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Finally, CollectionDomains are a dependent collection of InfiniteScalarDomains that correspond to a group of infinite parameters that are treated dependently.  This can be useful when the user wishes to have complete control over how the  supports are generated for a group independent parameters where the default  combinatorial approach in not wanted. For example, let's make a set of IntervalDomains:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> domain = CollectionDomain([IntervalDomain(-2, 2), IntervalDomain(-1, 4)])\nCollectionDomain with 2 domains:\n [-2, 2]\n [-1, 4]","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Now we could use this domain in define a two-dimensional infinite parameter of which  we can have the freedom to define a non-combinatorial support grid.","category":"page"},{"location":"guide/domains/#Bound-Query/Modification-Methods-for-Infinite-Domains","page":"Infinite Domains","title":"Bound Query/Modification Methods for Infinite Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Once an infinite domain is created, one can query the lower bound and upper bound of the domain  similar to how one queries the bounds of a JuMP variable. Thus, the functions  JuMP.has_lower_bound, JuMP.has_upper_bound, JuMP.lower_bound, JuMP.upper_bound  are all applicable to infinite domains mentioned above. For example, for an IntervalDomain [-2, 2] we can query the bound information as follows:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> domain = IntervalDomain(-2, 2);\n\njulia> has_lower_bound(domain)\ntrue\n\njulia> has_upper_bound(domain)\ntrue\n\njulia> lower_bound(domain)\n-2.0\n\njulia> upper_bound(domain)\n2.0","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"In addition, we can also apply JuMP.set_lower_bound and JuMP.set_upper_bound  to IntervalDomains to generate a new domain with updated bounds. Note that this will not modify the original domain. For example, we can change the bounds of the set [-2, 2] as follows:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> set_lower_bound(domain, -1)\n[-1, 2]\n\njulia> set_upper_bound(domain, 1)\n[-2, 1]","category":"page"},{"location":"guide/domains/#Support-Generation-for-Infinite-Domains","page":"Infinite Domains","title":"Support Generation for Infinite Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"InfiniteOpt provides a systematic interface to generate support points for  infinite domains. This is crucial as support generation decides how each  infinite-dimensional parameter, which is subject to certain infinite domain, is  discretized later in the transcription stage. The interface will allow users to  automatically generate support points using our default methods. Later we will  also show that users can  also input support points manually for an infinite  parameter. Please note that these methods are called by the  @infinite_parameter macro when the num_supports keyword is used.  Thus, users typically will not need to use this interface directly.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"In InfiniteOpt supports can be generated via generate_supports  function. For example, let's generate 5 equidistant support points for the  IntervalDomain [-2, 2]:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> supps, label = generate_supports(domain, num_supports = 5)\n([-2.0, -1.0, 0.0, 1.0, 2.0], UniformGrid)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Note that the number of supports generated is specified via num_supports  keyword argument, which will take a default value of 10 if not specified. The  function generate_supports returns a vector of the supports generated, and a  label that denotes the underlying method. In this case the label returned is  UniformGrid, which is the default support generation method for  IntervalDomains. Another support generation method implemented for  IntervalDomains is MCSample, which is to sample from a uniform distribution  over the interval. To use this method, users need to specify a second positional  argument, as shown in the following example:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> generate_supports(domain, MCSample, num_supports = 5, sig_digits = 5)\n([1.2946, 1.6414, -1.3417, -1.2907, -0.88448], MCSample)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"In this case, the returned label is MCSample, instead of UniformGrid.","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"generate_supports can also be applied to DistributionDomains. The default  (and currently only) method implemented for DistributionDomains is  WeightedSample, which generates Monte Carlo samples that are weighted based on  the underlying probability density function of the distribution. For example, a  domain of support points for a 2D normal distribution can be generated as  follows:","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"julia> dist = MvNormal([0., 0.], [1. 0.;0. 2.]);\n\njulia> domain = MultiDistributionDomain(dist);\n\njulia> supps, label = generate_supports(domain, num_supports = 3)\n([0.679107426036 -0.353007400301 0.586617074633; 1.17155358277 -0.190712174623 0.420496392851], WeightedSample)","category":"page"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"For those who are interested in coding up their own support generation functions,  generate_supports is an interface that calls the proper  generate_support_values function based on the type of domain and value  of method. Therefore, to use custom support generation methods, users can  implement extensions for generate_support_values with a different  method label from the existing methods. See Extensions for full details.","category":"page"},{"location":"guide/domains/#User-Defined-Domains","page":"Infinite Domains","title":"User Defined Domains","text":"","category":"section"},{"location":"guide/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"Furthermore, custom infinite domains that inherit AbstractInfiniteDomain can  also be defined. See Extensions for more information.","category":"page"},{"location":"manual/constraint/#constr_manual","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"A technical manual for constraints in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/constraint/#Definition","page":"Constraints","title":"Definition","text":"","category":"section"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"Note that constraints are defined principally with  JuMP.@constraint  which originates from JuMP.jl. Below we show build methods for  DomainRestrictedConstraints, but any JuMP.AbstractConstraint can be used.","category":"page"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"DomainRestrictions\nJuMP.build_constraint(::Function, ::Any, ::Any, ::DomainRestrictions)\nDomainRestrictedConstraint\nJuMP.add_constraint(::InfiniteModel, ::JuMP.AbstractConstraint, ::String)\nConstraintData\nInfOptConstraintIndex\nInfOptConstraintRef","category":"page"},{"location":"manual/constraint/#InfiniteOpt.DomainRestrictions","page":"Constraints","title":"InfiniteOpt.DomainRestrictions","text":"DomainRestrictions{P <: GeneralVariableRef}\n\nA DataType for storing interval domains that constrain particular infinite  parameters to a subdomain relative to their full domain. This is used to define subdomains of DomainRestrictedConstraints. Note that the GeneralVariableRef must pertain to infinite parameters.\n\nThe constructor syntax is\n\nDomainRestrictions(restrictions...)\n\nwhere each argument of restrictions is one of the following forms:\n\npref => value\npref => [lb, ub]\npref => IntervalDomain(lb, ub)\nprefs => value\nprefs => [lb, ub]\nprefs => IntervalDomain(lb, ub).\n\nNote that pref and prefs must correspond to infinite parameters. \n\nFields\n\nintervals::Dict{GeneralVariableRef, IntervalDomain}: A dictionary of interval bounds on infinite parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#JuMP.build_constraint-Tuple{Function, Any, Any, DomainRestrictions}","page":"Constraints","title":"JuMP.build_constraint","text":"JuMP.build_constraint(_error::Function, func, set,\n                      restrictions::DomainRestrictions{GeneralVariableRef}\n                      )::DomainRestrictedConstraint\n\nExtend JuMP.buid_constraint to handle including restrictions to its inherit  infinite parameter domains in addition to the traditional func in set setup.  This returns a DomainRestrictedConstraint that can then  be added via JuMP.add_constraint. Errors if the restrictions are incompadible  with infinite parameter domains. \n\nExample\n\njulia> restrictions = DomainRestrictions(t => 0)\nSubdomain restrictions (1): t = 0\n\njulia> con = build_constraint(error, y + 2, MOI.LessThan(0.0), restrictions);\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.DomainRestrictedConstraint","page":"Constraints","title":"InfiniteOpt.DomainRestrictedConstraint","text":"DomainRestrictedConstraint{C <: JuMP.AbstractConstraint, \n                           P <: GeneralVariableRef\n                           } <: JuMP.AbstractConstraint\n\nA DataType for creating a constraint with enforced DomainRestrictions. For  example this may pertain to a boundary condition.\n\nFields\n\nconstraint::C: The optimization constraint.\nrestrictions::DomainRestrictions{P}: The restrictions that determine the   sub-domain of the constraint.\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#JuMP.add_constraint-Tuple{InfiniteModel, AbstractConstraint, String}","page":"Constraints","title":"JuMP.add_constraint","text":"JuMP.add_constraint(model::InfiniteModel, c::JuMP.AbstractConstraint,\n                    [name::String = \"\"])::InfOptConstraintRef\n\nExtend JuMP.add_constraint to add a constraint c to an infinite model model with name name. Returns an appropriate constraint reference whose type depends on what variables are used to define the constraint. Errors if any  variables do not belong to model. This is primarily used as an internal method for the constraint macros.\n\nExample\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @variable(model, g, Infinite(t));\n\njulia> @variable(model, x);\n\njulia> constr = build_constraint(error, g + x, MOI.EqualTo(42));\n\njulia> cref = add_constraint(model, constr, \"name\")\nname : g(t) + x = 42.0, ∀ t ∈ [0, 10]\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.ConstraintData","page":"Constraints","title":"InfiniteOpt.ConstraintData","text":"ConstraintData{C <: JuMP.AbstractConstraint} <: AbstractDataObject\n\nA mutable DataType for storing constraints and their data.\n\nFields\n\nconstraint::C: The constraint.\nobject_nums::Vector{Int}: The object numbers of the parameter objects that the                             constraint depends on.\nname::String: The name used for printing.\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nis_info_constraint::Bool: Is this is constraint based on variable info   (e.g., lower bound)\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#InfiniteOpt.InfOptConstraintIndex","page":"Constraints","title":"InfiniteOpt.InfOptConstraintIndex","text":"InOptConstraintIndex <: ObjectIndex\n\nA DataType for storing the index of a constraint.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#InfiniteOpt.InfOptConstraintRef","page":"Constraints","title":"InfiniteOpt.InfOptConstraintRef","text":"InfOptConstraintRef\n\nA DataType for constraints that are in InfiniteModels\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::InfOptConstraintIndex: Index of the constraint in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/constraint/#Queries","page":"Constraints","title":"Queries","text":"","category":"section"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"JuMP.owner_model(::InfOptConstraintRef)\nJuMP.index(::InfOptConstraintRef)\nJuMP.constraint_object(::InfOptConstraintRef)\nJuMP.name(::InfOptConstraintRef)\nJuMP.constraint_by_name(::InfiniteModel, ::String)\nJuMP.list_of_constraint_types(::InfiniteModel)\nJuMP.num_constraints(::InfiniteModel, ::Any, ::Any)\nJuMP.all_constraints(::InfiniteModel, ::Any, ::Any)\nJuMP.is_valid(::InfiniteModel, ::InfOptConstraintRef)\nparameter_refs(::InfOptConstraintRef)\nhas_domain_restrictions\ndomain_restrictions\nJuMP.normalized_rhs(::InfOptConstraintRef)\nJuMP.normalized_coefficient(::InfOptConstraintRef, ::GeneralVariableRef)","category":"page"},{"location":"manual/constraint/#JuMP.owner_model-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.owner_model","text":"JuMP.owner_model(cref::InfOptConstraintRef)::InfiniteModel\n\nExtend JuMP.owner_model to return the infinite model associated with cref.\n\nExample\n\njulia> model = owner_model(cref)\nAn InfiniteOpt Model\nMinimization problem with:\nFinite Parameters: 0\nInfinite Parameters: 3\nVariables: 3\nDerivatives: 0\nMeasures: 0\nObjective function type: GeneralVariableRef\n`GenericAffExpr{Float64,GeneralVariableRef}`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\nNames registered in the model: g, t, h, x\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.index-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.index","text":"JuMP.index(cref::InfOptConstraintRef)::InfOptConstraintIndex\n\nExtend JuMP.index to return the index of an InfiniteOpt constraint cref.\n\nExample\n\njulia> index(cref)\nInfOptConstraintIndex(2)\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.constraint_object-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.constraint_object","text":"JuMP.constraint_object(cref::InfOptConstraintRef)::JuMP.AbstractConstraint\n\nExtend JuMP.constraint_object to return the constraint object associated with  cref.\n\nExample\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @variable(model, x <= 1);\n\njulia> cref = UpperBoundRef(x);\n\njulia> obj = constraint_object(cref)\nScalarConstraint{GeneralVariableRef,MathOptInterface.LessThan{Float64}}(x,\nMathOptInterface.LessThan{Float64}(1.0))\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.name-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.name","text":"JuMP.name(cref::InfOptConstraintRef)::String\n\nExtend JuMP.name to return the name of an InfiniteOpt constraint.\n\nExample\n\njulia> name(cref)\n\"constr_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.constraint_by_name-Tuple{InfiniteModel, String}","page":"Constraints","title":"JuMP.constraint_by_name","text":"JuMP.constraint_by_name(model::InfiniteModel,\n                        name::String)::Union{InfOptConstraintRef, Nothing}\n\nExtend JuMP.constraint_by_name to return the constraint reference associated with name if one exists or returns nothing. Errors if more than one constraint uses the same name.\n\nExample\n\njulia> constraint_by_name(model, \"constr_name\")\nconstr_name : x + pt = 3.0\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.list_of_constraint_types-Tuple{InfiniteModel}","page":"Constraints","title":"JuMP.list_of_constraint_types","text":"JuMP.list_of_constraint_types(model::InfiniteModel)::Vector{Tuple{DataType, DataType}}\n\nExtend JuMP.list_of_constraint_types to return a list of tuples that contain  all the used combinations of function types and set types in the model.\n\nExample\n\njulia> all_constraints(model)\n3-element Array{Tuple{DataType,DataType},1}:\n (GeneralVariableRef, MathOptInterface.LessThan{Float64})\n (GeneralVariableRef, MathOptInterface.GreaterThan{Float64})\n (GeneralVariableRef, MathOptInterface.Integer)\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.num_constraints-Tuple{InfiniteModel, Any, Any}","page":"Constraints","title":"JuMP.num_constraints","text":"JuMP.num_constraints(model::InfiniteModel, [function_type], [set_type])::Int\n\nExtend JuMP.num_constraints to return the number of constraints with a  partiuclar function type and set type.\n\nExample\n\njulia> num_constraints(model, FiniteVariableRef, MOI.LessThan)\n1\n\njulia> num_constraints(model, FiniteVariableRef)\n3\n\njulia> num_constraints(model, MOI.LessThan)\n2\n\njulia> num_constraints(model)\n4\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.all_constraints-Tuple{InfiniteModel, Any, Any}","page":"Constraints","title":"JuMP.all_constraints","text":"JuMP.all_constraints(model::InfiniteModel, [function_type], [set_type])::Vector{InfOptConstraintRef}\n\nExtend JuMP.all_constraints to return a list of all the constraints with a  particular function type and set type.\n\nExample\n\njulia> all_constraints(model, GeneralVariableRef, MOI.LessThan)\n1-element Array{InfOptConstraintRef,1}:\n x ≤ 1.0\n\njulia> all_constraints(model, GeneralVariableRef)\n3-element Array{InfOptConstraintRef,1}:\n x ≥ 0.0\n x ≤ 3.0\n x integer\n\njulia> all_constraints(model, MOI.GreaterThan)\n3-element Array{InfOptConstraintRef,1}:\n x ≥ 0.0\n g(t) ≥ 0.0, ∀ t ∈ [0, 6]\n g(0.5) ≥ 0.0\n\njulia> all_constraints(model)\n5-element Array{InfOptConstraintRef,1}:\n x ≥ 0.0\n x ≤ 3.0\n x integer\n g(t) ≥ 0.0, ∀ t ∈ [0, 6]\n g(0.5) ≥ 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.is_valid-Tuple{InfiniteModel, InfOptConstraintRef}","page":"Constraints","title":"JuMP.is_valid","text":"JuMP.is_valid(model::InfiniteModel, cref::InfOptConstraintRef)::Bool\n\nExtend JuMP.is_valid to return Bool whether an InfiniteOpt constraint  reference is valid.\n\nExample\n\njulia> is_valid(model, cref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.parameter_refs-Tuple{InfOptConstraintRef}","page":"Constraints","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(cref::InfOptConstraintRef)::Tuple\n\nReturn the tuple of infinite parameter references that determine the infinite dependencies of cref.\n\nExample\n\njulia> parameter_refs(cref)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.has_domain_restrictions","page":"Constraints","title":"InfiniteOpt.has_domain_restrictions","text":"has_domain_restrictions(cref::InfOptConstraintRef)::Bool\n\nReturn a Bool indicating if cref is limited to a sub-domain as defined by a DomainRestrictions object.\n\nExample\n\njulia> has_domain_restrictions(cref)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#InfiniteOpt.domain_restrictions","page":"Constraints","title":"InfiniteOpt.domain_restrictions","text":"domain_restrictions(cref::InfOptConstraintRef)::DomainRestrictions{GeneralVariableRef}\n\nReturn the DomainRestrictions object associated with the constraint cref.\n\nExample\n\njulia> domain_restrictions(cref)\nSubdomain restrictions (1): t ∈ [0, 2]\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#JuMP.normalized_rhs-Tuple{InfOptConstraintRef}","page":"Constraints","title":"JuMP.normalized_rhs","text":"JuMP.normalized_rhs(cref::InfOptConstraintRef)::Float64\n\nReturn the right-hand side term of cref after JuMP has converted the constraint into its normalized form.\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.normalized_coefficient-Tuple{InfOptConstraintRef, GeneralVariableRef}","page":"Constraints","title":"JuMP.normalized_coefficient","text":"JuMP.normalized_coefficient(cref::InfOptConstraintRef,\n                            variable::GeneralVariableRef)::Float64\n\nReturn the coefficient associated with variable in constraint after JuMP has normalized the constraint into its standard form.\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#Modification","page":"Constraints","title":"Modification","text":"","category":"section"},{"location":"manual/constraint/","page":"Constraints","title":"Constraints","text":"JuMP.set_name(::InfOptConstraintRef, ::String)\nset_domain_restrictions\nadd_domain_restrictions\ndelete_domain_restrictions\nJuMP.set_normalized_rhs(::InfOptConstraintRef, ::Real)\nJuMP.add_to_function_constant(::InfOptConstraintRef, ::Real)\nJuMP.set_normalized_coefficient(::InfOptConstraintRef, ::GeneralVariableRef, ::Real)\nJuMP.delete(::InfiniteModel, ::InfOptConstraintRef)","category":"page"},{"location":"manual/constraint/#JuMP.set_name-Tuple{InfOptConstraintRef, String}","page":"Constraints","title":"JuMP.set_name","text":"JuMP.set_name(cref::InfOptConstraintRef, name::String)::Nothing\n\nExtend JuMP.set_name to specify the name of a constraint cref.\n\nExample\n\njulia> set_name(cref, \"new_name\")\n\njulia> name(cref)\n\"new_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#InfiniteOpt.set_domain_restrictions","page":"Constraints","title":"InfiniteOpt.set_domain_restrictions","text":"set_domain_restrictions(cref::InfOptConstraintRef,\n                     restrictions:DomainRestrictions{GeneralVariableRef};\n                     [force::Bool = false])::Nothing\n\nSpecify a new DomainRestrictions object restrictions for the  constraint cref. Errors if cref already has restrictions and force = false.  Where possible it is recommended to use add_domain_restrictions instead.  \n\nExample\n\njulia> set_domain_restrictions(cref, DomainRestrictions(t => [0, 2]))\n\njulia> domain_restrictions(cref)\nSubdomain restrictions (1): t ∈ [0, 2]\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#InfiniteOpt.add_domain_restrictions","page":"Constraints","title":"InfiniteOpt.add_domain_restrictions","text":"add_domain_restrictions(cref::InfOptConstraintRef,\n                     new_restrictions::DomainRestrictions{GeneralVariableRef}\n                     )::Nothing\n\nAdd additional domain restrictions to cref such that it is defined over the sub-domain based on pref from lower to upper.\n\njulia> add_domain_restrictions(cref, DomainRestrictions(t => [0, 2]))\n\njulia> domain_restrictions(cref)\nSubdomain restrictions (1): t ∈ [0, 2]\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#InfiniteOpt.delete_domain_restrictions","page":"Constraints","title":"InfiniteOpt.delete_domain_restrictions","text":"delete_domain_restrictions(cref::InfOptConstraintRef)::Nothing\n\nDelete all the domain restrictions of the constraint cref. Note any restrictions that are needed for finite variables inside in cref will be unaffected.\n\nExample\n\njulia> @constraint(model, c1, y <= 42, DomainRestrictions(x => 0))\nc1 : y(x) ≤ 42, ∀ x[1] = 0, x[2] = 0\n\njulia> delete_domain_restrictions(c1)\n\njulia> c1\nc1 : y(x) ≤ 42, ∀ x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]\n\n\n\n\n\n","category":"function"},{"location":"manual/constraint/#JuMP.set_normalized_rhs-Tuple{InfOptConstraintRef, Real}","page":"Constraints","title":"JuMP.set_normalized_rhs","text":"JuMP.set_normalized_rhs(cref::InfOptConstraintRef, value::Real)::Nothing\n\nSet the right-hand side term of constraint to value. Note that prior to this step, JuMP will aggregate all constant terms onto the right-hand side of the constraint. For example, given a constraint 2x + 1 <= 2, set_normalized_rhs(con, 4) will create the constraint 2x <= 4, not 2x + 1 <= 4.\n\njulia> @constraint(model, con, 2x + 1 <= 2)\ncon : 2 x ≤ 1.0\n\njulia> set_normalized_rhs(con, 4)\n\njulia> con\ncon : 2 x ≤ 4.0\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.add_to_function_constant-Tuple{InfOptConstraintRef, Real}","page":"Constraints","title":"JuMP.add_to_function_constant","text":"JuMP.add_to_function_constant(cref::InfOptConstraintRef, value::Real)::Nothing\n\nAdd value to the function constant term. Note that for scalar constraints, JuMP will aggregate all constant terms onto the right-hand side of the constraint so instead of modifying the function, the set will be translated by -value. For example, given a constraint 2x <= 3, add_to_function_constant(c, 4) will modify it to 2x <= -1. ```\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.set_normalized_coefficient-Tuple{InfOptConstraintRef, GeneralVariableRef, Real}","page":"Constraints","title":"JuMP.set_normalized_coefficient","text":"JuMP.set_normalized_coefficient(cref::InfOptConstraintRef,\n                                variable::GeneralVariableRef,\n                                value::Real)::Nothing\n\nSet the coefficient of variable in the constraint constraint to value. Note that prior to this step, JuMP will aggregate multiple terms containing the same variable. For example, given a constraint 2x + 3x <= 2, set_normalized_coefficient(con, x, 4) will create the constraint 4x <= 2.\n\njulia> con\ncon : 5 x ≤ 2.0\n\njulia> set_normalized_coefficient(con, x, 4)\n\njulia> con\ncon : 4 x ≤ 2.0\n\n\n\n\n\n","category":"method"},{"location":"manual/constraint/#JuMP.delete-Tuple{InfiniteModel, InfOptConstraintRef}","page":"Constraints","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, cref::InfOptConstraintRef)::Nothing\n\nExtend JuMP.delete to delete an InfiniteOpt constraint and all associated  information. Errors if cref is invalid.\n\nExample\n\njulia> print(model)\nMin measure(g(t)*t) + z\nSubject to\n z ≥ 0.0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n\njulia> delete(model, cref)\n\njulia> print(model)\nMin measure(g(t)*t) + z\nSubject to\n z ≥ 0.0\n\n\n\n\n\n","category":"method"},{"location":"guide/model/#infinite_model_docs","page":"Infinite Models","title":"Infinite Models","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"A guide for creating infinite models and understanding how they work. See the  respective technical manual for more details.","category":"page"},{"location":"guide/model/#Overview","page":"Infinite Models","title":"Overview","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Infinite models are expressed via the InfiniteModel datatype which is at the core of InfiniteOpt. These model objects are designed to emulate the behavior of Model  objects in JuMP. These data objects store the parameters, variables, measures, objective, constraints, and all other data used in InfiniteOpt. This differs from JuMP models which store such information in a MathOptInterface model backend.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"note: Note\nInfiniteOpt's InfiniteModels are intended to be used for  infinite-dimensional optimization problems. Finite problems (e.g.,  directly modeling a discrete time model) should instead be modeled using  Model's in JuMP.","category":"page"},{"location":"guide/model/#Basic-Usage","page":"Infinite Models","title":"Basic Usage","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Infinite models can be initialized with no arguments by default:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt\n\njulia> model = InfiniteModel()\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"The optimizer that will be used to solve the model can also be specified at model definition:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt, Ipopt\n\njulia> model = InfiniteModel(Ipopt.Optimizer)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Note that any optimizer currently supported by JuMP v0.19.0 or newer is supported for use in InfiniteOpt. For completeness, the table of currently supported optimizers is provided below in Supported Optimizers.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"We can also specify optimizer attributes via optimizer_with_attributes which allows us to append as many attributes as we like, for example:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt, Ipopt\n\njulia> model = InfiniteModel(optimizer_with_attributes(Ipopt.Optimizer,\n                                                       \"output_level\" => 0))\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Now you have an initialized InfiniteModel that is ready for your mathematical model to be defined and optimized!","category":"page"},{"location":"guide/model/#Advanced-Definition-Information","page":"Infinite Models","title":"Advanced Definition Information","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"As you may have noticed in the above examples, InfiniteModels contain an optimizer model backend which simply corresponds to a JuMP.Model that will be used to store and optimize the reformulation of the infinite mathematical model stored in InfiniteModel. It also will contain a mapping between its optimization model and that of the InfiniteModel (e.g., a mapping between the variables and constraints). By default, InfiniteModels use a TranscriptionModel optimizer model backend which will store a transcribed (discretized) version of the infinite model. More information on the internal use of TranscriptionModels is provided in Model Transcription.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"All the arguments used with the InfiniteModel constructor (e.g., the optimizer) are simply passed on and stored in the optimizer model backend. Thus, any argument supported by JuMP.Model can be passed on to the optimizer model by including it in the InfiniteModel constructor. For example, we can specify the caching_mode keyword argument in the InfiniteModel call to use in the definition of the optimizer model:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt, Ipopt\n\njulia> model = InfiniteModel(Ipopt.Optimizer,\n                             caching_mode = MOIU.MANUAL)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: MANUAL\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Notice that the model mode of the optimizer model is now MANUAL.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Moreover, alternative optimizer model types (i.e., not a TranscriptionModel) can be  specified via the OptimizerModel keyword argument when initializing the  InfiniteModel. Thus, to redundantly specify a TranscriptionModel we would call:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> using InfiniteOpt\n\njulia> model = InfiniteModel(OptimizerModel = TranscriptionModel)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"More information on implementing custom optimizer models is located on the  Extensions page.","category":"page"},{"location":"guide/model/#Supported-Optimizers","page":"Infinite Models","title":"Supported Optimizers","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"InfiniteOpt can use any optimizer that is supported by JuMP v0.19.0 or newer  (i.e., has a MathOptInterface implementation). Please refer to JuMP's current solver documentation  to learn what solvers are supported and how to install them.","category":"page"},{"location":"guide/model/#Object-Dictionaries","page":"Infinite Models","title":"Object Dictionaries","text":"","category":"section"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Like JuMP.Models, InfiniteModels register the name symbols of macro defined  objects. This enables us to access such objects by indexing the InfiniteModel  with the appropriate symbol. This is particularly useful for function defined  models. For example:","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"julia> function make_model(num_supports)\n        model = InfiniteModel()\n        @infinite_parameter(model, t ∈ [0, 10], num_supports = num_supports)\n        @variable(model, y >= 42, Infinite(t))\n        @objective(model, Min, ∫(y, t))\n        return model\n       end\nmake_model (generic function with 1 method)\n\njulia> model1 = make_model(2); model2 = make_model(4);\n\njulia> y1 = model1[:y]\ny(t)","category":"page"},{"location":"guide/model/","page":"Infinite Models","title":"Infinite Models","text":"Note that when macro defined objects are deleted from an InfiniteModel that the  corresponding symbols in the object dictionary are not removed by default. This  can be accomplished by use of  JuMP.unregister  (please click on its link for usage information).","category":"page"},{"location":"guide/finite_parameter/#finite_param_docs","page":"Finite Parameters","title":"Finite Parameters","text":"","category":"section"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"A guide for the definition and use of finite parameters in InfiniteOpt. See  the respective technical manual for more details.","category":"page"},{"location":"guide/finite_parameter/#Overview","page":"Finite Parameters","title":"Overview","text":"","category":"section"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"Often a mathematical model needs to be optimized several times in accordance with a set of fixed parameter values. In such cases, it is typically preferable to modify these values in place without having to redefine the entire model. This ability is provided in InfiniteOpt via @finite_parameter which permits users to define finite parameters whose values can later be modified as needed. Furthermore, at the optimization step these parameters are replaced with their numeric values. Thus, not adding unnecessary decision variables as is typically done in JuMP models using JuMP.fix on placeholder variables.  ","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"note: Note\nThe syntax of @finite_parameter has changed with from previous  versions for enhanced long term support. Please consult the documentation  below for the updated syntax.","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"warning: Warning\nIn some cases, using @finite_parameter can unexpectedly make  the underlying JuMP model contain nonlinear constraints/objectives. This  occurs when a quadratic expression is mutliplied by a finite parameter  (making a NLPExpr):julia> model = InfiniteModel(); @variable(model, z); @finite_parameter(model, p == 2);\n\njulia> @objective(model, Min,  p * z^2) # becomes a nonlinear objective \np * (z²)In these cases, a nonlinear solver like Ipopt should be used or the  finite parameter syntax should be avoided if a quadratic solver like  Gurobi is needed.","category":"page"},{"location":"guide/finite_parameter/#Basic-Usage","page":"Finite Parameters","title":"Basic Usage","text":"","category":"section"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"Once an InfiniteModel model has been defined we can add a finite parameter via @finite_parameter. For example, let's define a maximum cost parameter called max_cost with an initial value of 42:","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"julia> @finite_parameter(model, max_cost == 42)\nmax_cost","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"Notice that a Julia variable called max_cost is returned that contains a GeneralVariableRef that points to the finite parameter we have just created. An array of parameters can also be defined following standard JuMP macro syntax:","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"julia> values = [2, 3.2, 1];\n\njulia> @finite_parameter(model, params[i = 1:3] == values[i])\n3-element Vector{GeneralVariableRef}:\n params[1]\n params[2]\n params[3]","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"The @finite_parameter macro emulates all typical JuMP functionality and can define anonymous parameters, use JuMP containers and more. We refer to its documentation below to learn more. Once a finite parameter is defined the corresponding GeneralVariableRef can be used in expressions, objectives, measures, and constraints just like infinite parameters.","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"The value of a finite parameter can be checked using parameter_value and can modified using set_value. For example, let's update the value of max_cost to be now be 10.2:","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"julia> parameter_value(max_cost)\n42.0\n\njulia> set_value(max_cost, 10.2)\n\njulia> parameter_value(max_cost)\n10.2","category":"page"},{"location":"guide/finite_parameter/#Advanced-Details","page":"Finite Parameters","title":"Advanced Details","text":"","category":"section"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"The ability to implement finite parameters stems from its ability to support  mixed variable types using by using the GeneralVariableRef buffer. As such,  finite parameters will be treated as variables until the model is transcribed.  For example, this means that the expression max_cost * x will be treated as a  quadratic expression when it is expressed in its InfiniteOpt form, however it is  converted into the appropriate affine expression when transcripted. ","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"note: Note\nIn previous versions finite parameters were just special cases of infinite  parameters. However, they now have their own distinct underlying data structure. ","category":"page"},{"location":"guide/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"warning: Warning\nInfiniteOpt's implementation of finite parameters should not be a reason to  use InfiniteOpt to model non-infinite-dimensional problems, since the added  overhead will make it slower than just iteratively building JuMP models. For  this behavior, we recommend looking into using ParameterJuMP.","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"DocTestFilters = [r\"E|𝔼\", r\"integral|∫\"]","category":"page"},{"location":"guide/objective/#obj_docs","page":"Objectives","title":"Objectives","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"A guide specifying and modifying objective functions in InfiniteOpt. See the  respective technical manual for more details.","category":"page"},{"location":"guide/objective/#Overview","page":"Objectives","title":"Overview","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Naturally, objective functions serve as a key aspect of optimization problems in  general and this is certainly the case with infinite dimensional ones. In  InfiniteOpt objectives are defined in much the same way they are in JuMP.  One key idea to keep in mind is that the objective must evaluate to a finite  expression. Note this means that objectives can only explicitly contain  finite variables and point variables. Infinite expressions must be evaluated in a  measure to be included (e.g., evaluate the expectation of a random variable).","category":"page"},{"location":"guide/objective/#obj_basic","page":"Objectives","title":"Basic Usage","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Principally, the objective function is specified via  @objective  as is done in JuMP. For example, let's define the stochastic objective to  minimize 05 x_1 + 05 x_2 + mathbbE_xi y^2 - y:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> @infinite_parameter(model, ξ ~ Normal())\nξ\n\njulia> @variable(model, y, Infinite(ξ))\ny(ξ)\n\njulia> @variable(model, x[1:2])\n2-element Vector{GeneralVariableRef}:\n x[1]\n x[2]\n\njulia> @objective(model, Min, 0.5x[1] + 0.5x[2] + 𝔼(y^2 - y, ξ))\n0.5 x[1] + 0.5 x[2] + 𝔼{ξ}[y(ξ)² - y(ξ)]","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Thus, we have defined an objective using InfiniteOpt's straightforward syntax.  Note that the second argument indicates the objective sense which can be  expressed Min for minimization problems and Max for maximization problems.  The objective function (expression) must be finite containing only finite variables,  point variables, and/or measures. Also, any included measures must fully  integrate over all the infinite parameters contained in its input function.  For example, if we define had an infinite variable z(ξ, t) then the measure  𝔼(z, ξ) could not be included since the resulting expression would still  be infinite with respect to t. However, adding a measure for t would result  in a valid object to add to an objective: ∫(𝔼(z, ξ), t).","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"note: Note\nNonlinear objectives are defined simply by using @objective and not  using JuMP.@NLobjective. See Nonlinear Expressions for  more information. ","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Now we can add objectives to our infinite models. For more detailed information,  please review the information below.  ","category":"page"},{"location":"guide/objective/#Queries","page":"Objectives","title":"Queries","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"This section will highlight the available methods for extracting objective  information. These are all derived from extensions to JuMP functions and thus  follow syntax.","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Principally, these methods correspond to  objective_sense,  objective_function, and  objective_function_type  which return the objective sense (a subtype of MOI.OptimizationSense), the  objective function (expression), and the objective function type, respectively.  These methods are demonstrated in accordance with the example presented above in  the Basic Usage section:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> objective_sense(model)\nMIN_SENSE::OptimizationSense = 0\n\njulia> objective_function(model)\n0.5 x[1] + 0.5 x[2] + 𝔼{ξ}[y(ξ)² - y(ξ)]\n\njulia> objective_function_type(model)\nGenericAffExpr{Float64, GeneralVariableRef}","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"The objective sense can be one of three possibilities: MIN_SENSE, MAX_SENSE,  or FEASIBILITY_SENSE. The later sense applies to models that contain no  objective function.","category":"page"},{"location":"guide/objective/#Modification","page":"Objectives","title":"Modification","text":"","category":"section"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"This section will review the methods that can be used to modify the objective.  First, we'll consider the useful  set_objective_coefficient  method and then we'll explain the methods that enable @objective.","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"The coefficient of a particular variable in an objective can be readily updated  via set_objective_coefficient.  This is useful repeatedly optimizing an infinite model with varied objective  coefficients (e.g., varied tradeoff parameters). For example, let's consider  updating the coefficient of x[1] in the previous example from 0.5 to 0.25:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> set_objective_coefficient(model, x[1], 0.25)\n\njulia> objective_function(model)\n0.25 x[1] + 0.5 x[2] + 𝔼{ξ}[y(ξ)² - y(ξ)]","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Now let's consider the modification methods that enable the @objective macro.  The objective function is specified via  set_objective_function  which simply updates the expression stored in the objective. For example,  let's update out objective to simply be 05x_1 + 05x_2:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> set_objective_function(model, 0.5x[1] + 0.5x[2])\n\njulia> objective_function(model)\n0.5 x[1] + 0.5 x[2]","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"The objective sense is updated via  set_objective_sense  which can specify the sense as one of the MOI.OptimizationSense subtypes. For  example, let's change the current objective to be maximization problem:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> set_objective_sense(model, MOI.MAX_SENSE)\n\njulia> objective_sense(model)\nMAX_SENSE::OptimizationSense = 1","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"The above 2 methods are both called via  set_objective.  This is the function that enables @objective behind the scenes. Thus, the  previous 2 examples could have been implemented equivalently in the following  ways:","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"julia> set_objective(model, MOI.MAX_SENSE, 0.5x[1] + 0.5x[2])\n\njulia> @objective(model, Max, 0.5x[1] + 0.5x[2])\n0.5 x[1] + 0.5 x[2]","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"Notice that @objective offers a more intuitive syntax and is also  more efficient at parsing expressions.","category":"page"},{"location":"guide/objective/","page":"Objectives","title":"Objectives","text":"note: Note\nWhen possible, the  @objective  since it is more stable and efficient than the set_objective_[aspect]  methods due to its enhanced methodology for parsing expressions.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"DocTestFilters = [r\"≥|>=\", r\" == | = \", r\" ∈ | in \", r\"MathOptInterface|MOI\",\n                  r\" for all | ∀ \", r\"[0-9\\.]+.*\"]","category":"page"},{"location":"guide/result/#result_docs","page":"Results","title":"Results","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"A guide for querying optimized InfiniteOpt models. See the respective  technical manual for more details.","category":"page"},{"location":"guide/result/#Overview","page":"Results","title":"Overview","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"So far we have covered defining, transforming, and optimizing InfiniteModels.  Now comes the point to extract information from our optimized model. This is done  following extended versions of JuMPs querying functions in combination with  the mapping information stored in the optimizer model. Thus, this page will  walk through the use of these result query functions.","category":"page"},{"location":"guide/result/#Basic-Usage","page":"Results","title":"Basic Usage","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Let's revisit the example from the optimization page to get us started:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> using InfiniteOpt, Ipopt;\n\njulia> model = InfiniteModel(Ipopt.Optimizer);\n\njulia> set_optimizer_attribute(model, \"print_level\", 0);\n\njulia> @infinite_parameter(model, t in [0, 10], num_supports = 10);\n\njulia> @variable(model, y >= 0, Infinite(t));\n\njulia> @variable(model, z >= 0);\n\njulia> @objective(model, Min, 2z);\n\njulia> @constraint(model, c1, z >= y);\n\njulia> @constraint(model, c2, y(0) == 42);\n\njulia> print(model)\nMin 2 z\nSubject to\n y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n z ≥ 0.0\n c1 : z - y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n y(0) ≥ 0.0\n c2 : y(0) = 42.0\n\njulia> optimize!(model)\n","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Now that the model has been optimized, let's find out what happened. To determine  why the optimizer stopped, we can use  termination_status to report the corresponding MathOptInterface  termination code (possible codes are explained  here.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> termination_status(model)\nLOCALLY_SOLVED::TerminationStatusCode = 4","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Here we see that our model was locally solved via Ipopt and that is why it  stopped. Furthermore, we can query the primal and dual problem optimalities via  primal_status and  dual_status, respectively.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> primal_status(model)\nFEASIBLE_POINT::ResultStatusCode = 1\n\njulia> dual_status(model)\nFEASIBLE_POINT::ResultStatusCode = 1","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"The possible statuses are detailed here.  These results are useful in knowing if information can be drawn from the primal  and/or dual and what it means. We can also verify that we indeed have answers  via has_values which indicates if our model has optimized variable  values.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> has_values(model)\ntrue","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"And indeed we do have values.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Now we can query the objective value via objective_value which reports the optimal objective value.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> objective_value(model)\n83.99999998250514","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Great now we can inquire about variable values via  value. First, let's retrieve the value of z:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> value(z)\n41.99999999125257","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We get a single value since z is a FiniteVariable and therefore finite. Now  let's retrieve the \"value\" of y(t) which is infinite with respect to t:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> value(y)\n10-element Vector{Float64}:\n 42.0\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495\n 20.999999995620495","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Notice here we obtain an array of values since these correspond to the  transcribed finite (discretized) variables used to solve the problem. We obtain  the corresponding support (discretized t) values via supports:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> supports(y)\n10-element Vector{Tuple}:\n (0.0,)\n (1.11111111111,)\n (2.22222222222,)\n (3.33333333333,)\n (4.44444444444,)\n (5.55555555556,)\n (6.66666666667,)\n (7.77777777778,)\n (8.88888888889,)\n (10.0,)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"There is 1-to-1 correspondence between these supports and the values reported  above. Note that these are stored in tuples to facilitate multiple infinite  parameter dependencies.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\nThe values for an array of variables is obtained via the vectorized call  of value following the syntax:value.(::AbstractArray{<:GeneralVariableRef})This also holds true for many other methods in InfiniteOpt. For example,  adding the dot also vectorizes dual and set_binary.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We can also query the dual of a constraint via  dual if a model has duals available as indicated by has_duals:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> has_duals(model)\ntrue\n\njulia> dual(c1)\n10-element Vector{Float64}:\n 1.9999999988666093\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"c1 is an infinite constraint and thus we obtain the duals of its transcribed  versions. The underlying infinite parameter(s) and support values are queried  via parameter_refs and supports:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> parameter_refs(c1)\n(t,)\n\njulia> supports(c1)\n10-element Vector{Tuple}:\n (0.0,)\n (1.11111111111,)\n (2.22222222222,)\n (3.33333333333,)\n (4.44444444444,)\n (5.55555555556,)\n (6.66666666667,)\n (7.77777777778,)\n (8.88888888889,)\n (10.0,)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"These again all have a 1-to-1 correspondence.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\nIn the case that our variables/constraints depend on multiple infinite  parameter it is typically convenient to add the keyword statement  ndarray = true when calling any variable/constraint queries (e.g., value  and dual). This will reformat the output vector into a n-dimensional array  whose dimensions correspond to the supports of the infinite parameters. ","category":"page"},{"location":"guide/result/#Termination-Queries","page":"Results","title":"Termination Queries","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Termination queries are those that question about how the infinite model was  solved and what its optimized state entails. Programmatically, such queries on  the InfiniteModel are simply routed to its optimizer model.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"The commonly used queries include termination_status,  primal_status, dual_status, objective_value, result_count, and solve_time. The first four are well  exemplified in the Basic Usage section above and are helpful in quickly  understanding the optimality status of a given model following the many possible  statuses reported by MathOptInterface which are documented  here.  We use result_count to determine how many solutions are recorded in the  optimizer.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> result_count(model)\n1","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"This is useful since it informs what results there are which can be specified  via the result keyword argument in many methods such as primal_status,  dual_status, objective_value, value, dual, and more.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We use solve_time to determine the time in seconds used by the optimizer until  it terminated its search.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> solve_time(model)\n0.004999876022338867","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Note that this query might not be supported with all solvers.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"The above status queries are designed to report information in a consistent  format irrespective of the chosen optimizer. However, raw_status will  provide the optimality status verbatim as reported by the optimizer. Thus,  following our example with Ipopt we obtain:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> raw_status(model)\n\"Solve_Succeeded\"","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Also, we obtain the best objective bound via objective_bound which  becomes particularly useful solutions that are suboptimal. However, this method  is not supported by all optimizers and in this case Ipopt is one such optimizer.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Finally, we get the best dual objective value via dual_objective_value  if the optimizer supplies this information which again Ipopt does not.","category":"page"},{"location":"guide/result/#Variable-Queries","page":"Results","title":"Variable Queries","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Information about the optimized variables is gathered consistently in comparison  to typical JuMP models. With InfiniteModels this is done by querying the  optimizer model and using its stored variable mappings to return the correct  information. Thus, here the queries are extended to work with the specifics of  the optimizer model to return the appropriate info.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\nLike supports the all variable based query methods below also employ the  label::Type{AbstractSupportLabel} = PublicLabel keyword argument that by  default will return the desired information associated with public  supports. The full set (e.g., ones corresponding to internal collocation nodes)  is obtained via label = All.\nThese methods also employ the ndarray::Bool keyword argument that will cause the  output to be formatted as a n-dimensional array where the dimensions  correspond to the infinite parameter dependencies. For example, if we have an  infinite variable y(t, ξ) and we invoke a query method with ndarray = true  then we'll get a matrix whose dimensions correspond to the supports of t and  ξ, respectively. Also, if ndarray = true then label correspond to the  intersection of supports labels in contrast to its default of invoking the union  of the labels.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"First, we should verify that the optimized model in fact has variable values  via has_values. In our example, we have:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> has_values(model)\ntrue","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"So we have values readily available to be extracted.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Now value can be used to query the  values as shown above in the Basic Usage section. This works by calling the  appropriate map_value defined by the optimizer  model. By default this, employs the map_value fallback which uses  optimizer_model_variable to do the mapping. Details on how to extend these  methods for user-defined optimizer models is explained on the Extensions page.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We also, support call to value that use an expression of variables as input.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Finally, the optimizer index of a variable is queried via  optimizer_index which  reports back the index of the variable as used in the MathOptInterface  backend:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> optimizer_index(z)\nMathOptInterface.VariableIndex(1)\n\njulia> optimizer_index(y)\n10-element Vector{MathOptInterface.VariableIndex}:\n MathOptInterface.VariableIndex(2)\n MathOptInterface.VariableIndex(3)\n MathOptInterface.VariableIndex(4)\n MathOptInterface.VariableIndex(5)\n MathOptInterface.VariableIndex(6)\n MathOptInterface.VariableIndex(7)\n MathOptInterface.VariableIndex(8)\n MathOptInterface.VariableIndex(9)\n MathOptInterface.VariableIndex(10)\n MathOptInterface.VariableIndex(11)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"As noted previously, an array is returned for y(t) in accordance with its  transcription variables. In similar manner to value, this is enabled by  appropriate versions of map_optimizer_index.","category":"page"},{"location":"guide/result/#Constraint-Queries","page":"Results","title":"Constraint Queries","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Like variables, a variety of information can be queried about constraints.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\nLike supports the all constraint query methods below also employ the  label::Type{AbstractSupportLabel} = PublicLabel keyword argument that by  default will return the desired information associated with public  supports. The full set (e.g., ones corresponding to internal collocation nodes)  is obtained via label = All.\nThese methods also employ the ndarray::Bool keyword argument that will cause the  output to be formatted as a n-dimensional array where the dimensions  correspond to the infinite parameter dependencies. For example, if we have an  infinite constraint that depends on t and ξ) and we invoke a query method  with ndarray = true then we'll get a matrix whose dimensions correspond to  the supports of t and ξ, respectively. Also, if ndarray = true then  label correspond to the intersection of supports labels in contrast to its  default of invoking the union of the labels.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"First, recall that constraints are stored in the form function-in-set where  generally function contains the variables and coefficients and the set contains  the relational operator and the constant value. With this understanding, we  query the value of a constraint's function via  value:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> constraint_object(c1).func # show the function expression of c1\nz - y(t)\n\njulia> value(c1)\n10-element Vector{Float64}:\n -8.747427671096375e-9\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077\n 20.999999995632077","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Again, we obtain an array of values since c1 is infinite due to its dependence  on x(t). Behind the scenes this is implemented via the appropriate extensions  of map_value.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Next the optimizer index(es) of the transcribed constraints in the  MathOptInterface backend provided via  optimizer_index.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> optimizer_index(c1)\n10-element Vector{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}}:\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(1)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(2)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(3)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(4)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(5)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(6)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(7)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(8)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(9)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(10)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Here 10 indices are given in accordance with the transcription constraints.  The mapping between these and the original infinite constraints is managed via  the appropriate extensions of map_optimizer_index.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"note: Note\noptimizer_index does not work for constraints that contain NLPExprs.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"We can also query dual information from our constraints if it is available.  First, we should verify that dual information is available via  has_duals:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> has_duals(model)\ntrue","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Now we can query the duals via dual.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> dual(c1)\n10-element Vector{Float64}:\n 1.9999999988666093\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10\n 1.1930560126841273e-10","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Here we obtain the optimal dual values for each transcribed version of c1. This  is enabled via the proper extensions of map_dual.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Finally, we query the shadow price of a constraint via  shadow_price. This denotes  the change in the objective value due to an infinitesimal relaxation of the  constraint. For c1 we get:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> shadow_price(c1)\n10-element Vector{Float64}:\n -1.9999999988666093\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10\n -1.1930560126841273e-10","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"This is computed via interrogating the duals and the objective sense.","category":"page"},{"location":"guide/result/#LP-Sensitivity","page":"Results","title":"LP Sensitivity","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"We also conduct sensitivity analysis for linear problems using  lp_sensitivity_report. This  will generate a InfOptSensitivityReport which contains mapping to the  ranges indicating how much a constraint RHS constant or a objective  coefficient can be changed without violating the feasibility of the solution.  This is further explained in the JuMP documentation  here.  Furthermore, these analysis can only be employed for a solver that implements  MOI.ConstraintBasisStatus. In our running example up above, Ipopt.jl does not  support this A solver like Gurobi.jl does.","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> report = lp_sensitivity_report(model);\n\njulia> report[c1]\n10-element Vector{Tuple{Float64, Float64}}:\n (-42.0, Inf)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n\njulia> report[z]\n(-2.0, Inf)","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"Note that like other query methods, an array of ranges will be provided with testing the sensitivity of an infinite constraint RHS in accordance with the discretization scheme. Also, keyword arguments (like ndarray and label) can  be invoked when indexing the report:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> report[c1, label = All]\n10-element Vector{Tuple{Float64, Float64}}:\n (-42.0, Inf)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)\n (-Inf, 42.0)","category":"page"},{"location":"guide/result/#Other-Queries","page":"Results","title":"Other Queries","text":"","category":"section"},{"location":"guide/result/","page":"Results","title":"Results","text":"Any other queries supported by JuMP can be accessed by simply interrogating the  optimizer model directly using optimizer_model to access it. For  example, we can get the solution summary of the optimizer model:","category":"page"},{"location":"guide/result/","page":"Results","title":"Results","text":"julia> solution_summary(optimizer_model(model))\n* Solver : Ipopt\n\n* Status\n  Termination status : LOCALLY_SOLVED\n  Primal status      : FEASIBLE_POINT\n  Dual status        : FEASIBLE_POINT\n  Message from the solver:\n  \"Solve_Succeeded\"\n\n* Candidate solution\n  Objective value      : 83.99999998250514\n\n* Work counters\n  Solve time (sec)   : 0.01000","category":"page"},{"location":"manual/model/#infinite_model_manual","page":"Infinite Models","title":"Infinite Models","text":"","category":"section"},{"location":"manual/model/","page":"Infinite Models","title":"Infinite Models","text":"A technical manual for infinite dimensional models. See the respective  guide for more information.","category":"page"},{"location":"manual/model/#Models","page":"Infinite Models","title":"Models","text":"","category":"section"},{"location":"manual/model/","page":"Infinite Models","title":"Infinite Models","text":"InfiniteModel\nInfiniteModel()\nJuMP.object_dictionary(::InfiniteModel)\nhas_internal_supports\nBase.empty!(::InfiniteModel)","category":"page"},{"location":"manual/model/#InfiniteOpt.InfiniteModel","page":"Infinite Models","title":"InfiniteOpt.InfiniteModel","text":"InfiniteModel <: JuMP.AbstractModel\n\nA DataType for storing all of the mathematical modeling information needed to model an optmization problem with an infinite-dimensional decision space.\n\nFields\n\nindependent_params::MOIUC.CleverDict{IndependentParameterIndex, ScalarParameterData{IndependentParameter}}:  The independent parameters and their mapping information.\ndependent_params::MOIUC.CleverDict{DependentParametersIndex, MultiParameterData}:  The dependent parameters and their mapping information.\nfinite_params::MOIUC.CleverDict{FiniteParameterIndex, ScalarParameterData{FiniteParameter}}:  The finite parameters and their mapping information.\nname_to_param::Union{Dict{String, AbstractInfOptIndex}, Nothing}:  Field to help find a parameter given the name.\nlast_param_num::Int: The last parameter number to be used.\nparam_object_indices::Vector{Union{IndependentParameterIndex, DependentParametersIndex}}: The collection of parameter object indices in creation order.\nparam_functions::MOIUC.CleverDict{ParameterFunctionIndex, ParameterFunctionData{ParameterFunction}}:  The infinite parameter functions and their mapping information.\ninfinite_vars::MOIUC.CleverDict{InfiniteVariableIndex, <:VariableData{<:InfiniteVariable}}:  The infinite variables and their mapping information.\nsemi_infinite_vars::MOIUC.CleverDict{SemiInfiniteVariableIndex, <:VariableData{<:SemiInfiniteVariable}}:  The semi-infinite variables and their mapping information.\nsemi_lookup::Dict{<:Tuple, SemiInfiniteVariableIndex}: Look-up if a variable already already exists.\npoint_vars::MOIUC.CleverDict{PointVariableIndex, <:VariableData{<:PointVariable}}:  The point variables and their mapping information.\npoint_lookup::Dict{<:Tuple, PointVariableIndex}: Look-up if a variable already exists.\nfinite_vars::MOIUC.CleverDict{FiniteVariableIndex, VariableData{JuMP.ScalarVariable{Float64, Float64, Float64, Float64}}}:  The finite variables and their mapping information.\nname_to_var::Union{Dict{String, AbstractInfOptIndex}, Nothing}:  Field to help find a variable given the name.\nderivatives::MOIUC.CleverDict{DerivativeIndex, <:VariableData{<:Derivative}}: The derivatives and their mapping information.\nderiv_lookup::Dict{<:Tuple, DerivativeIndex}: Map derivative variable-parameter  pairs to a derivative index to prevent duplicates.\nmeasures::MOIUC.CleverDict{MeasureIndex, <:MeasureData}:  The measures and their mapping information.\nintegral_defaults::Dict{Symbol}:  The default keyword arguments for integral.\nconstraints::MOIUC.CleverDict{InfOptConstraintIndex, <:ConstraintData}:  The constraints and their mapping information.\nconstraint_restrictions::Dict{InfOptConstraintIndex, <:DomainRestrictions} Map constraints  to their domain restrictions if they have any.\nname_to_constr::Union{Dict{String, InfOptConstraintIndex}, Nothing}:  Field to help find a constraint given the name.\nobjective_sense::MOI.OptimizationSense: Objective sense.\nobjective_function::JuMP.AbstractJuMPScalar: Finite scalar function.\nobjective_has_measures::Bool: Does the objective contain measures?\nregistrations::Vector{RegisteredFunction}: The nonlinear registered functions.\nDict{Tuple{Symbol, Int}, Function}: Map a name and number of arguments to a registered function.\nobj_dict::Dict{Symbol, Any}: Store Julia symbols used with InfiniteModel\noptimizer_constructor: MOI optimizer constructor (e.g., Gurobi.Optimizer).\noptimizer_model::JuMP.Model: Model used to solve InfiniteModel\nready_to_optimize::Bool: Is the optimizer_model up to date.\next::Dict{Symbol, Any}: Store arbitrary extension information.\n\n\n\n\n\n","category":"type"},{"location":"manual/model/#InfiniteOpt.InfiniteModel-Tuple{}","page":"Infinite Models","title":"InfiniteOpt.InfiniteModel","text":"InfiniteModel([optimizer_constructor];\n              [OptimizerModel::Function = TranscriptionModel,\n              caching_mode::MOIU.CachingOptimizerMode = MOIU.AUTOMATIC,\n              bridge_constraints::Bool = true, optimizer_model_kwargs...])\n\nReturn a new infinite model where an optimizer is specified if an optimizer_constructor is given. The optimizer can also later be set with the JuMP.set_optimizer call. By default the optimizer_model data field is initialized with a TranscriptionModel, but a different type of model can be assigned via set_optimizer_model as can be required by extensions.\n\nExample\n\njulia> using InfiniteOpt, JuMP, Ipopt;\n\njulia> model = InfiniteModel()\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nMeasures: 0\nDerivatives: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\njulia> model = InfiniteModel(Ipopt.Optimizer)\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nMeasures: 0\nDerivatives: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt\n\n\n\n\n\n","category":"method"},{"location":"manual/model/#JuMP.object_dictionary-Tuple{InfiniteModel}","page":"Infinite Models","title":"JuMP.object_dictionary","text":"JuMP.object_dictionary(model::InfiniteModel)::Dict{Symbol, Any}\n\nReturn the dictionary that maps the symbol name of a macro defined object (e.g.,  a parameter, variable, or constraint) to the corresponding object. Objects are  registered to a specific symbol in the macros. For example,  @variable(model, x[1:2, 1:2]) registers the array of variables x to the symbol :x.\n\n\n\n\n\n","category":"method"},{"location":"manual/model/#InfiniteOpt.has_internal_supports","page":"Infinite Models","title":"InfiniteOpt.has_internal_supports","text":"has_internal_supports(pref::Union{IndependentParameterRef, DependentParameterRef})::Bool\n\nIndicate if pref has internal supports that will be hidden from the user by  default. \n\n\n\n\n\nhas_internal_supports(prefs; [kwargs...])\n\nDefine has_internal_supports for general variable references. It relies on has_internal_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"function"},{"location":"manual/model/#Base.empty!-Tuple{InfiniteModel}","page":"Infinite Models","title":"Base.empty!","text":"Base.empty!(model::InfiniteModel)::InfiniteModel\n\nClear out model of everything except the optimizer information and return the  cleared model. \n\n\n\n\n\n","category":"method"},{"location":"manual/model/#Abstract-Dependencies","page":"Infinite Models","title":"Abstract Dependencies","text":"","category":"section"},{"location":"manual/model/","page":"Infinite Models","title":"Infinite Models","text":"AbstractDataObject\nAbstractInfOptIndex\nObjectIndex","category":"page"},{"location":"manual/model/#InfiniteOpt.AbstractDataObject","page":"Infinite Models","title":"InfiniteOpt.AbstractDataObject","text":"AbstractDataObject\n\nAn abstract type for DataTypes that store core variable DataTypes and their model specific information (e.g., dependency mappings). These are what are stored in the InfiniteModel CleverDicts.\n\n\n\n\n\n","category":"type"},{"location":"manual/model/#InfiniteOpt.AbstractInfOptIndex","page":"Infinite Models","title":"InfiniteOpt.AbstractInfOptIndex","text":"AbstractInfOptIndex\n\nAn abstract type for all index objects used in InfiniteOpt.\n\n\n\n\n\n","category":"type"},{"location":"manual/model/#InfiniteOpt.ObjectIndex","page":"Infinite Models","title":"InfiniteOpt.ObjectIndex","text":"ObjectIndex <: AbstractInfOptIndex\n\nAn abstract type for indices of objects stored in MOI.Utilities.CleverDicts.\n\n\n\n\n\n","category":"type"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"DocTestFilters = [r\"≤|<=\", r\" == | = \", r\" ∈ | in \", r\"MathOptInterface|MOI\",\n                  r\" for all | ∀ \", r\"d|∂\", r\"integral|∫\"]","category":"page"},{"location":"guide/expression/#expr_docs","page":"Expressions","title":"Expressions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"A guide for the defining and understanding the variable expressions  used in InfiniteOpt. See the technical manual for more  details.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"note: Note\nNonlinear modeling is handled differently in InfiniteOpt vs JuMP. See  Nonlinear Expressions for more information. ","category":"page"},{"location":"guide/expression/#Overview","page":"Expressions","title":"Overview","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Expressions in InfiniteOpt (also called functions) refer to mathematical  statements involving variables and numbers. Thus, these comprise the  mathematical expressions used that are used in measures, objectives, and  constraints. Programmatically, InfiniteOpt simply extends JuMP expression  types and methods principally pertaining to affine and quadratic mathematical  expressions. A natively supported abstraction for general nonlinear expressions  is planned for development since that of JuMP is not readily extendable.","category":"page"},{"location":"guide/expression/#par_func_docs","page":"Expressions","title":"Parameter Functions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"As described further below, InfiniteOpt.jl only supports affine and quadratic  expressions in its current rendition. However, there several use cases where we  might want to provide a more complex known function of infinite parameter(s) (e.g.,  nonlinear setpoint tracking). Thus, we provide parameter function objects  that given a particular realization of infinite parameters will output a scalar  value. Note that this can be interpreted as an infinite variable that is  constrained to a particular known function. This is accomplished via  @parameter_function or parameter_function and is exemplified  by defining a parameter function f(t) that uses sin(t):","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> using InfiniteOpt;\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @parameter_function(model, f == sin(t))\nf(t)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Here we created an parameter function object, added it to model, and  then created a Julia variable f that serves as a GeneralVariableRef that points  to it. From here we can treat f as a normal infinite variable and use it with  measures, derivatives, and constraints. For example, we can do the following:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @variable(model, y, Infinite(t));\n\njulia> df = deriv(f, t)\n∂/∂t[f(t)]\n\njulia> meas = integral(y - f, t)\n∫{t ∈ [0, 10]}[y(t) - f(t)]\n\njulia> @constraint(model, y - f <= 0)\ny(t) - f(t) ≤ 0.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"We can also define parameter functions that depend on multiple infinite  parameters even use an anonymous function if prefer:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @infinite_parameter(model, x[1:2] in [-1, 1]);\n\njulia> @parameter_function(model, myname == (t, x) -> t + sum(x))\nmyname(t, x)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In many applications, we may also desire to define an array of parameter functions  that each use a different realization of some parent function by varying some  additional positional/keyword arguments. We readily support this behavior since  parameter functions can be defined with additional known arguments:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @parameter_function(model, pfunc_alt[i = 1:3] == t -> mysin(t, as[i], b = 0))\n3-element Vector{GeneralVariableRef}:\n pfunc_alt[1](t)\n pfunc_alt[2](t)\n pfunc_alt[3](t)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"The main recommended use case for parameter_function is that it is  amendable to defining complex anonymous functions via a do-block which is useful  for applications like defining a time-varied setpoint:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> setpoint = parameter_function(t, name = \"setpoint\") do t_supp\n                    if t_supp <= 5\n                        return 2.0\n                    else \n                        return 10.2\n                    end\n                 end\nsetpoint(t)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Please consult the following links for more information about defining parameter  functions: @parameter_function and parameter_function.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Beyond this, there are number of query and modification methods that can be  employed for parameter functions and these are detailed in the  technical manual Section below.","category":"page"},{"location":"guide/expression/#Variable-Hierarchy","page":"Expressions","title":"Variable Hierarchy","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Expressions employ variable reference types inherited from JuMP.AbstractVariableRef to form expression objects. InfiniteOpt uses a hierarchy of such types to organize the complexities associated with modeling infinite dimensional programs. The figure below summarizes this hierarchy of variable reference types where the abstract types are depicted in green and the concrete types are shown blue.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"(Image: tree)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In consistently with JuMP expression support, GeneralVariableRef exists as a variable reference type that is able to represent any of the above concrete subtypes of DispatchVariableRef. This allows the expression containers to be homogeneous in variable type. This is a paradigm shift from previous versions of InfiniteOpt that used the hierarchy of types directly to construct expressions. This behavior led to stability and performance limitations and thus a has been discontinued.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"However, the variable hierarchy is still used to create for variable methods. To accomplish this appropriate GeneralVariableRef dispatch methods are implemented (which are detailed in User Methods section at the bottom of this page) that utilize dispatch_variable_ref to create the appropriate concrete subtype of DispatchVariableRef and call the appropriate underlying method. These dispatch methods have been implemented for all public methods and the underlying methods are what are documented in the method manuals throughout the User Guide pages.","category":"page"},{"location":"guide/expression/#Affine-Expressions","page":"Expressions","title":"Affine Expressions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"An affine expression pertains to a mathematical function of the form:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"f_a(x) = a_1x_1 +  + a_nx_n + b","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"where x in mathbbR^n denote variables, a in mathbbR^n denote  coefficients, and b in mathbbR denotes a constant value. Such  expressions, are prevalent in any problem than involves linear constraints  and/or objectives.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In InfiniteOpt, affine expressions can be defined directly  using Julia's arithmetic operators (i.e., +, -, *, etc.) or using  @expression.  For example, let's define the expression  2y(t) + z - 3t noting that the following methods are equivalent:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @infinite_parameter(model, t in [0, 10])\nt\n\njulia> @variable(model, y, Infinite(t))\ny(t)\n\njulia> @variable(model, z)\nz\n\njulia> expr = 2y + z - 3t\n2 y(t) + z - 3 t\n\njulia> expr = 2 * y + z - 3 * t\n2 y(t) + z - 3 t\n\njulia> expr = @expression(model, 2y + z - 3t)\n2 y(t) + z - 3 t\n\njulia> typeof(expr)\nGenericAffExpr{Float64, GeneralVariableRef}","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Notice that coefficients to variables can simply be put alongside variables  without having to use the * operator. Also, note that all of these expressions  are stored in a container referred to as a GenericAffExpr which is a JuMP  object for storing affine expressions.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"note: Note\nWhere possible, it is preferable to use  @expression  for defining expressions as it is much more efficient than explicitly using  the standard operators.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"GenericAffExpr objects contain 2 fields which are:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"constant::CoefType The constant value of the affine expression.\nterms::OrderDict{VarType, CoefType} A dictionary mapping variables to coefficients.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"For example, let's see what these fields look like in the above example:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> expr.terms\nOrderedCollections.OrderedDict{GeneralVariableRef, Float64} with 3 entries:\n  y(t) => 2.0\n  z    => 1.0\n  t    => -3.0\n\njulia> expr.constant\n0.0","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Notice that the ordered dictionary preserves the order in which the variables  appear in the expression.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"More information can be found in the documentation for affine expressions in  JuMP.","category":"page"},{"location":"guide/expression/#Quadratic-Expressions","page":"Expressions","title":"Quadratic Expressions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"A quadratic function pertains to a mathematical function of the form:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"f_q(x) = a_1x_1^2 + a_2 x_1 x_2 +  + a_m x_n^2 + f_a(x)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"where x in mathbbR^n are the variables, f_a(x) mathbbR^n mapsto mathbbR is an affine function, and m = n(n+1)2 is the number of unique combinations of variables x. Like affine expressions, quadratic expressions can be defined via Julia's arithmetic operators or via @expression. For example, let's define 2y^2(t) - zy(t) + 42t - 3 using the following equivalent methods:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> expr = 2y^2 - z * y + 42t - 3\n2 y(t)² - z*y(t) + 42 t - 3\n\njulia> expr = @expression(model, 2y^2 - z * y + 42t - 3)\n2 y(t)² - y(t)*z + 42 t - 3\n\njulia> typeof(expr)\nGenericQuadExpr{Float64, GeneralVariableRef}","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Again, notice that coefficients need not employ *. Also, the object used to  store the expression is a GenericQuadExpr which is a JuMP object used for  storing quadratic expressions.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"GenericQuadExpr object contains 2 data fields which are:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"aff::GenericAffExpr{CoefType,VarType} An affine expression\nterms::OrderedDict{UnorderedPair{VarType}, CoefType} A dictionary mapping quadratic variable pairs to coefficients.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Here the UnorderedPair type is unique to JuMP and contains the fields:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"a::AbstractVariableRef One variable in a quadratic pair\nb::AbstractVariableRef The other variable in a quadratic pair.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Thus, this form can be used to store arbitrary quadratic expressions. For  example, let's look at what these fields look like in the above example:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> expr.aff\n42 t - 3\n\njulia> typeof(expr.aff)\nGenericAffExpr{Float64, GeneralVariableRef}\n\njulia> expr.terms\nOrderedCollections.OrderedDict{UnorderedPair{GeneralVariableRef}, Float64} with 2 entries:\n  UnorderedPair{GeneralVariableRef}(y(t), y(t)) => 2.0\n  UnorderedPair{GeneralVariableRef}(y(t), z)    => -1.0","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Notice again that the ordered dictionary preserves the order.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"tip: Tip\nPolynomial expressions can be represented by introducing dumby variables  and nested quadratic/affine expressions. For instance, z^3 + 2 can be  expressed by introducing a dumby variable x = z^2:julia> @variable(model, x)\nx\n\njulia> @constraint(model, x == z^2)\n-z² + x = 0.0\n\njulia> expr = @expression(model, z * x + 2)\nz*x + 2Alternatively, can we can just use our nonlinear modeling interface:julia> expr = @expression(model, z^3 + 2)\nz^3 + 2","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"More information can be found in the documentation for quadratic expressions in  JuMP.","category":"page"},{"location":"guide/expression/#nlp_guide","page":"Expressions","title":"Nonlinear Expressions","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"General nonlinear expressions as generated via JuMP.@NLexpression,  JuMP.@NLobjective, and/or JuMP.@NLconstraint macros in JuMP are not  extendible for extension packages like InfiniteOpt. A fundamental  overhaul is planned to resolve this problem (check the status on  GitHub), but this  will likely require 1-3 years to resolve.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Thus in the interim, we circumvent this problem in InfiniteOpt by implementing  our own general nonlinear expression API. However, we will see that our interface  treats nonlinear expressions as 1st class citizens and thus is generally more  convenient then using JuMP's current legacy nonlinear modeling interface.  We discuss the ins and outs of this interface in the subsections below.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"note: Note\nUnlike affine/quadratic expressions, our nonlinear interface differs from  that of JuMP. Thus, it is important to carefully review the sections  below to familiarize yourself with our syntax. ","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"warning: Warning\nOur new general nonlinear modeling interface is experimental and thus is  subject to change to address any unintented behavior. Please notify us on  GitHub if you encounter any unexpected behavior.","category":"page"},{"location":"guide/expression/#Basic-Usage","page":"Expressions","title":"Basic Usage","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In InfiniteOpt we can define nonlinear expressions in similar manner to how  affine/quadratic expressions are made in JuMP. For instance, we can make an  expression using normal Julia code outside of a macro:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @infinite_parameter(model, t ∈ [0, 1]); @variable(model, y, Infinite(t));\n\njulia> expr = exp(y^2.3) * y - 42\nexp(y(t)^2.3) * y(t) - 42\n\njulia> typeof(expr)\nNLPExpr","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Thus, the nonlinear expression expr of type NLPExpr is created can  be readily incorporated to other expressions, the objective, and/or constraints.  For macro-based definition, we simply use the @expression, @objective, and  @constraint macros (which in JuMP are only able to handle affine/quadratic  expressions):","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @expression(model, expr, exp(y^2.3) * y - 42)\nexp(y(t)^2.3) * y(t) - 42\n\njulia> @objective(model, Min, ∫(0.3^cos(y^2), t))\n∫{t ∈ [0, 1]}[0.3^cos(y(t)²)]\n\njulia> @constraint(model, constr, y^y * sin(y) + sum(y^i for i in 3:4) == 3)\nconstr : (y(t)^y(t) * sin(y(t)) + y(t)^3 + y(t)^4) - 3 = 0.0, ∀ t ∈ [0, 1]","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"note: Note\nThe @NLexpression, @NLobjective, and @NLconstraint macros used by JuMP are not supported by InfiniteOpt. Instead we can more conveniently use the  @expression, @objective, and @constraint macros directly.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Natively, we support all the same nonlinear functions/operators that JuMP  does. Note however that there are 3 caveats to this:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Functions from SpecialFunctions.jl  can only be used if using SpecialFunctions is included first\nThe ifelse function must be specified InfiniteOpt.ifelse (because  the native ifelse is a core function that cannot be extended for our purposes)\nThe logic operators & and | must be used instead of && and || when  defining a nonlinear expression.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Let's exemplify the above caveats:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> using SpecialFunctions\n\njulia> y^2.3 * gamma(y)\ny(t)^2.3 * gamma(y(t))\n\njulia> InfiniteOpt.ifelse(y == 0, y^2.3, exp(y))\nifelse(y(t) == 0, y(t)^2.3, exp(y(t)))\n\njulia> InfiniteOpt.ifelse((y <= 0) | (y >= 3), y^2.3, exp(y))\nifelse(y(t) <= 0 || y(t) >= 3, y(t)^2.3, exp(y(t)))","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"warning: Warning\nThe logical comparison operator == will yield an NLPExpr instead of a  Bool when one side is a variable reference or an expression. Thus, for  creating Julia code that needs to determine if the Julia variables are equal  then isequal should be used instead:julia> isequal(y, y)\ntrue\n\njulia> y == t\ny(t) == t","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"We can interrogate which nonlinear functions/operators our model currently  supports by invoking all_registered_functions. Moreover, we can add  additional functions via registration (see Function Registration for  more details). ","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Finally, we highlight that nonlinear expressions in InfiniteOpt support the  same linear algebra operations as affine/quadratic expressions:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @variable(model, v[1:2]); @variable(model, Q[1:2, 1:2]);\n\njulia> @expression(model, v' * Q * v)\n0 + (Q[1,1]*v[1] + Q[2,1]*v[2]) * v[1] + (Q[1,2]*v[1] + Q[2,2]*v[2]) * v[2]","category":"page"},{"location":"guide/expression/#Function-Tracing","page":"Expressions","title":"Function Tracing","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In similar manner to Symbolics.jl, we support function tracing. This means  that we can create nonlinear modeling expression using Julia functions that  satisfy certain criteria. For instance:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> myfunc(x) = sin(x^3) / tan(2^x);\n\njulia> expr = myfunc(y)\nsin(y(t)^3) / tan(2^y(t))","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"However, there are certain limitations as to what internal code these functions  can contain. The following CANNOT be used:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"loops (unless it only uses very simple operations)\nif-statements (see workaround below)\nnon-registered functions (if they cannot be traced).","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"tip: Tip\nIf a particular function is not amendable for tracing, try registering it  instead. See Function Registration for details.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"We can readily workaround the if-statement limitation using  InfiniteOpt.ifelse. For example, the function:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"function mylogicfunc(x)\n    if x >= 0\n        return x^3\n    else\n        return 0\n    end\nend","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"is not amendable for function tracing, but we can rewrite it as:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> function mylogicfunc(x)\n          return InfiniteOpt.ifelse(x >= 0, x^3, 0)\n       end\nmylogicfunc (generic function with 1 method)\n\njulia> mylogicfunc(y)\nifelse(y(t) >= 0, y(t)^3, 0)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"which is amendable for function tracing.","category":"page"},{"location":"guide/expression/#Linear-Algebra","page":"Expressions","title":"Linear Algebra","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"As described above in the Basic Usage Section, we support linear algebra  operations with nonlinear expressions! This relies on our basic extensions of  MutableArithmetics, but  admittedly this implementation is not perfect in terms of efficiency. ","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"tip: Tip\nUsing linear algebra operations with nonlinear expression provides user  convenience, but is less efficient than using sums. Thus, sum should be  used instead when efficiency is critical.julia> v' * Q * v # convenient linear algebra syntax\n0 + (Q[1,1]*v[1] + Q[2,1]*v[2]) * v[1] + (Q[1,2]*v[1] + Q[2,2]*v[2]) * v[2]\n\njulia> sum(v[i] * Q[i, j] * v[j] for i in 1:2, j in 1:2) # more efficient\nv[1] * Q[1,1] * v[1] + v[2] * Q[2,1] * v[1] + v[1] * Q[1,2] * v[2] + v[2] * Q[2,2] * v[2]","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"We can also set vectorized constraints using the .==, .<=, and .>=  operators:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @variable(model, W[1:2, 1:2]);\n\njulia> @constraint(model, W * Q * v .== 0)\n2-element Vector{InfOptConstraintRef}:\n (0 + (W[1,1]*Q[1,1] + W[1,2]*Q[2,1]) * v[1] + (W[1,1]*Q[1,2] + W[1,2]*Q[2,2]) * v[2]) - 0 == 0.0\n (0 + (W[2,1]*Q[1,1] + W[2,2]*Q[2,1]) * v[1] + (W[2,1]*Q[1,2] + W[2,2]*Q[2,2]) * v[2]) - 0 == 0.0","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"However, it is important to note that although vector constraints can be  expressed in InfiniteOpt, they are not supported by JuMP and thus an error  is incurred if we try to solve an InfiniteOpt model using the  TranscriptionOpt backend:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> @constraint(model, W * Q * v in MOI.Zeros(2)) # will cause solution error \n[0 + (W[1,1]*Q[1,1] + W[1,2]*Q[2,1]) * v[1] + (W[1,1]*Q[1,2] + W[1,2]*Q[2,2]) * v[2], 0 + (W[2,1]*Q[1,1] + W[2,2]*Q[2,1]) * v[1] + (W[2,1]*Q[1,2] + W[2,2]*Q[2,2]) * v[2]] in MathOptInterface.Zeros(2)\n\njulia> optimize!(model)\nERROR: TranscriptionOpt does not support vector constraints of general nonlinear expressions because this is not yet supported by JuMP.","category":"page"},{"location":"guide/expression/#Function-Registration","page":"Expressions","title":"Function Registration","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In a similar spirit to JuMP and Symbolics, we can register user-defined  functions such that they can be directly incorporated into nonlinear expressions.  This is done via the @register macro. We can register any function  that takes scalar arguments (which can accept inputs of type Real):","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> h(a, b) = a * b^2; # an overly simple example user-defined function\n\njulia> @register(model, h(a, b));\n\njulia> h(y, 42)\nh(y(t), 42)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"tip: Tip\nWhere possible it is preferred to use function tracing instead of function  registration. This improves performance and can prevent unintential errors.  See Function Tracing for more details.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"To highlight the differnce between function tracing and function  registration consider the following example:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> f(a) = a^3;\n\njulia> f(y) # user-function gets traced\ny(t)^3\n\njulia> @register(model, f(a)) # register function\nf (generic function with 2 methods)\n\njulia> f(y) # function is no longer traced\nf(y(t))","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Thus, registered functions are incorporated directly. This means that their  gradients and hessians will need to determined as well (typically occurs  behind the scenes via auto-differentiation with the selected optimizer model  backend). However, again please note that in this case tracing is preferred  since f can be traced. ","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Let's consider a more realistic example where the function is not amendable to  tracing:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> function g(a)\n          v = 0\n          for i in 1:4\n              v *= v^a\n              if v >= 1\n                 return v\n              end\n          end\n          return a\n       end;\n\njulia> @register(model, g(a));\n\njulia> g(y)\ng(y(t))","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Notice this example is a little contrived still, highlighting that in most cases  we can avoid registration. However, one exception to this trend, are functions  from other packages that we might want to use. For example, perhaps we would  like to use the eta function from SpecialFunctions.jl which is not natively  supported:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> using SpecialFunctions\n\njulia> my_eta(a) = eta(a);\n\njulia> @register(model, my_eta(a));\n\njulia> my_eta(y)\nmy_eta(y(t))","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Notice that we cannot register SpecialFunctions.eta directly due to  scoping limitations that are inherit in generating constructor functions on the  fly (which necessarily occurs behind the scenes with @register).","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Now in some cases we might wish to specify the gradient and hessian of a  univariate function we register to avoid the need for auto-differentiation. We  can do this, simply by adding them as additional arguments when we register:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> my_squared(a) = a^2; gradient(a) = 2 * a; hessian(a) = 2;\n\njulia> @register(model, my_squared(a), gradient, hessian);\n\njulia> my_squared(y)\nmy_squared(y(t))","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Note the specification of the hessian is optional (it can separately be  computed via auto-differentiation if need be).","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"For multivariate functions, we can specify the gradient (the hessian is not  currently supported by JuMP optimizer models) following the same gradient  function structure that JuMP uses:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> w(a, b) = a * b^2;\n\njulia> function wg(v, a, b)\n          v[1] = b^2\n          v[2] = 2 * a * b\n          return\n       end;\n\njulia> @register(model, w(a, b), wg) # register multi-argument function\nw (generic function with 4 methods)\n\njulia> w(42, y)\nw(42, y(t))","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Note that the first argument of the gradient needs to accept an  AbstractVector{Real} that is then filled in place.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"note: Note\nWe do not currently support vector inputs or vector valued functions  directly, since typically JuMP optimzier model backends don't support them.  However, this limitation can readily removed if there is a use case for it  (please reach out to us if such an addition is needed).","category":"page"},{"location":"guide/expression/#Expression-Tree-Abstraction","page":"Expressions","title":"Expression Tree Abstraction","text":"","category":"section"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"The nonlinear interface in InfiniteOpt is enabled through the NLPExpr  type which uses an intelligent expression tree structure. In particular, we use  a memory efficient Left-Child Right-Sibling Tree  whose leaves (nodes with no children) can be:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"constants (i.e., Int, Float64, and/or Bool)\nvariables (GeneralVariableRefs)\naffine expressions (GenericAffExpr{Float64, GeneralVariableRef})\nquadratic expressions (GenericQuadExpr{Float64, GeneralVariableRef})","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Moreover, the internal tree nodes correspond to functions/operators which are  stored as Symbol names (which correspond to registered functions via  name_to_function). We accomplish this via  LeftChildRightSiblingTrees.jl  in combination with NodeData to store the content of each node. ","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"We can view the tree structure of an NLPExpr using  print_expression_tree:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> expr = exp(y^2.3) * y - 42\nexp(y(t)^2.3) * y(t) - 42\n\njulia> print_expression_tree(expr)\n-\n├─ *\n│  ├─ exp\n│  │  └─ ^\n│  │     ├─ y(t)\n│  │     └─ 2.3\n│  └─ y(t)\n└─ 42","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"Here, we can see the algebraic expression is decomposed into an expression  tree were the leaves contain the variables/constants (and can contain  affine/quadratic expressions) and the intermediate nodes contain function  names. Note that the top most node is called the root node and that is what  NLPExpr stores in its tree_root field:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> expr.tree_root\nNode(-)\n\njulia> typeof(expr.tree_root)\nLeftChildRightSiblingTrees.Node{NodeData}","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"The rest of the tree can then be interrogated by traversing the tree as enabled  by the API of  LeftChildRightSiblingTrees.jl.","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"In addition to the API of LeftChildRightSiblingTrees.jl, we provide some  mapping functions that are useful for extensions. First, with  map_expression we can create a new NLPExpr based on an exisiting  NLPExpr where a transformation is applied to each variable:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> map_expression(v -> v^2, expr)\nexp((y(t)²)^2.3) * (y(t)²) - 42","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"We also provide map_nlp_to_ast which can be used to map an NLPExpr to a  Julia Abstract Syntax Tree (AST) where a transformation is applied to each  variable:","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"julia> jump_model = Model(); @variable(jump_model, y_jump);\n\njulia> map_nlp_to_ast(v -> y_jump, expr)\n:(exp(y_jump ^ 2.3) * y_jump - 42)","category":"page"},{"location":"guide/expression/","page":"Expressions","title":"Expressions","text":"This is useful for converting NLPExprs into ASTs that can be used in JuMP  via its add_NL_expression  API.","category":"page"},{"location":"guide/parameter/#inf_par_docs","page":"Infinite Parameters","title":"Infinite Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"A guide for infinite parameters in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/parameter/#Overview","page":"Infinite Parameters","title":"Overview","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Infinite parameters are what live on the infinite domains of infinite dimensional   mathematical optimization problems. In dynamic optimization this  corresponds to time and in stochastic optimization this to uncertain parameters  that follow a certain underlying statistical distribution. InfiniteOpt  considers natively two kinds of infinite parameters, ones defined over  continuous intervals and ones characterized by a distribution (others can be  added by defining a user-defined type). These can be used to parameterize  infinite variables, semi-infinite variables, point variables, derivatives,   measures, and can be used directly inside constraints. ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"note: Note\nPrevious versions of InfiniteOpt used the syntax  @infinite_parameter(model, ξ in distribution) for defining random infinite  parameters. This has been updated to  @infinite_parameter(model, ξ ~ distribution).","category":"page"},{"location":"guide/parameter/#Basic-Usage","page":"Infinite Parameters","title":"Basic Usage","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"First, we need to initialize and add infinite parameters to our InfiniteModel.  This can be accomplished using @infinite_parameter. For example, let's  define a parameter for time in a time interval from 0 to 10:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> using InfiniteOpt\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10])\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now t is a Julia variable that stores a GeneralVariableRef which  points to where the time parameter is stored in model. It can now be used with  infinite variables, derivatives, measures, and constraints as described in their   respective user guide sections.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"When the model is optimized, t will be transcribed (discretized) over its domain  following its support points. Users can specify support points via the   num_supports or supports keyword arguments. For example, if we desire to  have only 10 equi-distant supports then we could have instead defined t: ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], num_supports = 10)\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"More complex support schemes can be specified via supports such as:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0, 2, 7, 10])\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Where we specified t to use 4 supports: 0, 2, 7, and 10.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We can also add supports after t has been initialized. This can be accomplished  with add_supports. For example, consider the initial case where t has  no supports and we now wish to add 4 supports:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> add_supports(t, [0., 2.5, 7.5, 10.])\n\njulia> supports(t)\n4-element Vector{Float64}:\n  0.0\n  2.5\n  7.5\n 10.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Here only 4 supports are specified for the sake of example. Alternatively, we  could have initialized the parameter and added supports in just one step using  the supports keyword argument:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0., 2.5, 7.5, 10.])\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We could also define a random parameter described by a distribution. This can be  accomplished using @infinite_parameter in combination with a  distribution from  Distributions.jl. For  example let's define a vector of independent random parameters described by a  Normal distribution:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> using Distributions\n\njulia> @infinite_parameter(model, ξ[i = 1:3] ~ Normal(), independent = true)\n3-element Vector{GeneralVariableRef}:\n ξ[1]\n ξ[2]\n ξ[3]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that we use ~ instead of in when specifying distributions. We could have  used i as an index to assign a different distribution to each parameter.  Supports can also be specified for each parameter as shown above. Similarly, the  num_supports keyword is used to generate random supports.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"More interestingly, we can also define multi-variate random parameters, for example:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, θ[1:2] ~ MvNormal([0, 0], [1, 1]))\n2-element Vector{GeneralVariableRef}:\n θ[1]\n θ[2]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now we have infinite parameters t and ξ that are ready to be used in  defining infinite variables and constraints. We also mention here that the  @infinite_parameter macro is designed to closely emulate  JuMP.@variable and thus handles arrays and keyword arguments in the same way.  This is described in more detail below.","category":"page"},{"location":"guide/parameter/#Parameter-Definition","page":"Infinite Parameters","title":"Parameter Definition","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Defining/initializing an infinite parameter principally involves the following  steps (these are typically automated by @infinite_parameter):","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Define an AbstractInfiniteDomain\nDefine support points within the domain to later discretize the parameter\nConstruct an InfOptParameter to store this information\nAdd the InfOptParameter object to an InfiniteModel and assign a name\nCreate a GeneralVariableRef(s) that points to the parameter object","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Infinite domain definition is described above in the  Infinite Domains section. The supports should be  a vector of finite numbers that are drawn from the domain of the infinite domain.  These supports will be used to transcribe the InfiniteModel in preparation for  it to be optimized. If desired, the supports can be specified after the parameter  is defined and the support container of the defined parameter will be temporarily  empty.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"InfOptParameter is an abstract data type that encompasses all concrete  infinite parameter types. The concrete type for individual infinite parameters  is IndependentParameter, since these parameters are independent from  other parameters. On the other hand, DependentParameters handle  multivariate infinite parameters, within which each individual parameter is not  independent. These are useful for characterizing, for example, parameters  subject to multivariate distribution.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Regardless of the specific concrete type, the build_parameter function  is used to construct an InfOptParameter. For example, let's create a time  parameter t in 0 10 with supports [0, 2, 5, 7, 10]:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> domain = IntervalDomain(0, 10)\n[0, 10]\n\njulia> t_param = build_parameter(error, domain, supports = [0, 2, 5, 7, 10]);","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now that we have a InfOptParameter that contains an IntervalDomain and supports,  let's now add t_param to our InfiniteModel using add_parameter  and assign it the name of t: ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> t_ref = add_parameter(model, t_param, \"t\")\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We can also create an anonymous infinite parameter by dropping the name from  the add_parameter function call. For example:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> t_ref_noname = add_parameter(model, t_param)\nnoname","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now suppose we want to create an infinite parameter that is a random variable  with a given distribution. We follow the same procedure as above, except we use  distributions from Distributions.jl to define a UniDistributionDomain.  For example, let's consider a random variable x in mathcalN(01) with  supports [-0.5, 0.5]:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> dist = Normal(0., 1.)\nNormal{Float64}(μ=0.0, σ=1.0)\n\njulia> domain = UniDistributionDomain(dist)\nNormal{Float64}(μ=0.0, σ=1.0)\n\njulia> x_param = build_parameter(error, domain, supports = [-0.5, 0.5]);","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Again, we use add_parameter to add x_param to the InfiniteModel and  assign it the name x:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> x_ref = add_parameter(model, x_param, \"x\")\nx","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that add_parameter does not register the name of the parameters into the  model that it adds to. As shown in Macro Definition, the  macro definition does not allow for multiple parameters sharing the same name and  will throw an error if it happens.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For dependent parameters, we do not provide a publicly available build_parameter   method due to inherent complexities. Thus, it is recommended to construct these   using @infinite_parameter. However, these can be constructed manually  via the basic constructor for DependentParameters and then invoking  add_parameters. Note that this should be done with caution since most  error checking will be omitted in this case.","category":"page"},{"location":"guide/parameter/#param_macro","page":"Infinite Parameters","title":"Macro Definition","text":"","category":"section"},{"location":"guide/parameter/#One-Dimensional-Parameters","page":"Infinite Parameters","title":"One-Dimensional Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"One user-friendly way of defining infinite parameters is by macro  @infinite_parameter. The macro executes the same process as the  manual definition (steps listed in Parameter Definition), but allows  the users to manipulate several features of the defined infinite parameters.  Again, let's consider a time parameter t in 0 10 with supports  [0, 2, 5, 7, 10]. We use in (or ∈) to define the domain that an infinite  parameter is subject to (any InfiniteScalarDomain for single  parameters). For example, we can define t in 0 10:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0, 2, 5, 7, 10])\nt","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In a similar way, we can define a random infinite parameter subject to some  distribution using ~ as the operator. For example, a Gaussian infinite  parameter with mean 0 and standard deviation 1 can be defined:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> using Distributions\n\njulia> dist = Normal(0., 1.)\nNormal{Float64}(μ=0.0, σ=1.0)\n\njulia> @infinite_parameter(model, ξ ~ dist, num_supports = 10)\nξ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For anonymous definition, we use either the domain or distribution keywords:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> t = @infinite_parameter(model, domain = [0, 10], supports = [0, 2, 5, 7, 10], \n                               base_name = \"t\")\nt\n\njulia> ξ = @infinite_parameter(model, distribution = dist, num_supports = 10, \n                               base_name = \"ξ\")\nξ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"All the definitions above return a GeneralVariableRef that refers to  the parameter object.","category":"page"},{"location":"guide/parameter/#Multi-Dimensional-Parameters","page":"Infinite Parameters","title":"Multi-Dimensional Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We can also define multi-dimensional infinite parameters in a concise way. For  example, consider a position parameter x in 0 1^3:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x[1:3] in [0, 1], independent = true, num_supports = 3)\n3-element Vector{GeneralVariableRef}:\n x[1]\n x[2]\n x[3]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Here we used independent = true to signify that each x[i] can be treated  independently. Hence, the overall infinite domain is the cartesian product of  their individual domains. In this example, we defined 3 supports for each x[i]  such that there will be 3^3 = 27 supports for the overall domain:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> supports(x[1])\n3-element Vector{Float64}:\n 0.0\n 0.5\n 1.0\n\njulia> supports(x)\n3×27 Matrix{Float64}:\n 0.0  0.5  1.0  0.0  0.5  1.0  0.0  0.5  …  1.0  0.0  0.5  1.0  0.0  0.5  1.0\n 0.0  0.0  0.0  0.5  0.5  0.5  1.0  1.0     0.0  0.5  0.5  0.5  1.0  1.0  1.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     1.0  1.0  1.0  1.0  1.0  1.0  1.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For multivariate random infinite parameters, we commonly wish their individual  domains to not be treated independently. Hence, we'll want independent = false  (the default value). For example, a 2-dimensional parameter  theta sim mathcalN(mu Sigma) is defined:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> dist = MvNormal([0, 0], [1 0; 0 2])\nFullNormal(\ndim: 2\nμ: [0.0, 0.0]\nΣ: [1.0 0.0; 0.0 2.0]\n)\n\njulia> @infinite_parameter(model, θ[1:2] ~ dist, num_supports = 3)\n2-element Vector{GeneralVariableRef}:\n θ[1]\n θ[2]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Here 3 supports are generated for all the parameters simultaneously according to  the distribution. ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> supports(θ)\n2×3 Matrix{Float64}:\n -0.353007  0.679107  0.586617\n -0.190712  1.17155   0.420496","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We refer to groups of parameters defined this way as dependent infinite  parameters. In principle, nonrandom infinite parameter types can be made  dependent as well when users wish to avoid the cartesian product of their  supports.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Anonymous groups of parameters can be defined as follows:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> x = @infinite_parameter(model, [1:3] in [0, 1], independent = true, \n                               num_supports = 3, base_name = \"x\")\n3-element Vector{GeneralVariableRef}:\n x[1]\n x[2]\n x[3]\n\njulia> θ = @infinite_parameter(model, [1:2] ~ dist, num_supports = 3, base_name = \"θ\")\n2-element Vector{GeneralVariableRef}:\n θ[1]\n θ[2]","category":"page"},{"location":"guide/parameter/#Containers-for-Multi-Dimensional-Parameters","page":"Infinite Parameters","title":"Containers for Multi-Dimensional Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Because we build on JuMP, we can use any indices we like when making containers  (e.g., arrays) for multi-dimensional parameters. For example, we can define:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x[i = [:a, :b]] in [0, 1])\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, [:a, :b]\nAnd data, a 2-element Vector{GeneralVariableRef}:\n x[a]\n x[b]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"See  JuMP's documentation on containers  for more information.","category":"page"},{"location":"guide/parameter/#Supports","page":"Infinite Parameters","title":"Supports","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For an infinite parameter, its supports are a finite set of points that the  parameter will take (or possibly take, if the parameter is random). During the  transcription stage, the supports specified will become part of the grid points  that approximate all functions parameterized by the infinite parameter.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Once an infinite parameter is defined, users can access the supports using  supports function:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0, 2, 5, 7, 10])\nt\n\njulia> supports(t)\n5-element Vector{Float64}:\n  0.0\n  2.0\n  5.0\n  7.0\n 10.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"note: Note\nMost support query functions have a keyword argument label that is used  the specify the type of supports that will be involved in the query. By default,  this will be PublicLabel which will correspond to any supports that are  reported to the user by default, but will exclude any supports that have  InternalLabels (e.g., internal collocation nodes). The full set can always  be obtained via label = All. We can also query more specific subsets of  support information with more specific labels such as label = UniformGrid.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We also provide functions that access other related information about the  supports. For example, has_supports checks whether a parameter has  supports, while num_supports gives the number of supports associated  with a parameter:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> has_supports(t)\ntrue\n\njulia> num_supports(t)\n5","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now suppose we want to add more supports to the t, which is already assigned  with some supports. We can use add_supports function to achieve this  goal:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> add_supports(t, [3, 8])\n\njulia> supports(t)\n7-element Vector{Float64}:\n  0.0\n  2.0\n  3.0\n  5.0\n  7.0\n  8.0\n 10.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"At times we might want to change the supports completely. In those cases, the  function set_supports resets the supports for a certain parameter with  new supports provided:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> set_supports(t, [0,3,5,8,10], force = true)\n\njulia> supports(t)\n5-element Vector{Float64}:\n  0.0\n  3.0\n  5.0\n  8.0\n 10.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that the keyword argument [force] must be set as [true] if the  parameter has been assigned with supports. Users can also delete all the  supports of a parameter with delete_supports.","category":"page"},{"location":"guide/parameter/#Automatic-Support-Generation-During-Parameter-Definition","page":"Infinite Parameters","title":"Automatic Support Generation During Parameter Definition","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For the examples in the Parameter Definition, we have seen how to  manually add supports to an infinite parameter. For a quick automatic  generation of support points, though, users do not have to input the support  points. Instead, the number of support points generated is supplied.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For an infinite parameter subject to an IntervalDomain, uniformly spaced  supports including both ends are generated across the interval. For example,  defining a time parameter t in 0 10 with 4 supports using  build_parameter gives","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> domain = IntervalDomain(0, 10)\n[0, 10]\n\njulia> t_param = build_parameter(error, domain, num_supports = 4, sig_digits = 3);","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Using macro definition we have","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, t in [0, 10], num_supports = 4, sig_digits = 3)\nt\n\njulia> supports(t)\n4-element Vector{Float64}:\n  0.0   \n  3.33\n  6.67\n 10.0   \n","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that the user can use the keyword argument sig_digits to dictate the  significant figures for the supports. The default value of sig_digits is 12.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For an infinite parameter that follows a univariate distribution,  supports are sampled from the underlying distribution. For example, we can  define an infinite parameter subject to a normal distribution with mean 0 and  variance 1:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x ~ Normal(), num_supports = 4)\nx\n\njulia> supports(x)\n4-element Vector{Float64}:\n -0.353007400301\n -0.134853871931\n  0.679107426036\n  0.8284134829  ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For multivariate distributions, though, we require support points are provided  in the definition. However, we can use fill_in_supports! to generate  supports for parameters following multivariate distributions. See  Automatic Support Generation For Defined Parameters for details.","category":"page"},{"location":"guide/parameter/#Automatic-Support-Generation-For-Defined-Parameters","page":"Infinite Parameters","title":"Automatic Support Generation For Defined Parameters","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"So far, we have seen that in both definition methods it is allowed to initialize  a parameter with no supports. This is done by not specifying supports and  num_supports. However, infinite parameters would not be allowed at the  transcription step since it needs information about how to discretize the  infinite parameters. In previous examples, we have shown that users can add  supports to a defined parameter using methods add_supports and  set_supports.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In this section we introduce automatic support generation for defined  parameters with no associated supports. This can be done using the  fill_in_supports! functions. fill_in_supports! can take as  argument a GeneralVariableRef or an  AbstractArray{<:GeneralVariableRef}, in which case it will generate  supports for the associated infinite parameter. Alternatively,  fill_in_supports! can also take an InfiniteModel as an  argument, in which case it will generate supports for all infinite parameters  of the InfiniteModel with no supports.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"The fill_in_supports! method allows users to specify integer keyword  arguments num_supports and sig_digits. num_supports dictates the  number of supports to be generated, and sig_digits dictates the significant  figures of generated supports desired. The default values are 10 and 12,  respectively.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"The ways by which supports are automatically generated are as follows. If the  parameter is in an IntervalDomain, then we generate an array of supports  that are uniformly distributed along the interval, including the two ends. For  example, consider a 3D position parameter x distributed in the unit cube  [0, 1]. We can generate supports for that point in the following way:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x[1:3] in [0, 1], independent = true);\n\njulia> fill_in_supports!.(x, num_supports = 3);\n\njulia> supports.(x)\n3-element Vector{Vector{Float64}}:\n [0.0, 0.5, 1.0]\n [0.0, 0.5, 1.0]\n [0.0, 0.5, 1.0]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that the dot syntax because fill_in_supports! takes single  GeneralVariableRef as argument. In each dimension, three equally spaced  supports ([0.0, 0.5, 1.0]) are generated. Since the independent keyword is  set as true, the transcription stage will create a three-dimensional grid for  all variables parameterized by x, with each point separated by 0.5 units in  each dimension. We can view this grid by simply invoking supports without the   vectorized syntax:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> supports(x)\n3×27 Matrix{Float64}:\n 0.0  0.5  1.0  0.0  0.5  1.0  0.0  0.5  …  1.0  0.0  0.5  1.0  0.0  0.5  1.0\n 0.0  0.0  0.0  0.5  0.5  0.5  1.0  1.0     0.0  0.5  0.5  0.5  1.0  1.0  1.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     1.0  1.0  1.0  1.0  1.0  1.0  1.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"If the parameter is in a UniDistributionDomain or  MultiDistributionDomain, fill_in_supports!  samples num_supports supports from the distribution. Recall that support  generation is not allowed for parameters under multivariate distribution during  parameter definition. However, if the parameter is defined first without  supports, fill_in_supports! allows for supports generation. For  example, for a 2D random variable ξ under a multivariate Gaussian  distribution, we can generate supports for it in the following way:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> dist = MvNormal([0., 0.], [1. 0.; 0. 2.])\nFullNormal(\ndim: 2\nμ: [0.0, 0.0]\nΣ: [1.0 0.0; 0.0 2.0]\n)\n\n\njulia> @infinite_parameter(model, ξ[1:2] ~ dist);\n\njulia> fill_in_supports!(ξ, num_supports = 3)\n\njulia> supports(ξ)\n2×3 Matrix{Float64}:\n -0.353007  0.679107  0.586617\n -0.190712  1.17155   0.420496","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Note that fill_in_supports! only fill in supports for parameters with no  associated supports. To modify the supports of parameters already associated  with some supports, refer to Supports for how to do that.","category":"page"},{"location":"guide/parameter/#Parameter-Queries","page":"Infinite Parameters","title":"Parameter Queries","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In addition to the modeling framework, this package provides many functions for  users to access information about the model. This section will go over basic  functions for accessing parameter information.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Once a (possibly large-scale) InfiniteModel is built, the users might want to  check if an infinite parameter is actually used in any way. This could be  checked by is_used function as follows:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, x in [0, 1])\nx\n\njulia> is_used(x)\nfalse\n","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"This function checks if the parameter is used by any constraint, measure, or  variable. In a similar way, functions used_by_constraint,  used_by_measure and used_by_infinite_variable can be applied to  find out any dependency of specific types on the infinite parameter.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In addition, sometimes we need to check if a certain GeneralVariableRef  for an infinite parameter is valid with an InfiniteModel model, meaning that the  parameter reference actually refers to some parameter associated with the model. We  extend the JuMP.is_valid function from JuMP for that purpose. To see how  to use this, for example,","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> pref1 = GeneralVariableRef(model, 1, IndependentParameterIndex);\n\njulia> pref2 = GeneralVariableRef(model, 2, IndependentParameterIndex);\n\njulia> is_valid(model, pref1)\ntrue\n\njulia> is_valid(model, pref2)\nfalse","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"The second call of is_valid returns false because the model does  not have parameter with index 2 yet.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We can also access different information about the domain that the infinite  parameter is in. This is given by infinite_domain, which takes a  [GeneralVariableRef] as argument. For example, we have","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> infinite_domain(x)\n[0, 1]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"infinite_domain might be more useful if the infinite parameter is in a  UniDistributionDomain or MultiDistributionDomain, by which users  can access information about the underlying distribution. On the other hand,  if we already know that the parameter is in an interval domain, we can use  JuMP.has_lower_bound, JuMP.lower_bound,  JuMP.has_upper_bound, JuMP.upper_bound to retrieve information  about the interval domain in a more specific way:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> has_lower_bound(x)\ntrue\n\njulia> lower_bound(x)\n0.0\n\njulia> has_upper_bound(x)\ntrue\n\njulia> upper_bound(x)\n1.0","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"A quick way for users to obtain a GeneralVariableRef for a parameter with  a known name would be through parameter_by_name function. This  function takes an InfiniteModel and the parameter name in string,  and returns a GeneralVariableRef for that parameter. For example, ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> pref = parameter_by_name(model, \"x\")\nx","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"If there is no parameter associated with that name, the function would return  nothing. Otherwise, if multiple parameters share the same name, the function  would throw an error.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Now we introduce two additional functions that we can use to access parameter  information for an  InfiniteModel. The function  num_parameters returns the number of infinite parameters associated  with a model, while all_parameters returns the list of all infinite  parameter references in the model. For a quick example: ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> @infinite_parameter(model, y[1:2] in [0, 5])\n2-element Vector{GeneralVariableRef}:\n y[1]\n y[2]\n\njulia> num_parameters(model)\n3\n\njulia> all_parameters(model)\n3-element Vector{GeneralVariableRef}:\n x   \n y[1]\n y[2]","category":"page"},{"location":"guide/parameter/#Parameter-Modification","page":"Infinite Parameters","title":"Parameter Modification","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In this section we introduce a few shortcuts for users to modify defined  infinite parameters.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"First, once an infinite parameter is defined, we can change its name by calling  the [JuMP.set_name] function, which takes the [GeneralVariableRef] of  the parameter that needs a name change and the name string as arguments. For  example, to change the parameter x to t we can do:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> JuMP.set_name(x, \"t\")\n\njulia> all_parameters(model)\n3-element Vector{GeneralVariableRef}:\n t   \n y[1]\n y[2]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"In a similar way, we can also change the infinite domain that the parameter is in  using the set_infinite_domain function as follows:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> t = parameter_by_name(model, \"t\")\nt\n\njulia> set_infinite_domain(t, IntervalDomain(0, 5))\n\njulia> infinite_domain(t)\n[0, 5]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"For parameters in an IntervalDomain, we extend  JuMP.set_lower_bound and JuMP.set_upper_bound functions  for users to modify the lower bounds and upper bounds. For example,","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> JuMP.set_lower_bound(t, 1)\n\njulia> JuMP.set_upper_bound(t, 4)\n\njulia> infinite_domain(t)\n[1, 4]","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"We do not support setting lower bounds and upper bounds for random parameters  in a UniDistributionDomain and will throw an error if users attempt to do  so. If users want to set lower bound and upper bound for a random infinite  parameter, consider using Distributions.Truncated, which creates a truncated  distribution from a univariate distribution.","category":"page"},{"location":"guide/parameter/#gen_supp_docs","page":"Infinite Parameters","title":"Generative Supports","text":"","category":"section"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Generative supports denote supports that are generated based on existing supports   (treated as finite elements). These are important for enabling certain measure   and derivative evaluation schemes. Examples of such supports include internal   collocation nodes and quadrature supports generated for quadrature methods that  decompose the infinite domain such that existing supports are incorporated. Users  shouldn't modify these directly, but extension writers will need to utilize the  generative support API when developing measures and/or derivative evaluation  methods that need to generate supports based on existing ones (e.g., adding  a new orthogonal collocation method). More information about extension writing  for either case is given on the Extensions page. For enhanced context, we  outline the general API below.","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Information about producing generative supports are stored via concrete subtypes  of AbstractGenerativeInfo. Each IndependentParameter stores one of  these objects (the default being NoGenerativeSupports). Hence, a  particular independent parameter can only be associated with 1 generative support  scheme. We currently provide 1 concrete generative subtype of  AbstractGenerativeInfo which is UniformGenerativeInfo.  UniformGenerativeInfo stores the necessary information to make generative  supports that are uniformly applied to each finite element formed by the existing  supports. For example, let's say we want to use a generative support scheme that  adds 1 generative support exactly in the middle of each finite element with a  unique support label to we'll call MyGenLabel:","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"julia> struct MyGenLabel <: InfiniteOpt.InternalLabel end;\n\njulia> UniformGenerativeInfo([0.5], MyGenLabel)\nUniformGenerativeInfo([0.5], MyGenLabel)","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"Users can make other generative support schemes as described on the Extensions  page. ","category":"page"},{"location":"guide/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"These AbstractGenerativeInfo objects are added to parameters as needed via the  addition of measures and/or derivative methods that require generative supports.  We can always check what generative information is currently associated with a  particular parameter via generative_support_info.  The generation of these supports is handled automatically at the appropriate  times via add_generative_supports. We can always check if generative  supports have been created for a particular parameter with  has_generative_supports.","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Stochastic Optimization/flexible_design.jl\"","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/#Power-Network-Flexibility-Design","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"","category":"section"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"Here we consider a stochastic flexibility design problem that is inspired from an example problem in Pulsipher JL, Zavala VM. A scalable stochastic programming approach for the design of flexible systems. Computers & Chemical Engineering. 2019 Sep 2;128:69-76. See the paper here.","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/#Modeling-and-Solution","page":"Power Network Flexibility Design","title":"Modeling and Solution","text":"","category":"section"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"using InfiniteOpt, Clp, Distributions\n\n# Set the covariance matrix for the uncertain parameters\nθ_nom = [0.; 60.; 10.]\ncovar = [80. 0 0; 0 80. 0; 0 0 120.]\n\n# Set the dimensions\nn_z = 3; n_θ = 3; n_d = 3\n\n# Set the problem parameters\nc = ones(n_d) / sqrt(n_d)\nc_max = 5\nU = 10000\nnum_samples = 100 # more should be used (kept small for doc generation)\n\n# Initialize the model\nm = InfiniteModel(Clp.Optimizer)\nset_silent(m)\n\n# Set the uncertainty parameters\n@infinite_parameter(m, θ[i = 1:n_θ] ~ MvNormal(θ_nom, covar),\n                    num_supports = num_samples)\n\n# Initialize the variables\n@variable(m, 0 <= y <= 1, Infinite(θ))\n@variable(m, z[1:n_z], Infinite(θ))\n@variable(m, d[1:n_d] >= 0)\n\n# Set objective function\n@objective(m, Max, expect(1 - y, θ))\n\n# Set the line capacity constraints\n@constraint(m, f1, -z[1] - 35 - d[1] <= y * U)\n@constraint(m, f2, z[1] - 35 - d[1] <= y * U)\n@constraint(m, f3, -z[2] - 50 - d[2] <= y * U)\n@constraint(m, f4, z[1] - 50 - d[2] <= y * U)\n\n# Set the generator capacity constraints\n@constraint(m, f5, -z[3] <= y * U)\n@constraint(m, f6, z[3] - 100 - d[3] <= y * U)\n\n# Set the node balance constraints\n@constraint(m, h1, z[1] - θ[1] == 0)\n@constraint(m, h2, -z[1] -z[2] + z[3] - θ[2] == 0)\n@constraint(m, h3, z[2] - θ[3] == 0)\n\n# Enforce the minimum SF\n@constraint(m, max_cost, sum(c[i] * d[i] for i = 1:n_d) <= c_max)\n\n# Solve and and obtain results\noptimize!(m)\nif has_values(m)\n    opt_y = value(y)\n    opt_d = value.(d)\n    opt_obj = objective_value(m)\nend\n\n# Estimate the value of SF\nSF = 1 - sum(opt_y .>= 1e-8) / num_samples\n\n# Print the results\nprint(\"------------------RESULTS------------------\\n\")\nprint(\"Optimal Objective:     \", opt_obj, \"\\n\")\nprint(\"Optimal Cost:          \", sum(c[i] * opt_d[i] for i = 1:n_d), \"\\n\")\nprint(\"Maximum Cost:          \", c_max, \"\\n\")\nprint(\"Predicted SF:          \", 100 * SF, \"%\\n\")\nprint(\"Optimal Design Values: \", opt_d, \"\\n\\n\")","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"------------------RESULTS------------------\nOptimal Objective:     0.9999865533882265\nOptimal Cost:          5.0\nMaximum Cost:          5\nPredicted SF:          98.0%\nOptimal Design Values: [0.0, 0.0, 8.660254037844386]\n\n","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/#Maintenance-Tests","page":"Power Network Flexibility Design","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"using Test\n@test termination_status(m) == MOI.OPTIMAL\n@test opt_y isa Vector{<:Real}","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"Test Passed","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"","category":"page"},{"location":"examples/Stochastic Optimization/flexible_design/","page":"Power Network Flexibility Design","title":"Power Network Flexibility Design","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/derivative/#deriv_manual","page":"Derivatives","title":"Derivative Operators","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"A technical manual for derivatives in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/derivative/#Definition","page":"Derivatives","title":"Definition","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"deriv\n∂\n@deriv\n@∂\nDeriv\nJuMP.build_variable(::Function, ::JuMP.VariableInfo, ::Deriv)\nbuild_derivative\nDerivative\nadd_derivative\nDerivativeIndex\nDerivativeRef","category":"page"},{"location":"manual/derivative/#InfiniteOpt.deriv","page":"Derivatives","title":"InfiniteOpt.deriv","text":"deriv(expr::JuMP.AbstractJuMPScalar, pref1::GeneralVariableRef[, ....]\n      )::Union{JuMP.AbstractJuMPScalar, Float64}\n\nApply appropriate calculus methods to define and return the derivative expression of expr  with respect to the infinite parameter(s) pref1, pref2, etc. in that respective  order. This will implicilty build and add individual [Derivative`](@ref)s as  appropriate. Errors if no infinite parameter is given or if the parameters are  not infinite.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 1])\nt\n\njulia> @variable(m, x, Infinite(t))\nx(t)\n\njulia> @variable(m, z)\nz\n\njulia> deriv_expr = deriv(x^2 + z, t, t)\n2 ∂/∂t[∂/∂t[x(t)]]*x(t) + 2 ∂/∂t[x(t)]²\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.∂","page":"Derivatives","title":"InfiniteOpt.∂","text":"∂(expr::JuMP.AbstractJuMPScalar, pref1::GeneralVariableRef[, ....]\n  )::Union{JuMP.AbstractJuMPScalar, Float64}\n\nThis serves as a convenient unicode wrapper for deriv. The ∂ is  produced via \\partial.\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.@deriv","page":"Derivatives","title":"InfiniteOpt.@deriv","text":"@deriv(expr, pref_expr1[, ...]\n       )::Union{JuMP.AbstractJuMPScalar, Float64}\n\nThe macro variant of deriv that is more efficient for expression building  and enables symbolic differential operator parameter defintions via pref_exprs.  Like deriv expr can be any InfiniteOpt expression and the appropriate calculus  rules will applied to expr to take its derivative with respect to the indicated  infinite parameters detailed by the pref_exprs. The resulting derivative  expression will contain individual derivatives that were created and added to the  InfiniteModel as needed. Here each pref_expr arugment can be of the form:\n\npref::GeneralVariableRef: An indiviudal infinite parameter reference\n(pref::GeneralVariableRef)^(p::Int): An infinite parameter applied p times.\n\nThus, the syntax @deriv(expr, pref^2) is equivalent to @deriv(expr, pref, pref). \n\nThis will error if pref_expr is an unrecongnized syntax, no infinite parameter  is given, or if any of the specified parameters are not infinite.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 1])\nt\n\njulia> @variable(m, x, Infinite(t))\nx(t)\n\njulia> @variable(m, z)\nz\n\njulia> deriv_expr = @deriv(x^2 + z, t^2)\n2 ∂/∂t[∂/∂t[x(t)]]*x(t) + 2 ∂/∂t[x(t)]²\n\n\n\n\n\n","category":"macro"},{"location":"manual/derivative/#InfiniteOpt.@∂","page":"Derivatives","title":"InfiniteOpt.@∂","text":"@∂(expr, pref_expr1[, ...])::Union{JuMP.AbstractJuMPScalar, Float64}\n\nThis serves as a convenient unicode wrapper for @deriv. The ∂ is  produced via \\partial.\n\n\n\n\n\n","category":"macro"},{"location":"manual/derivative/#InfiniteOpt.Deriv","page":"Derivatives","title":"InfiniteOpt.Deriv","text":"Deriv{V, P} <: InfOptVariableType\n\nA DataType to assist in making derivative variables. This can be passed as an  extra argument to @variable to make such a variable: \n\n@variable(model, var_expr, Deriv(inf_var, inf_par), kwargs...)\n\nHere inf_var is the infinite variable that is being operated on and inf_par  is the infinite parameter that the derivative is defined with respect to.\n\nFields\n\nargument::V: The infinite variable being operated on.\noperator_parameter::P: The infinite parameter that determines the derivative.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#JuMP.build_variable-Tuple{Function, VariableInfo, Deriv}","page":"Derivatives","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, info::JuMP.VariableInfo, \n                    var_type::Deriv)::InfiniteVariable{GeneralVariableRef}\n\nBuild and return a first order derivative based on info and var_type. Errors  if the information in var_type is invalid. See Deriv for more  information.\n\nExample\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> deriv_var = build_variable(error, info, Deriv(y, t));\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.build_derivative","page":"Derivatives","title":"InfiniteOpt.build_derivative","text":"build_derivative(_error::Function, info::JuMP.VariableInfo, \n                 argument_ref::GeneralVariableRef, \n                 parameter_ref::GeneralVariableRef\n                 )::Derivative\n\nConstructs and returns a Derivative with a differential operator that  depends on parameter_ref and operates on argument_ref. Variable info can also  be provided to associate this derivative with bounds and a starting value function  like that of infinite variables. Errors when argument_ref is not an  infinite/semi-infinite variable or derivative that depends on parameter_ref.\n\nExample ```julia-repl  julia> @infiniteparameter(m, t in [0, 1]); @infinitevariable(m, x(t));\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, false, 0, false, false);\n\njulia> buildderivative(error, info, x, t) Derivative{GeneralVariableRef}(VariableInfo{Float64,Float64,Float64,Function}(false, 0.0, false, 0.0, false, 0.0, false, startfunc, false, false), true, x(t), t) ````\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.Derivative","page":"Derivatives","title":"InfiniteOpt.Derivative","text":"Derivative{F <: Function, V <: GeneralVariableRef} <: JuMP.AbstractVariable\n\nA DataType for storing core infinite derivative information. This follows a  derivative of the form: fracpartial x(alpha hdots)partial alpha  where x(alpha hdots) is an infinite variable and alpha is an infinite  parameter. Here, both x and alpha must be scalars. \n\nIt is important to note that info.start should contain a start value function that generates the start value for a given infinite parameter support. This function should map a support to a start value using user-formatting if is_vector_start = false, otherwise it should do the mapping using a single support vector as input. Also, the variable reference type V must pertain to infinite variables and parameters.\n\nFields\n\ninfo::JuMP.VariableInfo{Float64, Float64, Float64, F}: JuMP variable information.\nis_vector_start::Bool: Does the start function take support values formatted as vectors?\nvariable_ref::V: The variable reference of the infinite variable argument.\nparameter_ref::V: The variable reference of the infinite parameter the defines the  differential operator.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.add_derivative","page":"Derivatives","title":"InfiniteOpt.add_derivative","text":"add_derivative(model::InfiniteModel, d::Derivative, \n               [name::String = \"\"])::GeneralVariableRef\n\nAdds a derivative d to model and returns a GeneralVariableRef that points  to it. Errors if the derivative dependencies do not belong to model. Note that  d should be built using build_derivative to avoid nuance internal  errors.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 1]); @variable(m, x, Infinite(t));\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, false, 0, false, false);\n\njulia> d = build_derivative(error, info, x, t);\n\njulia> dref = add_derivative(m, d)\n∂/∂t[x(t)]\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.DerivativeIndex","page":"Derivatives","title":"InfiniteOpt.DerivativeIndex","text":"DerivativeIndex <: ObjectIndex\n\nA DataType for storing the index of a Derivative.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.DerivativeRef","page":"Derivatives","title":"InfiniteOpt.DerivativeRef","text":"DerivativeRef <: DispatchVariableRef\n\nA DataType for untranscripted derivative references.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::DerivativeIndex: Index of the derivative in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#Queries","page":"Derivatives","title":"Queries","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"derivative_argument(::DerivativeRef)\noperator_parameter(::DerivativeRef)\nnum_derivatives\nall_derivatives\nparameter_refs(::DerivativeRef)\nparameter_list(::DerivativeRef)\nraw_parameter_refs(::DerivativeRef)","category":"page"},{"location":"manual/derivative/#InfiniteOpt.derivative_argument-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.derivative_argument","text":"derivative_argument(dref::DerivativeRef)::GeneralVariableRef\n\nReturns the infinite variable/derivative reference that is the input the differential operator (i.e., the dependent variable of the derivative).\n\nExample\n\njulia> derivative_argument(dref) \nx(t)\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.operator_parameter-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.operator_parameter","text":"operator_parameter(dref::DerivativeRef)::GeneralVariableRef\n\nReturns the infinite parameter reference that is what the differential operator  is operating with respect to (i.e., the independent  variable of the derivative).\n\nExample\n\njulia> operator_parameter(dref) \nt\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.num_derivatives","page":"Derivatives","title":"InfiniteOpt.num_derivatives","text":"num_derivatives(model::InfiniteModel)::Int\n\nReturns the number of derivatives that have been defined in model. Note that  nested derivatives will be counted in accordance with their components (e.g.,  fracd^2 x(t)dt^2 =\\frac{d}{dt}\\left(\\frac{d x(t)}{dt} \\right)``  will count as 2 derivatives.)\n\nExample\n\njulia> num_derivatives(model)\n12\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.all_derivatives","page":"Derivatives","title":"InfiniteOpt.all_derivatives","text":"all_derivatives(model::InfiniteModel)::Vector{GeneralVariableRef}\n\nReturns a list of all the individual derivatives stored in model. \n\nExample\n\njulia> all_derivatives(model)\n3-element Array{GeneralVariableRef,1}:\n ∂/∂t[T(x, t)]\n ∂/∂x[T(x, t)]\n ∂/∂x[∂/∂x[T(x, t)]]\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.parameter_refs-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(dref::DerivativeRef)::Tuple\n\nReturn the parameter references associated with the infinite derivative dref. This is formatted as a Tuple of containing the parameter references as they inputted to define dref.\n\nExample\n\njulia> parameter_refs(deriv)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.parameter_list-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.parameter_list","text":"parameter_list(dref::DerivativeRef)::Vector{GeneralVariableRef}\n\nReturn a vector of the parameter references that dref depends on. This is primarily an internal method where parameter_refs is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.raw_parameter_refs-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refs(dref::DerivativeRef)::VectorTuple\n\nReturn the raw VectorTuple of the  parameter references that dref depends on. This is primarily an internal method  where parameter_refs  is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#Modification","page":"Derivatives","title":"Modification","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"set_start_value_function(::DerivativeRef,::Union{Real, Function})\nreset_start_value_function(::DerivativeRef)","category":"page"},{"location":"manual/derivative/#InfiniteOpt.set_start_value_function-Tuple{DerivativeRef, Union{Function, Real}}","page":"Derivatives","title":"InfiniteOpt.set_start_value_function","text":"set_start_value_function(dref::DerivativeRef,\n                         start::Union{Real, Function})::Nothing\n\nSet the start value function of dref. If start::Real then a function is generated to such that the start value will be start for the entire infinite domain. If start::Function then this function should map to a scalar start value given a support value arguments matching the format of the parameter elements in parameter_refs(dref).\n\nExample\n\njulia> set_start_value_function(dref, 1) # all start values will be 1\n\njulia> set_start_value_function(dref, my_func) # each value will be made via my_func\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.reset_start_value_function-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.reset_start_value_function","text":"reset_start_value_function(dref::DerivativeRef)::Nothing\n\nRemove the existing start value function and return to the default. Generally, this is triggered by deleting an infinite parameter that dref depends on.\n\nExample\n\njulia> reset_start_value_function(dref)\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#Evaluation","page":"Derivatives","title":"Evaluation","text":"","category":"section"},{"location":"manual/derivative/","page":"Derivatives","title":"Derivatives","text":"AbstractDerivativeMethod\nGenerativeDerivativeMethod\nOrthogonalCollocation\nNonGenerativeDerivativeMethod\nFiniteDifference\nFDTechnique\nForward\nCentral\nBackward\nderivative_method(::DerivativeRef)\nset_derivative_method(::IndependentParameterRef, ::NonGenerativeDerivativeMethod)\nset_derivative_method(::DependentParameterRef, ::AbstractDerivativeMethod)\nset_all_derivative_methods\nevaluate(::DerivativeRef)\nevaluate_all_derivatives!\nhas_derivative_constraints(::DerivativeRef)\nderivative_constraints(::DerivativeRef)\ndelete_derivative_constraints(::DerivativeRef)\nevaluate_derivative\ngenerative_support_info(::AbstractDerivativeMethod)\nsupport_label(::AbstractDerivativeMethod)\nInfiniteOpt.make_reduced_expr","category":"page"},{"location":"manual/derivative/#InfiniteOpt.AbstractDerivativeMethod","page":"Derivatives","title":"InfiniteOpt.AbstractDerivativeMethod","text":"AbstractDerivativeMethod\n\nAn abstract type for storing derivative evaluation data that is pertinent to its  reformation/transcription. \n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.GenerativeDerivativeMethod","page":"Derivatives","title":"InfiniteOpt.GenerativeDerivativeMethod","text":"GenerativeDerivativeMethod <: AbstractDerivativeMethod\n\nAn abstract type for derivative evaluation method types that will require support  generation when employed (e.g., internal node points associated with orthogonal  collocation). Such methods can be used with derivatives that depend on independent  infinite parameters, but cannot be used for ones that depend on dependent parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.OrthogonalCollocation","page":"Derivatives","title":"InfiniteOpt.OrthogonalCollocation","text":"OrthogonalCollocation{Q <: MeasureToolbox.AbstractUnivariateMethod\n                      } <: GenerativeDerivativeMethod\n\nA DataType for storing information about orthogonal collocation over finite  elements to approximate derivatives. The constructor is of the form:\n\n    OrthogonalCollocation(num_nodes::Int, \n                          [quad::AbstractUnivariateMethod = GaussLobatto])\n\nFields\n\nnum_nodes::Int: The number of collocation points (nodes) per finite element.\nquadrature_method::Q: The quadrature method uses to choose the collocation points.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.NonGenerativeDerivativeMethod","page":"Derivatives","title":"InfiniteOpt.NonGenerativeDerivativeMethod","text":"NonGenerativeDerivativeMethod <: AbstractDerivativeMethod\n\nAn abstract type for derivative evaluation method types that do not require the  definition of additional support points. Such methods are amendable to any  derivative in InfiniteOpt including those with dependent infinite parameter  dependencies.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.FiniteDifference","page":"Derivatives","title":"InfiniteOpt.FiniteDifference","text":"FiniteDifference{T <: FDTechnique} <: NonGenerativeDerivativeMethod\n\nA DataType for information about finite difference method applied to  a derivative evaluation. Note that the constructor is of the form:\n\n    FiniteDifference([technique::FDTechnique = Backward()],\n                     [add_boundary_constr::Bool = true])\n\nwhere technique is the indicated finite difference method to be applied and  add_boundary_constr indicates if the finite difference equation corresponding to  a boundary support should be included. Thus, for backward difference since corresponds to the terminal point and for forward difference this corresponds to  the initial point. We recommend using add_boundary_constr = false when an final  condition is given with a backward method or when an initial condition is given  with a forward method. Note that this argument is ignored for central finite  difference which cannot include any boundary points.\n\nFields \n\ntechnique::T: Mathematical technqiue behind finite difference\nadd_boundary_constraint::Bool: Indicate if the boundary constraint should be  included in the transcription (e.g., the terminal boundary backward equation for  backward difference)\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.FDTechnique","page":"Derivatives","title":"InfiniteOpt.FDTechnique","text":"FDTechnique\n\nAn abstract data type for labels of specific techniques applied in the finite  difference method in derivative evaluation.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.Forward","page":"Derivatives","title":"InfiniteOpt.Forward","text":"Forward <: FDTechnique\n\nA technique label for finite difference method that implements a forward  difference approximation.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.Central","page":"Derivatives","title":"InfiniteOpt.Central","text":"Central <: FDTechnique\n\nA technique label for finite difference method that implements a central  difference approximation.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.Backward","page":"Derivatives","title":"InfiniteOpt.Backward","text":"Backward <: FDTechnique\n\nA technique label for finite difference method that implements a backward  difference approximation.\n\n\n\n\n\n","category":"type"},{"location":"manual/derivative/#InfiniteOpt.derivative_method-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.derivative_method","text":"derivative_method(dref::DerivativeRef)::AbstractDerivativeMethod\n\nReturns the evaluation method employed by dref that determines the numerical  computation scheme that will be used to evaluate the derivative. Note that this  is set on by the infinite parameter with respect to which the derivative is  defined.\n\nExample\n\njulia> derivative_method(dref) \nFiniteDifference(Backward, true)\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.set_derivative_method-Tuple{IndependentParameterRef, NonGenerativeDerivativeMethod}","page":"Derivatives","title":"InfiniteOpt.set_derivative_method","text":"set_derivative_method(pref::IndependentParameterRef, \n                      method::AbstractDerivativeMethod)::Nothing\n\nSpecfies the desired derivative evaluation method method for derivatives that are  taken with respect to pref. Any internal supports exclusively associated with  the previous method will be deleted. Also, if any derivatives were evaluated  manually, the associated derivative evaluation constraints will be deleted. Errors  if new derivative method generates supports that are incompatible with existing  measures.\n\nExample\n\njulia> set_derivative_method(d, OrthogonalCollocation(2))\n\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.set_derivative_method-Tuple{DependentParameterRef, AbstractDerivativeMethod}","page":"Derivatives","title":"InfiniteOpt.set_derivative_method","text":"set_derivative_method(pref::DependentParameterRef, \n                      method::NonGenerativeDerivativeMethod)::Nothing\n\nSpecfies the desired derivative evaluation method method for derivatives that are  taken with respect to pref. Errors if method is generative (i.e., it requires  the definition of additional supports)\n\nExample\n\njulia> set_derivative_method(d, FiniteDifference())\n\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.set_all_derivative_methods","page":"Derivatives","title":"InfiniteOpt.set_all_derivative_methods","text":"set_all_derivative_methods(model::InfiniteModel, \n                           method::AbstractDerivativeMethod)::Nothing\n\nSets the desired evaluation method method for all the derivatives currently added  to model. Note that this is done with respect to the infinite parameters. Errors  if a generative method is specified and the model contains dependent parameters.\n\nExample\n\njulia> set_all_derivative_methods(model, OrthogonalCollocation(2))\n\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.evaluate-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.evaluate","text":"evaluate(dref::DerivativeRef)::Nothing\n\nNumerically evaluate dref by computing its auxiliary derivative constraints  (e.g., collocation equations) and add them to the model. For normal usage, it is  recommended that this method not be called directly and instead have TranscriptionOpt  handle these equations. Errors if evaluate_derivative is not  defined for the derivative method employed.\n\nThe resulting constraints can be accessed via derivative_constraints.\n\nExample\n\njulia> m = InfiniteModel(); @infinite_parameter(m, t in [0,2]); @variable(m, T, Infinite(t));\n\njulia> dref = @deriv(T,t)\n∂/∂t[T(t)]\n\njulia> add_supports(t, [0, 0.5, 1, 1.5, 2])\n\njulia> evaluate(dref)\n\njulia> derivative_constraints(dref)\nFeasibility\n4-element Array{InfOptConstraintRef,1}:\n 0.5 ∂/∂t[T(t)](0.5) - T(0.5) + T(0) = 0.0\n 0.5 ∂/∂t[T(t)](1) - T(1) + T(0.5) = 0.0\n 0.5 ∂/∂t[T(t)](1.5) - T(1.5) + T(1) = 0.0\n 0.5 ∂/∂t[T(t)](2) - T(2) + T(1.5) = 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.evaluate_all_derivatives!","page":"Derivatives","title":"InfiniteOpt.evaluate_all_derivatives!","text":"evaluate_all_derivatives!(model::InfiniteModel)::Nothing\n\nEvaluate all the derivatives in model by adding the corresponding auxiliary  equations to model. See evaluate for more information.\n\nExample\n\njulia> m = InfiniteModel();\n\njulia> @infinite_parameter(m, t in [0,2], supports = [0, 1, 2]);\n\njulia> @infinite_parameter(m, x in [0,1], supports = [0, 0.5, 1]);\n\njulia> @variable(m, T, Infinite(x, t));\n\njulia> dref1 = @deriv(T, t); dref2 = @deriv(T, x^2);\n\njulia> evaluate_all_derivatives!(m)\n\njulia> print(m)\nFeasibility\nSubject to\n ∂/∂t[T(x, t)](x, 1) - T(x, 1) + T(x, 0) = 0.0, ∀ x ∈ [0, 1]\n ∂/∂t[T(x, t)](x, 2) - T(x, 2) + T(x, 1) = 0.0, ∀ x ∈ [0, 1]\n 0.5 ∂/∂x[T(x, t)](0.5, t) - T(0.5, t) + T(0, t) = 0.0, ∀ t ∈ [0, 2]\n 0.5 ∂/∂x[T(x, t)](1, t) - T(1, t) + T(0.5, t) = 0.0, ∀ t ∈ [0, 2]\n 0.5 ∂/∂x[∂/∂x[T(x, t)]](0.5, t) - ∂/∂x[T(x, t)](0.5, t) + ∂/∂x[T(x, t)](0, t) = 0.0, ∀ t ∈ [0, 2]\n 0.5 ∂/∂x[∂/∂x[T(x, t)]](1, t) - ∂/∂x[T(x, t)](1, t) + ∂/∂x[T(x, t)](0.5, t) = 0.0, ∀ t ∈ [0, 2]\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.has_derivative_constraints-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.has_derivative_constraints","text":"has_derivative_constraints(dref::DerivativeRef)::Bool\n\nReturn a Bool whether dref has been evaluated within the InfiniteModel and  has derivative constraints that have been added to the InfiniteModel. Note this  does not indicate if such constraints have been added to the optimizer model. Thus,  with normal usage (i.e., not using evaluate) this should always return false.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.derivative_constraints-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.derivative_constraints","text":"derivative_constraints(dref::DerivativeRef)::Vector{InfOptConstraintRef}\n\nReturn a list of the derivative evaluation constraints for dref that have been  added directly to the InfiniteModel associated with dref. An empty vector is  returned is there are no such constraints.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.delete_derivative_constraints-Tuple{DerivativeRef}","page":"Derivatives","title":"InfiniteOpt.delete_derivative_constraints","text":"delete_derivative_constraints(dref::DerivativeRef)::Nothing\n\nDelete any derivative constraints of dref that have been directly added to the  InfiniteModel.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.evaluate_derivative","page":"Derivatives","title":"InfiniteOpt.evaluate_derivative","text":"evaluate_derivative(dref::GeneralVariableRef, \n                    method::AbstractDerivativeMethod,\n                    write_model::JuMP.AbstractModel)::Vector{JuMP.AbstractJuMPScalar}\n\nBuild expressions for derivative dref evaluated in accordance with method.  The expressions are of the form lhs - rhs, where lhs is a function of derivatives evaluated at some supports for certain infinite parameter, and rhs is a function of the derivative arguments evaluated at some supports for certain infinite parameter. For example, for finite difference methods at point t = 1, lhs is Δt * ∂/∂t[T(1)], and rhs could be T(1+Δt) - T(1) in case of forward difference mode. This is intended as a helper function for evaluate, which  will take the the expressions generated by this method and generate constraints that approximate the derivative values by setting the expressions as 0. However, one can extend this function  to encode custom methods for approximating derivatives. This should invoke  add_derivative_supports if the method is generative and users will likely find  it convenient to use make_reduced_expr.\n\n\n\n\n\n","category":"function"},{"location":"manual/derivative/#InfiniteOpt.generative_support_info-Tuple{AbstractDerivativeMethod}","page":"Derivatives","title":"InfiniteOpt.generative_support_info","text":"generative_support_info(method::AbstractDerivativeMethod)::AbstractGenerativeInfo\n\nReturn the AbstractGenerativeInfo associated with method. This is  intended as an internal method and should be extended for user-defined derivative  methods are GenerativeDerivativeMethods.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.support_label-Tuple{AbstractDerivativeMethod}","page":"Derivatives","title":"InfiniteOpt.support_label","text":"support_label(method::GenerativeDerivativeMethod)\n\nReturn the support label associated with method if there is one, errors otherwise.  This depends on generative_support_info  being defined for the type of method.\n\n\n\n\n\n","category":"method"},{"location":"manual/derivative/#InfiniteOpt.make_reduced_expr","page":"Derivatives","title":"InfiniteOpt.make_reduced_expr","text":"make_reduced_expr(vref::GeneralVariableRef, pref::GeneralVariableRef, \n                  support::Float64, write_model::Union{InfiniteModel, JuMP.Model})\n\nGiven the argument variable vref and the operator parameter pref from a  derivative, build and return the reduced expression in accordance to the support  support with respect to pref. New point/semi-infinite variables will be written to  write_model. This is solely intended as a helper function for derivative  evaluation.\n\n\n\n\n\n","category":"function"},{"location":"manual/variable/#var_manual","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"A technical manual for variables in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/variable/#Definition","page":"Variables","title":"Definition","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"Note that the principle way for defining variables is by using  JuMP.@variable  which originates from JuMP.jl.","category":"page"},{"location":"manual/variable/#Infinite","page":"Variables","title":"Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"InfOptVariableType\nInfinite\nJuMP.build_variable(::Function, ::JuMP.VariableInfo, ::Infinite)\nJuMP.add_variable(::InfiniteModel, ::InfiniteVariable, ::String)\nInfiniteVariable\nrestrict\nVariableData\nInfiniteVariableIndex\nInfiniteVariableRef\nInfiniteOpt.Collections.VectorTuple","category":"page"},{"location":"manual/variable/#InfiniteOpt.InfOptVariableType","page":"Variables","title":"InfiniteOpt.InfOptVariableType","text":"InfOptVariableType\n\nAn abstract DataType for variable type objects used to create InfiniteOpt  variables via JuMP.@variable.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.Infinite","page":"Variables","title":"InfiniteOpt.Infinite","text":"Infinite{VT <: VectorTuple} <: InfOptVariableType\n\nA DataType to assist in making infinite variables. This can be passed as an  extra argument to @variable to make an infinite variable: \n\n@variable(model, var_expr, Infinite(parameter_refs...), args..., kwargs...)\n\nHere parameter_refs can be a single parameter reference, a single parameter  array with parameters defined in the same macro call, or multiple arguments where  each argument is either of the first two options listed.\n\nFields\n\nparameter_refs::VT: The infinite parameters the variable will depend on.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#JuMP.build_variable-Tuple{Function, VariableInfo, Infinite}","page":"Variables","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, info::JuMP.VariableInfo, \n                    var_type::Infinite)::InfiniteVariable{GeneralVariableRef}\n\nBuild and return an infinite variable based on info and var_type. Errors if  the infinite parameter references included in var_type are invalid. See  Infinite for more information.\n\nExample\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> inf_var = build_variable(error, info, Infinite(t));\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.add_variable-Tuple{InfiniteModel, InfiniteVariable, String}","page":"Variables","title":"JuMP.add_variable","text":"JuMP.add_variable(model::InfiniteModel, var::InfiniteVariable,\n                  [name::String = \"\"])::GeneralVariableRef\n\nExtend the JuMP.add_variable function to accomodate infinite variable  types. Adds a variable to an infinite model model and returns a  GeneralVariableRef. Primarily intended to be an internal function of  the constructor macro @variable. However, it can be used in combination with JuMP.build_variable to add  infinite variables to an infinite model object. Errors if invalid parameter reference(s) are included in var.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 10]);\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> inf_var = build_variable(error, info, Infinite(t));\n\njulia> ivref = add_variable(m, inf_var, \"var_name\")\nvar_name(t)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.InfiniteVariable","page":"Variables","title":"InfiniteOpt.InfiniteVariable","text":"InfiniteVariable{F <: Function, VT <: VectorTuple} <: JuMP.AbstractVariable\n\nA DataType for storing core infinite variable information. Note that indices that refer to the same dependent parameter group must be in the same tuple element. It is important to note that info.start should contain a start value function that generates the start value for a given infinite parameter support. This function should map a support to a start value using user-formatting if is_vector_start = false, otherwise it should do the mapping using a single support vector as input.\n\nFields\n\ninfo::JuMP.VariableInfo{Float64, Float64, Float64, F}: JuMP variable information. Here the start value is a function that maps the parameter values to a start value.\nparameter_refs::VT: The infinite parameter references that parameterize the  variable.\nparameter_nums::Vector{Int}: The parameter numbers of parameter_refs.\nobject_nums::Vector{Int}: The parameter object numbers associated with parameter_refs.\nis_vector_start::Bool: Does the start function take support values formatted as vectors?\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.restrict","page":"Variables","title":"InfiniteOpt.restrict","text":"restrict(ivref::GeneralVariableRef, supps...)::GeneralVariableRef\n\nRestrict the input domain of an infinite variable/derivative ivref in  accordance with the infinite parameters and/or values supps. Here supps must  match the formatting of ivref's infinite parameters. Here the following  outputs are possible:\n\nEquivalent to @variable(model, variable_type = Point(ivref, supps...) if  supps are a complete support point\nEquivalent to @variable(model, variable_type = SemiInfinite(ivref, supps...)  if supps are a partial support point.\n\nConveniently, we can also invoke this method by calling ivref(supps...).\n\nErrors if ivref is not an infinite variable or derivative or the formatting of  supps is incorrect. Will warn if supps only contain infinite parameters and  will simply return ivref.\n\nExample\n\njulia> restrict(y, 0, x)\ny(0, [x[1], x[2]])\n\njulia> restrict(y, 0, [0, 0])\ny(0, [0, 0])\n\njulia> y(0, x)\ny(0, [x[1], x[2]])\n\njulia> y(0, [0, 0])\ny(0, [0, 0])\n\n\n\n\n\n","category":"function"},{"location":"manual/variable/#InfiniteOpt.VariableData","page":"Variables","title":"InfiniteOpt.VariableData","text":"VariableData{V <: JuMP.AbstractVariable} <: AbstractDataObject\n\nA mutable DataType for storing variables and their data.\n\nFields\n\nvariable::V: The scalar variable.\nname::String: The name used for printing.\nlower_bound_index::Union{InfOptConstraintIndex, Nothing}: Index of lower bound constraint.\nupper_bound_index::Union{InfOptConstraintIndex, Nothing}: Index of upper bound constraint.\nfix_index::Union{InfOptConstraintIndex, Nothing}: Index on fixing constraint.\nzero_one_index::Union{InfOptConstraintIndex, Nothing}: Index of binary constraint.\nintegrality_index::Union{InfOptConstraintIndex, Nothing}: Index of integer constraint.\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nconstraint_indices::Vector{InfOptConstraintIndex}: Indices of dependent constraints.\nin_objective::Bool: Is this used in objective?\npoint_var_indices::Vector{PointVariableIndex}: Indices of dependent point variables.\nsemi_infinite_var_indices::Vector{SemiInfiniteVariableIndex}: Indices of dependent semi-infinite variables.\nderivative_indices::Vector{DerivativeIndex}: Indices of dependent derivatives.\nderiv_constr_indices::Vector{InfOptConstraintIndex}: Indices of dependent derivative evaluation constraints.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.InfiniteVariableIndex","page":"Variables","title":"InfiniteOpt.InfiniteVariableIndex","text":"InfiniteVariableIndex <: ObjectIndex\n\nA DataType for storing the index of a InfiniteVariable.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.InfiniteVariableRef","page":"Variables","title":"InfiniteOpt.InfiniteVariableRef","text":"InfiniteVariableRef <: DispatchVariableRef\n\nA DataType for untranscripted infinite dimensional variable references (e.g., second stage variables, time dependent variables).\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::InfiniteVariableIndex: Index of the variable in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.Collections.VectorTuple","page":"Variables","title":"InfiniteOpt.Collections.VectorTuple","text":"VectorTuple{T, I <: Tuple}\n\nA collection DataType for storing a Tuple of singular elements of type T and/or AbstractArray{<:T}s in a convenient vector form that utilizes linear indexing. Here I is denotes the type of a Tuple that stores the  indices of each tuple element as given by indices. VectorTuples should be  defined from an original tuple via VectorTuple(tuple) or by listing the tuple  elements VectorTuple(items...). Note this is still an experimental type and is  primarily intended to store infinite parameter reference tuples and point  variable support value tuples. Some of the notable capabilities are exemplified  below.\n\nExample\n\njulia> tuple = (3, [-2, 4], ones(2, 2))\n(3, [-2, 4], [1.0 1.0; 1.0 1.0])\n\njulia> vt = VectorTuple(tuple) # make by listing items (notice everything is a vector)\n([3.0], [3.0, 4.0], [1.0, 1.0, 1.0, 1.0])\n\njulia> vt[2] # linear indexing\n-2.0\n\njulia> vt[2, 2] # tuple indexing (note the second index is treated linearly)\n4.0\n\njulia> vt[6:end] # linear slicing\n2-element Array{Float64,1}:\n 1.0\n 1.0\n\njulia> vt[2:3, :] # tuple slicing\n2-element Array{Array{Float64,1},1}:\n [-2.0, 4.0]\n [1.0, 1.0, 1.0, 1.0]\n\njulia> tuple2 = Tuple(vt) # rebuild original Tuple with original indices\n([3.0], [-2.0, 4.0], [1.0 1.0; 1.0 1.0])\n\njulia> inds = [true, true, true, false, true, true, true];\n\njulia> restricted_copy(vt, delete_locs) # make a copy with deleted elements\n([3.0], [-2.0, 4.0], [1.0, 1.0, 1.0])\n\njulia> Tuple(vt) # The 3rd element becomes a SparseAxisArray because of deletion\n([3.0], [-2.0, 4.0],   [1, 2]  =  1.0\n  [2, 2]  =  1.0\n  [2, 1]  =  1.0)\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#Semi-Infinite","page":"Variables","title":"Semi-Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"SemiInfinite\nJuMP.build_variable(::Function, ::JuMP.VariableInfo, ::SemiInfinite)\nJuMP.build_variable(::Function, ::GeneralVariableRef, ::Dict{Int, Float64})\nJuMP.add_variable(::InfiniteModel, ::SemiInfiniteVariable, ::String)\nSemiInfiniteVariable\nSemiInfiniteVariableIndex\nSemiInfiniteVariableRef","category":"page"},{"location":"manual/variable/#InfiniteOpt.SemiInfinite","page":"Variables","title":"InfiniteOpt.SemiInfinite","text":"SemiInfinite{V, VT <: VectorTuple} <: InfOptVariableType\n\nA DataType to assist in making semi-infinite variables. This can be passed as an  extra argument to @variable to make such a variable: \n\n@variable(model, var_expr, SemiInfinite(inf_var, parameter_values...), kwargs...)\n\nHere parameter_values must match the format of the infinite parameter  references associated with the infinite variable inf_var and can be comprised  of both real valued supports and/or infinite parameters.\n\nFields\n\ninfinite_variable_ref::V\nparameter_values::VT: The infinite parameters and/or infinite   parameter support values the variable will depend on.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#JuMP.build_variable-Tuple{Function, VariableInfo, SemiInfinite}","page":"Variables","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, info::JuMP.VariableInfo, \n                    var_type::SemiInfinite)::SemiInfiniteVariable{GeneralVariableRef}\n\nBuild and return a semi-infinite variable based on info and var_type. Errors  if the information stored in var_type is invalid. See SemiInfinite  for more information.\n\nExample\n\njulia> y\ny(t, x)\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> semi_inf_var = build_variable(error, info, SemiInfinite(y, t, 0));\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.build_variable-Tuple{Function, GeneralVariableRef, Dict{Int64, Float64}}","page":"Variables","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, ivref::GeneralVariableRef,\n                    eval_supports::Dict{Int, Float64}; [check::Bool = true]\n                    )::SemiInfiniteVariable{GeneralVariableRef}\n\nExtend the JuMP.build_variable function to build a semi-infinite variable based on the infinite variable/derivative/parameter function ivref with  reduction support eval_supports. Will check that input is appropriate if  check = true. Errors if ivref is not an infinite variable, eval_supports  violate infinite parameter domains, or if the support dimensions don't match the  infinite parameter dimensions of ivref. This is intended an internal method for  use in evaluating measures.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.add_variable-Tuple{InfiniteModel, SemiInfiniteVariable, String}","page":"Variables","title":"JuMP.add_variable","text":"JuMP.add_variable(model::InfiniteModel, var::SemiInfiniteVariable,\n                  [name::String = \"\"])::GeneralVariableRef\n\nExtend the JuMP.add_variable function to accomodate InfiniteOpt  semi-infinite variable types. Adds var to the infinite model model and  returns a GeneralVariableRef. Primarily intended to be an internal  function used in evaluating measures.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.SemiInfiniteVariable","page":"Variables","title":"InfiniteOpt.SemiInfiniteVariable","text":"SemiInfiniteVariable{I <: GeneralVariableRef} <: JuMP.AbstractVariable\n\nA DataType for storing semi-infinite variables which partially support an infinite variable.\n\nFields\n\ninfinite_variable_ref::I: The original infinite/derivvative variable.\neval_supports::Dict{Int, Float64}: The original parameter tuple linear indices                                    to the evaluation supports.\nparameter_nums::Vector{Int}: The parameter numbers associated with the evaluated                                parameter_refs.\nobject_nums::Vector{Int}: The parameter object numbers associated with the                             evaluated parameter_refs.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.SemiInfiniteVariableIndex","page":"Variables","title":"InfiniteOpt.SemiInfiniteVariableIndex","text":"SemiInfiniteVariableIndex <: ObjectIndex\n\nA DataType for storing the index of a SemiInfiniteVariable.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.SemiInfiniteVariableRef","page":"Variables","title":"InfiniteOpt.SemiInfiniteVariableRef","text":"SemiInfiniteVariableRef <: DispatchVariableRef\n\nA DataType for partially transcripted infinite dimensional variable references. This is used to expand measures that contain infinite variables that are not fully transcripted by the measure.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::SemiInfiniteVariableIndex: Index of the variable in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#Point","page":"Variables","title":"Point","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"Point\nJuMP.build_variable(::Function, ::JuMP.VariableInfo, ::Point)\nJuMP.add_variable(::InfiniteModel, ::PointVariable, ::String)\nPointVariable\nPointVariableIndex\nPointVariableRef","category":"page"},{"location":"manual/variable/#InfiniteOpt.Point","page":"Variables","title":"InfiniteOpt.Point","text":"Point{V, VT <: VectorTuple} <: InfOptVariableType\n\nA DataType to assist in making point variables. This can be passed as an  extra argument to @variable to make such a variable: \n\n@variable(model, var_expr, Point(inf_var, parameter_values...), args..., \n          kwargs...)\n\nHere parameter_values must match the format of the infinite parameter  references associated with the infinite variable inf_var and can be comprised  of both real valued supports.\n\nFields\n\ninfinite_variable_ref::V\nparameter_values::VT: The infinite parameter support values the   variable will depend on.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#JuMP.build_variable-Tuple{Function, VariableInfo, Point}","page":"Variables","title":"JuMP.build_variable","text":"JuMP.build_variable(_error::Function, info::JuMP.VariableInfo, \n                    var_type::Point)::InfiniteVariable{GeneralVariableRef}\n\nBuild and return a point variable based on info and var_type. Errors  if the information stored in var_type is invalid. See Point  for more information.\n\nExample\n\njulia> y\ny(t)\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> pt_var = build_variable(error, info, SemiInfinite(y, 0));\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.add_variable-Tuple{InfiniteModel, PointVariable, String}","page":"Variables","title":"JuMP.add_variable","text":"JuMP.add_variable(model::InfiniteModel, var::PointVariable,\n                  [name::String = \"\"])::GeneralVariableRef\n\nExtend the JuMP.add_variable function to accomodate PointVariable variable  types. Adds a variable to an infinite model model and returns a  GeneralVariableRef. Primarily intended to be an internal function of  the constructor macro @variable. However, it can be used in combination with JuMP.build_variable to add variables to an infinite model object. Errors if an invalid infinite variable reference is included in var.\n\nExample\n\njulia> @infinite_parameter(m, t in [0, 10]);\n\njulia> info = VariableInfo(false, 0, false, 0, false, 0, true, 0, false, false);\n\njulia> inf_var = build_variable(error, info, Infinite(t));\n\njulia> ivref = add_variable(m, inf_var, \"var_name\")\nvar_name(t)\n\njulia> pt_var = build_variable(error, info, Point(ivref, 0.5));\n\njulia> pvref = add_variable(m, pt_var, \"var_alias\")\nvar_alias\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.PointVariable","page":"Variables","title":"InfiniteOpt.PointVariable","text":"PointVariable{I <: GeneralVariableRef} <: JuMP.AbstractVariable\n\nA DataType for storing point variable information. Note that the elements parameter_values field must match the format of the parameter reference tuple defined in InfiniteVariable\n\nFields\n\ninfo::JuMP.VariableInfo{Float64, Float64, Float64, Float64}: JuMP Variable information.\ninfinite_variable_ref::I: The infinite variable/derivative reference   associated with the point variable.\nparameter_values::Vector{Float64}: The infinite parameter values   defining the point.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.PointVariableIndex","page":"Variables","title":"InfiniteOpt.PointVariableIndex","text":"PointVariableIndex <: ObjectIndex\n\nA DataType for storing the index of a PointVariable.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.PointVariableRef","page":"Variables","title":"InfiniteOpt.PointVariableRef","text":"PointVariableRef <: FiniteRef\n\nA DataType for variables defined at a transcipted point (e.g., second stage variable at a particular scenario, dynamic variable at a discretized time point).\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::PointVariableIndex: Index of the variable in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#Finite","page":"Variables","title":"Finite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"Note that finite variables simply correspond to using  JuMP.ScalarVariable  which originates from JuMP.jl as well. In other words, these are defined via  JuMP.@variable without specifying any InfOptVariableType.","category":"page"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.add_variable(::InfiniteModel, ::JuMP.ScalarVariable, ::String)\nFiniteVariableIndex\nFiniteVariableRef","category":"page"},{"location":"manual/variable/#JuMP.add_variable-Tuple{InfiniteModel, ScalarVariable, String}","page":"Variables","title":"JuMP.add_variable","text":"JuMP.add_variable(model::InfiniteModel, var::JuMP.ScalarVariable,\n                  [name::String = \"\"])::GeneralVariableRef\n\nExtend the JuMP.add_variable function to accomodate finite (scalar) variable  types. Adds a variable to an infinite model model and returns a  GeneralVariableRef. Primarily intended to be an internal function of  the constructor macro @variable. However, it can be used in combination with JuMP.build_variable to add finite variables to an infinite model object.\n\nExamples\n\njulia> f_var = build_variable(error, info);\n\njulia> fvref = add_variable(m, f_var, \"var_name\")\nvar_name\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.FiniteVariableIndex","page":"Variables","title":"InfiniteOpt.FiniteVariableIndex","text":"FiniteVariableIndex <: ObjectIndex\n\nA DataType for storing the index of a JuMP.ScalarVariable.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#InfiniteOpt.FiniteVariableRef","page":"Variables","title":"InfiniteOpt.FiniteVariableRef","text":"FiniteVariableRef <: FiniteRef\n\nA DataType for finite fixed variable references (e.g., first stage variables, steady-state variables).\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::FiniteVariableIndex: Index of the variable in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/variable/#Queries","page":"Variables","title":"Queries","text":"","category":"section"},{"location":"manual/variable/#General","page":"Variables","title":"General","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.name(::DecisionVariableRef)\nJuMP.variable_by_name(::InfiniteModel, ::String)\nJuMP.num_variables(::InfiniteModel)\nJuMP.all_variables(::InfiniteModel)\nJuMP.has_lower_bound(::UserDecisionVariableRef)\nJuMP.lower_bound(::UserDecisionVariableRef)\nJuMP.LowerBoundRef(::UserDecisionVariableRef)\nJuMP.has_upper_bound(::UserDecisionVariableRef)\nJuMP.upper_bound(::UserDecisionVariableRef)\nJuMP.UpperBoundRef(::UserDecisionVariableRef)\nJuMP.is_fixed(::UserDecisionVariableRef)\nJuMP.fix_value(::UserDecisionVariableRef)\nJuMP.FixRef(::UserDecisionVariableRef)\nJuMP.start_value(::UserDecisionVariableRef)\nJuMP.is_binary(::UserDecisionVariableRef)\nJuMP.BinaryRef(::UserDecisionVariableRef)\nJuMP.is_integer(::UserDecisionVariableRef)\nJuMP.IntegerRef(::UserDecisionVariableRef)\nis_used(::DecisionVariableRef)\nused_by_constraint(::DecisionVariableRef)\nused_by_measure(::DecisionVariableRef)\nused_by_objective(::DecisionVariableRef)","category":"page"},{"location":"manual/variable/#JuMP.name-Tuple{DecisionVariableRef}","page":"Variables","title":"JuMP.name","text":"JuMP.name(vref::DecisionVariableRef)::String\n\nExtend JuMP.name to return the names of InfiniteOpt variables.\n\nExample\n\njulia> name(vref)\n\"var_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.variable_by_name-Tuple{InfiniteModel, String}","page":"Variables","title":"JuMP.variable_by_name","text":"JuMP.variable_by_name(model::InfiniteModel,\n                      name::String)::Union{GeneralVariableRef, Nothing}\n\nExtend JuMP.variable_by_name for InfiniteModel objects. Return the variable  reference assoociated with a variable name. Errors if multiple variables have the  same name. Returns nothing if no such name exists.\n\nExamples\n\njulia> variable_by_name(m, \"var_name\")\nvar_name\n\njulia> variable_by_name(m, \"fake_name\")\n\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.num_variables-Tuple{InfiniteModel}","page":"Variables","title":"JuMP.num_variables","text":"JuMP.num_variables(model::InfiniteModel, [type])::Int\n\nExtend JuMP.num_variables to return the number of InfiniteOpt variables  assigned to model. By default, the total number of infinite, semi-infinite,  point, and finite variables is returned. The amount of a particular type is  obtained by specifying the concrete variable type via type. Type options  include:\n\nInfiniteVariable: all infinite variables\nSemiInfiniteVariable: all semi-infinite variables\nPointVariable: all point variables\nFiniteVariable: all finite variables\n\nExample\n\njulia> num_variables(model)\n3\n\njulia> num_variables(model, InfiniteVariable)\n2\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.all_variables-Tuple{InfiniteModel}","page":"Variables","title":"JuMP.all_variables","text":"JuMP.all_variables(model::InfiniteModel, [type])::Vector{GeneralVariableRef}\n\nExtend JuMP.all_variables] to return a list of all the variable references  associated with model. By default, all of the infinite, semi-infinite, point,  and finite variables is returned. Those of a particular type is obtained by  specifying the concrete variable type via type. Type options include:\n\nInfiniteVariable: all infinite variables\nSemiInfiniteVariable: all semi-infinite variables\nPointVariable: all point variables\nFiniteVariable: all finite variables\n\nExamples\n\njulia> all_variables(model)\n4-element Array{GeneralVariableRef,1}:\n y(t)\n w(t, x)\n y(0)\n z\n\njulia> all_variables(model, PointVariable)\n1-element Array{GeneralVariableRef,1}:\n y(0)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.has_lower_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.has_lower_bound to return a Bool whether an InfiniteOpt  variable has a lower bound.\n\nExample\n\njulia> has_lower_bound(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.lower_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.lower_bound","text":"JuMP.lower_bound(vref::UserDecisionVariableRef)::Float64\n\nExtend JuMP.lower_bound to return the lower bound of an InfiniteOpt variable.  Errors if vref doesn't have a lower bound.\n\nExample\n\njulia> lower_bound(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.LowerBoundRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.LowerBoundRef","text":"JuMP.LowerBoundRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.LowerBoundRef to extract a constraint reference for the lower  bound of vref.\n\nExample\n\nvar ≥ 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.has_upper_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.has_upper_bound to return a Bool whether an InfiniteOpt  variable has an upper bound.\n\nExample\n\njulia> has_upper_bound(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.upper_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.upper_bound","text":"JuMP.upper_bound(vref::UserDecisionVariableRef)::Float64\n\nExtend JuMP.upper_bound to return the upper bound of an InfiniteOpt variable.  Errors if vref doesn't have a upper bound.\n\nExample\n\njulia> upper_bound(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.UpperBoundRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.UpperBoundRef","text":"JuMP.UpperBoundRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.UpperBoundRef to extract a constraint reference for the upper  bound of vref.\n\nExample\n\njulia> cref = UpperBoundRef(vref)\nvar ≤ 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_fixed-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.is_fixed","text":"JuMP.is_fixed(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.is_fixed to return Bool whether an InfiniteOpt variable is  fixed.\n\nExample\n\njulia> is_fixed(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.fix_value-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.fix_value","text":"JuMP.fix_value(vref::UserDecisionVariableRef)::Float64\n\nExtend JuMP.fix_value to return the fix value of an InfiniteOpt variable.  Errors if variable is not fixed.\n\nExample\n\njulia> fix_value(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.FixRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.FixRef","text":"JuMP.FixRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.FixRef to return the constraint reference of the fix constraint  associated with vref. Errors vref is not fixed.\n\nExamples\n\njulia> cref = FixRef(vref)\nvar = 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.start_value-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.start_value","text":"JuMP.start_value(vref::UserDecisionVariableRef)::Union{Nothing, Float64}\n\nExtend JuMP.start_value to return starting value of InfiniteOpt variable if  it has one. Returns nothing otherwise.\n\nExample\n\njulia> start_value(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_binary-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.is_binary","text":"JuMP.is_binary(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.is_binary to return Bool whether an InfiniteOpt variable is  binary.\n\nExample\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.BinaryRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.BinaryRef","text":"JuMP.BinaryRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.BinaryRef to return a constraint reference to the constraint  constrainting vref to be binary. Errors if one does not exist.\n\nExample\n\njulia> cref = BinaryRef(vref)\nvar binary\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_integer-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.is_integer","text":"JuMP.is_integer(vref::UserDecisionVariableRef)::Bool\n\nExtend JuMP.is_integer to return Bool whether an InfiniteOpt variable is  integer.\n\nExample\n\njulia> is_integer(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.IntegerRef-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.IntegerRef","text":"JuMP.IntegerRef(vref::UserDecisionVariableRef)::InfOptConstraintRef\n\nExtend JuMP.IntegerRef to return a constraint reference to the constraint  constrainting vref to be integer. Errors if one does not exist.\n\nExample\n\njulia> cref = IntegerRef(vref)\nvar integer\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.is_used-Tuple{DecisionVariableRef}","page":"Variables","title":"InfiniteOpt.is_used","text":"is_used(vref::DecisionVariableRef)::Bool\n\nReturn a Bool indicating if vref is used in the model.\n\nExample\n\njulia> is_used(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_constraint-Tuple{DecisionVariableRef}","page":"Variables","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(vref::DecisionVariableRef)::Bool\n\nReturn a Bool indicating if vref is used by a constraint.\n\nExample\n\njulia> used_by_constraint(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_measure-Tuple{DecisionVariableRef}","page":"Variables","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(vref::DecisionVariableRef)::Bool\n\nReturn a Bool indicating if vref is used by a measure.\n\nExample\n\njulia> used_by_measure(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_objective-Tuple{DecisionVariableRef}","page":"Variables","title":"InfiniteOpt.used_by_objective","text":"used_by_objective(vref::DecisionVariableRef)::Bool\n\nReturn a Bool indicating if vref is used by the objective.\n\nExample\n\njulia> used_by_objective(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Infinite-2","page":"Variables","title":"Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"start_value_function(::Union{InfiniteVariableRef, DerivativeRef})\nparameter_refs(::InfiniteVariableRef)\nparameter_list(::InfiniteVariableRef)\nraw_parameter_refs(::InfiniteVariableRef)\nis_used(::Union{InfiniteVariableRef, DerivativeRef})\nused_by_point_variable(::Union{InfiniteVariableRef, DerivativeRef})\nused_by_semi_infinite_variable(::Union{InfiniteVariableRef, DerivativeRef})","category":"page"},{"location":"manual/variable/#InfiniteOpt.start_value_function-Tuple{Union{DerivativeRef, InfiniteVariableRef}}","page":"Variables","title":"InfiniteOpt.start_value_function","text":"start_value_function(vref::Union{InfiniteVariableRef, DerivativeRef})::Union{Nothing, Function}\n\nReturn the function that is used to generate the start values of vref for particular support values. Returns nothing if no start behavior has been specified.\n\nExample\n\njulia> start_value_function(vref)\nmy_start_func\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_refs-Tuple{InfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(vref::InfiniteVariableRef)::Tuple\n\nReturn the parameter references associated with the infinite variable vref. This is formatted as a Tuple of containing the parameter references as they inputted to define vref.\n\nExample\n\njulia> @variable(model, T, Infinite(t))\nT(t)\n\njulia> parameter_refs(T)\n(t,)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_list-Tuple{InfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_list","text":"parameter_list(vref::InfiniteVariableRef)::Vector{GeneralVariableRef}\n\nReturn a vector of the parameter references that vref depends on. This is primarily an internal method where parameter_refs is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.raw_parameter_refs-Tuple{InfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refs(vref::InfiniteVariableRef)::VectorTuple\n\nReturn the raw VectorTuple of the  parameter references that vref depends on. This is primarily an internal method  where parameter_refs  is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.is_used-Tuple{Union{DerivativeRef, InfiniteVariableRef}}","page":"Variables","title":"InfiniteOpt.is_used","text":"is_used(vref::Union{InfiniteVariableRef, DerivativeRef})::Bool\n\nReturn a Bool indicating if vref is used in the model.\n\nExample\n\njulia> is_used(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_point_variable-Tuple{Union{DerivativeRef, InfiniteVariableRef}}","page":"Variables","title":"InfiniteOpt.used_by_point_variable","text":"used_by_point_variable(vref::Union{InfiniteVariableRef, DerivativeRef})::Bool\n\nReturn a Bool indicating if vref is used by a point variable.\n\nExample\n\njulia> used_by_point_variable(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.used_by_semi_infinite_variable-Tuple{Union{DerivativeRef, InfiniteVariableRef}}","page":"Variables","title":"InfiniteOpt.used_by_semi_infinite_variable","text":"used_by_semi_infinite_variable(vref::Union{InfiniteVariableRef, DerivativeRef})::Bool\n\nReturn a Bool indicating if vref is used by a semi-infinite variable.\n\nExample\n\njulia> used_by_semi_infinite_variable(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Semi-Infinite-2","page":"Variables","title":"Semi-Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.lower_bound(::SemiInfiniteVariableRef)\nJuMP.LowerBoundRef(::SemiInfiniteVariableRef)\nJuMP.has_upper_bound(::SemiInfiniteVariableRef)\nJuMP.upper_bound(::SemiInfiniteVariableRef)\nJuMP.UpperBoundRef(::SemiInfiniteVariableRef)\nJuMP.is_fixed(::SemiInfiniteVariableRef)\nJuMP.fix_value(::SemiInfiniteVariableRef)\nJuMP.FixRef(::SemiInfiniteVariableRef)\nstart_value_function(::SemiInfiniteVariableRef)\nJuMP.is_binary(::SemiInfiniteVariableRef)\nJuMP.BinaryRef(::SemiInfiniteVariableRef)\nJuMP.is_integer(::SemiInfiniteVariableRef)\nJuMP.IntegerRef(::SemiInfiniteVariableRef)\ninfinite_variable_ref(::SemiInfiniteVariableRef)\nparameter_refs(::SemiInfiniteVariableRef)\nparameter_list(::SemiInfiniteVariableRef)\nraw_parameter_refs(::SemiInfiniteVariableRef)\neval_supports(::SemiInfiniteVariableRef)","category":"page"},{"location":"manual/variable/#JuMP.lower_bound-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.lower_bound","text":"JuMP.lower_bound(vref::SemiInfiniteVariableRef)::Float64\n\nExtend JuMP.lower_bound to return the lower bound of the original infinite variable of vref. Errors if vref doesn't have a lower bound.\n\nExample\n\njulia> lower_bound(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.LowerBoundRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.LowerBoundRef","text":"JuMP.LowerBoundRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.LowerBoundRef to extract a constraint reference for the lower bound of the original infinite variable of vref.\n\nExample\n\njulia> cref = LowerBoundRef(vref)\nvar >= 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.has_upper_bound-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(vref::SemiInfiniteVariableRef)::Bool\n\nExtend JuMP.has_upper_bound to return a Bool whether the original infinite variable of vref has an upper bound.\n\nExample\n\njulia> has_upper_bound(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.upper_bound-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.upper_bound","text":"JuMP.upper_bound(vref::SemiInfiniteVariableRef)::Float64\n\nExtend JuMP.upper_bound to return the upper bound of the original infinite variable of vref. Errors if vref doesn't have a upper bound.\n\nExample\n\njulia> upper_bound(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.UpperBoundRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.UpperBoundRef","text":"JuMP.UpperBoundRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.UpperBoundRef to extract a constraint reference for the upper bound of the original infinite variable of vref.\n\nExample\n\njulia> cref = UpperBoundRef(vref)\nvar <= 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_fixed-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.is_fixed","text":"JuMP.is_fixed(vref::SemiInfiniteVariableRef)::Bool\n\nExtend JuMP.is_fixed to return Bool whether the original infinite variable of vref is fixed.\n\nExample\n\njulia> is_fixed(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.fix_value-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.fix_value","text":"JuMP.fix_value(vref::SemiInfiniteVariableRef)::Float64\n\nExtend JuMP.fix_value to return the fix value of the original infinite variable of vref. Errors if variable is not fixed.\n\nExample\n\njulia> fix_value(vref)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.FixRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.FixRef","text":"JuMP.FixRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.FixRef to return the constraint reference of the fix constraint associated with the original infinite variable of vref. Errors vref is not fixed.\n\nExamples\n\njulia> cref = FixRef(vref)\nvar == 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.start_value_function-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.start_value_function","text":"start_value_function(vref::SemiInfiniteVariableRef)::Union{Nothing, Function}\n\nReturn the function that is used to generate the start values of vref for particular support values. Returns nothing if no start behavior has been specified.\n\nExample\n\njulia> start_value_func(vref)\nmy_func\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_binary-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.is_binary","text":"JuMP.is_binary(vref::SemiInfiniteVariableRef)::Bool\n\nExtend JuMP.is_binary to return Bool whether the original infinite variable of vref is binary.\n\nExample\n\njulia> is_binary(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.BinaryRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.BinaryRef","text":"JuMP.BinaryRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.BinaryRef to return a constraint reference to the constraint constrainting the original infinite variable of vref to be binary. Errors if one does not exist.\n\nExample\n\njulia> cref = BinaryRef(vref)\nvar binary\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.is_integer-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.is_integer","text":"JuMP.is_integer(vref::SemiInfiniteVariableRef)::Bool\n\nExtend JuMP.is_integer to return Bool whether the original infinite variable of vref is integer.\n\nExample\n\njulia> is_integer(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.IntegerRef-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"JuMP.IntegerRef","text":"JuMP.IntegerRef(vref::SemiInfiniteVariableRef)::InfOptConstraintRef\n\nExtend JuMP.IntegerRef to return a constraint reference to the constraint constrainting the original infinite variable of vref to be integer. Errors if one does not exist.\n\nExample\n\njulia> cref = IntegerRef(vref)\nvar integer\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.infinite_variable_ref-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.infinite_variable_ref","text":"infinite_variable_ref(vref::SemiInfiniteVariableRef)::GeneralVariableRef\n\nReturn the infinite variable/derivative/parameter function reference associated  with the semi-infinite variable vref.\n\nExample\n\njulia> infinite_variable_ref(vref)\ng(t, x)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_refs-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_refs","text":"parameter_refs(vref::SemiInfiniteVariableRef)::Tuple\n\nReturn the infinite parameter references associated with the semi-infinite variable vref. This is formatted as a Tuple of containing the parameter references as they were inputted to define the untranscripted infinite variable except, the evaluated parameters are excluded.\n\nExample\n\njulia> parameter_refs(vref)\n(t, [x[1], x[2]])\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_list-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_list","text":"parameter_list(vref::SemiInfiniteVariableRef)::Vector{GeneralVariableRef}\n\nReturn a vector of the parameter references that vref depends on. This is primarily an internal method where parameter_refs is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.raw_parameter_refs-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.raw_parameter_refs","text":"raw_parameter_refs(vref::SemiInfiniteVariableRef)::VectorTuple\n\nReturn the raw VectorTuple of the  parameter references that vref depends on. This is primarily an internal method  where parameter_refs  is intended as the preferred user function.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.eval_supports-Tuple{SemiInfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.eval_supports","text":"eval_supports(vref::SemiInfiniteVariableRef)::Dict{Int, Float64}\n\nReturn the evaluation supports associated with the semi-infinite variable vref.\n\nExample\n\njulia> eval_supports(vref)\nDict{Int64,Float64} with 1 entry:\n  1 => 0.5\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Point-2","page":"Variables","title":"Point","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"infinite_variable_ref(::PointVariableRef)\nparameter_values(::PointVariableRef)\nraw_parameter_values(::PointVariableRef)","category":"page"},{"location":"manual/variable/#InfiniteOpt.infinite_variable_ref-Tuple{PointVariableRef}","page":"Variables","title":"InfiniteOpt.infinite_variable_ref","text":"infinite_variable_ref(vref::PointVariableRef)::GeneralVariableRef\n\nReturn the InfiniteVariableRef associated with the point variable vref.\n\nExample\n\njulia> @variable(model, T, Infinite(t))\nT(t)\n\njulia> @variable(model, T0, Point(T, 0))\nT0\n\njulia> infinite_variable_ref(T0)\nT(t)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.parameter_values-Tuple{PointVariableRef}","page":"Variables","title":"InfiniteOpt.parameter_values","text":"parameter_values(vref::PointVariableRef)::Tuple\n\nReturn the support point associated with the point variable vref.\n\nExample\n\njulia> @variable(model, T, Infinite(t))\nT(t)\n\njulia> @variable(model, T0, Point(T, 0))\nT0\n\njulia> parameter_values(T0)\n(0,)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.raw_parameter_values-Tuple{PointVariableRef}","page":"Variables","title":"InfiniteOpt.raw_parameter_values","text":"raw_parameter_values(vref::PointVariableRef)::Vector{Float64}\n\nReturn the raw support point values associated with the point variable vref.\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Modification","page":"Variables","title":"Modification","text":"","category":"section"},{"location":"manual/variable/#General-2","page":"Variables","title":"General","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.set_name(::DecisionVariableRef, ::String)\nJuMP.set_lower_bound(::UserDecisionVariableRef, ::Real)\nJuMP.delete_lower_bound(::UserDecisionVariableRef)\nJuMP.set_upper_bound(::UserDecisionVariableRef, ::Real)\nJuMP.delete_upper_bound(::UserDecisionVariableRef)\nJuMP.fix(::UserDecisionVariableRef, ::Real; ::Bool)\nJuMP.unfix(::UserDecisionVariableRef)\nJuMP.set_start_value(::UserDecisionVariableRef, ::Real)\nJuMP.set_binary(::UserDecisionVariableRef)\nJuMP.unset_binary(::UserDecisionVariableRef)\nJuMP.set_integer(::UserDecisionVariableRef)\nJuMP.unset_integer(::UserDecisionVariableRef)\nJuMP.relax_integrality(::InfiniteModel)\nJuMP.delete(::InfiniteModel, ::DecisionVariableRef)","category":"page"},{"location":"manual/variable/#JuMP.set_name-Tuple{DecisionVariableRef, String}","page":"Variables","title":"JuMP.set_name","text":"JuMP.set_name(vref::DecisionVariableRef, name::String)::Nothing\n\nExtend JuMP.set_name to set names of decision variables.\n\nExample\n\njulia> set_name(vref, \"var_name\")\n\njulia> name(vref)\n\"var_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_lower_bound-Tuple{UserDecisionVariableRef, Real}","page":"Variables","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(vref::UserDecisionVariableRef, lower::Real)::Nothing\n\nExtend JuMP.set_lower_bound to specify the lower bound of an InfiniteOpt  variable vref. Errors if vref is fixed.\n\nExample\n\njulia> set_lower_bound(vref, -1)\n\njulia> lower_bound(vref)\n-1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.delete_lower_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.delete_lower_bound","text":"JuMP.delete_lower_bound(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.delete_lower_bound to delete lower bound of vref. Errors if it  doesn't have a lower bound.\n\nExample\n\njulia> delete_lower_bound(vref)\n\njulia> has_lower_bound(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_upper_bound-Tuple{UserDecisionVariableRef, Real}","page":"Variables","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(vref::UserDecisionVariableRef, upper::Real)::Nothing\n\nExtend JuMP.set_upper_bound to specify the upper bound of an InfiniteOpt  variable vref. Errors if vref is fixed.\n\nExample\n\njulia> set_upper_bound(vref, 1)\n\njulia> upper_bound(vref)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.delete_upper_bound-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.delete_upper_bound","text":"JuMP.delete_upper_bound(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.delete_upper_bound to delete the upper bound of vref. Errors if  it doesn't have an upper bound.\n\nExample\n\njulia> delete_upper_bound(vref)\n\njulia> has_upper_bound(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.fix-Tuple{UserDecisionVariableRef, Real}","page":"Variables","title":"JuMP.fix","text":"JuMP.fix(vref::UserDecisionVariableRef, value::Real;\n         force::Bool = false)::Nothing\n\nExtend JuMP.fix to fix the value of an InfiniteOpt variable. Errors if  variable has a lower and/or an upper bound(s) unless force = true.\n\nExamples\n\njulia> fix(vref, 3)\n\njulia> fix_value(vref)\n3.0\n\njulia> fix(vref2, 2, force = true)\n\njulia> fix_value(vref2)\n2.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.unfix-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.unfix","text":"JuMP.unfix(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.unfix to unfix vref. Errors if it is not fixed.\n\nExample\n\njulia> unfix(vref)\n\njulia> is_fixed(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_start_value-Tuple{UserDecisionVariableRef, Real}","page":"Variables","title":"JuMP.set_start_value","text":"JuMP.set_start_value(vref::UserDecisionVariableRef, value::Real)::Nothing\n\nExtend JuMP.set_start_value to specify the start value of InfiniteOpt  variables.\n\nExample\n\njulia> set_start_value(vref, 1)\n\njulia> start_value(vref)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_binary-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.set_binary","text":"JuMP.set_binary(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.set_binary to specify an InfiniteOpt variable as a binary  variable. Errors if vref is an integer variable.\n\nExample\n\njulia> set_binary(vref)\n\njulia> is_binary(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.unset_binary-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.unset_binary","text":"JuMP.unset_binary(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.unset_binary to unset vref as a binary variable. Errors if it is  not binary.\n\njulia> unset_binary(vref)\n\njulia> is_binary(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.set_integer-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.set_integer","text":"JuMP.set_integer(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.set_integer to specify an InfiniteOpt variable as a integer  variable. Errors if vref is an binary variable.\n\nExample\n\njulia> set_integer(vref)\n\njulia> is_integer(vref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.unset_integer-Tuple{UserDecisionVariableRef}","page":"Variables","title":"JuMP.unset_integer","text":"JuMP.unset_integer(vref::UserDecisionVariableRef)::Nothing\n\nExtend JuMP.unset_integer to unset vref as an integer variable. Errors if it  is not an integer variable.\n\njulia> unset_integer(vref)\n\njulia> is_integer(vref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.relax_integrality-Tuple{InfiniteModel}","page":"Variables","title":"JuMP.relax_integrality","text":"JuMP.relax_integrality(model::InfiniteModel)::Function\n\nModifies model to \"relax\" all binary and integrality constraints on variables. Specifically,\n\nBinary constraints are deleted, and variable bounds are tightened if necessary to ensure the variable is constrained to the interval 0 1.\nIntegrality constraints are deleted without modifying variable bounds.\nAll other constraints are ignored (left in place). This includes discrete constraints like SOS and indicator constraints.\n\nReturns a function that can be called without any arguments to restore the original model. The behavior of this function is undefined if additional changes are made to the affected variables in the meantime.\n\nExample\n\njulia> undo_relax = relax_integrality(model);\n\njulia> print(model)\nMin x + ∫{t ∈ [0, 10]}(y(t))\nSubject to\n x ≥ 0.0\n y(t) ≥ 1.0\n x ≤ 1.0\n y(t) ≤ 10.0\n\njulia> undo_relax()\n\njulia> print(model)\nMin x + ∫{t ∈ [0, 10]}(y(t))\nSubject to\n y(t) ≥ 1.0\n y(t) ≤ 10.0\n y(t) integer\n x binary\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#JuMP.delete-Tuple{InfiniteModel, DecisionVariableRef}","page":"Variables","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, vref::DecisionVariableRef)::Nothing\n\nExtend JuMP.delete to delete InfiniteOpt variables and their dependencies.  Errors if variable is invalid, meaning it has already been deleted or it belongs  to another model.\n\nExample\n\njulia> print(model)\nMin measure(g(t)*t) + z\nSubject to\n z ≥ 0.0\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n g(0.5) = 0\n\njulia> delete(model, g)\n\njulia> print(model)\nMin measure(t) + z\nSubject to\n z ≥ 0.0\n z ≥ 42.0\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Infinite-3","page":"Variables","title":"Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"set_start_value_function(::InfiniteVariableRef, ::Union{Real, Function})\nreset_start_value_function(::InfiniteVariableRef)","category":"page"},{"location":"manual/variable/#InfiniteOpt.set_start_value_function-Tuple{InfiniteVariableRef, Union{Function, Real}}","page":"Variables","title":"InfiniteOpt.set_start_value_function","text":"set_start_value_function(vref::InfiniteVariableRef,\n                         start::Union{Real, Function})::Nothing\n\nSet the start value function of vref. If start::Real then a function is generated to such that the start value will be start for the entire infinite domain. If start::Function then this function should map to a scalar start value given a support value arguments matching the format of the parameter elements in parameter_refs(vref).\n\nExample\n\njulia> set_start_value_function(vref, 1) # all start values will be 1\n\njulia> set_start_value_function(vref, my_func) # each value will be made via my_func\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#InfiniteOpt.reset_start_value_function-Tuple{InfiniteVariableRef}","page":"Variables","title":"InfiniteOpt.reset_start_value_function","text":"reset_start_value_function(vref::InfiniteVariableRef)::Nothing\n\nRemove the existing start value function and return to the default. Generally, this is triggered by deleting an infinite parameter that vref depends on.\n\nExample\n\njulia> reset_start_value_function(vref)\n\n\n\n\n\n","category":"method"},{"location":"manual/variable/#Semi-Infinite-3","page":"Variables","title":"Semi-Infinite","text":"","category":"section"},{"location":"manual/variable/","page":"Variables","title":"Variables","text":"JuMP.set_name(::SemiInfiniteVariableRef,::String)","category":"page"},{"location":"manual/variable/#JuMP.set_name-Tuple{SemiInfiniteVariableRef, String}","page":"Variables","title":"JuMP.set_name","text":"JuMP.set_name(vref::DecisionVariableRef, name::String)::Nothing\n\nExtend JuMP.set_name to set names of decision variables.\n\nExample\n\njulia> set_name(vref, \"var_name\")\n\njulia> name(vref)\n\"var_name\"\n\n\n\n\n\n","category":"method"},{"location":"develop/start_guide/#contribute_guide","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"InfiniteOpt is a large project with a lot of opportunity for development. As  such we warmly welcome and encourage contributions. This page serves as the guide  of how to start contributing.","category":"page"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"Before starting please review our  Code of Conduct.","category":"page"},{"location":"develop/start_guide/#Step-by-Step","page":"Getting Started","title":"Step-by-Step","text":"","category":"section"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"This section will provide a birds-eye view on how to make a contribution to this  project.","category":"page"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"So you want to help improve InfiniteOpt, awesome and thank you! Let's walk  through step by step how this should be done.","category":"page"},{"location":"develop/start_guide/","page":"Getting Started","title":"Getting Started","text":"Setup a GitHub account if you do not already have one. Here is the  link to do so.\nSelect a specific task to develop that is well-defined. This can as simple as  correcting/clarifying a documentation page or as involved as implementing a  more efficient data management paradigm. With a task in mind, please start a new  issue here in the  InfiniteOpt repository. Also, this is a good place to find tasks to contribute to by  browsing what open issues are (especially ones with the tag good first issue).  Note that if your proposed contribution corresponds to an existing issue please  do not make a new issue. A guide to using issues in GitHub is located  here.\nFork the InfiniteOpt repository to your GitHub account. Only core  developers have permissions to modify InfiniteOpt directly, thus others need  to fork it which essentially amounts to creating their own linked copy. This is  done by clicking the Fork button at the top left corner on the main repository  page here.\nInstall Git on your computer. Git is an open source version control program  for repositories (it is why GitHub uses the word Git). This is needed to manipulate  the repository (all the package files) locally on your computer. A simple Google  search should indicate how this should be done for your computer. I personally  prefer Git for Windows as a Windows user. \nNow you need to install your forked version of InfiniteOpt in Julia on your  computer. This needs to be done via the dev command in the package manager  so you can edit it. The syntax is as follows:\n(v1.6) pkg> dev https://github.com/username-here/InfiniteOpt.jl\nWe also recommend you install Revise.jl  which is very useful when developing packages in Julia.\nDevelop your contribution. Please follow the style guides featured in the  sections below. A programmatic contribution will involve the following parts:\nediting/adding code to the .jl files in the src (source) directory\nadding a docstring for each public function/datatype\nincluding comments that describe each internal function/datatype\nadding a unit-testing for each function in the appropriate test files in the  test directory\nadding documentation of the new functionality in the appropriate place in the  documentation by adding the files in the docs/src directory.\nThese aspects are detailed further in the sections below.\nCommit and push your changes to your forked repository. This is done via Git  using your preferred interface and one should pull, add, commit, and then push  the changes. Using a bash terminal it would look like this:\nusername@ubuntu:~$ cd repo_directory\nusername@ubuntu:~/repo_directory$ git pull origin master\nusername@ubuntu:~/repo_directory$ git add *\nusername@ubuntu:~/repo_directory$ git commit -m \"insert commit message here\"\nusername@ubuntu:~/repo_directory$ git push origin master\nWe recommend using VsCode as an editor and  as a GUI for interfacing with Git.\nCreate a pull request. Go here  to InfiniteOpt's main page and create a pull request drawing from your forked  repository. A step by step explanation is provided  here.\nMake necessary changes if the tests fail and/or we ask you to make specific  changes. The Codecov tests will ensure every new line of code is tested at least  once with the new test functions and the GitHub Actions CI will ensure that  the tests pass on a range of operating systems and Julia versions.\nThat's it. Once the new additions are ready, we will merge them into the   main repository.\nContribute more by repeating steps 2 and 6-10. Just make sure to update your  forked repository before getting started which can be done as explained  here.  Also, be sure to pull the updated repository unto your computer before getting  started.","category":"page"},{"location":"develop/style/#Style-Guide","page":"Style Guide","title":"Style Guide","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Below we detail the formatting, naming, and organizational styles used in  InfiniteOpt. We kindly ask developers to adhere to these practices in efforts  to foster consistency.","category":"page"},{"location":"develop/style/#File-Organization","page":"Style Guide","title":"File Organization","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Files for InfiniteOpt are principally stored in 5 locations:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"the base directory ./,\nthe source file directory ./src/,\nthe source code testing directory ./test/,\nthe documentation source file directory ./docs/,\nand the example scripts directory ./examples/.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The base directory is for certain critical package files such as the README.md file and the CI (virtual testing service) configuration files. Files should NOT  be added or removed from this directory, but may be modified as needed. ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Naturally, the source directory is where all the source code files are located.  The principal file InfiniteOpt.jl is where the main module is defined, all  source code files are included, and all methods/datatypes/macros are exported. This  file shouldn't contain any function or datatype definitions directly, but rather  should include source files containing such via include(\"file_name.jl\"). Where  possible new datatypes should be defined in datatypes.jl and new methods should  be defined in the appropriate file (e.g., a new parameter method should be  defined in parameters.jl). New files can be added as necessary to help with  organization and to prevent a particular file from becoming too long. Also, note  that any submodule (e.g., TranscriptionOpt) should be defined within its own  sub-directory named after itself.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The test directory contains all the files in appropriate organization to test  all of the methods, datatypes, and macros defined in the source files. The file  structure here should emulate that of the ./src/ directory since each file  should by systematically tested as described be below in the Unit Tests section.  Here the principle file is runtests.jl which serves as the backbone for all the  unit testing. Again, no explicit tests should be contain in it, but rather  inclusions of test files via include(\"file_name\").","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The documentation directory follows a particular structure as explained in the  documentation for Documenter.jl. Here the root directory ./docs/ contains  make.jl which is the script that generates the documentation via Documenter.jl.  The Project.toml includes the packages necessary to do this. The ./docs/src/  sub-directory is where source code is stored to build the documentation pages.  When building the documentation locally, a ./docs/build directory will also  appear that stores the built HTML files. However, this directory is not tracked  by Git and any changes here will be ignored.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The example directory contains scripted use examples of InfiniteOpt. Each  example should be stored in single .jl file where possible. However, other more  complex examples that use multiple files should be stored in an appropriately  named folder.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Please note that all file/folder names should use complete names and avoid  abbreviations where possible unless the abbreviations are unambiguous and common  knowledge. Moreover, names should be lowercase and use underscores between  words: example_file_name.jl.  ","category":"page"},{"location":"develop/style/#Julia-Code","page":"Style Guide","title":"Julia Code","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Here we detail the programmatic style used with InfiniteOpt. This is done in an  effort to make this package intuitive for new-comers and to ease development. This  style closely follows that of JuMP.jl with similar deviations from typical Julia  styles. Please refer to the   JuMP style guide as this  is the style used by InfiniteOpt.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"In addition, we adopt the following practices: ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"All names should be meaningful and readily identifiable. This is bad:\nx = y2 - cp\nThis is good:\nnew_pizza_cost = old_pizza_cost - discount\nThis will make lines longer, but much more understandable.\nAvoid the use explicit numeric values (i.e., magic numbers): This is bad:\ntax = 0.07 * total_price\nTypically, this will employ the use of constants via const This is good:\nconst TAX_RATE = 0.07\ntax = TAX_RATE * total_price\nExceptions to this rule include the use of 1, 1.0, 0, 0.0, -1, -1.0, Inf, and -Inf.\nWhere possible use eachindex to iterate over an datatype: This is bad:\nfor i in 1:length(A)\n    A[i] = i\nend\nThis is good:\nfor i in eachindex(A)\n    A[i] = i\nend\nAll function arguments and struct elements should be typed.    This is bad:\nstruct MyNewStruct\n    thing1\n    thing2\nend\nThis is good:\nstruct MyNewStruct\n    thing1::Int\n    thing2::String\nend\nType dispatch should be used instead of conditional statements based on type: This is bad:\nfunction my_new_function(arg::AbstractType)\n  if arg isa Type1\n      temp = arg + 1\n  elseif arg isa Type2\n      temp = 0\n  end\n  # do more stuff with temp\n  return temp\nend\nThis is good:\n## Internal dispatch for my_new_function\n# Type1\nfunction _my_internal_function(arg::Type1)\n    return arg + 1\nend\n# Type2\nfunction _my_internal_function(arg::Type2)\n    return 0\nend\n# Fallback\nfunction _my_internal_function(arg::AbstractType)\n    error(\"Unrecognized type...\")\nend\n# Main method\nfunction my_new_function(arg::AbstractType)\n  temp = _my_internal_function(arg)\n  # do more stuff with temp\n  return temp\nend\nFunctions should be built in a modular manner to avoid code repetition and  excessively long function definitions.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"In addition to the above guidelines, contributions should be structured such that  extensions are readily possible without having to rewrite all of the associated  functions. The ability to easily facilitate extensions is a core goal of  InfiniteOpt and this should be kept in mind when developing contributions. ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"TODO add example.","category":"page"},{"location":"develop/style/#Docstrings-and-Comments","page":"Style Guide","title":"Docstrings and Comments","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Here we discuss the use of Docstrings and comments in InfiniteOpt. All public  functions, macros, and datatypes should have a Docstring. This is enables the  help query tool in Julia and is needed for inclusion in the documentation pages.  For functions and macros the format should follow the form:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"\"\"\"\n    my_new_function(arg1::Type, [arg2::Type = 0; karg1::Type = 42])::Type\n\nPrecise and concise description of what `my_new_function` does and what it\nreturns (also what will cause it will trigger errors). This is in markdown\nformat.\n\n**Example**\n```julia-repl\njulia> my_new_function(input...)\nexpected_output\n```\n\"\"\"\nfunction my_new_function(arg1::Type, arg2::Type = 0; karg1::Type = 42)\n    return arg1 + arg2 + karg1\nend","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Notice that the function is declared at the top with an ident and the optional  arguments are enclosed within square brackets. This can be spaced over several  lines if there are too many arguments to fit on one line. ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"For datatypes Docstrings should follow the form:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"\"\"\"\n    MyNewStruct\n\nPrecise and concise description of what this is.\n\n**Fields**\n- `element1::Type` Description of what this is.\n- `element2::Type` Description of what this is.\n\"\"\"\nstruct MyNewStruct\n    element1::Type\n    element2::Type\nend","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Note that if the struct is parametric and/or has inheritance, this information  should also be shown in the header. For example, we have that  InfOptParameter{T <: AbstractInfiniteSet} <: JuMP.AbstractVariable.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"For more docstring information please visit the Julia documentation  here.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Furthermore, all internal functions and datatypes should have an appropriate  commented description of what they do above them. This should follow the  form:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"# Description of what _my_internal_function does. Bla Bla Bla Bla Bla Bla Bla\n# Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla Bla.\nfunction _my_internal_function(arg1::Type, arg2::Type)::Type\n    return arg1 + arg2\nend","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Finally, we encourage a healthy usage of comments throughout source code to  enhance its readability. A simple comment before a complex block of code can make  all the difference.","category":"page"},{"location":"develop/style/#Unit-Tests","page":"Style Guide","title":"Unit Tests","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"A nice attribute of InfiniteOpt is that it is near perfect code testing  coverage. This success is due to strictly testing every method and macro rigorously  such that every line is called. This has been very advantageous in detecting  many bugs which can be difficult to anticipate given the quantity of source code.  Thus, tests must be created/updated to cover any new additions/changes in the  ./src/ directory.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The runtests.jl file serves as the principal backbone for doing this. We use  a nested @testset structure using Test.jl. Please refer to the documentation  here to learn about the relevant  testing macros. The structure typically groups related functions together where  each function/macro/datatype is tested via a @testset that employs a number of  tests via @test that thoroughly test it. This is typically of the form:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"@testset \"my_new_function\" begin\n    @test my_new_function(input1) == expected_output1\n    @test my_new_function(input2) == expected_output2\n    @test my_new_function(input3) == expected_output3\n    .\n    .\n    .\nend","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Thus, a function's @testset should be updated when the respective function has  been modified. Moreover, a new @testset should be added for each new  function/macro. New function tests should be implemented in an order such that  any other functions/macros they depend on are tested first.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Also, where possible please include comments to explain what is going on.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Please refer to InfiniteOpt/test/ for examples.","category":"page"},{"location":"develop/style/#Documentation-Pages","page":"Style Guide","title":"Documentation Pages","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Documentation in InfiniteOpt is generated via  Documenter.jl. Please refer to  its documentation to learn about how to use it.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The source markdown files stored in ./docs/src/ are what comprise the source  code for the documentation pages and are principally what should be updated. A  guide for markdown syntax is provided here.  Also, note that Documenter enables unique functionality in addition to this  general guide.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"When a new Docstring is created as described above, it should be included in the  appropriate @docs block on its corresponding manual page. Moreover, content  should be added in an appropriate section (or perhaps in a new section) in the  guide that overviews how to implement the new capabilities in an example driven  fashion. These examples should use jldoctests where possible as well to assess  whether the example code is functional.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Documentation content should be concise and use examples and lists where possible  to provide a more visual guide. Also, we ask that passive voice be avoided.","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"Be sure to test the documentation first locally by running make.jl to check  for problems which may include:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"unrecognized docstrings\nfailed doctests\nfaulty links\nunrecognized formats\nmissing package dependencies\netc.","category":"page"},{"location":"develop/style/#Case-Study-Examples","page":"Style Guide","title":"Case Study Examples","text":"","category":"section"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"We use Literate.jl to run  the case studies in ./docs/src/examples/ and generate markdown files that are  incorporated into the documentation for the Examples sections. ","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"A new case study example can be added to an appropriate sub-folder of  ./docs/src/examples/ (a new sub-folder can be made if needed). The example file  should be .jl file that uses comments in accordance with Literate.jl's format.  This is exemplified below:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"# # My Example Name\n# Text to introduce my example...\n\n# ## Background \n# Text that describes the problem we are trying to solve. We can also include \n# latex math like ``x^2`` and math blocks such as:\n# ```math \n# x^2 + y = 1\n# ```\n\n# ## Formulation\n# Text to introduce as needed...\nusing InfiniteOpt, Clp # import the needed packages\n\n## This comment type will be part of the code block\nmodel = InfiniteModel(Clp.Optimizer) # add side comments to code\n\n# This comment type will be Markdown again, thus breaking up the code block\n@infinite_parameter(model, t in [0, 1], num_supports = 42)\n@variable(model, y >= 0, Infinite(t))\n\noptimize!(model)\n\n## TODO add more code\n\n# ### Maintenance Tests\n# These are here to ensure this example stays up to date. \nusing Test\n@test termination_status(model) == MOI.OPTIMAL\n@test has_values(model)\n## Add more tests as appropriate","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The above file will then be tested and incorporated into the documentation when  ./docs/make.jl is called. Notice that we also have the \"Maintenance Test\"  section at the end that will be used to run checks to ensure the example script  is working as expected (this helps ensure the documentation is up to date).","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"The above example would produce the following markdown file via Literate.jl:","category":"page"},{"location":"develop/style/","page":"Style Guide","title":"Style Guide","text":"# My Example Name\nText to introduce my example...\n\n## Background\nText that describes the problem we are trying to solve. We can also include\nlatex math like ``x^2`` and math blocks such as:\n```math\nx^2 + y = 1\n```\n\n## Formulation\nText to introduce as needed...\n\n```julia\nusing InfiniteOpt, Clp # import the needed packages\n\n# This comment type will be part of the code block\nmodel = InfiniteModel(Clp.Optimizer) # add side comments to code\n\n```\n\n```julia\nAn InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information:\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Clp\n```\n\nThis comment type will be Markdown again, thus breaking up the code block\n\n```julia\n@infinite_parameter(model, t in [0, 1], num_supports = 42)\n@variable(model, y >= 0, Infinite(t))\n\noptimize!(model)\n\n# TODO add more code\n```\n\n### Maintenance Tests\nThese are here to ensure this example stays up to date.\n\n```julia\nusing Test\n@test termination_status(model) == MOI.OPTIMAL\n@test has_values(model)\n# Add more tests as appropriate\n```\n\n```\nTest Passed\n```\n\n---\n\n*This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*\n\n","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Optimal Control/consumption_savings.jl\"","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Consumption-Savings-Problem","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"In this case study, a household endowed with B_0 dollars of wealth must decide how much to consume and save to maximize its utility over its finite lifecycle.","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Formulation","page":"Consumption Savings Problem","title":"Formulation","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"The corresponding dynamic optimization problem is expressed:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"beginaligned\n\tV(B_00) = undersetc(t) B(t)textmax int_t = 0^t=T e^-rho t u(c(t)) dt \n\ttextst \n\t fracdBdt = r times B(t) - c(t)  t in 0T \n   B(0) = B_0 \n   B(T) = 0\nendaligned","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"where the household lives during time t in 0T, the state variable B(t) is the household's stock of wealth at time t, the choice variable c(t) is the household's consumption at time t, r is the interest rate, B_0 is the household's wealth endowment (initial condition), B(T) = 0 is the terminal condition, and T is the time horizon.","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Model-Definition","page":"Consumption Savings Problem","title":"Model Definition","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Let's implement this in InfiniteOpt and first import the packages we need:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"using InfiniteOpt, Ipopt","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"We set the preference and constraint parameters:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"ρ = 0.025  # discount rate\nk = 100.0  # utility bliss point\nT = 10.0   # life horizon\nr = 0.05   # interest rate\nB0 = 100.0 # endowment\nu(c; k=k) = -(c - k)^2       # utility function\ndiscount(t; ρ=ρ) = exp(-ρ*t) # discount function\nBC(B, c; r=r) = r*B - c      # budget constraint","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"BC (generic function with 1 method)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"We set the hyperparameters:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"opt = Ipopt.Optimizer   # desired solver\nns = 1_000;             # number of points in the time grid\n","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"We initialize the infinite model and choose the Ipopt solver:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"m = InfiniteModel(opt)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"An InfiniteOpt Model\nFeasibility problem with:\nFinite Parameters: 0\nInfinite Parameters: 0\nVariables: 0\nDerivatives: 0\nMeasures: 0\nOptimizer model backend information: \nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Let's specify our infinite parameter which is time t in 0 T:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@infinite_parameter(m, t in [0, T], num_supports = ns)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"t","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Now let's specify the variables:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@variable(m, B, Infinite(t)) ## state variables\n@variable(m, c, Infinite(t)) ## control variables","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"c(t)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Specify the objective:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@objective(m, Max, integral(u(c), t, weight_func = discount))","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"∫{t ∈ [0, 10]}[-c(t)² + 200 c(t) - 10000]","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Set the initial/terminal conditions:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@constraint(m, B(0) == B0)\n@constraint(m, B(T) == 0)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"B(10) = 0.0","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Set the budget constraint:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"@constraint(m, c1, deriv(B, t) == BC(B, c; r=r))","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"c1 : ∂/∂t[B(t)] - 0.05 B(t) + c(t) = 0.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Problem-Solution","page":"Consumption Savings Problem","title":"Problem Solution","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Optimize the model:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"optimize!(m)\ntermination_status(m)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"LOCALLY_SOLVED::TerminationStatusCode = 4","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Extract the results:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"c_opt = value(c)\nB_opt = value(B)\nts = supports(t)\nopt_obj = objective_value(m) # V(B0, 0)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"-67025.6217459858","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Plot the results:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"using Plots\nix = 2:(length(ts)-1) # index for plotting\nplot(ts[ix],   B_opt[ix], lab = \"B: wealth balance\")\nplot!(ts[ix],  c_opt[ix], lab = \"c: consumption\")","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip420\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip420)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip421\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip420)\" d=\"\nM169.121 1486.45 L2352.76 1486.45 L2352.76 47.2441 L169.121 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip422\">\n    <rect x=\"169\" y=\"47\" width=\"2185\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  228.856,1486.45 228.856,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  744.897,1486.45 744.897,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1260.94,1486.45 1260.94,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1776.98,1486.45 1776.98,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2293.02,1486.45 2293.02,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  228.856,1486.45 228.856,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  744.897,1486.45 744.897,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1260.94,1486.45 1260.94,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1776.98,1486.45 1776.98,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2293.02,1486.45 2293.02,1467.55 \n  \"/>\n<path clip-path=\"url(#clip420)\" d=\"M206.24 1517.37 Q202.629 1517.37 200.801 1520.93 Q198.995 1524.47 198.995 1531.6 Q198.995 1538.71 200.801 1542.27 Q202.629 1545.82 206.24 1545.82 Q209.875 1545.82 211.68 1542.27 Q213.509 1538.71 213.509 1531.6 Q213.509 1524.47 211.68 1520.93 Q209.875 1517.37 206.24 1517.37 M206.24 1513.66 Q212.051 1513.66 215.106 1518.27 Q218.185 1522.85 218.185 1531.6 Q218.185 1540.33 215.106 1544.94 Q212.051 1549.52 206.24 1549.52 Q200.43 1549.52 197.352 1544.94 Q194.296 1540.33 194.296 1531.6 Q194.296 1522.85 197.352 1518.27 Q200.43 1513.66 206.24 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M226.402 1542.97 L231.287 1542.97 L231.287 1548.85 L226.402 1548.85 L226.402 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M251.472 1517.37 Q247.861 1517.37 246.032 1520.93 Q244.226 1524.47 244.226 1531.6 Q244.226 1538.71 246.032 1542.27 Q247.861 1545.82 251.472 1545.82 Q255.106 1545.82 256.911 1542.27 Q258.74 1538.71 258.74 1531.6 Q258.74 1524.47 256.911 1520.93 Q255.106 1517.37 251.472 1517.37 M251.472 1513.66 Q257.282 1513.66 260.337 1518.27 Q263.416 1522.85 263.416 1531.6 Q263.416 1540.33 260.337 1544.94 Q257.282 1549.52 251.472 1549.52 Q245.662 1549.52 242.583 1544.94 Q239.527 1540.33 239.527 1531.6 Q239.527 1522.85 242.583 1518.27 Q245.662 1513.66 251.472 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M716.634 1544.91 L732.953 1544.91 L732.953 1548.85 L711.009 1548.85 L711.009 1544.91 Q713.671 1542.16 718.254 1537.53 Q722.86 1532.88 724.041 1531.53 Q726.286 1529.01 727.166 1527.27 Q728.069 1525.51 728.069 1523.82 Q728.069 1521.07 726.124 1519.33 Q724.203 1517.6 721.101 1517.6 Q718.902 1517.6 716.448 1518.36 Q714.018 1519.13 711.24 1520.68 L711.24 1515.95 Q714.064 1514.82 716.518 1514.24 Q718.972 1513.66 721.009 1513.66 Q726.379 1513.66 729.573 1516.35 Q732.768 1519.03 732.768 1523.52 Q732.768 1525.65 731.958 1527.57 Q731.171 1529.47 729.064 1532.07 Q728.485 1532.74 725.384 1535.95 Q722.282 1539.15 716.634 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M742.768 1542.97 L747.652 1542.97 L747.652 1548.85 L742.768 1548.85 L742.768 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M757.883 1514.29 L776.24 1514.29 L776.24 1518.22 L762.166 1518.22 L762.166 1526.7 Q763.184 1526.35 764.203 1526.19 Q765.221 1526 766.24 1526 Q772.027 1526 775.406 1529.17 Q778.786 1532.34 778.786 1537.76 Q778.786 1543.34 775.314 1546.44 Q771.842 1549.52 765.522 1549.52 Q763.346 1549.52 761.078 1549.15 Q758.832 1548.78 756.425 1548.04 L756.425 1543.34 Q758.508 1544.47 760.731 1545.03 Q762.953 1545.58 765.43 1545.58 Q769.434 1545.58 771.772 1543.48 Q774.11 1541.37 774.11 1537.76 Q774.11 1534.15 771.772 1532.04 Q769.434 1529.94 765.43 1529.94 Q763.555 1529.94 761.68 1530.35 Q759.828 1530.77 757.883 1531.65 L757.883 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1228.1 1514.29 L1246.46 1514.29 L1246.46 1518.22 L1232.39 1518.22 L1232.39 1526.7 Q1233.4 1526.35 1234.42 1526.19 Q1235.44 1526 1236.46 1526 Q1242.25 1526 1245.63 1529.17 Q1249.01 1532.34 1249.01 1537.76 Q1249.01 1543.34 1245.53 1546.44 Q1242.06 1549.52 1235.74 1549.52 Q1233.57 1549.52 1231.3 1549.15 Q1229.05 1548.78 1226.64 1548.04 L1226.64 1543.34 Q1228.73 1544.47 1230.95 1545.03 Q1233.17 1545.58 1235.65 1545.58 Q1239.65 1545.58 1241.99 1543.48 Q1244.33 1541.37 1244.33 1537.76 Q1244.33 1534.15 1241.99 1532.04 Q1239.65 1529.94 1235.65 1529.94 Q1233.77 1529.94 1231.9 1530.35 Q1230.05 1530.77 1228.1 1531.65 L1228.1 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1258.22 1542.97 L1263.1 1542.97 L1263.1 1548.85 L1258.22 1548.85 L1258.22 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1283.29 1517.37 Q1279.68 1517.37 1277.85 1520.93 Q1276.04 1524.47 1276.04 1531.6 Q1276.04 1538.71 1277.85 1542.27 Q1279.68 1545.82 1283.29 1545.82 Q1286.92 1545.82 1288.73 1542.27 Q1290.56 1538.71 1290.56 1531.6 Q1290.56 1524.47 1288.73 1520.93 Q1286.92 1517.37 1283.29 1517.37 M1283.29 1513.66 Q1289.1 1513.66 1292.15 1518.27 Q1295.23 1522.85 1295.23 1531.6 Q1295.23 1540.33 1292.15 1544.94 Q1289.1 1549.52 1283.29 1549.52 Q1277.48 1549.52 1274.4 1544.94 Q1271.34 1540.33 1271.34 1531.6 Q1271.34 1522.85 1274.4 1518.27 Q1277.48 1513.66 1283.29 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1743.3 1514.29 L1765.52 1514.29 L1765.52 1516.28 L1752.98 1548.85 L1748.09 1548.85 L1759.9 1518.22 L1743.3 1518.22 L1743.3 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1774.64 1542.97 L1779.53 1542.97 L1779.53 1548.85 L1774.64 1548.85 L1774.64 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1789.76 1514.29 L1808.11 1514.29 L1808.11 1518.22 L1794.04 1518.22 L1794.04 1526.7 Q1795.06 1526.35 1796.08 1526.19 Q1797.1 1526 1798.11 1526 Q1803.9 1526 1807.28 1529.17 Q1810.66 1532.34 1810.66 1537.76 Q1810.66 1543.34 1807.19 1546.44 Q1803.72 1549.52 1797.4 1549.52 Q1795.22 1549.52 1792.95 1549.15 Q1790.71 1548.78 1788.3 1548.04 L1788.3 1543.34 Q1790.38 1544.47 1792.6 1545.03 Q1794.83 1545.58 1797.3 1545.58 Q1801.31 1545.58 1803.65 1543.48 Q1805.98 1541.37 1805.98 1537.76 Q1805.98 1534.15 1803.65 1532.04 Q1801.31 1529.94 1797.3 1529.94 Q1795.43 1529.94 1793.55 1530.35 Q1791.7 1530.77 1789.76 1531.65 L1789.76 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2245.09 1544.91 L2252.73 1544.91 L2252.73 1518.55 L2244.42 1520.21 L2244.42 1515.95 L2252.69 1514.29 L2257.36 1514.29 L2257.36 1544.91 L2265 1544.91 L2265 1548.85 L2245.09 1548.85 L2245.09 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2284.44 1517.37 Q2280.83 1517.37 2279.01 1520.93 Q2277.2 1524.47 2277.2 1531.6 Q2277.2 1538.71 2279.01 1542.27 Q2280.83 1545.82 2284.44 1545.82 Q2288.08 1545.82 2289.88 1542.27 Q2291.71 1538.71 2291.71 1531.6 Q2291.71 1524.47 2289.88 1520.93 Q2288.08 1517.37 2284.44 1517.37 M2284.44 1513.66 Q2290.25 1513.66 2293.31 1518.27 Q2296.39 1522.85 2296.39 1531.6 Q2296.39 1540.33 2293.31 1544.94 Q2290.25 1549.52 2284.44 1549.52 Q2278.63 1549.52 2275.56 1544.94 Q2272.5 1540.33 2272.5 1531.6 Q2272.5 1522.85 2275.56 1518.27 Q2278.63 1513.66 2284.44 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2304.61 1542.97 L2309.49 1542.97 L2309.49 1548.85 L2304.61 1548.85 L2304.61 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2329.68 1517.37 Q2326.06 1517.37 2324.24 1520.93 Q2322.43 1524.47 2322.43 1531.6 Q2322.43 1538.71 2324.24 1542.27 Q2326.06 1545.82 2329.68 1545.82 Q2333.31 1545.82 2335.12 1542.27 Q2336.94 1538.71 2336.94 1531.6 Q2336.94 1524.47 2335.12 1520.93 Q2333.31 1517.37 2329.68 1517.37 M2329.68 1513.66 Q2335.49 1513.66 2338.54 1518.27 Q2341.62 1522.85 2341.62 1531.6 Q2341.62 1540.33 2338.54 1544.94 Q2335.49 1549.52 2329.68 1549.52 Q2323.87 1549.52 2320.79 1544.94 Q2317.73 1540.33 2317.73 1531.6 Q2317.73 1522.85 2320.79 1518.27 Q2323.87 1513.66 2329.68 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,1438.78 2352.76,1438.78 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,1105.86 2352.76,1105.86 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,772.933 2352.76,772.933 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,440.008 2352.76,440.008 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,107.083 2352.76,107.083 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,1486.45 169.121,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,1438.78 188.019,1438.78 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,1105.86 188.019,1105.86 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,772.933 188.019,772.933 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,440.008 188.019,440.008 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,107.083 188.019,107.083 \n  \"/>\n<path clip-path=\"url(#clip420)\" d=\"M121.177 1424.58 Q117.566 1424.58 115.737 1428.15 Q113.932 1431.69 113.932 1438.82 Q113.932 1445.92 115.737 1449.49 Q117.566 1453.03 121.177 1453.03 Q124.811 1453.03 126.617 1449.49 Q128.445 1445.92 128.445 1438.82 Q128.445 1431.69 126.617 1428.15 Q124.811 1424.58 121.177 1424.58 M121.177 1420.88 Q126.987 1420.88 130.043 1425.49 Q133.121 1430.07 133.121 1438.82 Q133.121 1447.55 130.043 1452.15 Q126.987 1456.74 121.177 1456.74 Q115.367 1456.74 112.288 1452.15 Q109.233 1447.55 109.233 1438.82 Q109.233 1430.07 112.288 1425.49 Q115.367 1420.88 121.177 1420.88 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M86.0382 1119.2 L102.358 1119.2 L102.358 1123.14 L80.4133 1123.14 L80.4133 1119.2 Q83.0753 1116.45 87.6586 1111.82 Q92.2651 1107.17 93.4456 1105.82 Q95.691 1103.3 96.5706 1101.56 Q97.4734 1099.81 97.4734 1098.12 Q97.4734 1095.36 95.5289 1093.62 Q93.6076 1091.89 90.5058 1091.89 Q88.3067 1091.89 85.8531 1092.65 Q83.4225 1093.42 80.6447 1094.97 L80.6447 1090.25 Q83.4688 1089.11 85.9225 1088.53 Q88.3762 1087.95 90.4132 1087.95 Q95.7836 1087.95 98.978 1090.64 Q102.172 1093.32 102.172 1097.81 Q102.172 1099.94 101.362 1101.87 Q100.575 1103.76 98.4687 1106.36 Q97.89 1107.03 94.7882 1110.25 Q91.6864 1113.44 86.0382 1119.2 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M112.219 1088.58 L130.575 1088.58 L130.575 1092.51 L116.501 1092.51 L116.501 1100.99 Q117.52 1100.64 118.538 1100.48 Q119.557 1100.29 120.575 1100.29 Q126.362 1100.29 129.742 1103.46 Q133.121 1106.63 133.121 1112.05 Q133.121 1117.63 129.649 1120.73 Q126.177 1123.81 119.857 1123.81 Q117.682 1123.81 115.413 1123.44 Q113.168 1123.07 110.76 1122.33 L110.76 1117.63 Q112.844 1118.76 115.066 1119.32 Q117.288 1119.87 119.765 1119.87 Q123.77 1119.87 126.107 1117.77 Q128.445 1115.66 128.445 1112.05 Q128.445 1108.44 126.107 1106.33 Q123.77 1104.23 119.765 1104.23 Q117.89 1104.23 116.015 1104.64 Q114.163 1105.06 112.219 1105.94 L112.219 1088.58 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M81.0614 755.653 L99.4178 755.653 L99.4178 759.588 L85.3438 759.588 L85.3438 768.061 Q86.3623 767.713 87.3808 767.551 Q88.3993 767.366 89.4178 767.366 Q95.2049 767.366 98.5845 770.537 Q101.964 773.709 101.964 779.125 Q101.964 784.704 98.4919 787.806 Q95.0197 790.885 88.7003 790.885 Q86.5243 790.885 84.2558 790.514 Q82.0105 790.144 79.6031 789.403 L79.6031 784.704 Q81.6864 785.838 83.9086 786.394 Q86.1308 786.949 88.6077 786.949 Q92.6123 786.949 94.9502 784.843 Q97.2882 782.736 97.2882 779.125 Q97.2882 775.514 94.9502 773.408 Q92.6123 771.301 88.6077 771.301 Q86.7327 771.301 84.8577 771.718 Q83.0058 772.135 81.0614 773.014 L81.0614 755.653 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M121.177 758.732 Q117.566 758.732 115.737 762.297 Q113.932 765.838 113.932 772.968 Q113.932 780.074 115.737 783.639 Q117.566 787.181 121.177 787.181 Q124.811 787.181 126.617 783.639 Q128.445 780.074 128.445 772.968 Q128.445 765.838 126.617 762.297 Q124.811 758.732 121.177 758.732 M121.177 755.028 Q126.987 755.028 130.043 759.635 Q133.121 764.218 133.121 772.968 Q133.121 781.695 130.043 786.301 Q126.987 790.885 121.177 790.885 Q115.367 790.885 112.288 786.301 Q109.233 781.695 109.233 772.968 Q109.233 764.218 112.288 759.635 Q115.367 755.028 121.177 755.028 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M80.8299 422.728 L103.052 422.728 L103.052 424.719 L90.5058 457.288 L85.6216 457.288 L97.4271 426.663 L80.8299 426.663 L80.8299 422.728 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M112.219 422.728 L130.575 422.728 L130.575 426.663 L116.501 426.663 L116.501 435.135 Q117.52 434.788 118.538 434.626 Q119.557 434.441 120.575 434.441 Q126.362 434.441 129.742 437.612 Q133.121 440.783 133.121 446.2 Q133.121 451.779 129.649 454.881 Q126.177 457.959 119.857 457.959 Q117.682 457.959 115.413 457.589 Q113.168 457.218 110.76 456.478 L110.76 451.779 Q112.844 452.913 115.066 453.468 Q117.288 454.024 119.765 454.024 Q123.77 454.024 126.107 451.918 Q128.445 449.811 128.445 446.2 Q128.445 442.589 126.107 440.482 Q123.77 438.376 119.765 438.376 Q117.89 438.376 116.015 438.793 Q114.163 439.209 112.219 440.089 L112.219 422.728 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M51.6634 120.427 L59.3023 120.427 L59.3023 94.0619 L50.9921 95.7285 L50.9921 91.4693 L59.256 89.8026 L63.9319 89.8026 L63.9319 120.427 L71.5707 120.427 L71.5707 124.363 L51.6634 124.363 L51.6634 120.427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M91.0151 92.8813 Q87.404 92.8813 85.5753 96.4461 Q83.7697 99.9878 83.7697 107.117 Q83.7697 114.224 85.5753 117.789 Q87.404 121.33 91.0151 121.33 Q94.6493 121.33 96.4548 117.789 Q98.2835 114.224 98.2835 107.117 Q98.2835 99.9878 96.4548 96.4461 Q94.6493 92.8813 91.0151 92.8813 M91.0151 89.1776 Q96.8252 89.1776 99.8808 93.7841 Q102.959 98.3674 102.959 107.117 Q102.959 115.844 99.8808 120.451 Q96.8252 125.034 91.0151 125.034 Q85.2049 125.034 82.1262 120.451 Q79.0707 115.844 79.0707 107.117 Q79.0707 98.3674 82.1262 93.7841 Q85.2049 89.1776 91.0151 89.1776 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M121.177 92.8813 Q117.566 92.8813 115.737 96.4461 Q113.932 99.9878 113.932 107.117 Q113.932 114.224 115.737 117.789 Q117.566 121.33 121.177 121.33 Q124.811 121.33 126.617 117.789 Q128.445 114.224 128.445 107.117 Q128.445 99.9878 126.617 96.4461 Q124.811 92.8813 121.177 92.8813 M121.177 89.1776 Q126.987 89.1776 130.043 93.7841 Q133.121 98.3674 133.121 107.117 Q133.121 115.844 130.043 120.451 Q126.987 125.034 121.177 125.034 Q115.367 125.034 112.288 120.451 Q109.233 115.844 109.233 107.117 Q109.233 98.3674 112.288 93.7841 Q115.367 89.1776 121.177 89.1776 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip422)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  230.922,106.739 232.989,106.399 235.055,106.062 237.121,105.728 239.187,105.397 241.253,105.069 243.32,104.744 245.386,104.422 247.452,104.104 249.518,103.788 \n  251.585,103.476 253.651,103.166 255.717,102.86 257.783,102.557 259.85,102.257 261.916,101.96 263.982,101.666 266.048,101.375 268.114,101.088 270.181,100.803 \n  272.247,100.522 274.313,100.243 276.379,99.9679 278.446,99.6957 280.512,99.4266 282.578,99.1607 284.644,98.8978 286.711,98.638 288.777,98.3814 290.843,98.1278 \n  292.909,97.8774 294.975,97.63 297.042,97.3858 299.108,97.1447 301.174,96.9067 303.24,96.6718 305.307,96.44 307.373,96.2114 309.439,95.9858 311.505,95.7634 \n  313.572,95.544 315.638,95.3278 317.704,95.1147 319.77,94.9047 321.836,94.6979 323.903,94.4941 325.969,94.2935 328.035,94.096 330.101,93.9016 332.168,93.7104 \n  334.234,93.5222 336.3,93.3372 338.366,93.1553 340.433,92.9766 342.499,92.8009 344.565,92.6284 346.631,92.459 348.697,92.2928 350.764,92.1296 352.83,91.9696 \n  354.896,91.8128 356.962,91.659 359.029,91.5084 361.095,91.3609 363.161,91.2166 365.227,91.0754 367.294,90.9373 369.36,90.8024 371.426,90.6706 373.492,90.5419 \n  375.558,90.4164 377.625,90.294 379.691,90.1747 381.757,90.0586 383.823,89.9456 385.89,89.8358 387.956,89.7291 390.022,89.6256 392.088,89.5252 394.155,89.4279 \n  396.221,89.3338 398.287,89.2428 400.353,89.155 402.419,89.0703 404.486,88.9888 406.552,88.9104 408.618,88.8352 410.684,88.7631 412.751,88.6942 414.817,88.6285 \n  416.883,88.5658 418.949,88.5064 421.016,88.4501 423.082,88.3969 425.148,88.3469 427.214,88.3001 429.281,88.2564 431.347,88.2159 433.413,88.1785 435.479,88.1443 \n  437.545,88.1133 439.612,88.0854 441.678,88.0607 443.744,88.0391 445.81,88.0207 447.877,88.0055 449.943,87.9935 452.009,87.9846 454.075,87.9788 456.142,87.9763 \n  458.208,87.9769 460.274,87.9807 462.34,87.9876 464.406,87.9977 466.473,88.011 468.539,88.0275 470.605,88.0472 472.671,88.07 474.738,88.096 476.804,88.1251 \n  478.87,88.1575 480.936,88.193 483.003,88.2317 485.069,88.2736 487.135,88.3186 489.201,88.3669 491.267,88.4183 493.334,88.4729 495.4,88.5307 497.466,88.5917 \n  499.532,88.6558 501.599,88.7232 503.665,88.7937 505.731,88.8674 507.797,88.9443 509.864,89.0244 511.93,89.1077 513.996,89.1942 516.062,89.2838 518.128,89.3767 \n  520.195,89.4727 522.261,89.572 524.327,89.6744 526.393,89.78 528.46,89.8889 530.526,90.0009 532.592,90.1161 534.658,90.2345 536.725,90.3562 538.791,90.481 \n  540.857,90.609 542.923,90.7402 544.989,90.8747 547.056,91.0123 549.122,91.1531 551.188,91.2972 553.254,91.4444 555.321,91.5949 557.387,91.7485 559.453,91.9054 \n  561.519,92.0655 563.586,92.2288 565.652,92.3953 567.718,92.565 569.784,92.7379 571.85,92.914 573.917,93.0934 575.983,93.276 578.049,93.4617 580.115,93.6507 \n  582.182,93.843 584.248,94.0384 586.314,94.237 588.38,94.4389 590.447,94.644 592.513,94.8523 594.579,95.0639 596.645,95.2786 598.711,95.4966 600.778,95.7178 \n  602.844,95.9423 604.91,96.1699 606.976,96.4008 609.043,96.635 611.109,96.8723 613.175,97.1129 615.241,97.3567 617.308,97.6037 619.374,97.854 621.44,98.1075 \n  623.506,98.3643 625.572,98.6242 627.639,98.8875 629.705,99.1539 631.771,99.4236 633.837,99.6965 635.904,99.9727 637.97,100.252 640.036,100.535 642.102,100.821 \n  644.169,101.11 646.235,101.402 648.301,101.698 650.367,101.997 652.433,102.299 654.5,102.604 656.566,102.913 658.632,103.225 660.698,103.54 662.765,103.858 \n  664.831,104.18 666.897,104.504 668.963,104.833 671.03,105.164 673.096,105.499 675.162,105.836 677.228,106.178 679.294,106.522 681.361,106.87 683.427,107.22 \n  685.493,107.575 687.559,107.932 689.626,108.293 691.692,108.657 693.758,109.024 695.824,109.394 697.891,109.768 699.957,110.145 702.023,110.525 704.089,110.909 \n  706.155,111.296 708.222,111.686 710.288,112.079 712.354,112.476 714.42,112.876 716.487,113.279 718.553,113.685 720.619,114.095 722.685,114.508 724.752,114.924 \n  726.818,115.344 728.884,115.767 730.95,116.193 733.017,116.622 735.083,117.055 737.149,117.491 739.215,117.93 741.281,118.372 743.348,118.818 745.414,119.267 \n  747.48,119.72 749.546,120.175 751.613,120.634 753.679,121.096 755.745,121.562 757.811,122.031 759.878,122.503 761.944,122.978 764.01,123.457 766.076,123.939 \n  768.142,124.424 770.209,124.913 772.275,125.405 774.341,125.9 776.407,126.398 778.474,126.9 780.54,127.405 782.606,127.913 784.672,128.425 786.739,128.94 \n  788.805,129.458 790.871,129.98 792.937,130.505 795.003,131.033 797.07,131.564 799.136,132.099 801.202,132.637 803.268,133.179 805.335,133.723 807.401,134.271 \n  809.467,134.823 811.533,135.377 813.6,135.935 815.666,136.497 817.732,137.061 819.798,137.629 821.864,138.2 823.931,138.775 825.997,139.353 828.063,139.934 \n  830.129,140.518 832.196,141.106 834.262,141.698 836.328,142.292 838.394,142.89 840.461,143.491 842.527,144.095 844.593,144.703 846.659,145.314 848.725,145.929 \n  850.792,146.547 852.858,147.168 854.924,147.792 856.99,148.42 859.057,149.051 861.123,149.685 863.189,150.323 865.255,150.964 867.322,151.609 869.388,152.257 \n  871.454,152.908 873.52,153.562 875.586,154.22 877.653,154.881 879.719,155.546 881.785,156.214 883.851,156.885 885.918,157.559 887.984,158.237 890.05,158.918 \n  892.116,159.603 894.183,160.291 896.249,160.982 898.315,161.677 900.381,162.375 902.447,163.076 904.514,163.781 906.58,164.489 908.646,165.2 910.712,165.915 \n  912.779,166.633 914.845,167.355 916.911,168.08 918.977,168.808 921.044,169.539 923.11,170.274 925.176,171.013 927.242,171.754 929.308,172.499 931.375,173.248 \n  933.441,174 935.507,174.755 937.573,175.513 939.64,176.275 941.706,177.04 943.772,177.809 945.838,178.581 947.905,179.356 949.971,180.135 952.037,180.917 \n  954.103,181.703 956.169,182.491 958.236,183.284 960.302,184.079 962.368,184.878 964.434,185.681 966.501,186.486 968.567,187.296 970.633,188.108 972.699,188.924 \n  974.766,189.743 976.832,190.566 978.898,191.392 980.964,192.222 983.03,193.054 985.097,193.891 987.163,194.73 989.229,195.573 991.295,196.42 993.362,197.27 \n  995.428,198.123 997.494,198.979 999.56,199.84 1001.63,200.703 1003.69,201.57 1005.76,202.44 1007.83,203.314 1009.89,204.191 1011.96,205.071 1014.02,205.955 \n  1016.09,206.842 1018.16,207.733 1020.22,208.627 1022.29,209.524 1024.36,210.425 1026.42,211.329 1028.49,212.237 1030.55,213.148 1032.62,214.063 1034.69,214.981 \n  1036.75,215.902 1038.82,216.827 1040.88,217.755 1042.95,218.687 1045.02,219.622 1047.08,220.56 1049.15,221.502 1051.22,222.447 1053.28,223.396 1055.35,224.348 \n  1057.41,225.303 1059.48,226.262 1061.55,227.225 1063.61,228.191 1065.68,229.16 1067.75,230.133 1069.81,231.109 1071.88,232.088 1073.94,233.071 1076.01,234.058 \n  1078.08,235.048 1080.14,236.041 1082.21,237.038 1084.28,238.038 1086.34,239.041 1088.41,240.048 1090.47,241.059 1092.54,242.073 1094.61,243.09 1096.67,244.111 \n  1098.74,245.135 1100.81,246.163 1102.87,247.194 1104.94,248.229 1107,249.267 1109.07,250.308 1111.14,251.353 1113.2,252.401 1115.27,253.453 1117.34,254.509 \n  1119.4,255.567 1121.47,256.63 1123.53,257.695 1125.6,258.764 1127.67,259.837 1129.73,260.913 1131.8,261.993 1133.87,263.075 1135.93,264.162 1138,265.252 \n  1140.06,266.345 1142.13,267.442 1144.2,268.542 1146.26,269.646 1148.33,270.753 1150.4,271.864 1152.46,272.978 1154.53,274.096 1156.59,275.217 1158.66,276.341 \n  1160.73,277.469 1162.79,278.601 1164.86,279.736 1166.93,280.874 1168.99,282.016 1171.06,283.162 1173.12,284.311 1175.19,285.463 1177.26,286.619 1179.32,287.778 \n  1181.39,288.941 1183.45,290.108 1185.52,291.277 1187.59,292.451 1189.65,293.628 1191.72,294.808 1193.79,295.992 1195.85,297.179 1197.92,298.37 1199.98,299.564 \n  1202.05,300.762 1204.12,301.963 1206.18,303.168 1208.25,304.376 1210.32,305.588 1212.38,306.803 1214.45,308.022 1216.51,309.244 1218.58,310.47 1220.65,311.699 \n  1222.71,312.932 1224.78,314.168 1226.85,315.408 1228.91,316.651 1230.98,317.898 1233.04,319.148 1235.11,320.402 1237.18,321.659 1239.24,322.92 1241.31,324.185 \n  1243.38,325.452 1245.44,326.724 1247.51,327.999 1249.57,329.277 1251.64,330.559 1253.71,331.845 1255.77,333.134 1257.84,334.426 1259.91,335.722 1261.97,337.022 \n  1264.04,338.325 1266.1,339.631 1268.17,340.942 1270.24,342.255 1272.3,343.572 1274.37,344.893 1276.44,346.217 1278.5,347.545 1280.57,348.877 1282.63,350.211 \n  1284.7,351.55 1286.77,352.892 1288.83,354.237 1290.9,355.586 1292.97,356.939 1295.03,358.295 1297.1,359.655 1299.16,361.018 1301.23,362.384 1303.3,363.755 \n  1305.36,365.129 1307.43,366.506 1309.5,367.887 1311.56,369.271 1313.63,370.659 1315.69,372.051 1317.76,373.446 1319.83,374.845 1321.89,376.247 1323.96,377.653 \n  1326.02,379.062 1328.09,380.475 1330.16,381.892 1332.22,383.312 1334.29,384.735 1336.36,386.162 1338.42,387.593 1340.49,389.027 1342.55,390.465 1344.62,391.907 \n  1346.69,393.352 1348.75,394.8 1350.82,396.252 1352.89,397.708 1354.95,399.167 1357.02,400.63 1359.08,402.097 1361.15,403.567 1363.22,405.04 1365.28,406.517 \n  1367.35,407.998 1369.42,409.482 1371.48,410.97 1373.55,412.462 1375.61,413.957 1377.68,415.455 1379.75,416.958 1381.81,418.463 1383.88,419.973 1385.95,421.486 \n  1388.01,423.002 1390.08,424.523 1392.14,426.046 1394.21,427.574 1396.28,429.105 1398.34,430.639 1400.41,432.177 1402.48,433.719 1404.54,435.265 1406.61,436.813 \n  1408.67,438.366 1410.74,439.922 1412.81,441.482 1414.87,443.045 1416.94,444.612 1419.01,446.183 1421.07,447.757 1423.14,449.335 1425.2,450.916 1427.27,452.501 \n  1429.34,454.09 1431.4,455.682 1433.47,457.278 1435.54,458.877 1437.6,460.48 1439.67,462.087 1441.73,463.697 1443.8,465.311 1445.87,466.929 1447.93,468.55 \n  1450,470.175 1452.07,471.803 1454.13,473.435 1456.2,475.071 1458.26,476.71 1460.33,478.353 1462.4,480 1464.46,481.65 1466.53,483.304 1468.59,484.961 \n  1470.66,486.622 1472.73,488.287 1474.79,489.955 1476.86,491.627 1478.93,493.303 1480.99,494.982 1483.06,496.665 1485.12,498.352 1487.19,500.042 1489.26,501.736 \n  1491.32,503.433 1493.39,505.134 1495.46,506.839 1497.52,508.548 1499.59,510.26 1501.65,511.975 1503.72,513.695 1505.79,515.418 1507.85,517.144 1509.92,518.875 \n  1511.99,520.609 1514.05,522.346 1516.12,524.088 1518.18,525.833 1520.25,527.581 1522.32,529.334 1524.38,531.09 1526.45,532.849 1528.52,534.613 1530.58,536.38 \n  1532.65,538.15 1534.71,539.925 1536.78,541.702 1538.85,543.484 1540.91,545.269 1542.98,547.058 1545.05,548.851 1547.11,550.647 1549.18,552.447 1551.24,554.251 \n  1553.31,556.059 1555.38,557.87 1557.44,559.684 1559.51,561.503 1561.58,563.325 1563.64,565.151 1565.71,566.98 1567.77,568.813 1569.84,570.65 1571.91,572.491 \n  1573.97,574.335 1576.04,576.183 1578.11,578.034 1580.17,579.89 1582.24,581.749 1584.3,583.611 1586.37,585.478 1588.44,587.348 1590.5,589.222 1592.57,591.099 \n  1594.63,592.98 1596.7,594.865 1598.77,596.754 1600.83,598.646 1602.9,600.542 1604.97,602.442 1607.03,604.345 1609.1,606.253 1611.16,608.163 1613.23,610.078 \n  1615.3,611.996 1617.36,613.918 1619.43,615.844 1621.5,617.774 1623.56,619.707 1625.63,621.644 1627.69,623.584 1629.76,625.528 1631.83,627.477 1633.89,629.428 \n  1635.96,631.384 1638.03,633.343 1640.09,635.306 1642.16,637.273 1644.22,639.243 1646.29,641.217 1648.36,643.195 1650.42,645.177 1652.49,647.162 1654.56,649.151 \n  1656.62,651.144 1658.69,653.141 1660.75,655.141 1662.82,657.145 1664.89,659.153 1666.95,661.164 1669.02,663.179 1671.09,665.198 1673.15,667.221 1675.22,669.248 \n  1677.28,671.278 1679.35,673.312 1681.42,675.35 1683.48,677.391 1685.55,679.437 1687.62,681.486 1689.68,683.538 1691.75,685.595 1693.81,687.655 1695.88,689.719 \n  1697.95,691.787 1700.01,693.859 1702.08,695.934 1704.15,698.013 1706.21,700.096 1708.28,702.183 1710.34,704.273 1712.41,706.367 1714.48,708.465 1716.54,710.567 \n  1718.61,712.673 1720.68,714.782 1722.74,716.895 1724.81,719.012 1726.87,721.132 1728.94,723.257 1731.01,725.385 1733.07,727.517 1735.14,729.653 1737.2,731.792 \n  1739.27,733.935 1741.34,736.083 1743.4,738.233 1745.47,740.388 1747.54,742.547 1749.6,744.709 1751.67,746.875 1753.73,749.045 1755.8,751.218 1757.87,753.396 \n  1759.93,755.577 1762,757.762 1764.07,759.951 1766.13,762.144 1768.2,764.34 1770.26,766.54 1772.33,768.744 1774.4,770.952 1776.46,773.164 1778.53,775.379 \n  1780.6,777.599 1782.66,779.822 1784.73,782.049 1786.79,784.279 1788.86,786.514 1790.93,788.752 1792.99,790.994 1795.06,793.24 1797.13,795.49 1799.19,797.744 \n  1801.26,800.001 1803.32,802.262 1805.39,804.528 1807.46,806.796 1809.52,809.069 1811.59,811.346 1813.66,813.626 1815.72,815.91 1817.79,818.198 1819.85,820.49 \n  1821.92,822.786 1823.99,825.086 1826.05,827.389 1828.12,829.696 1830.19,832.007 1832.25,834.322 1834.32,836.641 1836.38,838.964 1838.45,841.29 1840.52,843.621 \n  1842.58,845.955 1844.65,848.293 1846.72,850.635 1848.78,852.98 1850.85,855.33 1852.91,857.683 1854.98,860.041 1857.05,862.402 1859.11,864.767 1861.18,867.136 \n  1863.25,869.508 1865.31,871.885 1867.38,874.265 1869.44,876.65 1871.51,879.038 1873.58,881.43 1875.64,883.826 1877.71,886.225 1879.77,888.629 1881.84,891.037 \n  1883.91,893.448 1885.97,895.863 1888.04,898.282 1890.11,900.705 1892.17,903.132 1894.24,905.563 1896.3,907.998 1898.37,910.436 1900.44,912.878 1902.5,915.325 \n  1904.57,917.775 1906.64,920.229 1908.7,922.687 1910.77,925.149 1912.83,927.615 1914.9,930.084 1916.97,932.558 1919.03,935.035 1921.1,937.516 1923.17,940.002 \n  1925.23,942.491 1927.3,944.984 1929.36,947.481 1931.43,949.981 1933.5,952.486 1935.56,954.995 1937.63,957.507 1939.7,960.024 1941.76,962.544 1943.83,965.068 \n  1945.89,967.596 1947.96,970.128 1950.03,972.664 1952.09,975.204 1954.16,977.748 1956.23,980.296 1958.29,982.847 1960.36,985.403 1962.42,987.963 1964.49,990.526 \n  1966.56,993.093 1968.62,995.665 1970.69,998.24 1972.76,1000.82 1974.82,1003.4 1976.89,1005.99 1978.95,1008.58 1981.02,1011.17 1983.09,1013.77 1985.15,1016.38 \n  1987.22,1018.98 1989.29,1021.59 1991.35,1024.21 1993.42,1026.83 1995.48,1029.45 1997.55,1032.08 1999.62,1034.71 2001.68,1037.34 2003.75,1039.98 2005.82,1042.62 \n  2007.88,1045.27 2009.95,1047.92 2012.01,1050.57 2014.08,1053.23 2016.15,1055.89 2018.21,1058.56 2020.28,1061.23 2022.34,1063.9 2024.41,1066.58 2026.48,1069.26 \n  2028.54,1071.94 2030.61,1074.63 2032.68,1077.33 2034.74,1080.03 2036.81,1082.73 2038.87,1085.43 2040.94,1088.14 2043.01,1090.86 2045.07,1093.57 2047.14,1096.29 \n  2049.21,1099.02 2051.27,1101.75 2053.34,1104.48 2055.4,1107.22 2057.47,1109.96 2059.54,1112.71 2061.6,1115.46 2063.67,1118.21 2065.74,1120.97 2067.8,1123.73 \n  2069.87,1126.49 2071.93,1129.26 2074,1132.03 2076.07,1134.81 2078.13,1137.59 2080.2,1140.38 2082.27,1143.17 2084.33,1145.96 2086.4,1148.76 2088.46,1151.56 \n  2090.53,1154.36 2092.6,1157.17 2094.66,1159.99 2096.73,1162.8 2098.8,1165.63 2100.86,1168.45 2102.93,1171.28 2104.99,1174.11 2107.06,1176.95 2109.13,1179.79 \n  2111.19,1182.64 2113.26,1185.49 2115.33,1188.34 2117.39,1191.2 2119.46,1194.06 2121.52,1196.92 2123.59,1199.79 2125.66,1202.67 2127.72,1205.54 2129.79,1208.43 \n  2131.86,1211.31 2133.92,1214.2 2135.99,1217.09 2138.05,1219.99 2140.12,1222.89 2142.19,1225.8 2144.25,1228.71 2146.32,1231.62 2148.38,1234.54 2150.45,1237.46 \n  2152.52,1240.39 2154.58,1243.32 2156.65,1246.25 2158.72,1249.19 2160.78,1252.13 2162.85,1255.08 2164.91,1258.03 2166.98,1260.98 2169.05,1263.94 2171.11,1266.91 \n  2173.18,1269.87 2175.25,1272.84 2177.31,1275.82 2179.38,1278.8 2181.44,1281.78 2183.51,1284.76 2185.58,1287.76 2187.64,1290.75 2189.71,1293.75 2191.78,1296.75 \n  2193.84,1299.76 2195.91,1302.77 2197.97,1305.79 2200.04,1308.81 2202.11,1311.83 2204.17,1314.86 2206.24,1317.89 2208.31,1320.92 2210.37,1323.96 2212.44,1327.01 \n  2214.5,1330.06 2216.57,1333.11 2218.64,1336.16 2220.7,1339.22 2222.77,1342.29 2224.84,1345.36 2226.9,1348.43 2228.97,1351.51 2231.03,1354.59 2233.1,1357.67 \n  2235.17,1360.76 2237.23,1363.85 2239.3,1366.95 2241.37,1370.05 2243.43,1373.16 2245.5,1376.27 2247.56,1379.38 2249.63,1382.5 2251.7,1385.62 2253.76,1388.75 \n  2255.83,1391.88 2257.9,1395.01 2259.96,1398.15 2262.03,1401.29 2264.09,1404.44 2266.16,1407.59 2268.23,1410.74 2270.29,1413.9 2272.36,1417.06 2274.43,1420.23 \n  2276.49,1423.4 2278.56,1426.58 2280.62,1429.76 2282.69,1432.94 2284.76,1436.13 2286.82,1439.32 2288.89,1442.52 2290.95,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip422)\" style=\"stroke:#e26f46; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  230.922,1406.48 232.989,1406.16 235.055,1405.83 237.121,1405.51 239.187,1405.18 241.253,1404.86 243.32,1404.53 245.386,1404.21 247.452,1403.88 249.518,1403.56 \n  251.585,1403.23 253.651,1402.91 255.717,1402.58 257.783,1402.26 259.85,1401.93 261.916,1401.61 263.982,1401.29 266.048,1400.96 268.114,1400.64 270.181,1400.31 \n  272.247,1399.99 274.313,1399.67 276.379,1399.34 278.446,1399.02 280.512,1398.7 282.578,1398.37 284.644,1398.05 286.711,1397.73 288.777,1397.4 290.843,1397.08 \n  292.909,1396.76 294.975,1396.43 297.042,1396.11 299.108,1395.79 301.174,1395.47 303.24,1395.14 305.307,1394.82 307.373,1394.5 309.439,1394.18 311.505,1393.85 \n  313.572,1393.53 315.638,1393.21 317.704,1392.89 319.77,1392.57 321.836,1392.24 323.903,1391.92 325.969,1391.6 328.035,1391.28 330.101,1390.96 332.168,1390.64 \n  334.234,1390.32 336.3,1389.99 338.366,1389.67 340.433,1389.35 342.499,1389.03 344.565,1388.71 346.631,1388.39 348.697,1388.07 350.764,1387.75 352.83,1387.43 \n  354.896,1387.11 356.962,1386.79 359.029,1386.47 361.095,1386.15 363.161,1385.83 365.227,1385.51 367.294,1385.19 369.36,1384.87 371.426,1384.55 373.492,1384.23 \n  375.558,1383.91 377.625,1383.59 379.691,1383.27 381.757,1382.95 383.823,1382.63 385.89,1382.31 387.956,1381.99 390.022,1381.67 392.088,1381.35 394.155,1381.03 \n  396.221,1380.71 398.287,1380.39 400.353,1380.08 402.419,1379.76 404.486,1379.44 406.552,1379.12 408.618,1378.8 410.684,1378.48 412.751,1378.16 414.817,1377.85 \n  416.883,1377.53 418.949,1377.21 421.016,1376.89 423.082,1376.57 425.148,1376.26 427.214,1375.94 429.281,1375.62 431.347,1375.3 433.413,1374.99 435.479,1374.67 \n  437.545,1374.35 439.612,1374.03 441.678,1373.72 443.744,1373.4 445.81,1373.08 447.877,1372.77 449.943,1372.45 452.009,1372.13 454.075,1371.82 456.142,1371.5 \n  458.208,1371.18 460.274,1370.87 462.34,1370.55 464.406,1370.23 466.473,1369.92 468.539,1369.6 470.605,1369.28 472.671,1368.97 474.738,1368.65 476.804,1368.34 \n  478.87,1368.02 480.936,1367.71 483.003,1367.39 485.069,1367.07 487.135,1366.76 489.201,1366.44 491.267,1366.13 493.334,1365.81 495.4,1365.5 497.466,1365.18 \n  499.532,1364.87 501.599,1364.55 503.665,1364.24 505.731,1363.92 507.797,1363.61 509.864,1363.29 511.93,1362.98 513.996,1362.67 516.062,1362.35 518.128,1362.04 \n  520.195,1361.72 522.261,1361.41 524.327,1361.09 526.393,1360.78 528.46,1360.47 530.526,1360.15 532.592,1359.84 534.658,1359.53 536.725,1359.21 538.791,1358.9 \n  540.857,1358.59 542.923,1358.27 544.989,1357.96 547.056,1357.65 549.122,1357.33 551.188,1357.02 553.254,1356.71 555.321,1356.39 557.387,1356.08 559.453,1355.77 \n  561.519,1355.46 563.586,1355.14 565.652,1354.83 567.718,1354.52 569.784,1354.21 571.85,1353.89 573.917,1353.58 575.983,1353.27 578.049,1352.96 580.115,1352.65 \n  582.182,1352.33 584.248,1352.02 586.314,1351.71 588.38,1351.4 590.447,1351.09 592.513,1350.78 594.579,1350.46 596.645,1350.15 598.711,1349.84 600.778,1349.53 \n  602.844,1349.22 604.91,1348.91 606.976,1348.6 609.043,1348.29 611.109,1347.98 613.175,1347.67 615.241,1347.36 617.308,1347.05 619.374,1346.73 621.44,1346.42 \n  623.506,1346.11 625.572,1345.8 627.639,1345.49 629.705,1345.18 631.771,1344.87 633.837,1344.56 635.904,1344.25 637.97,1343.94 640.036,1343.63 642.102,1343.33 \n  644.169,1343.02 646.235,1342.71 648.301,1342.4 650.367,1342.09 652.433,1341.78 654.5,1341.47 656.566,1341.16 658.632,1340.85 660.698,1340.54 662.765,1340.23 \n  664.831,1339.93 666.897,1339.62 668.963,1339.31 671.03,1339 673.096,1338.69 675.162,1338.38 677.228,1338.07 679.294,1337.77 681.361,1337.46 683.427,1337.15 \n  685.493,1336.84 687.559,1336.53 689.626,1336.23 691.692,1335.92 693.758,1335.61 695.824,1335.3 697.891,1335 699.957,1334.69 702.023,1334.38 704.089,1334.07 \n  706.155,1333.77 708.222,1333.46 710.288,1333.15 712.354,1332.85 714.42,1332.54 716.487,1332.23 718.553,1331.93 720.619,1331.62 722.685,1331.31 724.752,1331.01 \n  726.818,1330.7 728.884,1330.39 730.95,1330.09 733.017,1329.78 735.083,1329.47 737.149,1329.17 739.215,1328.86 741.281,1328.56 743.348,1328.25 745.414,1327.95 \n  747.48,1327.64 749.546,1327.33 751.613,1327.03 753.679,1326.72 755.745,1326.42 757.811,1326.11 759.878,1325.81 761.944,1325.5 764.01,1325.2 766.076,1324.89 \n  768.142,1324.59 770.209,1324.28 772.275,1323.98 774.341,1323.67 776.407,1323.37 778.474,1323.06 780.54,1322.76 782.606,1322.46 784.672,1322.15 786.739,1321.85 \n  788.805,1321.54 790.871,1321.24 792.937,1320.94 795.003,1320.63 797.07,1320.33 799.136,1320.02 801.202,1319.72 803.268,1319.42 805.335,1319.11 807.401,1318.81 \n  809.467,1318.51 811.533,1318.2 813.6,1317.9 815.666,1317.6 817.732,1317.29 819.798,1316.99 821.864,1316.69 823.931,1316.39 825.997,1316.08 828.063,1315.78 \n  830.129,1315.48 832.196,1315.17 834.262,1314.87 836.328,1314.57 838.394,1314.27 840.461,1313.97 842.527,1313.66 844.593,1313.36 846.659,1313.06 848.725,1312.76 \n  850.792,1312.46 852.858,1312.15 854.924,1311.85 856.99,1311.55 859.057,1311.25 861.123,1310.95 863.189,1310.65 865.255,1310.34 867.322,1310.04 869.388,1309.74 \n  871.454,1309.44 873.52,1309.14 875.586,1308.84 877.653,1308.54 879.719,1308.24 881.785,1307.94 883.851,1307.64 885.918,1307.34 887.984,1307.04 890.05,1306.73 \n  892.116,1306.43 894.183,1306.13 896.249,1305.83 898.315,1305.53 900.381,1305.23 902.447,1304.93 904.514,1304.63 906.58,1304.33 908.646,1304.03 910.712,1303.73 \n  912.779,1303.44 914.845,1303.14 916.911,1302.84 918.977,1302.54 921.044,1302.24 923.11,1301.94 925.176,1301.64 927.242,1301.34 929.308,1301.04 931.375,1300.74 \n  933.441,1300.44 935.507,1300.14 937.573,1299.85 939.64,1299.55 941.706,1299.25 943.772,1298.95 945.838,1298.65 947.905,1298.35 949.971,1298.06 952.037,1297.76 \n  954.103,1297.46 956.169,1297.16 958.236,1296.86 960.302,1296.57 962.368,1296.27 964.434,1295.97 966.501,1295.67 968.567,1295.38 970.633,1295.08 972.699,1294.78 \n  974.766,1294.48 976.832,1294.19 978.898,1293.89 980.964,1293.59 983.03,1293.29 985.097,1293 987.163,1292.7 989.229,1292.4 991.295,1292.11 993.362,1291.81 \n  995.428,1291.51 997.494,1291.22 999.56,1290.92 1001.63,1290.62 1003.69,1290.33 1005.76,1290.03 1007.83,1289.74 1009.89,1289.44 1011.96,1289.14 1014.02,1288.85 \n  1016.09,1288.55 1018.16,1288.26 1020.22,1287.96 1022.29,1287.66 1024.36,1287.37 1026.42,1287.07 1028.49,1286.78 1030.55,1286.48 1032.62,1286.19 1034.69,1285.89 \n  1036.75,1285.6 1038.82,1285.3 1040.88,1285.01 1042.95,1284.71 1045.02,1284.42 1047.08,1284.12 1049.15,1283.83 1051.22,1283.53 1053.28,1283.24 1055.35,1282.94 \n  1057.41,1282.65 1059.48,1282.36 1061.55,1282.06 1063.61,1281.77 1065.68,1281.47 1067.75,1281.18 1069.81,1280.89 1071.88,1280.59 1073.94,1280.3 1076.01,1280 \n  1078.08,1279.71 1080.14,1279.42 1082.21,1279.12 1084.28,1278.83 1086.34,1278.54 1088.41,1278.24 1090.47,1277.95 1092.54,1277.66 1094.61,1277.36 1096.67,1277.07 \n  1098.74,1276.78 1100.81,1276.49 1102.87,1276.19 1104.94,1275.9 1107,1275.61 1109.07,1275.32 1111.14,1275.02 1113.2,1274.73 1115.27,1274.44 1117.34,1274.15 \n  1119.4,1273.85 1121.47,1273.56 1123.53,1273.27 1125.6,1272.98 1127.67,1272.69 1129.73,1272.39 1131.8,1272.1 1133.87,1271.81 1135.93,1271.52 1138,1271.23 \n  1140.06,1270.94 1142.13,1270.64 1144.2,1270.35 1146.26,1270.06 1148.33,1269.77 1150.4,1269.48 1152.46,1269.19 1154.53,1268.9 1156.59,1268.61 1158.66,1268.32 \n  1160.73,1268.03 1162.79,1267.73 1164.86,1267.44 1166.93,1267.15 1168.99,1266.86 1171.06,1266.57 1173.12,1266.28 1175.19,1265.99 1177.26,1265.7 1179.32,1265.41 \n  1181.39,1265.12 1183.45,1264.83 1185.52,1264.54 1187.59,1264.25 1189.65,1263.96 1191.72,1263.67 1193.79,1263.38 1195.85,1263.09 1197.92,1262.81 1199.98,1262.52 \n  1202.05,1262.23 1204.12,1261.94 1206.18,1261.65 1208.25,1261.36 1210.32,1261.07 1212.38,1260.78 1214.45,1260.49 1216.51,1260.2 1218.58,1259.92 1220.65,1259.63 \n  1222.71,1259.34 1224.78,1259.05 1226.85,1258.76 1228.91,1258.47 1230.98,1258.18 1233.04,1257.9 1235.11,1257.61 1237.18,1257.32 1239.24,1257.03 1241.31,1256.74 \n  1243.38,1256.46 1245.44,1256.17 1247.51,1255.88 1249.57,1255.59 1251.64,1255.31 1253.71,1255.02 1255.77,1254.73 1257.84,1254.44 1259.91,1254.16 1261.97,1253.87 \n  1264.04,1253.58 1266.1,1253.3 1268.17,1253.01 1270.24,1252.72 1272.3,1252.43 1274.37,1252.15 1276.44,1251.86 1278.5,1251.57 1280.57,1251.29 1282.63,1251 \n  1284.7,1250.72 1286.77,1250.43 1288.83,1250.14 1290.9,1249.86 1292.97,1249.57 1295.03,1249.28 1297.1,1249 1299.16,1248.71 1301.23,1248.43 1303.3,1248.14 \n  1305.36,1247.86 1307.43,1247.57 1309.5,1247.28 1311.56,1247 1313.63,1246.71 1315.69,1246.43 1317.76,1246.14 1319.83,1245.86 1321.89,1245.57 1323.96,1245.29 \n  1326.02,1245 1328.09,1244.72 1330.16,1244.43 1332.22,1244.15 1334.29,1243.86 1336.36,1243.58 1338.42,1243.29 1340.49,1243.01 1342.55,1242.73 1344.62,1242.44 \n  1346.69,1242.16 1348.75,1241.87 1350.82,1241.59 1352.89,1241.31 1354.95,1241.02 1357.02,1240.74 1359.08,1240.45 1361.15,1240.17 1363.22,1239.89 1365.28,1239.6 \n  1367.35,1239.32 1369.42,1239.04 1371.48,1238.75 1373.55,1238.47 1375.61,1238.19 1377.68,1237.9 1379.75,1237.62 1381.81,1237.34 1383.88,1237.05 1385.95,1236.77 \n  1388.01,1236.49 1390.08,1236.21 1392.14,1235.92 1394.21,1235.64 1396.28,1235.36 1398.34,1235.07 1400.41,1234.79 1402.48,1234.51 1404.54,1234.23 1406.61,1233.95 \n  1408.67,1233.66 1410.74,1233.38 1412.81,1233.1 1414.87,1232.82 1416.94,1232.54 1419.01,1232.25 1421.07,1231.97 1423.14,1231.69 1425.2,1231.41 1427.27,1231.13 \n  1429.34,1230.85 1431.4,1230.57 1433.47,1230.28 1435.54,1230 1437.6,1229.72 1439.67,1229.44 1441.73,1229.16 1443.8,1228.88 1445.87,1228.6 1447.93,1228.32 \n  1450,1228.04 1452.07,1227.76 1454.13,1227.48 1456.2,1227.19 1458.26,1226.91 1460.33,1226.63 1462.4,1226.35 1464.46,1226.07 1466.53,1225.79 1468.59,1225.51 \n  1470.66,1225.23 1472.73,1224.95 1474.79,1224.67 1476.86,1224.39 1478.93,1224.11 1480.99,1223.83 1483.06,1223.55 1485.12,1223.28 1487.19,1223 1489.26,1222.72 \n  1491.32,1222.44 1493.39,1222.16 1495.46,1221.88 1497.52,1221.6 1499.59,1221.32 1501.65,1221.04 1503.72,1220.76 1505.79,1220.48 1507.85,1220.21 1509.92,1219.93 \n  1511.99,1219.65 1514.05,1219.37 1516.12,1219.09 1518.18,1218.81 1520.25,1218.53 1522.32,1218.26 1524.38,1217.98 1526.45,1217.7 1528.52,1217.42 1530.58,1217.14 \n  1532.65,1216.87 1534.71,1216.59 1536.78,1216.31 1538.85,1216.03 1540.91,1215.76 1542.98,1215.48 1545.05,1215.2 1547.11,1214.92 1549.18,1214.65 1551.24,1214.37 \n  1553.31,1214.09 1555.38,1213.81 1557.44,1213.54 1559.51,1213.26 1561.58,1212.98 1563.64,1212.71 1565.71,1212.43 1567.77,1212.15 1569.84,1211.88 1571.91,1211.6 \n  1573.97,1211.32 1576.04,1211.05 1578.11,1210.77 1580.17,1210.49 1582.24,1210.22 1584.3,1209.94 1586.37,1209.67 1588.44,1209.39 1590.5,1209.11 1592.57,1208.84 \n  1594.63,1208.56 1596.7,1208.29 1598.77,1208.01 1600.83,1207.73 1602.9,1207.46 1604.97,1207.18 1607.03,1206.91 1609.1,1206.63 1611.16,1206.36 1613.23,1206.08 \n  1615.3,1205.81 1617.36,1205.53 1619.43,1205.26 1621.5,1204.98 1623.56,1204.71 1625.63,1204.43 1627.69,1204.16 1629.76,1203.88 1631.83,1203.61 1633.89,1203.33 \n  1635.96,1203.06 1638.03,1202.79 1640.09,1202.51 1642.16,1202.24 1644.22,1201.96 1646.29,1201.69 1648.36,1201.41 1650.42,1201.14 1652.49,1200.87 1654.56,1200.59 \n  1656.62,1200.32 1658.69,1200.05 1660.75,1199.77 1662.82,1199.5 1664.89,1199.22 1666.95,1198.95 1669.02,1198.68 1671.09,1198.4 1673.15,1198.13 1675.22,1197.86 \n  1677.28,1197.59 1679.35,1197.31 1681.42,1197.04 1683.48,1196.77 1685.55,1196.49 1687.62,1196.22 1689.68,1195.95 1691.75,1195.68 1693.81,1195.4 1695.88,1195.13 \n  1697.95,1194.86 1700.01,1194.59 1702.08,1194.31 1704.15,1194.04 1706.21,1193.77 1708.28,1193.5 1710.34,1193.23 1712.41,1192.95 1714.48,1192.68 1716.54,1192.41 \n  1718.61,1192.14 1720.68,1191.87 1722.74,1191.59 1724.81,1191.32 1726.87,1191.05 1728.94,1190.78 1731.01,1190.51 1733.07,1190.24 1735.14,1189.97 1737.2,1189.7 \n  1739.27,1189.42 1741.34,1189.15 1743.4,1188.88 1745.47,1188.61 1747.54,1188.34 1749.6,1188.07 1751.67,1187.8 1753.73,1187.53 1755.8,1187.26 1757.87,1186.99 \n  1759.93,1186.72 1762,1186.45 1764.07,1186.18 1766.13,1185.91 1768.2,1185.64 1770.26,1185.37 1772.33,1185.1 1774.4,1184.83 1776.46,1184.56 1778.53,1184.29 \n  1780.6,1184.02 1782.66,1183.75 1784.73,1183.48 1786.79,1183.21 1788.86,1182.94 1790.93,1182.67 1792.99,1182.4 1795.06,1182.13 1797.13,1181.86 1799.19,1181.59 \n  1801.26,1181.33 1803.32,1181.06 1805.39,1180.79 1807.46,1180.52 1809.52,1180.25 1811.59,1179.98 1813.66,1179.71 1815.72,1179.44 1817.79,1179.18 1819.85,1178.91 \n  1821.92,1178.64 1823.99,1178.37 1826.05,1178.1 1828.12,1177.83 1830.19,1177.57 1832.25,1177.3 1834.32,1177.03 1836.38,1176.76 1838.45,1176.49 1840.52,1176.23 \n  1842.58,1175.96 1844.65,1175.69 1846.72,1175.42 1848.78,1175.16 1850.85,1174.89 1852.91,1174.62 1854.98,1174.36 1857.05,1174.09 1859.11,1173.82 1861.18,1173.55 \n  1863.25,1173.29 1865.31,1173.02 1867.38,1172.75 1869.44,1172.49 1871.51,1172.22 1873.58,1171.95 1875.64,1171.69 1877.71,1171.42 1879.77,1171.15 1881.84,1170.89 \n  1883.91,1170.62 1885.97,1170.35 1888.04,1170.09 1890.11,1169.82 1892.17,1169.56 1894.24,1169.29 1896.3,1169.02 1898.37,1168.76 1900.44,1168.49 1902.5,1168.23 \n  1904.57,1167.96 1906.64,1167.7 1908.7,1167.43 1910.77,1167.16 1912.83,1166.9 1914.9,1166.63 1916.97,1166.37 1919.03,1166.1 1921.1,1165.84 1923.17,1165.57 \n  1925.23,1165.31 1927.3,1165.04 1929.36,1164.78 1931.43,1164.51 1933.5,1164.25 1935.56,1163.98 1937.63,1163.72 1939.7,1163.46 1941.76,1163.19 1943.83,1162.93 \n  1945.89,1162.66 1947.96,1162.4 1950.03,1162.13 1952.09,1161.87 1954.16,1161.61 1956.23,1161.34 1958.29,1161.08 1960.36,1160.81 1962.42,1160.55 1964.49,1160.29 \n  1966.56,1160.02 1968.62,1159.76 1970.69,1159.5 1972.76,1159.23 1974.82,1158.97 1976.89,1158.71 1978.95,1158.44 1981.02,1158.18 1983.09,1157.92 1985.15,1157.65 \n  1987.22,1157.39 1989.29,1157.13 1991.35,1156.86 1993.42,1156.6 1995.48,1156.34 1997.55,1156.08 1999.62,1155.81 2001.68,1155.55 2003.75,1155.29 2005.82,1155.03 \n  2007.88,1154.76 2009.95,1154.5 2012.01,1154.24 2014.08,1153.98 2016.15,1153.71 2018.21,1153.45 2020.28,1153.19 2022.34,1152.93 2024.41,1152.67 2026.48,1152.4 \n  2028.54,1152.14 2030.61,1151.88 2032.68,1151.62 2034.74,1151.36 2036.81,1151.1 2038.87,1150.84 2040.94,1150.57 2043.01,1150.31 2045.07,1150.05 2047.14,1149.79 \n  2049.21,1149.53 2051.27,1149.27 2053.34,1149.01 2055.4,1148.75 2057.47,1148.49 2059.54,1148.23 2061.6,1147.96 2063.67,1147.7 2065.74,1147.44 2067.8,1147.18 \n  2069.87,1146.92 2071.93,1146.66 2074,1146.4 2076.07,1146.14 2078.13,1145.88 2080.2,1145.62 2082.27,1145.36 2084.33,1145.1 2086.4,1144.84 2088.46,1144.58 \n  2090.53,1144.32 2092.6,1144.06 2094.66,1143.8 2096.73,1143.54 2098.8,1143.28 2100.86,1143.03 2102.93,1142.77 2104.99,1142.51 2107.06,1142.25 2109.13,1141.99 \n  2111.19,1141.73 2113.26,1141.47 2115.33,1141.21 2117.39,1140.95 2119.46,1140.69 2121.52,1140.43 2123.59,1140.18 2125.66,1139.92 2127.72,1139.66 2129.79,1139.4 \n  2131.86,1139.14 2133.92,1138.88 2135.99,1138.63 2138.05,1138.37 2140.12,1138.11 2142.19,1137.85 2144.25,1137.59 2146.32,1137.33 2148.38,1137.08 2150.45,1136.82 \n  2152.52,1136.56 2154.58,1136.3 2156.65,1136.05 2158.72,1135.79 2160.78,1135.53 2162.85,1135.27 2164.91,1135.02 2166.98,1134.76 2169.05,1134.5 2171.11,1134.24 \n  2173.18,1133.99 2175.25,1133.73 2177.31,1133.47 2179.38,1133.22 2181.44,1132.96 2183.51,1132.7 2185.58,1132.45 2187.64,1132.19 2189.71,1131.93 2191.78,1131.68 \n  2193.84,1131.42 2195.91,1131.16 2197.97,1130.91 2200.04,1130.65 2202.11,1130.39 2204.17,1130.14 2206.24,1129.88 2208.31,1129.63 2210.37,1129.37 2212.44,1129.11 \n  2214.5,1128.86 2216.57,1128.6 2218.64,1128.35 2220.7,1128.09 2222.77,1127.83 2224.84,1127.58 2226.9,1127.32 2228.97,1127.07 2231.03,1126.81 2233.1,1126.56 \n  2235.17,1126.3 2237.23,1126.05 2239.3,1125.79 2241.37,1125.54 2243.43,1125.28 2245.5,1125.03 2247.56,1124.77 2249.63,1124.52 2251.7,1124.26 2253.76,1124.01 \n  2255.83,1123.75 2257.9,1123.5 2259.96,1123.24 2262.03,1122.99 2264.09,1122.74 2266.16,1122.48 2268.23,1122.23 2270.29,1121.97 2272.36,1121.72 2274.43,1121.47 \n  2276.49,1121.21 2278.56,1120.96 2280.62,1120.7 2282.69,1120.45 2284.76,1120.2 2286.82,1119.94 2288.89,1119.69 2290.95,1119.44 \n  \"/>\n<path clip-path=\"url(#clip420)\" d=\"\nM1620.45 250.738 L2279.97 250.738 L2279.97 95.2176 L1620.45 95.2176  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1620.45,250.738 2279.97,250.738 2279.97,95.2176 1620.45,95.2176 1620.45,250.738 \n  \"/>\n<polyline clip-path=\"url(#clip420)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1644.71,147.058 1790.28,147.058 \n  \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1819.22 147.833 L1819.22 160.495 L1826.72 160.495 Q1830.5 160.495 1832.3 158.944 Q1834.13 157.37 1834.13 154.152 Q1834.13 150.912 1832.3 149.384 Q1830.5 147.833 1826.72 147.833 L1819.22 147.833 M1819.22 133.62 L1819.22 144.037 L1826.14 144.037 Q1829.57 144.037 1831.24 142.764 Q1832.93 141.467 1832.93 138.828 Q1832.93 136.213 1831.24 134.916 Q1829.57 133.62 1826.14 133.62 L1819.22 133.62 M1814.55 129.778 L1826.49 129.778 Q1831.84 129.778 1834.73 132 Q1837.63 134.222 1837.63 138.319 Q1837.63 141.49 1836.14 143.365 Q1834.66 145.24 1831.79 145.703 Q1835.24 146.444 1837.14 148.805 Q1839.06 151.143 1839.06 154.662 Q1839.06 159.291 1835.91 161.814 Q1832.76 164.338 1826.95 164.338 L1814.55 164.338 L1814.55 129.778 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1847.97 158.458 L1852.86 158.458 L1852.86 164.338 L1847.97 164.338 L1847.97 158.458 M1847.97 139.824 L1852.86 139.824 L1852.86 145.703 L1847.97 145.703 L1847.97 139.824 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1875.45 138.412 L1879.71 138.412 L1885.03 158.643 L1890.33 138.412 L1895.36 138.412 L1900.68 158.643 L1905.98 138.412 L1910.24 138.412 L1903.46 164.338 L1898.44 164.338 L1892.86 143.088 L1887.25 164.338 L1882.23 164.338 L1875.45 138.412 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1938.87 150.31 L1938.87 152.393 L1919.29 152.393 Q1919.57 156.791 1921.93 159.106 Q1924.31 161.398 1928.55 161.398 Q1931 161.398 1933.3 160.796 Q1935.61 160.194 1937.88 158.99 L1937.88 163.018 Q1935.59 163.99 1933.18 164.5 Q1930.77 165.009 1928.3 165.009 Q1922.09 165.009 1918.46 161.398 Q1914.85 157.787 1914.85 151.629 Q1914.85 145.264 1918.27 141.537 Q1921.72 137.787 1927.56 137.787 Q1932.79 137.787 1935.82 141.166 Q1938.87 144.523 1938.87 150.31 M1934.62 149.06 Q1934.57 145.565 1932.65 143.481 Q1930.75 141.398 1927.6 141.398 Q1924.04 141.398 1921.88 143.412 Q1919.75 145.426 1919.43 149.083 L1934.62 149.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1957.65 151.305 Q1952.49 151.305 1950.5 152.486 Q1948.5 153.666 1948.5 156.514 Q1948.5 158.782 1949.99 160.125 Q1951.49 161.444 1954.06 161.444 Q1957.6 161.444 1959.73 158.944 Q1961.88 156.421 1961.88 152.254 L1961.88 151.305 L1957.65 151.305 M1966.14 149.546 L1966.14 164.338 L1961.88 164.338 L1961.88 160.402 Q1960.43 162.763 1958.25 163.898 Q1956.07 165.009 1952.93 165.009 Q1948.94 165.009 1946.58 162.787 Q1944.25 160.541 1944.25 156.791 Q1944.25 152.416 1947.16 150.194 Q1950.1 147.972 1955.91 147.972 L1961.88 147.972 L1961.88 147.555 Q1961.88 144.615 1959.94 143.018 Q1958.02 141.398 1954.52 141.398 Q1952.3 141.398 1950.19 141.93 Q1948.09 142.463 1946.14 143.527 L1946.14 139.592 Q1948.48 138.69 1950.68 138.25 Q1952.88 137.787 1954.96 137.787 Q1960.59 137.787 1963.37 140.703 Q1966.14 143.62 1966.14 149.546 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1974.92 128.319 L1979.18 128.319 L1979.18 164.338 L1974.92 164.338 L1974.92 128.319 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1992.3 131.051 L1992.3 138.412 L2001.07 138.412 L2001.07 141.722 L1992.3 141.722 L1992.3 155.796 Q1992.3 158.967 1993.16 159.87 Q1994.04 160.773 1996.7 160.773 L2001.07 160.773 L2001.07 164.338 L1996.7 164.338 Q1991.77 164.338 1989.89 162.509 Q1988.02 160.657 1988.02 155.796 L1988.02 141.722 L1984.89 141.722 L1984.89 138.412 L1988.02 138.412 L1988.02 131.051 L1992.3 131.051 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2028.23 148.689 L2028.23 164.338 L2023.97 164.338 L2023.97 148.828 Q2023.97 145.148 2022.53 143.319 Q2021.1 141.49 2018.23 141.49 Q2014.78 141.49 2012.79 143.69 Q2010.8 145.889 2010.8 149.685 L2010.8 164.338 L2006.51 164.338 L2006.51 128.319 L2010.8 128.319 L2010.8 142.44 Q2012.32 140.102 2014.38 138.944 Q2016.47 137.787 2019.18 137.787 Q2023.64 137.787 2025.93 140.565 Q2028.23 143.319 2028.23 148.689 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2070.4 151.398 Q2070.4 146.699 2068.46 144.037 Q2066.54 141.352 2063.16 141.352 Q2059.78 141.352 2057.83 144.037 Q2055.91 146.699 2055.91 151.398 Q2055.91 156.097 2057.83 158.782 Q2059.78 161.444 2063.16 161.444 Q2066.54 161.444 2068.46 158.782 Q2070.4 156.097 2070.4 151.398 M2055.91 142.347 Q2057.25 140.032 2059.29 138.921 Q2061.35 137.787 2064.2 137.787 Q2068.92 137.787 2071.86 141.537 Q2074.82 145.287 2074.82 151.398 Q2074.82 157.509 2071.86 161.259 Q2068.92 165.009 2064.2 165.009 Q2061.35 165.009 2059.29 163.898 Q2057.25 162.763 2055.91 160.449 L2055.91 164.338 L2051.63 164.338 L2051.63 128.319 L2055.91 128.319 L2055.91 142.347 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2093.67 151.305 Q2088.5 151.305 2086.51 152.486 Q2084.52 153.666 2084.52 156.514 Q2084.52 158.782 2086 160.125 Q2087.51 161.444 2090.08 161.444 Q2093.62 161.444 2095.75 158.944 Q2097.9 156.421 2097.9 152.254 L2097.9 151.305 L2093.67 151.305 M2102.16 149.546 L2102.16 164.338 L2097.9 164.338 L2097.9 160.402 Q2096.44 162.763 2094.27 163.898 Q2092.09 165.009 2088.94 165.009 Q2084.96 165.009 2082.6 162.787 Q2080.26 160.541 2080.26 156.791 Q2080.26 152.416 2083.18 150.194 Q2086.12 147.972 2091.93 147.972 L2097.9 147.972 L2097.9 147.555 Q2097.9 144.615 2095.96 143.018 Q2094.04 141.398 2090.54 141.398 Q2088.32 141.398 2086.21 141.93 Q2084.11 142.463 2082.16 143.527 L2082.16 139.592 Q2084.5 138.69 2086.7 138.25 Q2088.9 137.787 2090.98 137.787 Q2096.61 137.787 2099.38 140.703 Q2102.16 143.62 2102.16 149.546 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2110.93 128.319 L2115.19 128.319 L2115.19 164.338 L2110.93 164.338 L2110.93 128.319 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2135.89 151.305 Q2130.73 151.305 2128.74 152.486 Q2126.74 153.666 2126.74 156.514 Q2126.74 158.782 2128.23 160.125 Q2129.73 161.444 2132.3 161.444 Q2135.84 161.444 2137.97 158.944 Q2140.12 156.421 2140.12 152.254 L2140.12 151.305 L2135.89 151.305 M2144.38 149.546 L2144.38 164.338 L2140.12 164.338 L2140.12 160.402 Q2138.67 162.763 2136.49 163.898 Q2134.31 165.009 2131.17 165.009 Q2127.18 165.009 2124.82 162.787 Q2122.49 160.541 2122.49 156.791 Q2122.49 152.416 2125.4 150.194 Q2128.34 147.972 2134.15 147.972 L2140.12 147.972 L2140.12 147.555 Q2140.12 144.615 2138.18 143.018 Q2136.26 141.398 2132.76 141.398 Q2130.54 141.398 2128.43 141.93 Q2126.33 142.463 2124.38 143.527 L2124.38 139.592 Q2126.72 138.69 2128.92 138.25 Q2131.12 137.787 2133.2 137.787 Q2138.83 137.787 2141.61 140.703 Q2144.38 143.62 2144.38 149.546 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2174.71 148.689 L2174.71 164.338 L2170.45 164.338 L2170.45 148.828 Q2170.45 145.148 2169.01 143.319 Q2167.58 141.49 2164.71 141.49 Q2161.26 141.49 2159.27 143.69 Q2157.28 145.889 2157.28 149.685 L2157.28 164.338 L2152.99 164.338 L2152.99 138.412 L2157.28 138.412 L2157.28 142.44 Q2158.8 140.102 2160.86 138.944 Q2162.95 137.787 2165.66 137.787 Q2170.12 137.787 2172.42 140.565 Q2174.71 143.319 2174.71 148.689 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2201.86 139.407 L2201.86 143.389 Q2200.05 142.393 2198.23 141.907 Q2196.42 141.398 2194.57 141.398 Q2190.42 141.398 2188.13 144.037 Q2185.84 146.652 2185.84 151.398 Q2185.84 156.143 2188.13 158.782 Q2190.42 161.398 2194.57 161.398 Q2196.42 161.398 2198.23 160.912 Q2200.05 160.402 2201.86 159.407 L2201.86 163.342 Q2200.08 164.176 2198.16 164.592 Q2196.26 165.009 2194.11 165.009 Q2188.25 165.009 2184.8 161.328 Q2181.35 157.648 2181.35 151.398 Q2181.35 145.055 2184.82 141.421 Q2188.32 137.787 2194.38 137.787 Q2196.35 137.787 2198.23 138.203 Q2200.1 138.597 2201.86 139.407 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2231.44 150.31 L2231.44 152.393 L2211.86 152.393 Q2212.14 156.791 2214.5 159.106 Q2216.88 161.398 2221.12 161.398 Q2223.57 161.398 2225.86 160.796 Q2228.18 160.194 2230.45 158.99 L2230.45 163.018 Q2228.16 163.99 2225.75 164.5 Q2223.34 165.009 2220.86 165.009 Q2214.66 165.009 2211.03 161.398 Q2207.42 157.787 2207.42 151.629 Q2207.42 145.264 2210.84 141.537 Q2214.29 137.787 2220.12 137.787 Q2225.35 137.787 2228.39 141.166 Q2231.44 144.523 2231.44 150.31 M2227.18 149.06 Q2227.14 145.565 2225.22 143.481 Q2223.32 141.398 2220.17 141.398 Q2216.6 141.398 2214.45 143.412 Q2212.32 145.426 2212 149.083 L2227.18 149.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip420)\" style=\"stroke:#e26f46; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1644.71,198.898 1790.28,198.898 \n  \"/>\n<path clip-path=\"url(#clip420)\" d=\"M1835.06 191.247 L1835.06 195.229 Q1833.25 194.233 1831.42 193.747 Q1829.62 193.238 1827.76 193.238 Q1823.62 193.238 1821.33 195.877 Q1819.04 198.492 1819.04 203.238 Q1819.04 207.983 1821.33 210.622 Q1823.62 213.238 1827.76 213.238 Q1829.62 213.238 1831.42 212.752 Q1833.25 212.242 1835.06 211.247 L1835.06 215.182 Q1833.27 216.016 1831.35 216.432 Q1829.45 216.849 1827.3 216.849 Q1821.45 216.849 1818 213.168 Q1814.55 209.488 1814.55 203.238 Q1814.55 196.895 1818.02 193.261 Q1821.51 189.627 1827.58 189.627 Q1829.55 189.627 1831.42 190.043 Q1833.3 190.437 1835.06 191.247 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1843.55 210.298 L1848.44 210.298 L1848.44 216.178 L1843.55 216.178 L1843.55 210.298 M1843.55 191.664 L1848.44 191.664 L1848.44 197.543 L1843.55 197.543 L1843.55 191.664 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1892.16 191.247 L1892.16 195.229 Q1890.36 194.233 1888.53 193.747 Q1886.72 193.238 1884.87 193.238 Q1880.73 193.238 1878.44 195.877 Q1876.14 198.492 1876.14 203.238 Q1876.14 207.983 1878.44 210.622 Q1880.73 213.238 1884.87 213.238 Q1886.72 213.238 1888.53 212.752 Q1890.36 212.242 1892.16 211.247 L1892.16 215.182 Q1890.38 216.016 1888.46 216.432 Q1886.56 216.849 1884.41 216.849 Q1878.55 216.849 1875.1 213.168 Q1871.65 209.488 1871.65 203.238 Q1871.65 196.895 1875.13 193.261 Q1878.62 189.627 1884.69 189.627 Q1886.65 189.627 1888.53 190.043 Q1890.4 190.437 1892.16 191.247 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1909.62 193.238 Q1906.19 193.238 1904.2 195.923 Q1902.21 198.585 1902.21 203.238 Q1902.21 207.891 1904.18 210.576 Q1906.17 213.238 1909.62 213.238 Q1913.02 213.238 1915.01 210.553 Q1917 207.867 1917 203.238 Q1917 198.631 1915.01 195.946 Q1913.02 193.238 1909.62 193.238 M1909.62 189.627 Q1915.17 189.627 1918.34 193.238 Q1921.51 196.849 1921.51 203.238 Q1921.51 209.604 1918.34 213.238 Q1915.17 216.849 1909.62 216.849 Q1904.04 216.849 1900.87 213.238 Q1897.72 209.604 1897.72 203.238 Q1897.72 196.849 1900.87 193.238 Q1904.04 189.627 1909.62 189.627 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1950.12 200.529 L1950.12 216.178 L1945.87 216.178 L1945.87 200.668 Q1945.87 196.988 1944.43 195.159 Q1943 193.33 1940.12 193.33 Q1936.68 193.33 1934.69 195.53 Q1932.69 197.729 1932.69 201.525 L1932.69 216.178 L1928.41 216.178 L1928.41 190.252 L1932.69 190.252 L1932.69 194.28 Q1934.22 191.942 1936.28 190.784 Q1938.37 189.627 1941.07 189.627 Q1945.54 189.627 1947.83 192.405 Q1950.12 195.159 1950.12 200.529 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1975.15 191.016 L1975.15 195.043 Q1973.34 194.117 1971.4 193.655 Q1969.45 193.192 1967.37 193.192 Q1964.2 193.192 1962.6 194.164 Q1961.03 195.136 1961.03 197.08 Q1961.03 198.562 1962.16 199.418 Q1963.3 200.252 1966.72 201.016 L1968.18 201.34 Q1972.72 202.312 1974.62 204.094 Q1976.54 205.854 1976.54 209.025 Q1976.54 212.636 1973.67 214.742 Q1970.82 216.849 1965.82 216.849 Q1963.74 216.849 1961.47 216.432 Q1959.22 216.039 1956.72 215.228 L1956.72 210.83 Q1959.08 212.057 1961.37 212.682 Q1963.67 213.284 1965.91 213.284 Q1968.92 213.284 1970.54 212.266 Q1972.16 211.224 1972.16 209.349 Q1972.16 207.613 1970.98 206.687 Q1969.82 205.761 1965.87 204.904 L1964.38 204.557 Q1960.43 203.724 1958.67 202.011 Q1956.91 200.275 1956.91 197.266 Q1956.91 193.608 1959.5 191.618 Q1962.09 189.627 1966.86 189.627 Q1969.22 189.627 1971.31 189.974 Q1973.39 190.321 1975.15 191.016 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M1982.88 205.946 L1982.88 190.252 L1987.14 190.252 L1987.14 205.784 Q1987.14 209.465 1988.57 211.316 Q1990.01 213.145 1992.88 213.145 Q1996.33 213.145 1998.32 210.946 Q2000.33 208.747 2000.33 204.951 L2000.33 190.252 L2004.59 190.252 L2004.59 216.178 L2000.33 216.178 L2000.33 212.196 Q1998.78 214.557 1996.72 215.715 Q1994.68 216.849 1991.98 216.849 Q1987.51 216.849 1985.19 214.071 Q1982.88 211.293 1982.88 205.946 M1993.6 189.627 L1993.6 189.627 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2033.55 195.229 Q2035.15 192.358 2037.37 190.993 Q2039.59 189.627 2042.6 189.627 Q2046.65 189.627 2048.85 192.474 Q2051.05 195.298 2051.05 200.529 L2051.05 216.178 L2046.77 216.178 L2046.77 200.668 Q2046.77 196.942 2045.45 195.136 Q2044.13 193.33 2041.42 193.33 Q2038.11 193.33 2036.19 195.53 Q2034.27 197.729 2034.27 201.525 L2034.27 216.178 L2029.99 216.178 L2029.99 200.668 Q2029.99 196.918 2028.67 195.136 Q2027.35 193.33 2024.59 193.33 Q2021.33 193.33 2019.41 195.553 Q2017.49 197.752 2017.49 201.525 L2017.49 216.178 L2013.2 216.178 L2013.2 190.252 L2017.49 190.252 L2017.49 194.28 Q2018.94 191.895 2020.98 190.761 Q2023.02 189.627 2025.82 189.627 Q2028.64 189.627 2030.61 191.062 Q2032.6 192.497 2033.55 195.229 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2063.67 212.289 L2063.67 226.039 L2059.38 226.039 L2059.38 190.252 L2063.67 190.252 L2063.67 194.187 Q2065.01 191.872 2067.05 190.761 Q2069.11 189.627 2071.95 189.627 Q2076.68 189.627 2079.61 193.377 Q2082.58 197.127 2082.58 203.238 Q2082.58 209.349 2079.61 213.099 Q2076.68 216.849 2071.95 216.849 Q2069.11 216.849 2067.05 215.738 Q2065.01 214.603 2063.67 212.289 M2078.16 203.238 Q2078.16 198.539 2076.21 195.877 Q2074.29 193.192 2070.91 193.192 Q2067.53 193.192 2065.59 195.877 Q2063.67 198.539 2063.67 203.238 Q2063.67 207.937 2065.59 210.622 Q2067.53 213.284 2070.91 213.284 Q2074.29 213.284 2076.21 210.622 Q2078.16 207.937 2078.16 203.238 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2093.85 182.891 L2093.85 190.252 L2102.62 190.252 L2102.62 193.562 L2093.85 193.562 L2093.85 207.636 Q2093.85 210.807 2094.71 211.71 Q2095.59 212.613 2098.25 212.613 L2102.62 212.613 L2102.62 216.178 L2098.25 216.178 Q2093.32 216.178 2091.44 214.349 Q2089.57 212.497 2089.57 207.636 L2089.57 193.562 L2086.44 193.562 L2086.44 190.252 L2089.57 190.252 L2089.57 182.891 L2093.85 182.891 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2108.23 190.252 L2112.49 190.252 L2112.49 216.178 L2108.23 216.178 L2108.23 190.252 M2108.23 180.159 L2112.49 180.159 L2112.49 185.553 L2108.23 185.553 L2108.23 180.159 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2131.44 193.238 Q2128.02 193.238 2126.03 195.923 Q2124.04 198.585 2124.04 203.238 Q2124.04 207.891 2126 210.576 Q2127.99 213.238 2131.44 213.238 Q2134.85 213.238 2136.84 210.553 Q2138.83 207.867 2138.83 203.238 Q2138.83 198.631 2136.84 195.946 Q2134.85 193.238 2131.44 193.238 M2131.44 189.627 Q2137 189.627 2140.17 193.238 Q2143.34 196.849 2143.34 203.238 Q2143.34 209.604 2140.17 213.238 Q2137 216.849 2131.44 216.849 Q2125.86 216.849 2122.69 213.238 Q2119.55 209.604 2119.55 203.238 Q2119.55 196.849 2122.69 193.238 Q2125.86 189.627 2131.44 189.627 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip420)\" d=\"M2171.95 200.529 L2171.95 216.178 L2167.69 216.178 L2167.69 200.668 Q2167.69 196.988 2166.26 195.159 Q2164.82 193.33 2161.95 193.33 Q2158.5 193.33 2156.51 195.53 Q2154.52 197.729 2154.52 201.525 L2154.52 216.178 L2150.24 216.178 L2150.24 190.252 L2154.52 190.252 L2154.52 194.28 Q2156.05 191.942 2158.11 190.784 Q2160.19 189.627 2162.9 189.627 Q2167.37 189.627 2169.66 192.405 Q2171.95 195.159 2171.95 200.529 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"That's it, now we have our optimal trajectory!","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"This very simple problem has a closed form solution:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"λ1 = exp((r)T)\nλ2 = exp(-(r-ρ)T)\nden = (λ1-λ2)r\nΩ1 = (k + (r*B0-k)λ2)/den\nΩ2 = (k + (r*B0-k)λ1)/den\nc0 = r*B0 + (r)Ω1 + (r-ρ)Ω2\nBB(t; k=k,r=r,ρ=ρ,Ω1=Ω1,Ω2=Ω2) = (k/r) - Ω1*exp((r)t) + Ω2*exp(-(r-ρ)t)\ncc(t; k=k,r=r,ρ=ρ,c0=c0)       = k + (c0-k)*exp(-(r-ρ)t)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"cc (generic function with 1 method)","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Compare the solution given by InfiniteOpt with the closed form:","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"plot(legend=:topright);\nplot!(ts[ix], c_opt[ix], color = 1, lab = \"c: consumption, InfiniteOpt\");\nplot!(ts[ix], cc, color = 1, linestyle=:dash, lab = \"c: consumption, closed form\");\nplot!(ts[ix], B_opt[ix], color = 4, lab = \"B: wealth balance, InfiniteOpt\");\nplot!(ts[ix], BB, color = 4, linestyle=:dash, lab = \"B: wealth balance, closed form\")","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip450\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip450)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip451\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip450)\" d=\"\nM169.121 1486.45 L2352.76 1486.45 L2352.76 47.2441 L169.121 47.2441  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip452\">\n    <rect x=\"169\" y=\"47\" width=\"2185\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  228.856,1486.45 228.856,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  744.897,1486.45 744.897,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1260.94,1486.45 1260.94,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1776.98,1486.45 1776.98,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2293.02,1486.45 2293.02,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,1486.45 2352.76,1486.45 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  228.856,1486.45 228.856,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  744.897,1486.45 744.897,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1260.94,1486.45 1260.94,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1776.98,1486.45 1776.98,1467.55 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2293.02,1486.45 2293.02,1467.55 \n  \"/>\n<path clip-path=\"url(#clip450)\" d=\"M206.24 1517.37 Q202.629 1517.37 200.801 1520.93 Q198.995 1524.47 198.995 1531.6 Q198.995 1538.71 200.801 1542.27 Q202.629 1545.82 206.24 1545.82 Q209.875 1545.82 211.68 1542.27 Q213.509 1538.71 213.509 1531.6 Q213.509 1524.47 211.68 1520.93 Q209.875 1517.37 206.24 1517.37 M206.24 1513.66 Q212.051 1513.66 215.106 1518.27 Q218.185 1522.85 218.185 1531.6 Q218.185 1540.33 215.106 1544.94 Q212.051 1549.52 206.24 1549.52 Q200.43 1549.52 197.352 1544.94 Q194.296 1540.33 194.296 1531.6 Q194.296 1522.85 197.352 1518.27 Q200.43 1513.66 206.24 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M226.402 1542.97 L231.287 1542.97 L231.287 1548.85 L226.402 1548.85 L226.402 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M251.472 1517.37 Q247.861 1517.37 246.032 1520.93 Q244.226 1524.47 244.226 1531.6 Q244.226 1538.71 246.032 1542.27 Q247.861 1545.82 251.472 1545.82 Q255.106 1545.82 256.911 1542.27 Q258.74 1538.71 258.74 1531.6 Q258.74 1524.47 256.911 1520.93 Q255.106 1517.37 251.472 1517.37 M251.472 1513.66 Q257.282 1513.66 260.337 1518.27 Q263.416 1522.85 263.416 1531.6 Q263.416 1540.33 260.337 1544.94 Q257.282 1549.52 251.472 1549.52 Q245.662 1549.52 242.583 1544.94 Q239.527 1540.33 239.527 1531.6 Q239.527 1522.85 242.583 1518.27 Q245.662 1513.66 251.472 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M716.634 1544.91 L732.953 1544.91 L732.953 1548.85 L711.009 1548.85 L711.009 1544.91 Q713.671 1542.16 718.254 1537.53 Q722.86 1532.88 724.041 1531.53 Q726.286 1529.01 727.166 1527.27 Q728.069 1525.51 728.069 1523.82 Q728.069 1521.07 726.124 1519.33 Q724.203 1517.6 721.101 1517.6 Q718.902 1517.6 716.448 1518.36 Q714.018 1519.13 711.24 1520.68 L711.24 1515.95 Q714.064 1514.82 716.518 1514.24 Q718.972 1513.66 721.009 1513.66 Q726.379 1513.66 729.573 1516.35 Q732.768 1519.03 732.768 1523.52 Q732.768 1525.65 731.958 1527.57 Q731.171 1529.47 729.064 1532.07 Q728.485 1532.74 725.384 1535.95 Q722.282 1539.15 716.634 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M742.768 1542.97 L747.652 1542.97 L747.652 1548.85 L742.768 1548.85 L742.768 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M757.883 1514.29 L776.24 1514.29 L776.24 1518.22 L762.166 1518.22 L762.166 1526.7 Q763.184 1526.35 764.203 1526.19 Q765.221 1526 766.24 1526 Q772.027 1526 775.406 1529.17 Q778.786 1532.34 778.786 1537.76 Q778.786 1543.34 775.314 1546.44 Q771.842 1549.52 765.522 1549.52 Q763.346 1549.52 761.078 1549.15 Q758.832 1548.78 756.425 1548.04 L756.425 1543.34 Q758.508 1544.47 760.731 1545.03 Q762.953 1545.58 765.43 1545.58 Q769.434 1545.58 771.772 1543.48 Q774.11 1541.37 774.11 1537.76 Q774.11 1534.15 771.772 1532.04 Q769.434 1529.94 765.43 1529.94 Q763.555 1529.94 761.68 1530.35 Q759.828 1530.77 757.883 1531.65 L757.883 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1228.1 1514.29 L1246.46 1514.29 L1246.46 1518.22 L1232.39 1518.22 L1232.39 1526.7 Q1233.4 1526.35 1234.42 1526.19 Q1235.44 1526 1236.46 1526 Q1242.25 1526 1245.63 1529.17 Q1249.01 1532.34 1249.01 1537.76 Q1249.01 1543.34 1245.53 1546.44 Q1242.06 1549.52 1235.74 1549.52 Q1233.57 1549.52 1231.3 1549.15 Q1229.05 1548.78 1226.64 1548.04 L1226.64 1543.34 Q1228.73 1544.47 1230.95 1545.03 Q1233.17 1545.58 1235.65 1545.58 Q1239.65 1545.58 1241.99 1543.48 Q1244.33 1541.37 1244.33 1537.76 Q1244.33 1534.15 1241.99 1532.04 Q1239.65 1529.94 1235.65 1529.94 Q1233.77 1529.94 1231.9 1530.35 Q1230.05 1530.77 1228.1 1531.65 L1228.1 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1258.22 1542.97 L1263.1 1542.97 L1263.1 1548.85 L1258.22 1548.85 L1258.22 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1283.29 1517.37 Q1279.68 1517.37 1277.85 1520.93 Q1276.04 1524.47 1276.04 1531.6 Q1276.04 1538.71 1277.85 1542.27 Q1279.68 1545.82 1283.29 1545.82 Q1286.92 1545.82 1288.73 1542.27 Q1290.56 1538.71 1290.56 1531.6 Q1290.56 1524.47 1288.73 1520.93 Q1286.92 1517.37 1283.29 1517.37 M1283.29 1513.66 Q1289.1 1513.66 1292.15 1518.27 Q1295.23 1522.85 1295.23 1531.6 Q1295.23 1540.33 1292.15 1544.94 Q1289.1 1549.52 1283.29 1549.52 Q1277.48 1549.52 1274.4 1544.94 Q1271.34 1540.33 1271.34 1531.6 Q1271.34 1522.85 1274.4 1518.27 Q1277.48 1513.66 1283.29 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1743.3 1514.29 L1765.52 1514.29 L1765.52 1516.28 L1752.98 1548.85 L1748.09 1548.85 L1759.9 1518.22 L1743.3 1518.22 L1743.3 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1774.64 1542.97 L1779.53 1542.97 L1779.53 1548.85 L1774.64 1548.85 L1774.64 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1789.76 1514.29 L1808.11 1514.29 L1808.11 1518.22 L1794.04 1518.22 L1794.04 1526.7 Q1795.06 1526.35 1796.08 1526.19 Q1797.1 1526 1798.11 1526 Q1803.9 1526 1807.28 1529.17 Q1810.66 1532.34 1810.66 1537.76 Q1810.66 1543.34 1807.19 1546.44 Q1803.72 1549.52 1797.4 1549.52 Q1795.22 1549.52 1792.95 1549.15 Q1790.71 1548.78 1788.3 1548.04 L1788.3 1543.34 Q1790.38 1544.47 1792.6 1545.03 Q1794.83 1545.58 1797.3 1545.58 Q1801.31 1545.58 1803.65 1543.48 Q1805.98 1541.37 1805.98 1537.76 Q1805.98 1534.15 1803.65 1532.04 Q1801.31 1529.94 1797.3 1529.94 Q1795.43 1529.94 1793.55 1530.35 Q1791.7 1530.77 1789.76 1531.65 L1789.76 1514.29 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2245.09 1544.91 L2252.73 1544.91 L2252.73 1518.55 L2244.42 1520.21 L2244.42 1515.95 L2252.69 1514.29 L2257.36 1514.29 L2257.36 1544.91 L2265 1544.91 L2265 1548.85 L2245.09 1548.85 L2245.09 1544.91 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2284.44 1517.37 Q2280.83 1517.37 2279.01 1520.93 Q2277.2 1524.47 2277.2 1531.6 Q2277.2 1538.71 2279.01 1542.27 Q2280.83 1545.82 2284.44 1545.82 Q2288.08 1545.82 2289.88 1542.27 Q2291.71 1538.71 2291.71 1531.6 Q2291.71 1524.47 2289.88 1520.93 Q2288.08 1517.37 2284.44 1517.37 M2284.44 1513.66 Q2290.25 1513.66 2293.31 1518.27 Q2296.39 1522.85 2296.39 1531.6 Q2296.39 1540.33 2293.31 1544.94 Q2290.25 1549.52 2284.44 1549.52 Q2278.63 1549.52 2275.56 1544.94 Q2272.5 1540.33 2272.5 1531.6 Q2272.5 1522.85 2275.56 1518.27 Q2278.63 1513.66 2284.44 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2304.61 1542.97 L2309.49 1542.97 L2309.49 1548.85 L2304.61 1548.85 L2304.61 1542.97 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2329.68 1517.37 Q2326.06 1517.37 2324.24 1520.93 Q2322.43 1524.47 2322.43 1531.6 Q2322.43 1538.71 2324.24 1542.27 Q2326.06 1545.82 2329.68 1545.82 Q2333.31 1545.82 2335.12 1542.27 Q2336.94 1538.71 2336.94 1531.6 Q2336.94 1524.47 2335.12 1520.93 Q2333.31 1517.37 2329.68 1517.37 M2329.68 1513.66 Q2335.49 1513.66 2338.54 1518.27 Q2341.62 1522.85 2341.62 1531.6 Q2341.62 1540.33 2338.54 1544.94 Q2335.49 1549.52 2329.68 1549.52 Q2323.87 1549.52 2320.79 1544.94 Q2317.73 1540.33 2317.73 1531.6 Q2317.73 1522.85 2320.79 1518.27 Q2323.87 1513.66 2329.68 1513.66 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,1438.79 2352.76,1438.79 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,1106.08 2352.76,1106.08 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,773.367 2352.76,773.367 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,440.657 2352.76,440.657 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  169.121,107.947 2352.76,107.947 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,1486.45 169.121,47.2441 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,1438.79 188.019,1438.79 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,1106.08 188.019,1106.08 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,773.367 188.019,773.367 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,440.657 188.019,440.657 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  169.121,107.947 188.019,107.947 \n  \"/>\n<path clip-path=\"url(#clip450)\" d=\"M121.177 1424.59 Q117.566 1424.59 115.737 1428.15 Q113.932 1431.69 113.932 1438.82 Q113.932 1445.93 115.737 1449.49 Q117.566 1453.04 121.177 1453.04 Q124.811 1453.04 126.617 1449.49 Q128.445 1445.93 128.445 1438.82 Q128.445 1431.69 126.617 1428.15 Q124.811 1424.59 121.177 1424.59 M121.177 1420.88 Q126.987 1420.88 130.043 1425.49 Q133.121 1430.07 133.121 1438.82 Q133.121 1447.55 130.043 1452.16 Q126.987 1456.74 121.177 1456.74 Q115.367 1456.74 112.288 1452.16 Q109.233 1447.55 109.233 1438.82 Q109.233 1430.07 112.288 1425.49 Q115.367 1420.88 121.177 1420.88 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M86.0382 1119.42 L102.358 1119.42 L102.358 1123.36 L80.4133 1123.36 L80.4133 1119.42 Q83.0753 1116.67 87.6586 1112.04 Q92.2651 1107.39 93.4456 1106.04 Q95.691 1103.52 96.5706 1101.78 Q97.4734 1100.02 97.4734 1098.33 Q97.4734 1095.58 95.5289 1093.84 Q93.6076 1092.11 90.5058 1092.11 Q88.3067 1092.11 85.8531 1092.87 Q83.4225 1093.64 80.6447 1095.19 L80.6447 1090.46 Q83.4688 1089.33 85.9225 1088.75 Q88.3762 1088.17 90.4132 1088.17 Q95.7836 1088.17 98.978 1090.86 Q102.172 1093.54 102.172 1098.03 Q102.172 1100.16 101.362 1102.08 Q100.575 1103.98 98.4687 1106.58 Q97.89 1107.25 94.7882 1110.46 Q91.6864 1113.66 86.0382 1119.42 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M112.219 1088.8 L130.575 1088.8 L130.575 1092.73 L116.501 1092.73 L116.501 1101.21 Q117.52 1100.86 118.538 1100.7 Q119.557 1100.51 120.575 1100.51 Q126.362 1100.51 129.742 1103.68 Q133.121 1106.85 133.121 1112.27 Q133.121 1117.85 129.649 1120.95 Q126.177 1124.03 119.857 1124.03 Q117.682 1124.03 115.413 1123.66 Q113.168 1123.29 110.76 1122.55 L110.76 1117.85 Q112.844 1118.98 115.066 1119.54 Q117.288 1120.09 119.765 1120.09 Q123.77 1120.09 126.107 1117.99 Q128.445 1115.88 128.445 1112.27 Q128.445 1108.66 126.107 1106.55 Q123.77 1104.45 119.765 1104.45 Q117.89 1104.45 116.015 1104.86 Q114.163 1105.28 112.219 1106.16 L112.219 1088.8 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M81.0614 756.087 L99.4178 756.087 L99.4178 760.023 L85.3438 760.023 L85.3438 768.495 Q86.3623 768.148 87.3808 767.985 Q88.3993 767.8 89.4178 767.8 Q95.2049 767.8 98.5845 770.972 Q101.964 774.143 101.964 779.559 Q101.964 785.138 98.4919 788.24 Q95.0197 791.319 88.7003 791.319 Q86.5243 791.319 84.2558 790.948 Q82.0105 790.578 79.6031 789.837 L79.6031 785.138 Q81.6864 786.272 83.9086 786.828 Q86.1308 787.384 88.6077 787.384 Q92.6123 787.384 94.9502 785.277 Q97.2882 783.171 97.2882 779.559 Q97.2882 775.948 94.9502 773.842 Q92.6123 771.735 88.6077 771.735 Q86.7327 771.735 84.8577 772.152 Q83.0058 772.569 81.0614 773.448 L81.0614 756.087 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M121.177 759.166 Q117.566 759.166 115.737 762.731 Q113.932 766.273 113.932 773.402 Q113.932 780.509 115.737 784.073 Q117.566 787.615 121.177 787.615 Q124.811 787.615 126.617 784.073 Q128.445 780.509 128.445 773.402 Q128.445 766.273 126.617 762.731 Q124.811 759.166 121.177 759.166 M121.177 755.462 Q126.987 755.462 130.043 760.069 Q133.121 764.652 133.121 773.402 Q133.121 782.129 130.043 786.735 Q126.987 791.319 121.177 791.319 Q115.367 791.319 112.288 786.735 Q109.233 782.129 109.233 773.402 Q109.233 764.652 112.288 760.069 Q115.367 755.462 121.177 755.462 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M80.8299 423.377 L103.052 423.377 L103.052 425.368 L90.5058 457.937 L85.6216 457.937 L97.4271 427.312 L80.8299 427.312 L80.8299 423.377 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M112.219 423.377 L130.575 423.377 L130.575 427.312 L116.501 427.312 L116.501 435.784 Q117.52 435.437 118.538 435.275 Q119.557 435.09 120.575 435.09 Q126.362 435.09 129.742 438.261 Q133.121 441.432 133.121 446.849 Q133.121 452.428 129.649 455.53 Q126.177 458.608 119.857 458.608 Q117.682 458.608 115.413 458.238 Q113.168 457.868 110.76 457.127 L110.76 452.428 Q112.844 453.562 115.066 454.118 Q117.288 454.673 119.765 454.673 Q123.77 454.673 126.107 452.567 Q128.445 450.46 128.445 446.849 Q128.445 443.238 126.107 441.131 Q123.77 439.025 119.765 439.025 Q117.89 439.025 116.015 439.442 Q114.163 439.858 112.219 440.738 L112.219 423.377 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M51.6634 121.291 L59.3023 121.291 L59.3023 94.9258 L50.9921 96.5924 L50.9921 92.3332 L59.256 90.6665 L63.9319 90.6665 L63.9319 121.291 L71.5707 121.291 L71.5707 125.227 L51.6634 125.227 L51.6634 121.291 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M91.0151 93.7452 Q87.404 93.7452 85.5753 97.31 Q83.7697 100.852 83.7697 107.981 Q83.7697 115.088 85.5753 118.652 Q87.404 122.194 91.0151 122.194 Q94.6493 122.194 96.4548 118.652 Q98.2835 115.088 98.2835 107.981 Q98.2835 100.852 96.4548 97.31 Q94.6493 93.7452 91.0151 93.7452 M91.0151 90.0415 Q96.8252 90.0415 99.8808 94.648 Q102.959 99.2313 102.959 107.981 Q102.959 116.708 99.8808 121.315 Q96.8252 125.898 91.0151 125.898 Q85.2049 125.898 82.1262 121.315 Q79.0707 116.708 79.0707 107.981 Q79.0707 99.2313 82.1262 94.648 Q85.2049 90.0415 91.0151 90.0415 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M121.177 93.7452 Q117.566 93.7452 115.737 97.31 Q113.932 100.852 113.932 107.981 Q113.932 115.088 115.737 118.652 Q117.566 122.194 121.177 122.194 Q124.811 122.194 126.617 118.652 Q128.445 115.088 128.445 107.981 Q128.445 100.852 126.617 97.31 Q124.811 93.7452 121.177 93.7452 M121.177 90.0415 Q126.987 90.0415 130.043 94.648 Q133.121 99.2313 133.121 107.981 Q133.121 116.708 130.043 121.315 Q126.987 125.898 121.177 125.898 Q115.367 125.898 112.288 121.315 Q109.233 116.708 109.233 107.981 Q109.233 99.2313 112.288 94.648 Q115.367 90.0415 121.177 90.0415 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip452)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  230.922,1406.51 232.989,1406.18 235.055,1405.86 237.121,1405.53 239.187,1405.21 241.253,1404.88 243.32,1404.56 245.386,1404.23 247.452,1403.91 249.518,1403.58 \n  251.585,1403.26 253.651,1402.93 255.717,1402.61 257.783,1402.29 259.85,1401.96 261.916,1401.64 263.982,1401.31 266.048,1400.99 268.114,1400.67 270.181,1400.34 \n  272.247,1400.02 274.313,1399.7 276.379,1399.37 278.446,1399.05 280.512,1398.73 282.578,1398.4 284.644,1398.08 286.711,1397.76 288.777,1397.43 290.843,1397.11 \n  292.909,1396.79 294.975,1396.47 297.042,1396.14 299.108,1395.82 301.174,1395.5 303.24,1395.18 305.307,1394.85 307.373,1394.53 309.439,1394.21 311.505,1393.89 \n  313.572,1393.57 315.638,1393.24 317.704,1392.92 319.77,1392.6 321.836,1392.28 323.903,1391.96 325.969,1391.64 328.035,1391.32 330.101,1390.99 332.168,1390.67 \n  334.234,1390.35 336.3,1390.03 338.366,1389.71 340.433,1389.39 342.499,1389.07 344.565,1388.75 346.631,1388.43 348.697,1388.11 350.764,1387.79 352.83,1387.46 \n  354.896,1387.14 356.962,1386.82 359.029,1386.5 361.095,1386.18 363.161,1385.86 365.227,1385.54 367.294,1385.22 369.36,1384.9 371.426,1384.58 373.492,1384.27 \n  375.558,1383.95 377.625,1383.63 379.691,1383.31 381.757,1382.99 383.823,1382.67 385.89,1382.35 387.956,1382.03 390.022,1381.71 392.088,1381.39 394.155,1381.07 \n  396.221,1380.76 398.287,1380.44 400.353,1380.12 402.419,1379.8 404.486,1379.48 406.552,1379.16 408.618,1378.84 410.684,1378.53 412.751,1378.21 414.817,1377.89 \n  416.883,1377.57 418.949,1377.25 421.016,1376.94 423.082,1376.62 425.148,1376.3 427.214,1375.98 429.281,1375.67 431.347,1375.35 433.413,1375.03 435.479,1374.71 \n  437.545,1374.4 439.612,1374.08 441.678,1373.76 443.744,1373.45 445.81,1373.13 447.877,1372.81 449.943,1372.5 452.009,1372.18 454.075,1371.86 456.142,1371.55 \n  458.208,1371.23 460.274,1370.91 462.34,1370.6 464.406,1370.28 466.473,1369.97 468.539,1369.65 470.605,1369.33 472.671,1369.02 474.738,1368.7 476.804,1368.39 \n  478.87,1368.07 480.936,1367.76 483.003,1367.44 485.069,1367.13 487.135,1366.81 489.201,1366.49 491.267,1366.18 493.334,1365.86 495.4,1365.55 497.466,1365.24 \n  499.532,1364.92 501.599,1364.61 503.665,1364.29 505.731,1363.98 507.797,1363.66 509.864,1363.35 511.93,1363.03 513.996,1362.72 516.062,1362.41 518.128,1362.09 \n  520.195,1361.78 522.261,1361.46 524.327,1361.15 526.393,1360.84 528.46,1360.52 530.526,1360.21 532.592,1359.89 534.658,1359.58 536.725,1359.27 538.791,1358.95 \n  540.857,1358.64 542.923,1358.33 544.989,1358.02 547.056,1357.7 549.122,1357.39 551.188,1357.08 553.254,1356.76 555.321,1356.45 557.387,1356.14 559.453,1355.83 \n  561.519,1355.51 563.586,1355.2 565.652,1354.89 567.718,1354.58 569.784,1354.27 571.85,1353.95 573.917,1353.64 575.983,1353.33 578.049,1353.02 580.115,1352.71 \n  582.182,1352.39 584.248,1352.08 586.314,1351.77 588.38,1351.46 590.447,1351.15 592.513,1350.84 594.579,1350.53 596.645,1350.22 598.711,1349.9 600.778,1349.59 \n  602.844,1349.28 604.91,1348.97 606.976,1348.66 609.043,1348.35 611.109,1348.04 613.175,1347.73 615.241,1347.42 617.308,1347.11 619.374,1346.8 621.44,1346.49 \n  623.506,1346.18 625.572,1345.87 627.639,1345.56 629.705,1345.25 631.771,1344.94 633.837,1344.63 635.904,1344.32 637.97,1344.01 640.036,1343.7 642.102,1343.39 \n  644.169,1343.08 646.235,1342.77 648.301,1342.46 650.367,1342.15 652.433,1341.85 654.5,1341.54 656.566,1341.23 658.632,1340.92 660.698,1340.61 662.765,1340.3 \n  664.831,1339.99 666.897,1339.69 668.963,1339.38 671.03,1339.07 673.096,1338.76 675.162,1338.45 677.228,1338.14 679.294,1337.84 681.361,1337.53 683.427,1337.22 \n  685.493,1336.91 687.559,1336.61 689.626,1336.3 691.692,1335.99 693.758,1335.68 695.824,1335.38 697.891,1335.07 699.957,1334.76 702.023,1334.45 704.089,1334.15 \n  706.155,1333.84 708.222,1333.53 710.288,1333.23 712.354,1332.92 714.42,1332.61 716.487,1332.31 718.553,1332 720.619,1331.69 722.685,1331.39 724.752,1331.08 \n  726.818,1330.77 728.884,1330.47 730.95,1330.16 733.017,1329.86 735.083,1329.55 737.149,1329.24 739.215,1328.94 741.281,1328.63 743.348,1328.33 745.414,1328.02 \n  747.48,1327.72 749.546,1327.41 751.613,1327.11 753.679,1326.8 755.745,1326.5 757.811,1326.19 759.878,1325.89 761.944,1325.58 764.01,1325.28 766.076,1324.97 \n  768.142,1324.67 770.209,1324.36 772.275,1324.06 774.341,1323.75 776.407,1323.45 778.474,1323.14 780.54,1322.84 782.606,1322.54 784.672,1322.23 786.739,1321.93 \n  788.805,1321.62 790.871,1321.32 792.937,1321.02 795.003,1320.71 797.07,1320.41 799.136,1320.1 801.202,1319.8 803.268,1319.5 805.335,1319.19 807.401,1318.89 \n  809.467,1318.59 811.533,1318.29 813.6,1317.98 815.666,1317.68 817.732,1317.38 819.798,1317.07 821.864,1316.77 823.931,1316.47 825.997,1316.17 828.063,1315.86 \n  830.129,1315.56 832.196,1315.26 834.262,1314.96 836.328,1314.65 838.394,1314.35 840.461,1314.05 842.527,1313.75 844.593,1313.45 846.659,1313.14 848.725,1312.84 \n  850.792,1312.54 852.858,1312.24 854.924,1311.94 856.99,1311.64 859.057,1311.34 861.123,1311.03 863.189,1310.73 865.255,1310.43 867.322,1310.13 869.388,1309.83 \n  871.454,1309.53 873.52,1309.23 875.586,1308.93 877.653,1308.63 879.719,1308.33 881.785,1308.03 883.851,1307.73 885.918,1307.42 887.984,1307.12 890.05,1306.82 \n  892.116,1306.52 894.183,1306.22 896.249,1305.92 898.315,1305.62 900.381,1305.32 902.447,1305.02 904.514,1304.73 906.58,1304.43 908.646,1304.13 910.712,1303.83 \n  912.779,1303.53 914.845,1303.23 916.911,1302.93 918.977,1302.63 921.044,1302.33 923.11,1302.03 925.176,1301.73 927.242,1301.43 929.308,1301.13 931.375,1300.84 \n  933.441,1300.54 935.507,1300.24 937.573,1299.94 939.64,1299.64 941.706,1299.34 943.772,1299.05 945.838,1298.75 947.905,1298.45 949.971,1298.15 952.037,1297.85 \n  954.103,1297.56 956.169,1297.26 958.236,1296.96 960.302,1296.66 962.368,1296.36 964.434,1296.07 966.501,1295.77 968.567,1295.47 970.633,1295.17 972.699,1294.88 \n  974.766,1294.58 976.832,1294.28 978.898,1293.99 980.964,1293.69 983.03,1293.39 985.097,1293.1 987.163,1292.8 989.229,1292.5 991.295,1292.21 993.362,1291.91 \n  995.428,1291.61 997.494,1291.32 999.56,1291.02 1001.63,1290.72 1003.69,1290.43 1005.76,1290.13 1007.83,1289.84 1009.89,1289.54 1011.96,1289.24 1014.02,1288.95 \n  1016.09,1288.65 1018.16,1288.36 1020.22,1288.06 1022.29,1287.77 1024.36,1287.47 1026.42,1287.18 1028.49,1286.88 1030.55,1286.59 1032.62,1286.29 1034.69,1286 \n  1036.75,1285.7 1038.82,1285.41 1040.88,1285.11 1042.95,1284.82 1045.02,1284.52 1047.08,1284.23 1049.15,1283.93 1051.22,1283.64 1053.28,1283.34 1055.35,1283.05 \n  1057.41,1282.76 1059.48,1282.46 1061.55,1282.17 1063.61,1281.87 1065.68,1281.58 1067.75,1281.29 1069.81,1280.99 1071.88,1280.7 1073.94,1280.4 1076.01,1280.11 \n  1078.08,1279.82 1080.14,1279.52 1082.21,1279.23 1084.28,1278.94 1086.34,1278.64 1088.41,1278.35 1090.47,1278.06 1092.54,1277.77 1094.61,1277.47 1096.67,1277.18 \n  1098.74,1276.89 1100.81,1276.59 1102.87,1276.3 1104.94,1276.01 1107,1275.72 1109.07,1275.43 1111.14,1275.13 1113.2,1274.84 1115.27,1274.55 1117.34,1274.26 \n  1119.4,1273.96 1121.47,1273.67 1123.53,1273.38 1125.6,1273.09 1127.67,1272.8 1129.73,1272.51 1131.8,1272.21 1133.87,1271.92 1135.93,1271.63 1138,1271.34 \n  1140.06,1271.05 1142.13,1270.76 1144.2,1270.47 1146.26,1270.18 1148.33,1269.88 1150.4,1269.59 1152.46,1269.3 1154.53,1269.01 1156.59,1268.72 1158.66,1268.43 \n  1160.73,1268.14 1162.79,1267.85 1164.86,1267.56 1166.93,1267.27 1168.99,1266.98 1171.06,1266.69 1173.12,1266.4 1175.19,1266.11 1177.26,1265.82 1179.32,1265.53 \n  1181.39,1265.24 1183.45,1264.95 1185.52,1264.66 1187.59,1264.37 1189.65,1264.08 1191.72,1263.79 1193.79,1263.5 1195.85,1263.21 1197.92,1262.92 1199.98,1262.63 \n  1202.05,1262.34 1204.12,1262.06 1206.18,1261.77 1208.25,1261.48 1210.32,1261.19 1212.38,1260.9 1214.45,1260.61 1216.51,1260.32 1218.58,1260.04 1220.65,1259.75 \n  1222.71,1259.46 1224.78,1259.17 1226.85,1258.88 1228.91,1258.59 1230.98,1258.31 1233.04,1258.02 1235.11,1257.73 1237.18,1257.44 1239.24,1257.15 1241.31,1256.87 \n  1243.38,1256.58 1245.44,1256.29 1247.51,1256 1249.57,1255.72 1251.64,1255.43 1253.71,1255.14 1255.77,1254.85 1257.84,1254.57 1259.91,1254.28 1261.97,1253.99 \n  1264.04,1253.71 1266.1,1253.42 1268.17,1253.13 1270.24,1252.85 1272.3,1252.56 1274.37,1252.27 1276.44,1251.99 1278.5,1251.7 1280.57,1251.41 1282.63,1251.13 \n  1284.7,1250.84 1286.77,1250.56 1288.83,1250.27 1290.9,1249.98 1292.97,1249.7 1295.03,1249.41 1297.1,1249.13 1299.16,1248.84 1301.23,1248.55 1303.3,1248.27 \n  1305.36,1247.98 1307.43,1247.7 1309.5,1247.41 1311.56,1247.13 1313.63,1246.84 1315.69,1246.56 1317.76,1246.27 1319.83,1245.99 1321.89,1245.7 1323.96,1245.42 \n  1326.02,1245.13 1328.09,1244.85 1330.16,1244.56 1332.22,1244.28 1334.29,1243.99 1336.36,1243.71 1338.42,1243.43 1340.49,1243.14 1342.55,1242.86 1344.62,1242.57 \n  1346.69,1242.29 1348.75,1242 1350.82,1241.72 1352.89,1241.44 1354.95,1241.15 1357.02,1240.87 1359.08,1240.59 1361.15,1240.3 1363.22,1240.02 1365.28,1239.74 \n  1367.35,1239.45 1369.42,1239.17 1371.48,1238.89 1373.55,1238.6 1375.61,1238.32 1377.68,1238.04 1379.75,1237.75 1381.81,1237.47 1383.88,1237.19 1385.95,1236.91 \n  1388.01,1236.62 1390.08,1236.34 1392.14,1236.06 1394.21,1235.78 1396.28,1235.49 1398.34,1235.21 1400.41,1234.93 1402.48,1234.65 1404.54,1234.36 1406.61,1234.08 \n  1408.67,1233.8 1410.74,1233.52 1412.81,1233.24 1414.87,1232.96 1416.94,1232.67 1419.01,1232.39 1421.07,1232.11 1423.14,1231.83 1425.2,1231.55 1427.27,1231.27 \n  1429.34,1230.99 1431.4,1230.7 1433.47,1230.42 1435.54,1230.14 1437.6,1229.86 1439.67,1229.58 1441.73,1229.3 1443.8,1229.02 1445.87,1228.74 1447.93,1228.46 \n  1450,1228.18 1452.07,1227.9 1454.13,1227.62 1456.2,1227.34 1458.26,1227.06 1460.33,1226.78 1462.4,1226.5 1464.46,1226.22 1466.53,1225.94 1468.59,1225.66 \n  1470.66,1225.38 1472.73,1225.1 1474.79,1224.82 1476.86,1224.54 1478.93,1224.26 1480.99,1223.98 1483.06,1223.7 1485.12,1223.42 1487.19,1223.14 1489.26,1222.86 \n  1491.32,1222.58 1493.39,1222.3 1495.46,1222.02 1497.52,1221.74 1499.59,1221.47 1501.65,1221.19 1503.72,1220.91 1505.79,1220.63 1507.85,1220.35 1509.92,1220.07 \n  1511.99,1219.79 1514.05,1219.52 1516.12,1219.24 1518.18,1218.96 1520.25,1218.68 1522.32,1218.4 1524.38,1218.13 1526.45,1217.85 1528.52,1217.57 1530.58,1217.29 \n  1532.65,1217.01 1534.71,1216.74 1536.78,1216.46 1538.85,1216.18 1540.91,1215.9 1542.98,1215.63 1545.05,1215.35 1547.11,1215.07 1549.18,1214.79 1551.24,1214.52 \n  1553.31,1214.24 1555.38,1213.96 1557.44,1213.69 1559.51,1213.41 1561.58,1213.13 1563.64,1212.86 1565.71,1212.58 1567.77,1212.3 1569.84,1212.03 1571.91,1211.75 \n  1573.97,1211.47 1576.04,1211.2 1578.11,1210.92 1580.17,1210.65 1582.24,1210.37 1584.3,1210.09 1586.37,1209.82 1588.44,1209.54 1590.5,1209.27 1592.57,1208.99 \n  1594.63,1208.71 1596.7,1208.44 1598.77,1208.16 1600.83,1207.89 1602.9,1207.61 1604.97,1207.34 1607.03,1207.06 1609.1,1206.79 1611.16,1206.51 1613.23,1206.24 \n  1615.3,1205.96 1617.36,1205.69 1619.43,1205.41 1621.5,1205.14 1623.56,1204.86 1625.63,1204.59 1627.69,1204.31 1629.76,1204.04 1631.83,1203.76 1633.89,1203.49 \n  1635.96,1203.22 1638.03,1202.94 1640.09,1202.67 1642.16,1202.39 1644.22,1202.12 1646.29,1201.85 1648.36,1201.57 1650.42,1201.3 1652.49,1201.02 1654.56,1200.75 \n  1656.62,1200.48 1658.69,1200.2 1660.75,1199.93 1662.82,1199.66 1664.89,1199.38 1666.95,1199.11 1669.02,1198.84 1671.09,1198.56 1673.15,1198.29 1675.22,1198.02 \n  1677.28,1197.75 1679.35,1197.47 1681.42,1197.2 1683.48,1196.93 1685.55,1196.65 1687.62,1196.38 1689.68,1196.11 1691.75,1195.84 1693.81,1195.56 1695.88,1195.29 \n  1697.95,1195.02 1700.01,1194.75 1702.08,1194.48 1704.15,1194.2 1706.21,1193.93 1708.28,1193.66 1710.34,1193.39 1712.41,1193.12 1714.48,1192.84 1716.54,1192.57 \n  1718.61,1192.3 1720.68,1192.03 1722.74,1191.76 1724.81,1191.49 1726.87,1191.22 1728.94,1190.95 1731.01,1190.67 1733.07,1190.4 1735.14,1190.13 1737.2,1189.86 \n  1739.27,1189.59 1741.34,1189.32 1743.4,1189.05 1745.47,1188.78 1747.54,1188.51 1749.6,1188.24 1751.67,1187.97 1753.73,1187.7 1755.8,1187.43 1757.87,1187.16 \n  1759.93,1186.89 1762,1186.62 1764.07,1186.35 1766.13,1186.08 1768.2,1185.81 1770.26,1185.54 1772.33,1185.27 1774.4,1185 1776.46,1184.73 1778.53,1184.46 \n  1780.6,1184.19 1782.66,1183.92 1784.73,1183.65 1786.79,1183.38 1788.86,1183.11 1790.93,1182.84 1792.99,1182.57 1795.06,1182.3 1797.13,1182.03 1799.19,1181.76 \n  1801.26,1181.5 1803.32,1181.23 1805.39,1180.96 1807.46,1180.69 1809.52,1180.42 1811.59,1180.15 1813.66,1179.88 1815.72,1179.62 1817.79,1179.35 1819.85,1179.08 \n  1821.92,1178.81 1823.99,1178.54 1826.05,1178.28 1828.12,1178.01 1830.19,1177.74 1832.25,1177.47 1834.32,1177.2 1836.38,1176.94 1838.45,1176.67 1840.52,1176.4 \n  1842.58,1176.13 1844.65,1175.87 1846.72,1175.6 1848.78,1175.33 1850.85,1175.06 1852.91,1174.8 1854.98,1174.53 1857.05,1174.26 1859.11,1174 1861.18,1173.73 \n  1863.25,1173.46 1865.31,1173.2 1867.38,1172.93 1869.44,1172.66 1871.51,1172.4 1873.58,1172.13 1875.64,1171.86 1877.71,1171.6 1879.77,1171.33 1881.84,1171.06 \n  1883.91,1170.8 1885.97,1170.53 1888.04,1170.27 1890.11,1170 1892.17,1169.73 1894.24,1169.47 1896.3,1169.2 1898.37,1168.94 1900.44,1168.67 1902.5,1168.41 \n  1904.57,1168.14 1906.64,1167.87 1908.7,1167.61 1910.77,1167.34 1912.83,1167.08 1914.9,1166.81 1916.97,1166.55 1919.03,1166.28 1921.1,1166.02 1923.17,1165.75 \n  1925.23,1165.49 1927.3,1165.22 1929.36,1164.96 1931.43,1164.7 1933.5,1164.43 1935.56,1164.17 1937.63,1163.9 1939.7,1163.64 1941.76,1163.37 1943.83,1163.11 \n  1945.89,1162.84 1947.96,1162.58 1950.03,1162.32 1952.09,1162.05 1954.16,1161.79 1956.23,1161.52 1958.29,1161.26 1960.36,1161 1962.42,1160.73 1964.49,1160.47 \n  1966.56,1160.21 1968.62,1159.94 1970.69,1159.68 1972.76,1159.42 1974.82,1159.15 1976.89,1158.89 1978.95,1158.63 1981.02,1158.36 1983.09,1158.1 1985.15,1157.84 \n  1987.22,1157.58 1989.29,1157.31 1991.35,1157.05 1993.42,1156.79 1995.48,1156.52 1997.55,1156.26 1999.62,1156 2001.68,1155.74 2003.75,1155.48 2005.82,1155.21 \n  2007.88,1154.95 2009.95,1154.69 2012.01,1154.43 2014.08,1154.16 2016.15,1153.9 2018.21,1153.64 2020.28,1153.38 2022.34,1153.12 2024.41,1152.86 2026.48,1152.59 \n  2028.54,1152.33 2030.61,1152.07 2032.68,1151.81 2034.74,1151.55 2036.81,1151.29 2038.87,1151.03 2040.94,1150.76 2043.01,1150.5 2045.07,1150.24 2047.14,1149.98 \n  2049.21,1149.72 2051.27,1149.46 2053.34,1149.2 2055.4,1148.94 2057.47,1148.68 2059.54,1148.42 2061.6,1148.16 2063.67,1147.9 2065.74,1147.64 2067.8,1147.38 \n  2069.87,1147.12 2071.93,1146.86 2074,1146.6 2076.07,1146.34 2078.13,1146.08 2080.2,1145.82 2082.27,1145.56 2084.33,1145.3 2086.4,1145.04 2088.46,1144.78 \n  2090.53,1144.52 2092.6,1144.26 2094.66,1144 2096.73,1143.74 2098.8,1143.48 2100.86,1143.22 2102.93,1142.96 2104.99,1142.7 2107.06,1142.44 2109.13,1142.18 \n  2111.19,1141.93 2113.26,1141.67 2115.33,1141.41 2117.39,1141.15 2119.46,1140.89 2121.52,1140.63 2123.59,1140.37 2125.66,1140.11 2127.72,1139.86 2129.79,1139.6 \n  2131.86,1139.34 2133.92,1139.08 2135.99,1138.82 2138.05,1138.57 2140.12,1138.31 2142.19,1138.05 2144.25,1137.79 2146.32,1137.53 2148.38,1137.28 2150.45,1137.02 \n  2152.52,1136.76 2154.58,1136.5 2156.65,1136.25 2158.72,1135.99 2160.78,1135.73 2162.85,1135.47 2164.91,1135.22 2166.98,1134.96 2169.05,1134.7 2171.11,1134.44 \n  2173.18,1134.19 2175.25,1133.93 2177.31,1133.67 2179.38,1133.42 2181.44,1133.16 2183.51,1132.9 2185.58,1132.65 2187.64,1132.39 2189.71,1132.13 2191.78,1131.88 \n  2193.84,1131.62 2195.91,1131.37 2197.97,1131.11 2200.04,1130.85 2202.11,1130.6 2204.17,1130.34 2206.24,1130.08 2208.31,1129.83 2210.37,1129.57 2212.44,1129.32 \n  2214.5,1129.06 2216.57,1128.81 2218.64,1128.55 2220.7,1128.3 2222.77,1128.04 2224.84,1127.78 2226.9,1127.53 2228.97,1127.27 2231.03,1127.02 2233.1,1126.76 \n  2235.17,1126.51 2237.23,1126.25 2239.3,1126 2241.37,1125.74 2243.43,1125.49 2245.5,1125.23 2247.56,1124.98 2249.63,1124.72 2251.7,1124.47 2253.76,1124.22 \n  2255.83,1123.96 2257.9,1123.71 2259.96,1123.45 2262.03,1123.2 2264.09,1122.94 2266.16,1122.69 2268.23,1122.44 2270.29,1122.18 2272.36,1121.93 2274.43,1121.67 \n  2276.49,1121.42 2278.56,1121.17 2280.62,1120.91 2282.69,1120.66 2284.76,1120.41 2286.82,1120.15 2288.89,1119.9 2290.95,1119.65 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  230.922,1407.11 232.989,1406.79 235.055,1406.46 237.121,1406.14 239.187,1405.81 241.253,1405.49 243.32,1405.16 245.386,1404.84 247.452,1404.51 249.518,1404.19 \n  251.585,1403.87 253.651,1403.54 255.717,1403.22 257.783,1402.89 259.85,1402.57 261.916,1402.24 263.982,1401.92 266.048,1401.6 268.114,1401.27 270.181,1400.95 \n  272.247,1400.63 274.313,1400.3 276.379,1399.98 278.446,1399.66 280.512,1399.33 282.578,1399.01 284.644,1398.69 286.711,1398.36 288.777,1398.04 290.843,1397.72 \n  292.909,1397.4 294.975,1397.07 297.042,1396.75 299.108,1396.43 301.174,1396.11 303.24,1395.78 305.307,1395.46 307.373,1395.14 309.439,1394.82 311.505,1394.49 \n  313.572,1394.17 315.638,1393.85 317.704,1393.53 319.77,1393.21 321.836,1392.89 323.903,1392.56 325.969,1392.24 328.035,1391.92 330.101,1391.6 332.168,1391.28 \n  334.234,1390.96 336.3,1390.64 338.366,1390.32 340.433,1390 342.499,1389.67 344.565,1389.35 346.631,1389.03 348.697,1388.71 350.764,1388.39 352.83,1388.07 \n  354.896,1387.75 356.962,1387.43 359.029,1387.11 361.095,1386.79 363.161,1386.47 365.227,1386.15 367.294,1385.83 369.36,1385.51 371.426,1385.19 373.492,1384.87 \n  375.558,1384.55 377.625,1384.23 379.691,1383.91 381.757,1383.59 383.823,1383.28 385.89,1382.96 387.956,1382.64 390.022,1382.32 392.088,1382 394.155,1381.68 \n  396.221,1381.36 398.287,1381.04 400.353,1380.72 402.419,1380.41 404.486,1380.09 406.552,1379.77 408.618,1379.45 410.684,1379.13 412.751,1378.81 414.817,1378.5 \n  416.883,1378.18 418.949,1377.86 421.016,1377.54 423.082,1377.23 425.148,1376.91 427.214,1376.59 429.281,1376.27 431.347,1375.96 433.413,1375.64 435.479,1375.32 \n  437.545,1375 439.612,1374.69 441.678,1374.37 443.744,1374.05 445.81,1373.74 447.877,1373.42 449.943,1373.1 452.009,1372.79 454.075,1372.47 456.142,1372.15 \n  458.208,1371.84 460.274,1371.52 462.34,1371.21 464.406,1370.89 466.473,1370.57 468.539,1370.26 470.605,1369.94 472.671,1369.63 474.738,1369.31 476.804,1368.99 \n  478.87,1368.68 480.936,1368.36 483.003,1368.05 485.069,1367.73 487.135,1367.42 489.201,1367.1 491.267,1366.79 493.334,1366.47 495.4,1366.16 497.466,1365.84 \n  499.532,1365.53 501.599,1365.21 503.665,1364.9 505.731,1364.58 507.797,1364.27 509.864,1363.95 511.93,1363.64 513.996,1363.33 516.062,1363.01 518.128,1362.7 \n  520.195,1362.38 522.261,1362.07 524.327,1361.76 526.393,1361.44 528.46,1361.13 530.526,1360.82 532.592,1360.5 534.658,1360.19 536.725,1359.88 538.791,1359.56 \n  540.857,1359.25 542.923,1358.94 544.989,1358.62 547.056,1358.31 549.122,1358 551.188,1357.68 553.254,1357.37 555.321,1357.06 557.387,1356.75 559.453,1356.43 \n  561.519,1356.12 563.586,1355.81 565.652,1355.5 567.718,1355.18 569.784,1354.87 571.85,1354.56 573.917,1354.25 575.983,1353.94 578.049,1353.63 580.115,1353.31 \n  582.182,1353 584.248,1352.69 586.314,1352.38 588.38,1352.07 590.447,1351.76 592.513,1351.44 594.579,1351.13 596.645,1350.82 598.711,1350.51 600.778,1350.2 \n  602.844,1349.89 604.91,1349.58 606.976,1349.27 609.043,1348.96 611.109,1348.65 613.175,1348.34 615.241,1348.03 617.308,1347.72 619.374,1347.41 621.44,1347.1 \n  623.506,1346.79 625.572,1346.48 627.639,1346.17 629.705,1345.86 631.771,1345.55 633.837,1345.24 635.904,1344.93 637.97,1344.62 640.036,1344.31 642.102,1344 \n  644.169,1343.69 646.235,1343.38 648.301,1343.07 650.367,1342.76 652.433,1342.45 654.5,1342.14 656.566,1341.84 658.632,1341.53 660.698,1341.22 662.765,1340.91 \n  664.831,1340.6 666.897,1340.29 668.963,1339.98 671.03,1339.68 673.096,1339.37 675.162,1339.06 677.228,1338.75 679.294,1338.44 681.361,1338.14 683.427,1337.83 \n  685.493,1337.52 687.559,1337.21 689.626,1336.9 691.692,1336.6 693.758,1336.29 695.824,1335.98 697.891,1335.68 699.957,1335.37 702.023,1335.06 704.089,1334.75 \n  706.155,1334.45 708.222,1334.14 710.288,1333.83 712.354,1333.53 714.42,1333.22 716.487,1332.91 718.553,1332.61 720.619,1332.3 722.685,1331.99 724.752,1331.69 \n  726.818,1331.38 728.884,1331.08 730.95,1330.77 733.017,1330.46 735.083,1330.16 737.149,1329.85 739.215,1329.55 741.281,1329.24 743.348,1328.93 745.414,1328.63 \n  747.48,1328.32 749.546,1328.02 751.613,1327.71 753.679,1327.41 755.745,1327.1 757.811,1326.8 759.878,1326.49 761.944,1326.19 764.01,1325.88 766.076,1325.58 \n  768.142,1325.27 770.209,1324.97 772.275,1324.66 774.341,1324.36 776.407,1324.06 778.474,1323.75 780.54,1323.45 782.606,1323.14 784.672,1322.84 786.739,1322.53 \n  788.805,1322.23 790.871,1321.93 792.937,1321.62 795.003,1321.32 797.07,1321.02 799.136,1320.71 801.202,1320.41 803.268,1320.11 805.335,1319.8 807.401,1319.5 \n  809.467,1319.2 811.533,1318.89 813.6,1318.59 815.666,1318.29 817.732,1317.98 819.798,1317.68 821.864,1317.38 823.931,1317.08 825.997,1316.77 828.063,1316.47 \n  830.129,1316.17 832.196,1315.87 834.262,1315.56 836.328,1315.26 838.394,1314.96 840.461,1314.66 842.527,1314.36 844.593,1314.05 846.659,1313.75 848.725,1313.45 \n  850.792,1313.15 852.858,1312.85 854.924,1312.55 856.99,1312.24 859.057,1311.94 861.123,1311.64 863.189,1311.34 865.255,1311.04 867.322,1310.74 869.388,1310.44 \n  871.454,1310.14 873.52,1309.84 875.586,1309.54 877.653,1309.23 879.719,1308.93 881.785,1308.63 883.851,1308.33 885.918,1308.03 887.984,1307.73 890.05,1307.43 \n  892.116,1307.13 894.183,1306.83 896.249,1306.53 898.315,1306.23 900.381,1305.93 902.447,1305.63 904.514,1305.33 906.58,1305.03 908.646,1304.73 910.712,1304.43 \n  912.779,1304.13 914.845,1303.84 916.911,1303.54 918.977,1303.24 921.044,1302.94 923.11,1302.64 925.176,1302.34 927.242,1302.04 929.308,1301.74 931.375,1301.44 \n  933.441,1301.14 935.507,1300.85 937.573,1300.55 939.64,1300.25 941.706,1299.95 943.772,1299.65 945.838,1299.35 947.905,1299.06 949.971,1298.76 952.037,1298.46 \n  954.103,1298.16 956.169,1297.86 958.236,1297.57 960.302,1297.27 962.368,1296.97 964.434,1296.67 966.501,1296.38 968.567,1296.08 970.633,1295.78 972.699,1295.49 \n  974.766,1295.19 976.832,1294.89 978.898,1294.59 980.964,1294.3 983.03,1294 985.097,1293.7 987.163,1293.41 989.229,1293.11 991.295,1292.81 993.362,1292.52 \n  995.428,1292.22 997.494,1291.92 999.56,1291.63 1001.63,1291.33 1003.69,1291.04 1005.76,1290.74 1007.83,1290.44 1009.89,1290.15 1011.96,1289.85 1014.02,1289.56 \n  1016.09,1289.26 1018.16,1288.96 1020.22,1288.67 1022.29,1288.37 1024.36,1288.08 1026.42,1287.78 1028.49,1287.49 1030.55,1287.19 1032.62,1286.9 1034.69,1286.6 \n  1036.75,1286.31 1038.82,1286.01 1040.88,1285.72 1042.95,1285.42 1045.02,1285.13 1047.08,1284.83 1049.15,1284.54 1051.22,1284.25 1053.28,1283.95 1055.35,1283.66 \n  1057.41,1283.36 1059.48,1283.07 1061.55,1282.77 1063.61,1282.48 1065.68,1282.19 1067.75,1281.89 1069.81,1281.6 1071.88,1281.31 1073.94,1281.01 1076.01,1280.72 \n  1078.08,1280.43 1080.14,1280.13 1082.21,1279.84 1084.28,1279.55 1086.34,1279.25 1088.41,1278.96 1090.47,1278.67 1092.54,1278.37 1094.61,1278.08 1096.67,1277.79 \n  1098.74,1277.49 1100.81,1277.2 1102.87,1276.91 1104.94,1276.62 1107,1276.32 1109.07,1276.03 1111.14,1275.74 1113.2,1275.45 1115.27,1275.16 1117.34,1274.86 \n  1119.4,1274.57 1121.47,1274.28 1123.53,1273.99 1125.6,1273.7 1127.67,1273.4 1129.73,1273.11 1131.8,1272.82 1133.87,1272.53 1135.93,1272.24 1138,1271.95 \n  1140.06,1271.66 1142.13,1271.36 1144.2,1271.07 1146.26,1270.78 1148.33,1270.49 1150.4,1270.2 1152.46,1269.91 1154.53,1269.62 1156.59,1269.33 1158.66,1269.04 \n  1160.73,1268.75 1162.79,1268.46 1164.86,1268.17 1166.93,1267.88 1168.99,1267.59 1171.06,1267.3 1173.12,1267.01 1175.19,1266.72 1177.26,1266.43 1179.32,1266.14 \n  1181.39,1265.85 1183.45,1265.56 1185.52,1265.27 1187.59,1264.98 1189.65,1264.69 1191.72,1264.4 1193.79,1264.11 1195.85,1263.82 1197.92,1263.53 1199.98,1263.24 \n  1202.05,1262.95 1204.12,1262.66 1206.18,1262.37 1208.25,1262.08 1210.32,1261.8 1212.38,1261.51 1214.45,1261.22 1216.51,1260.93 1218.58,1260.64 1220.65,1260.35 \n  1222.71,1260.06 1224.78,1259.78 1226.85,1259.49 1228.91,1259.2 1230.98,1258.91 1233.04,1258.62 1235.11,1258.34 1237.18,1258.05 1239.24,1257.76 1241.31,1257.47 \n  1243.38,1257.19 1245.44,1256.9 1247.51,1256.61 1249.57,1256.32 1251.64,1256.04 1253.71,1255.75 1255.77,1255.46 1257.84,1255.17 1259.91,1254.89 1261.97,1254.6 \n  1264.04,1254.31 1266.1,1254.03 1268.17,1253.74 1270.24,1253.45 1272.3,1253.17 1274.37,1252.88 1276.44,1252.59 1278.5,1252.31 1280.57,1252.02 1282.63,1251.73 \n  1284.7,1251.45 1286.77,1251.16 1288.83,1250.88 1290.9,1250.59 1292.97,1250.3 1295.03,1250.02 1297.1,1249.73 1299.16,1249.45 1301.23,1249.16 1303.3,1248.88 \n  1305.36,1248.59 1307.43,1248.3 1309.5,1248.02 1311.56,1247.73 1313.63,1247.45 1315.69,1247.16 1317.76,1246.88 1319.83,1246.59 1321.89,1246.31 1323.96,1246.02 \n  1326.02,1245.74 1328.09,1245.45 1330.16,1245.17 1332.22,1244.89 1334.29,1244.6 1336.36,1244.32 1338.42,1244.03 1340.49,1243.75 1342.55,1243.46 1344.62,1243.18 \n  1346.69,1242.9 1348.75,1242.61 1350.82,1242.33 1352.89,1242.04 1354.95,1241.76 1357.02,1241.48 1359.08,1241.19 1361.15,1240.91 1363.22,1240.63 1365.28,1240.34 \n  1367.35,1240.06 1369.42,1239.78 1371.48,1239.49 1373.55,1239.21 1375.61,1238.93 1377.68,1238.64 1379.75,1238.36 1381.81,1238.08 1383.88,1237.79 1385.95,1237.51 \n  1388.01,1237.23 1390.08,1236.95 1392.14,1236.66 1394.21,1236.38 1396.28,1236.1 1398.34,1235.82 1400.41,1235.53 1402.48,1235.25 1404.54,1234.97 1406.61,1234.69 \n  1408.67,1234.41 1410.74,1234.12 1412.81,1233.84 1414.87,1233.56 1416.94,1233.28 1419.01,1233 1421.07,1232.72 1423.14,1232.43 1425.2,1232.15 1427.27,1231.87 \n  1429.34,1231.59 1431.4,1231.31 1433.47,1231.03 1435.54,1230.75 1437.6,1230.47 1439.67,1230.19 1441.73,1229.91 1443.8,1229.62 1445.87,1229.34 1447.93,1229.06 \n  1450,1228.78 1452.07,1228.5 1454.13,1228.22 1456.2,1227.94 1458.26,1227.66 1460.33,1227.38 1462.4,1227.1 1464.46,1226.82 1466.53,1226.54 1468.59,1226.26 \n  1470.66,1225.98 1472.73,1225.7 1474.79,1225.42 1476.86,1225.14 1478.93,1224.86 1480.99,1224.58 1483.06,1224.3 1485.12,1224.02 1487.19,1223.75 1489.26,1223.47 \n  1491.32,1223.19 1493.39,1222.91 1495.46,1222.63 1497.52,1222.35 1499.59,1222.07 1501.65,1221.79 1503.72,1221.51 1505.79,1221.23 1507.85,1220.96 1509.92,1220.68 \n  1511.99,1220.4 1514.05,1220.12 1516.12,1219.84 1518.18,1219.56 1520.25,1219.29 1522.32,1219.01 1524.38,1218.73 1526.45,1218.45 1528.52,1218.17 1530.58,1217.9 \n  1532.65,1217.62 1534.71,1217.34 1536.78,1217.06 1538.85,1216.79 1540.91,1216.51 1542.98,1216.23 1545.05,1215.95 1547.11,1215.68 1549.18,1215.4 1551.24,1215.12 \n  1553.31,1214.85 1555.38,1214.57 1557.44,1214.29 1559.51,1214.01 1561.58,1213.74 1563.64,1213.46 1565.71,1213.18 1567.77,1212.91 1569.84,1212.63 1571.91,1212.36 \n  1573.97,1212.08 1576.04,1211.8 1578.11,1211.53 1580.17,1211.25 1582.24,1210.97 1584.3,1210.7 1586.37,1210.42 1588.44,1210.15 1590.5,1209.87 1592.57,1209.59 \n  1594.63,1209.32 1596.7,1209.04 1598.77,1208.77 1600.83,1208.49 1602.9,1208.22 1604.97,1207.94 1607.03,1207.67 1609.1,1207.39 1611.16,1207.12 1613.23,1206.84 \n  1615.3,1206.57 1617.36,1206.29 1619.43,1206.02 1621.5,1205.74 1623.56,1205.47 1625.63,1205.19 1627.69,1204.92 1629.76,1204.64 1631.83,1204.37 1633.89,1204.09 \n  1635.96,1203.82 1638.03,1203.55 1640.09,1203.27 1642.16,1203 1644.22,1202.72 1646.29,1202.45 1648.36,1202.18 1650.42,1201.9 1652.49,1201.63 1654.56,1201.36 \n  1656.62,1201.08 1658.69,1200.81 1660.75,1200.53 1662.82,1200.26 1664.89,1199.99 1666.95,1199.71 1669.02,1199.44 1671.09,1199.17 1673.15,1198.9 1675.22,1198.62 \n  1677.28,1198.35 1679.35,1198.08 1681.42,1197.8 1683.48,1197.53 1685.55,1197.26 1687.62,1196.99 1689.68,1196.71 1691.75,1196.44 1693.81,1196.17 1695.88,1195.9 \n  1697.95,1195.62 1700.01,1195.35 1702.08,1195.08 1704.15,1194.81 1706.21,1194.54 1708.28,1194.26 1710.34,1193.99 1712.41,1193.72 1714.48,1193.45 1716.54,1193.18 \n  1718.61,1192.91 1720.68,1192.63 1722.74,1192.36 1724.81,1192.09 1726.87,1191.82 1728.94,1191.55 1731.01,1191.28 1733.07,1191.01 1735.14,1190.74 1737.2,1190.46 \n  1739.27,1190.19 1741.34,1189.92 1743.4,1189.65 1745.47,1189.38 1747.54,1189.11 1749.6,1188.84 1751.67,1188.57 1753.73,1188.3 1755.8,1188.03 1757.87,1187.76 \n  1759.93,1187.49 1762,1187.22 1764.07,1186.95 1766.13,1186.68 1768.2,1186.41 1770.26,1186.14 1772.33,1185.87 1774.4,1185.6 1776.46,1185.33 1778.53,1185.06 \n  1780.6,1184.79 1782.66,1184.52 1784.73,1184.25 1786.79,1183.98 1788.86,1183.71 1790.93,1183.44 1792.99,1183.18 1795.06,1182.91 1797.13,1182.64 1799.19,1182.37 \n  1801.26,1182.1 1803.32,1181.83 1805.39,1181.56 1807.46,1181.29 1809.52,1181.02 1811.59,1180.76 1813.66,1180.49 1815.72,1180.22 1817.79,1179.95 1819.85,1179.68 \n  1821.92,1179.41 1823.99,1179.15 1826.05,1178.88 1828.12,1178.61 1830.19,1178.34 1832.25,1178.07 1834.32,1177.81 1836.38,1177.54 1838.45,1177.27 1840.52,1177 \n  1842.58,1176.74 1844.65,1176.47 1846.72,1176.2 1848.78,1175.93 1850.85,1175.67 1852.91,1175.4 1854.98,1175.13 1857.05,1174.87 1859.11,1174.6 1861.18,1174.33 \n  1863.25,1174.07 1865.31,1173.8 1867.38,1173.53 1869.44,1173.27 1871.51,1173 1873.58,1172.73 1875.64,1172.47 1877.71,1172.2 1879.77,1171.93 1881.84,1171.67 \n  1883.91,1171.4 1885.97,1171.13 1888.04,1170.87 1890.11,1170.6 1892.17,1170.34 1894.24,1170.07 1896.3,1169.81 1898.37,1169.54 1900.44,1169.27 1902.5,1169.01 \n  1904.57,1168.74 1906.64,1168.48 1908.7,1168.21 1910.77,1167.95 1912.83,1167.68 1914.9,1167.42 1916.97,1167.15 1919.03,1166.89 1921.1,1166.62 1923.17,1166.36 \n  1925.23,1166.09 1927.3,1165.83 1929.36,1165.56 1931.43,1165.3 1933.5,1165.03 1935.56,1164.77 1937.63,1164.5 1939.7,1164.24 1941.76,1163.98 1943.83,1163.71 \n  1945.89,1163.45 1947.96,1163.18 1950.03,1162.92 1952.09,1162.65 1954.16,1162.39 1956.23,1162.13 1958.29,1161.86 1960.36,1161.6 1962.42,1161.34 1964.49,1161.07 \n  1966.56,1160.81 1968.62,1160.55 1970.69,1160.28 1972.76,1160.02 1974.82,1159.76 1976.89,1159.49 1978.95,1159.23 1981.02,1158.97 1983.09,1158.7 1985.15,1158.44 \n  1987.22,1158.18 1989.29,1157.91 1991.35,1157.65 1993.42,1157.39 1995.48,1157.13 1997.55,1156.86 1999.62,1156.6 2001.68,1156.34 2003.75,1156.08 2005.82,1155.81 \n  2007.88,1155.55 2009.95,1155.29 2012.01,1155.03 2014.08,1154.77 2016.15,1154.5 2018.21,1154.24 2020.28,1153.98 2022.34,1153.72 2024.41,1153.46 2026.48,1153.2 \n  2028.54,1152.93 2030.61,1152.67 2032.68,1152.41 2034.74,1152.15 2036.81,1151.89 2038.87,1151.63 2040.94,1151.37 2043.01,1151.1 2045.07,1150.84 2047.14,1150.58 \n  2049.21,1150.32 2051.27,1150.06 2053.34,1149.8 2055.4,1149.54 2057.47,1149.28 2059.54,1149.02 2061.6,1148.76 2063.67,1148.5 2065.74,1148.24 2067.8,1147.98 \n  2069.87,1147.72 2071.93,1147.46 2074,1147.2 2076.07,1146.94 2078.13,1146.68 2080.2,1146.42 2082.27,1146.16 2084.33,1145.9 2086.4,1145.64 2088.46,1145.38 \n  2090.53,1145.12 2092.6,1144.86 2094.66,1144.6 2096.73,1144.34 2098.8,1144.08 2100.86,1143.82 2102.93,1143.56 2104.99,1143.3 2107.06,1143.04 2109.13,1142.78 \n  2111.19,1142.53 2113.26,1142.27 2115.33,1142.01 2117.39,1141.75 2119.46,1141.49 2121.52,1141.23 2123.59,1140.97 2125.66,1140.72 2127.72,1140.46 2129.79,1140.2 \n  2131.86,1139.94 2133.92,1139.68 2135.99,1139.42 2138.05,1139.17 2140.12,1138.91 2142.19,1138.65 2144.25,1138.39 2146.32,1138.13 2148.38,1137.88 2150.45,1137.62 \n  2152.52,1137.36 2154.58,1137.1 2156.65,1136.85 2158.72,1136.59 2160.78,1136.33 2162.85,1136.07 2164.91,1135.82 2166.98,1135.56 2169.05,1135.3 2171.11,1135.04 \n  2173.18,1134.79 2175.25,1134.53 2177.31,1134.27 2179.38,1134.02 2181.44,1133.76 2183.51,1133.5 2185.58,1133.25 2187.64,1132.99 2189.71,1132.73 2191.78,1132.48 \n  2193.84,1132.22 2195.91,1131.96 2197.97,1131.71 2200.04,1131.45 2202.11,1131.2 2204.17,1130.94 2206.24,1130.68 2208.31,1130.43 2210.37,1130.17 2212.44,1129.92 \n  2214.5,1129.66 2216.57,1129.41 2218.64,1129.15 2220.7,1128.89 2222.77,1128.64 2224.84,1128.38 2226.9,1128.13 2228.97,1127.87 2231.03,1127.62 2233.1,1127.36 \n  2235.17,1127.11 2237.23,1126.85 2239.3,1126.6 2241.37,1126.34 2243.43,1126.09 2245.5,1125.83 2247.56,1125.58 2249.63,1125.32 2251.7,1125.07 2253.76,1124.81 \n  2255.83,1124.56 2257.9,1124.31 2259.96,1124.05 2262.03,1123.8 2264.09,1123.54 2266.16,1123.29 2268.23,1123.03 2270.29,1122.78 2272.36,1122.53 2274.43,1122.27 \n  2276.49,1122.02 2278.56,1121.77 2280.62,1121.51 2282.69,1121.26 2284.76,1121 2286.82,1120.75 2288.89,1120.5 2290.95,1120.24 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#c271d2; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  230.922,107.603 232.989,107.263 235.055,106.926 237.121,106.593 239.187,106.262 241.253,105.934 243.32,105.609 245.386,105.288 247.452,104.97 249.518,104.654 \n  251.585,104.342 253.651,104.033 255.717,103.727 257.783,103.424 259.85,103.124 261.916,102.827 263.982,102.533 266.048,102.243 268.114,101.955 270.181,101.671 \n  272.247,101.39 274.313,101.111 276.379,100.836 278.446,100.564 280.512,100.295 282.578,100.03 284.644,99.767 286.711,99.5074 288.777,99.2509 290.843,98.9975 \n  292.909,98.7472 294.975,98.5 297.042,98.256 299.108,98.015 301.174,97.7772 303.24,97.5424 305.307,97.3108 307.373,97.0823 309.439,96.8568 311.505,96.6345 \n  313.572,96.4154 315.638,96.1993 317.704,95.9863 319.77,95.7765 321.836,95.5698 323.903,95.3662 325.969,95.1657 328.035,94.9683 330.101,94.774 332.168,94.5829 \n  334.234,94.3949 336.3,94.21 338.366,94.0282 340.433,93.8496 342.499,93.674 344.565,93.5016 346.631,93.3323 348.697,93.1662 350.764,93.0032 352.83,92.8433 \n  354.896,92.6865 356.962,92.5329 359.029,92.3823 361.095,92.235 363.161,92.0907 365.227,91.9496 367.294,91.8116 369.36,91.6767 371.426,91.545 373.492,91.4164 \n  375.558,91.291 377.625,91.1687 379.691,91.0495 381.757,90.9335 383.823,90.8206 385.89,90.7108 387.956,90.6042 390.022,90.5007 392.088,90.4004 394.155,90.3032 \n  396.221,90.2091 398.287,90.1182 400.353,90.0305 402.419,89.9458 404.486,89.8644 406.552,89.786 408.618,89.7109 410.684,89.6388 412.751,89.57 414.817,89.5042 \n  416.883,89.4417 418.949,89.3822 421.016,89.326 423.082,89.2729 425.148,89.2229 427.214,89.1761 429.281,89.1324 431.347,89.0919 433.413,89.0546 435.479,89.0204 \n  437.545,88.9894 439.612,88.9615 441.678,88.9368 443.744,88.9153 445.81,88.8969 447.877,88.8817 449.943,88.8697 452.009,88.8608 454.075,88.855 456.142,88.8525 \n  458.208,88.8531 460.274,88.8569 462.34,88.8638 464.406,88.8739 466.473,88.8872 468.539,88.9037 470.605,88.9233 472.671,88.9461 474.738,88.9721 476.804,89.0012 \n  478.87,89.0336 480.936,89.0691 483.003,89.1077 485.069,89.1496 487.135,89.1946 489.201,89.2428 491.267,89.2942 493.334,89.3488 495.4,89.4065 497.466,89.4675 \n  499.532,89.5316 501.599,89.5989 503.665,89.6694 505.731,89.743 507.797,89.8199 509.864,89.8999 511.93,89.9832 513.996,90.0696 516.062,90.1592 518.128,90.252 \n  520.195,90.348 522.261,90.4472 524.327,90.5495 526.393,90.6551 528.46,90.7638 530.526,90.8758 532.592,90.9909 534.658,91.1093 536.725,91.2308 538.791,91.3556 \n  540.857,91.4835 542.923,91.6147 544.989,91.749 547.056,91.8865 549.122,92.0273 551.188,92.1712 553.254,92.3184 555.321,92.4687 557.387,92.6223 559.453,92.7791 \n  561.519,92.9391 563.586,93.1022 565.652,93.2686 567.718,93.4382 569.784,93.611 571.85,93.7871 573.917,93.9663 575.983,94.1488 578.049,94.3344 580.115,94.5233 \n  582.182,94.7154 584.248,94.9107 586.314,95.1092 588.38,95.311 590.447,95.5159 592.513,95.7241 594.579,95.9355 596.645,96.1501 598.711,96.368 600.778,96.5891 \n  602.844,96.8133 604.91,97.0409 606.976,97.2716 609.043,97.5056 611.109,97.7428 613.175,97.9832 615.241,98.2269 617.308,98.4737 619.374,98.7238 621.44,98.9772 \n  623.506,99.2338 625.572,99.4936 627.639,99.7566 629.705,100.023 631.771,100.292 633.837,100.565 635.904,100.841 637.97,101.12 640.036,101.403 642.102,101.689 \n  644.169,101.977 646.235,102.27 648.301,102.565 650.367,102.864 652.433,103.166 654.5,103.471 656.566,103.779 658.632,104.091 660.698,104.406 662.765,104.724 \n  664.831,105.045 666.897,105.37 668.963,105.698 671.03,106.029 673.096,106.363 675.162,106.701 677.228,107.042 679.294,107.386 681.361,107.734 683.427,108.084 \n  685.493,108.438 687.559,108.795 689.626,109.156 691.692,109.52 693.758,109.887 695.824,110.257 697.891,110.63 699.957,111.007 702.023,111.387 704.089,111.77 \n  706.155,112.157 708.222,112.547 710.288,112.94 712.354,113.336 714.42,113.736 716.487,114.139 718.553,114.545 720.619,114.954 722.685,115.367 724.752,115.783 \n  726.818,116.202 728.884,116.625 730.95,117.051 733.017,117.48 735.083,117.912 737.149,118.348 739.215,118.787 741.281,119.229 743.348,119.674 745.414,120.123 \n  747.48,120.575 749.546,121.031 751.613,121.489 753.679,121.951 755.745,122.416 757.811,122.885 759.878,123.357 761.944,123.832 764.01,124.31 766.076,124.792 \n  768.142,125.277 770.209,125.765 772.275,126.257 774.341,126.751 776.407,127.25 778.474,127.751 780.54,128.256 782.606,128.764 784.672,129.275 786.739,129.79 \n  788.805,130.308 790.871,130.829 792.937,131.353 795.003,131.881 797.07,132.412 799.136,132.947 801.202,133.485 803.268,134.026 805.335,134.57 807.401,135.118 \n  809.467,135.669 811.533,136.223 813.6,136.781 815.666,137.341 817.732,137.906 819.798,138.473 821.864,139.044 823.931,139.618 825.997,140.196 828.063,140.777 \n  830.129,141.361 832.196,141.948 834.262,142.539 836.328,143.133 838.394,143.731 840.461,144.331 842.527,144.935 844.593,145.543 846.659,146.154 848.725,146.768 \n  850.792,147.385 852.858,148.006 854.924,148.63 856.99,149.257 859.057,149.888 861.123,150.522 863.189,151.159 865.255,151.8 867.322,152.444 869.388,153.091 \n  871.454,153.742 873.52,154.396 875.586,155.054 877.653,155.714 879.719,156.378 881.785,157.046 883.851,157.717 885.918,158.391 887.984,159.068 890.05,159.749 \n  892.116,160.433 894.183,161.121 896.249,161.811 898.315,162.506 900.381,163.203 902.447,163.904 904.514,164.608 906.58,165.316 908.646,166.027 910.712,166.741 \n  912.779,167.459 914.845,168.18 916.911,168.904 918.977,169.632 921.044,170.363 923.11,171.097 925.176,171.835 927.242,172.576 929.308,173.321 931.375,174.069 \n  933.441,174.82 935.507,175.575 937.573,176.333 939.64,177.094 941.706,177.859 943.772,178.627 945.838,179.399 947.905,180.173 949.971,180.952 952.037,181.733 \n  954.103,182.518 956.169,183.307 958.236,184.098 960.302,184.893 962.368,185.692 964.434,186.494 966.501,187.299 968.567,188.108 970.633,188.92 972.699,189.735 \n  974.766,190.554 976.832,191.376 978.898,192.202 980.964,193.031 983.03,193.863 985.097,194.699 987.163,195.538 989.229,196.38 991.295,197.226 993.362,198.075 \n  995.428,198.928 997.494,199.784 999.56,200.644 1001.63,201.506 1003.69,202.373 1005.76,203.242 1007.83,204.115 1009.89,204.992 1011.96,205.872 1014.02,206.755 \n  1016.09,207.642 1018.16,208.532 1020.22,209.425 1022.29,210.322 1024.36,211.222 1026.42,212.126 1028.49,213.033 1030.55,213.944 1032.62,214.858 1034.69,215.775 \n  1036.75,216.696 1038.82,217.62 1040.88,218.547 1042.95,219.478 1045.02,220.413 1047.08,221.351 1049.15,222.292 1051.22,223.237 1053.28,224.185 1055.35,225.136 \n  1057.41,226.091 1059.48,227.049 1061.55,228.011 1063.61,228.976 1065.68,229.945 1067.75,230.917 1069.81,231.893 1071.88,232.871 1073.94,233.854 1076.01,234.84 \n  1078.08,235.829 1080.14,236.821 1082.21,237.818 1084.28,238.817 1086.34,239.82 1088.41,240.826 1090.47,241.836 1092.54,242.85 1094.61,243.866 1096.67,244.886 \n  1098.74,245.91 1100.81,246.937 1102.87,247.967 1104.94,249.001 1107,250.039 1109.07,251.08 1111.14,252.124 1113.2,253.172 1115.27,254.223 1117.34,255.277 \n  1119.4,256.335 1121.47,257.397 1123.53,258.462 1125.6,259.53 1127.67,260.602 1129.73,261.678 1131.8,262.756 1133.87,263.839 1135.93,264.924 1138,266.014 \n  1140.06,267.106 1142.13,268.202 1144.2,269.302 1146.26,270.405 1148.33,271.511 1150.4,272.621 1152.46,273.735 1154.53,274.852 1156.59,275.972 1158.66,277.096 \n  1160.73,278.223 1162.79,279.354 1164.86,280.488 1166.93,281.626 1168.99,282.767 1171.06,283.912 1173.12,285.06 1175.19,286.212 1177.26,287.367 1179.32,288.526 \n  1181.39,289.688 1183.45,290.853 1185.52,292.022 1187.59,293.195 1189.65,294.371 1191.72,295.551 1193.79,296.734 1195.85,297.92 1197.92,299.11 1199.98,300.304 \n  1202.05,301.501 1204.12,302.701 1206.18,303.905 1208.25,305.113 1210.32,306.324 1212.38,307.538 1214.45,308.756 1216.51,309.977 1218.58,311.202 1220.65,312.431 \n  1222.71,313.663 1224.78,314.898 1226.85,316.137 1228.91,317.38 1230.98,318.626 1233.04,319.875 1235.11,321.128 1237.18,322.385 1239.24,323.645 1241.31,324.908 \n  1243.38,326.175 1245.44,327.446 1247.51,328.72 1249.57,329.998 1251.64,331.279 1253.71,332.563 1255.77,333.852 1257.84,335.143 1259.91,336.438 1261.97,337.737 \n  1264.04,339.039 1266.1,340.345 1268.17,341.654 1270.24,342.967 1272.3,344.284 1274.37,345.604 1276.44,346.927 1278.5,348.254 1280.57,349.584 1282.63,350.918 \n  1284.7,352.256 1286.77,353.597 1288.83,354.942 1290.9,356.29 1292.97,357.641 1295.03,358.997 1297.1,360.355 1299.16,361.718 1301.23,363.084 1303.3,364.453 \n  1305.36,365.826 1307.43,367.202 1309.5,368.582 1311.56,369.966 1313.63,371.353 1315.69,372.744 1317.76,374.138 1319.83,375.536 1321.89,376.937 1323.96,378.342 \n  1326.02,379.751 1328.09,381.163 1330.16,382.578 1332.22,383.997 1334.29,385.42 1336.36,386.846 1338.42,388.276 1340.49,389.709 1342.55,391.146 1344.62,392.587 \n  1346.69,394.031 1348.75,395.478 1350.82,396.93 1352.89,398.384 1354.95,399.843 1357.02,401.305 1359.08,402.77 1361.15,404.239 1363.22,405.712 1365.28,407.188 \n  1367.35,408.668 1369.42,410.151 1371.48,411.638 1373.55,413.129 1375.61,414.623 1377.68,416.12 1379.75,417.622 1381.81,419.126 1383.88,420.635 1385.95,422.147 \n  1388.01,423.662 1390.08,425.182 1392.14,426.704 1394.21,428.231 1396.28,429.761 1398.34,431.294 1400.41,432.832 1402.48,434.372 1404.54,435.917 1406.61,437.465 \n  1408.67,439.016 1410.74,440.571 1412.81,442.13 1414.87,443.692 1416.94,445.258 1419.01,446.828 1421.07,448.401 1423.14,449.978 1425.2,451.558 1427.27,453.142 \n  1429.34,454.73 1431.4,456.321 1433.47,457.916 1435.54,459.514 1437.6,461.116 1439.67,462.722 1441.73,464.331 1443.8,465.944 1445.87,467.56 1447.93,469.181 \n  1450,470.804 1452.07,472.432 1454.13,474.063 1456.2,475.697 1458.26,477.336 1460.33,478.977 1462.4,480.623 1464.46,482.272 1466.53,483.925 1468.59,485.581 \n  1470.66,487.241 1472.73,488.905 1474.79,490.572 1476.86,492.243 1478.93,493.918 1480.99,495.596 1483.06,497.278 1485.12,498.963 1487.19,500.652 1489.26,502.345 \n  1491.32,504.041 1493.39,505.741 1495.46,507.445 1497.52,509.152 1499.59,510.863 1501.65,512.578 1503.72,514.296 1505.79,516.018 1507.85,517.744 1509.92,519.473 \n  1511.99,521.206 1514.05,522.942 1516.12,524.683 1518.18,526.426 1520.25,528.174 1522.32,529.925 1524.38,531.68 1526.45,533.438 1528.52,535.201 1530.58,536.966 \n  1532.65,538.736 1534.71,540.509 1536.78,542.286 1538.85,544.066 1540.91,545.851 1542.98,547.638 1545.05,549.43 1547.11,551.225 1549.18,553.024 1551.24,554.826 \n  1553.31,556.633 1555.38,558.443 1557.44,560.256 1559.51,562.073 1561.58,563.894 1563.64,565.719 1565.71,567.547 1567.77,569.379 1569.84,571.215 1571.91,573.054 \n  1573.97,574.897 1576.04,576.744 1578.11,578.594 1580.17,580.448 1582.24,582.306 1584.3,584.168 1586.37,586.033 1588.44,587.902 1590.5,589.774 1592.57,591.651 \n  1594.63,593.531 1596.7,595.414 1598.77,597.302 1600.83,599.193 1602.9,601.088 1604.97,602.986 1607.03,604.888 1609.1,606.794 1611.16,608.704 1613.23,610.617 \n  1615.3,612.534 1617.36,614.455 1619.43,616.38 1621.5,618.308 1623.56,620.24 1625.63,622.175 1627.69,624.115 1629.76,626.058 1631.83,628.005 1633.89,629.955 \n  1635.96,631.909 1638.03,633.867 1640.09,635.829 1642.16,637.794 1644.22,639.764 1646.29,641.736 1648.36,643.713 1650.42,645.693 1652.49,647.677 1654.56,649.665 \n  1656.62,651.657 1658.69,653.652 1660.75,655.651 1662.82,657.654 1664.89,659.66 1666.95,661.671 1669.02,663.684 1671.09,665.702 1673.15,667.724 1675.22,669.749 \n  1677.28,671.778 1679.35,673.811 1681.42,675.847 1683.48,677.887 1685.55,679.931 1687.62,681.979 1689.68,684.03 1691.75,686.086 1693.81,688.144 1695.88,690.207 \n  1697.95,692.274 1700.01,694.344 1702.08,696.418 1704.15,698.496 1706.21,700.577 1708.28,702.663 1710.34,704.752 1712.41,706.844 1714.48,708.941 1716.54,711.041 \n  1718.61,713.146 1720.68,715.254 1722.74,717.365 1724.81,719.481 1726.87,721.6 1728.94,723.723 1731.01,725.85 1733.07,727.98 1735.14,730.115 1737.2,732.253 \n  1739.27,734.395 1741.34,736.541 1743.4,738.69 1745.47,740.843 1747.54,743 1749.6,745.161 1751.67,747.326 1753.73,749.494 1755.8,751.667 1757.87,753.843 \n  1759.93,756.022 1762,758.206 1764.07,760.393 1766.13,762.585 1768.2,764.78 1770.26,766.979 1772.33,769.181 1774.4,771.388 1776.46,773.598 1778.53,775.812 \n  1780.6,778.03 1782.66,780.251 1784.73,782.477 1786.79,784.706 1788.86,786.939 1790.93,789.176 1792.99,791.417 1795.06,793.661 1797.13,795.91 1799.19,798.162 \n  1801.26,800.418 1803.32,802.678 1805.39,804.941 1807.46,807.209 1809.52,809.48 1811.59,811.755 1813.66,814.034 1815.72,816.317 1817.79,818.603 1819.85,820.894 \n  1821.92,823.188 1823.99,825.486 1826.05,827.788 1828.12,830.094 1830.19,832.404 1832.25,834.717 1834.32,837.034 1836.38,839.355 1838.45,841.68 1840.52,844.009 \n  1842.58,846.342 1844.65,848.678 1846.72,851.019 1848.78,853.363 1850.85,855.711 1852.91,858.063 1854.98,860.419 1857.05,862.778 1859.11,865.142 1861.18,867.509 \n  1863.25,869.88 1865.31,872.255 1867.38,874.634 1869.44,877.017 1871.51,879.403 1873.58,881.794 1875.64,884.188 1877.71,886.586 1879.77,888.989 1881.84,891.395 \n  1883.91,893.804 1885.97,896.218 1888.04,898.636 1890.11,901.057 1892.17,903.482 1894.24,905.912 1896.3,908.345 1898.37,910.782 1900.44,913.222 1902.5,915.667 \n  1904.57,918.116 1906.64,920.568 1908.7,923.024 1910.77,925.485 1912.83,927.949 1914.9,930.417 1916.97,932.889 1919.03,935.365 1921.1,937.844 1923.17,940.328 \n  1925.23,942.815 1927.3,945.307 1929.36,947.802 1931.43,950.301 1933.5,952.804 1935.56,955.311 1937.63,957.822 1939.7,960.337 1941.76,962.856 1943.83,965.378 \n  1945.89,967.905 1947.96,970.435 1950.03,972.97 1952.09,975.508 1954.16,978.05 1956.23,980.596 1958.29,983.146 1960.36,985.7 1962.42,988.258 1964.49,990.82 \n  1966.56,993.385 1968.62,995.955 1970.69,998.528 1972.76,1001.11 1974.82,1003.69 1976.89,1006.27 1978.95,1008.86 1981.02,1011.46 1983.09,1014.05 1985.15,1016.65 \n  1987.22,1019.26 1989.29,1021.87 1991.35,1024.48 1993.42,1027.1 1995.48,1029.72 1997.55,1032.34 1999.62,1034.97 2001.68,1037.6 2003.75,1040.24 2005.82,1042.88 \n  2007.88,1045.52 2009.95,1048.17 2012.01,1050.83 2014.08,1053.48 2016.15,1056.14 2018.21,1058.81 2020.28,1061.47 2022.34,1064.15 2024.41,1066.82 2026.48,1069.5 \n  2028.54,1072.19 2030.61,1074.87 2032.68,1077.57 2034.74,1080.26 2036.81,1082.96 2038.87,1085.66 2040.94,1088.37 2043.01,1091.08 2045.07,1093.8 2047.14,1096.52 \n  2049.21,1099.24 2051.27,1101.97 2053.34,1104.7 2055.4,1107.44 2057.47,1110.18 2059.54,1112.92 2061.6,1115.67 2063.67,1118.42 2065.74,1121.18 2067.8,1123.94 \n  2069.87,1126.7 2071.93,1129.47 2074,1132.24 2076.07,1135.01 2078.13,1137.79 2080.2,1140.58 2082.27,1143.36 2084.33,1146.15 2086.4,1148.95 2088.46,1151.75 \n  2090.53,1154.55 2092.6,1157.36 2094.66,1160.17 2096.73,1162.99 2098.8,1165.81 2100.86,1168.63 2102.93,1171.46 2104.99,1174.29 2107.06,1177.12 2109.13,1179.96 \n  2111.19,1182.81 2113.26,1185.65 2115.33,1188.51 2117.39,1191.36 2119.46,1194.22 2121.52,1197.08 2123.59,1199.95 2125.66,1202.82 2127.72,1205.7 2129.79,1208.58 \n  2131.86,1211.46 2133.92,1214.35 2135.99,1217.24 2138.05,1220.14 2140.12,1223.04 2142.19,1225.94 2144.25,1228.85 2146.32,1231.76 2148.38,1234.68 2150.45,1237.6 \n  2152.52,1240.52 2154.58,1243.45 2156.65,1246.38 2158.72,1249.32 2160.78,1252.26 2162.85,1255.2 2164.91,1258.15 2166.98,1261.1 2169.05,1264.06 2171.11,1267.02 \n  2173.18,1269.99 2175.25,1272.95 2177.31,1275.93 2179.38,1278.9 2181.44,1281.88 2183.51,1284.87 2185.58,1287.86 2187.64,1290.85 2189.71,1293.85 2191.78,1296.85 \n  2193.84,1299.85 2195.91,1302.86 2197.97,1305.88 2200.04,1308.89 2202.11,1311.92 2204.17,1314.94 2206.24,1317.97 2208.31,1321 2210.37,1324.04 2212.44,1327.08 \n  2214.5,1330.13 2216.57,1333.18 2218.64,1336.23 2220.7,1339.29 2222.77,1342.36 2224.84,1345.42 2226.9,1348.49 2228.97,1351.57 2231.03,1354.65 2233.1,1357.73 \n  2235.17,1360.82 2237.23,1363.91 2239.3,1367 2241.37,1370.1 2243.43,1373.2 2245.5,1376.31 2247.56,1379.42 2249.63,1382.54 2251.7,1385.66 2253.76,1388.78 \n  2255.83,1391.91 2257.9,1395.04 2259.96,1398.18 2262.03,1401.32 2264.09,1404.46 2266.16,1407.61 2268.23,1410.76 2270.29,1413.92 2272.36,1417.08 2274.43,1420.25 \n  2276.49,1423.42 2278.56,1426.59 2280.62,1429.77 2282.69,1432.95 2284.76,1436.13 2286.82,1439.32 2288.89,1442.52 2290.95,1445.72 \n  \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#c271d2; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  230.922,107.596 232.989,107.248 235.055,106.904 237.121,106.562 239.187,106.224 241.253,105.888 243.32,105.556 245.386,105.227 247.452,104.901 249.518,104.578 \n  251.585,104.258 253.651,103.941 255.717,103.627 257.783,103.317 259.85,103.009 261.916,102.705 263.982,102.403 266.048,102.105 268.114,101.81 270.181,101.518 \n  272.247,101.229 274.313,100.943 276.379,100.66 278.446,100.381 280.512,100.104 282.578,99.8304 284.644,99.56 286.711,99.2926 288.777,99.0284 290.843,98.7673 \n  292.909,98.5093 294.975,98.2544 297.042,98.0025 299.108,97.7538 301.174,97.5082 303.24,97.2657 305.307,97.0263 307.373,96.79 309.439,96.5569 311.505,96.3268 \n  313.572,96.0998 315.638,95.8759 317.704,95.6552 319.77,95.4376 321.836,95.223 323.903,95.0116 325.969,94.8033 328.035,94.5981 330.101,94.396 332.168,94.1971 \n  334.234,94.0012 336.3,93.8085 338.366,93.6189 340.433,93.4324 342.499,93.249 344.565,93.0688 346.631,92.8917 348.697,92.7177 350.764,92.5468 352.83,92.379 \n  354.896,92.2144 356.962,92.0528 359.029,91.8944 361.095,91.7392 363.161,91.587 365.227,91.438 367.294,91.2921 369.36,91.1494 371.426,91.0098 373.492,90.8733 \n  375.558,90.7399 377.625,90.6097 379.691,90.4826 381.757,90.3586 383.823,90.2378 385.89,90.1201 387.956,90.0055 390.022,89.8941 392.088,89.7858 394.155,89.6806 \n  396.221,89.5786 398.287,89.4798 400.353,89.384 402.419,89.2914 404.486,89.202 406.552,89.1157 408.618,89.0325 410.684,88.9525 412.751,88.8756 414.817,88.8019 \n  416.883,88.7313 418.949,88.6639 421.016,88.5996 423.082,88.5385 425.148,88.4805 427.214,88.4257 429.281,88.374 431.347,88.3255 433.413,88.2801 435.479,88.2379 \n  437.545,88.1988 439.612,88.1629 441.678,88.1301 443.744,88.1005 445.81,88.0741 447.877,88.0508 449.943,88.0307 452.009,88.0137 454.075,87.9999 456.142,87.9892 \n  458.208,87.9818 460.274,87.9774 462.34,87.9763 464.406,87.9783 466.473,87.9835 468.539,87.9918 470.605,88.0033 472.671,88.018 474.738,88.0358 476.804,88.0568 \n  478.87,88.081 480.936,88.1084 483.003,88.1389 485.069,88.1726 487.135,88.2095 489.201,88.2495 491.267,88.2928 493.334,88.3392 495.4,88.3887 497.466,88.4415 \n  499.532,88.4974 501.599,88.5565 503.665,88.6188 505.731,88.6843 507.797,88.7529 509.864,88.8248 511.93,88.8998 513.996,88.978 516.062,89.0594 518.128,89.1439 \n  520.195,89.2317 522.261,89.3226 524.327,89.4168 526.393,89.5141 528.46,89.6146 530.526,89.7183 532.592,89.8252 534.658,89.9353 536.725,90.0486 538.791,90.165 \n  540.857,90.2847 542.923,90.4076 544.989,90.5336 547.056,90.6629 549.122,90.7953 551.188,90.931 553.254,91.0698 555.321,91.2119 557.387,91.3571 559.453,91.5056 \n  561.519,91.6572 563.586,91.8121 565.652,91.9701 567.718,92.1314 569.784,92.2959 571.85,92.4635 573.917,92.6344 575.983,92.8085 578.049,92.9858 580.115,93.1663 \n  582.182,93.3501 584.248,93.537 586.314,93.7272 588.38,93.9205 590.447,94.1171 592.513,94.3169 594.579,94.5199 596.645,94.7261 598.711,94.9356 600.778,95.1482 \n  602.844,95.3641 604.91,95.5832 606.976,95.8055 609.043,96.031 611.109,96.2598 613.175,96.4918 615.241,96.727 617.308,96.9654 619.374,97.2071 621.44,97.452 \n  623.506,97.7001 625.572,97.9515 627.639,98.206 629.705,98.4638 631.771,98.7249 633.837,98.9891 635.904,99.2566 637.97,99.5274 640.036,99.8013 642.102,100.079 \n  644.169,100.359 646.235,100.643 648.301,100.93 650.367,101.22 652.433,101.513 654.5,101.81 656.566,102.11 658.632,102.413 660.698,102.719 662.765,103.029 \n  664.831,103.341 666.897,103.658 668.963,103.977 671.03,104.299 673.096,104.625 675.162,104.954 677.228,105.287 679.294,105.622 681.361,105.961 683.427,106.303 \n  685.493,106.649 687.559,106.997 689.626,107.349 691.692,107.704 693.758,108.062 695.824,108.424 697.891,108.789 699.957,109.157 702.023,109.528 704.089,109.903 \n  706.155,110.281 708.222,110.662 710.288,111.047 712.354,111.434 714.42,111.825 716.487,112.219 718.553,112.617 720.619,113.018 722.685,113.422 724.752,113.829 \n  726.818,114.24 728.884,114.653 730.95,115.071 733.017,115.491 735.083,115.915 737.149,116.341 739.215,116.772 741.281,117.205 743.348,117.642 745.414,118.082 \n  747.48,118.525 749.546,118.972 751.613,119.422 753.679,119.875 755.745,120.331 757.811,120.791 759.878,121.254 761.944,121.72 764.01,122.19 766.076,122.663 \n  768.142,123.139 770.209,123.618 772.275,124.101 774.341,124.587 776.407,125.077 778.474,125.569 780.54,126.065 782.606,126.564 784.672,127.067 786.739,127.573 \n  788.805,128.082 790.871,128.594 792.937,129.11 795.003,129.629 797.07,130.151 799.136,130.677 801.202,131.205 803.268,131.738 805.335,132.273 807.401,132.812 \n  809.467,133.354 811.533,133.899 813.6,134.448 815.666,135 817.732,135.555 819.798,136.114 821.864,136.676 823.931,137.241 825.997,137.81 828.063,138.382 \n  830.129,138.957 832.196,139.535 834.262,140.117 836.328,140.702 838.394,141.291 840.461,141.883 842.527,142.478 844.593,143.076 846.659,143.678 848.725,144.283 \n  850.792,144.891 852.858,145.503 854.924,146.118 856.99,146.737 859.057,147.358 861.123,147.983 863.189,148.612 865.255,149.243 867.322,149.878 869.388,150.517 \n  871.454,151.158 873.52,151.803 875.586,152.452 877.653,153.103 879.719,153.758 881.785,154.417 883.851,155.078 885.918,155.743 887.984,156.412 890.05,157.084 \n  892.116,157.759 894.183,158.437 896.249,159.119 898.315,159.804 900.381,160.492 902.447,161.184 904.514,161.879 906.58,162.578 908.646,163.279 910.712,163.985 \n  912.779,164.693 914.845,165.405 916.911,166.12 918.977,166.839 921.044,167.561 923.11,168.286 925.176,169.015 927.242,169.747 929.308,170.482 931.375,171.221 \n  933.441,171.963 935.507,172.708 937.573,173.457 939.64,174.209 941.706,174.965 943.772,175.724 945.838,176.486 947.905,177.252 949.971,178.021 952.037,178.793 \n  954.103,179.569 956.169,180.348 958.236,181.13 960.302,181.916 962.368,182.705 964.434,183.498 966.501,184.294 968.567,185.093 970.633,185.896 972.699,186.702 \n  974.766,187.512 976.832,188.325 978.898,189.141 980.964,189.96 983.03,190.783 985.097,191.61 987.163,192.44 989.229,193.273 991.295,194.109 993.362,194.949 \n  995.428,195.793 997.494,196.639 999.56,197.489 1001.63,198.343 1003.69,199.2 1005.76,200.06 1007.83,200.924 1009.89,201.791 1011.96,202.661 1014.02,203.535 \n  1016.09,204.412 1018.16,205.293 1020.22,206.177 1022.29,207.065 1024.36,207.956 1026.42,208.85 1028.49,209.748 1030.55,210.649 1032.62,211.553 1034.69,212.461 \n  1036.75,213.372 1038.82,214.287 1040.88,215.205 1042.95,216.127 1045.02,217.052 1047.08,217.98 1049.15,218.912 1051.22,219.847 1053.28,220.786 1055.35,221.728 \n  1057.41,222.673 1059.48,223.622 1061.55,224.574 1063.61,225.53 1065.68,226.489 1067.75,227.451 1069.81,228.417 1071.88,229.387 1073.94,230.36 1076.01,231.336 \n  1078.08,232.315 1080.14,233.299 1082.21,234.285 1084.28,235.275 1086.34,236.268 1088.41,237.265 1090.47,238.265 1092.54,239.269 1094.61,240.276 1096.67,241.287 \n  1098.74,242.301 1100.81,243.318 1102.87,244.339 1104.94,245.363 1107,246.391 1109.07,247.422 1111.14,248.457 1113.2,249.495 1115.27,250.537 1117.34,251.582 \n  1119.4,252.63 1121.47,253.682 1123.53,254.737 1125.6,255.796 1127.67,256.858 1129.73,257.924 1131.8,258.993 1133.87,260.065 1135.93,261.142 1138,262.221 \n  1140.06,263.304 1142.13,264.39 1144.2,265.48 1146.26,266.574 1148.33,267.67 1150.4,268.771 1152.46,269.874 1154.53,270.981 1156.59,272.092 1158.66,273.206 \n  1160.73,274.324 1162.79,275.445 1164.86,276.569 1166.93,277.697 1168.99,278.829 1171.06,279.964 1173.12,281.102 1175.19,282.244 1177.26,283.389 1179.32,284.538 \n  1181.39,285.69 1183.45,286.846 1185.52,288.005 1187.59,289.168 1189.65,290.334 1191.72,291.504 1193.79,292.677 1195.85,293.854 1197.92,295.034 1199.98,296.217 \n  1202.05,297.405 1204.12,298.595 1206.18,299.789 1208.25,300.987 1210.32,302.188 1212.38,303.393 1214.45,304.601 1216.51,305.812 1218.58,307.027 1220.65,308.246 \n  1222.71,309.468 1224.78,310.693 1226.85,311.922 1228.91,313.155 1230.98,314.391 1233.04,315.631 1235.11,316.874 1237.18,318.12 1239.24,319.37 1241.31,320.624 \n  1243.38,321.881 1245.44,323.141 1247.51,324.406 1249.57,325.673 1251.64,326.944 1253.71,328.219 1255.77,329.497 1257.84,330.779 1259.91,332.064 1261.97,333.353 \n  1264.04,334.645 1266.1,335.941 1268.17,337.24 1270.24,338.543 1272.3,339.849 1274.37,341.159 1276.44,342.472 1278.5,343.789 1280.57,345.109 1282.63,346.433 \n  1284.7,347.761 1286.77,349.092 1288.83,350.426 1290.9,351.764 1292.97,353.106 1295.03,354.451 1297.1,355.8 1299.16,357.152 1301.23,358.508 1303.3,359.867 \n  1305.36,361.23 1307.43,362.596 1309.5,363.966 1311.56,365.339 1313.63,366.716 1315.69,368.097 1317.76,369.481 1319.83,370.868 1321.89,372.26 1323.96,373.654 \n  1326.02,375.052 1328.09,376.454 1330.16,377.86 1332.22,379.269 1334.29,380.681 1336.36,382.097 1338.42,383.517 1340.49,384.94 1342.55,386.366 1344.62,387.797 \n  1346.69,389.23 1348.75,390.668 1350.82,392.109 1352.89,393.553 1354.95,395.001 1357.02,396.453 1359.08,397.908 1361.15,399.367 1363.22,400.829 1365.28,402.295 \n  1367.35,403.765 1369.42,405.238 1371.48,406.714 1373.55,408.194 1375.61,409.678 1377.68,411.166 1379.75,412.656 1381.81,414.151 1383.88,415.649 1385.95,417.151 \n  1388.01,418.656 1390.08,420.165 1392.14,421.677 1394.21,423.193 1396.28,424.713 1398.34,426.236 1400.41,427.763 1402.48,429.293 1404.54,430.827 1406.61,432.364 \n  1408.67,433.906 1410.74,435.45 1412.81,436.999 1414.87,438.551 1416.94,440.106 1419.01,441.665 1421.07,443.228 1423.14,444.794 1425.2,446.364 1427.27,447.938 \n  1429.34,449.515 1431.4,451.095 1433.47,452.68 1435.54,454.268 1437.6,455.859 1439.67,457.454 1441.73,459.053 1443.8,460.655 1445.87,462.261 1447.93,463.871 \n  1450,465.484 1452.07,467.101 1454.13,468.722 1456.2,470.346 1458.26,471.973 1460.33,473.605 1462.4,475.24 1464.46,476.878 1466.53,478.52 1468.59,480.166 \n  1470.66,481.815 1472.73,483.469 1474.79,485.125 1476.86,486.786 1478.93,488.449 1480.99,490.117 1483.06,491.788 1485.12,493.463 1487.19,495.142 1489.26,496.824 \n  1491.32,498.509 1493.39,500.199 1495.46,501.892 1497.52,503.588 1499.59,505.289 1501.65,506.993 1503.72,508.7 1505.79,510.412 1507.85,512.126 1509.92,513.845 \n  1511.99,515.567 1514.05,517.293 1516.12,519.022 1518.18,520.756 1520.25,522.492 1522.32,524.233 1524.38,525.977 1526.45,527.725 1528.52,529.476 1530.58,531.231 \n  1532.65,532.99 1534.71,534.752 1536.78,536.518 1538.85,538.288 1540.91,540.061 1542.98,541.838 1545.05,543.619 1547.11,545.403 1549.18,547.191 1551.24,548.983 \n  1553.31,550.779 1555.38,552.578 1557.44,554.38 1559.51,556.187 1561.58,557.997 1563.64,559.811 1565.71,561.628 1567.77,563.449 1569.84,565.274 1571.91,567.102 \n  1573.97,568.935 1576.04,570.77 1578.11,572.61 1580.17,574.453 1582.24,576.3 1584.3,578.151 1586.37,580.005 1588.44,581.863 1590.5,583.725 1592.57,585.59 \n  1594.63,587.459 1596.7,589.332 1598.77,591.208 1600.83,593.088 1602.9,594.972 1604.97,596.86 1607.03,598.751 1609.1,600.646 1611.16,602.544 1613.23,604.447 \n  1615.3,606.353 1617.36,608.263 1619.43,610.176 1621.5,612.093 1623.56,614.014 1625.63,615.939 1627.69,617.867 1629.76,619.799 1631.83,621.735 1633.89,623.674 \n  1635.96,625.618 1638.03,627.564 1640.09,629.515 1642.16,631.469 1644.22,633.427 1646.29,635.389 1648.36,637.355 1650.42,639.324 1652.49,641.297 1654.56,643.274 \n  1656.62,645.254 1658.69,647.238 1660.75,649.226 1662.82,651.218 1664.89,653.213 1666.95,655.212 1669.02,657.215 1671.09,659.221 1673.15,661.232 1675.22,663.246 \n  1677.28,665.264 1679.35,667.285 1681.42,669.31 1683.48,671.339 1685.55,673.372 1687.62,675.409 1689.68,677.449 1691.75,679.493 1693.81,681.541 1695.88,683.592 \n  1697.95,685.647 1700.01,687.706 1702.08,689.769 1704.15,691.836 1706.21,693.906 1708.28,695.98 1710.34,698.058 1712.41,700.139 1714.48,702.225 1716.54,704.314 \n  1718.61,706.406 1720.68,708.503 1722.74,710.603 1724.81,712.708 1726.87,714.816 1728.94,716.927 1731.01,719.043 1733.07,721.162 1735.14,723.285 1737.2,725.412 \n  1739.27,727.542 1741.34,729.677 1743.4,731.815 1745.47,733.957 1747.54,736.102 1749.6,738.252 1751.67,740.405 1753.73,742.562 1755.8,744.723 1757.87,746.888 \n  1759.93,749.056 1762,751.228 1764.07,753.404 1766.13,755.584 1768.2,757.767 1770.26,759.955 1772.33,762.146 1774.4,764.341 1776.46,766.54 1778.53,768.742 \n  1780.6,770.949 1782.66,773.159 1784.73,775.373 1786.79,777.591 1788.86,779.812 1790.93,782.037 1792.99,784.267 1795.06,786.5 1797.13,788.737 1799.19,790.977 \n  1801.26,793.222 1803.32,795.47 1805.39,797.722 1807.46,799.978 1809.52,802.238 1811.59,804.501 1813.66,806.768 1815.72,809.04 1817.79,811.315 1819.85,813.593 \n  1821.92,815.876 1823.99,818.163 1826.05,820.453 1828.12,822.747 1830.19,825.045 1832.25,827.347 1834.32,829.652 1836.38,831.962 1838.45,834.275 1840.52,836.592 \n  1842.58,838.913 1844.65,841.238 1846.72,843.567 1848.78,845.899 1850.85,848.236 1852.91,850.576 1854.98,852.92 1857.05,855.268 1859.11,857.619 1861.18,859.975 \n  1863.25,862.334 1865.31,864.698 1867.38,867.065 1869.44,869.436 1871.51,871.811 1873.58,874.189 1875.64,876.572 1877.71,878.958 1879.77,881.349 1881.84,883.743 \n  1883.91,886.141 1885.97,888.543 1888.04,890.949 1890.11,893.358 1892.17,895.772 1894.24,898.189 1896.3,900.61 1898.37,903.035 1900.44,905.464 1902.5,907.897 \n  1904.57,910.334 1906.64,912.775 1908.7,915.219 1910.77,917.667 1912.83,920.12 1914.9,922.576 1916.97,925.036 1919.03,927.5 1921.1,929.967 1923.17,932.439 \n  1925.23,934.915 1927.3,937.394 1929.36,939.878 1931.43,942.365 1933.5,944.856 1935.56,947.351 1937.63,949.85 1939.7,952.353 1941.76,954.859 1943.83,957.37 \n  1945.89,959.885 1947.96,962.403 1950.03,964.925 1952.09,967.452 1954.16,969.982 1956.23,972.516 1958.29,975.054 1960.36,977.596 1962.42,980.141 1964.49,982.691 \n  1966.56,985.245 1968.62,987.802 1970.69,990.364 1972.76,992.929 1974.82,995.498 1976.89,998.072 1978.95,1000.65 1981.02,1003.23 1983.09,1005.81 1985.15,1008.4 \n  1987.22,1011 1989.29,1013.59 1991.35,1016.19 1993.42,1018.8 1995.48,1021.41 1997.55,1024.02 1999.62,1026.64 2001.68,1029.26 2003.75,1031.88 2005.82,1034.51 \n  2007.88,1037.14 2009.95,1039.78 2012.01,1042.42 2014.08,1045.06 2016.15,1047.71 2018.21,1050.36 2020.28,1053.02 2022.34,1055.68 2024.41,1058.34 2026.48,1061.01 \n  2028.54,1063.68 2030.61,1066.36 2032.68,1069.04 2034.74,1071.72 2036.81,1074.41 2038.87,1077.1 2040.94,1079.79 2043.01,1082.49 2045.07,1085.2 2047.14,1087.9 \n  2049.21,1090.62 2051.27,1093.33 2053.34,1096.05 2055.4,1098.77 2057.47,1101.5 2059.54,1104.23 2061.6,1106.97 2063.67,1109.71 2065.74,1112.45 2067.8,1115.2 \n  2069.87,1117.95 2071.93,1120.7 2074,1123.46 2076.07,1126.22 2078.13,1128.99 2080.2,1131.76 2082.27,1134.54 2084.33,1137.32 2086.4,1140.1 2088.46,1142.89 \n  2090.53,1145.68 2092.6,1148.47 2094.66,1151.27 2096.73,1154.07 2098.8,1156.88 2100.86,1159.69 2102.93,1162.51 2104.99,1165.33 2107.06,1168.15 2109.13,1170.97 \n  2111.19,1173.81 2113.26,1176.64 2115.33,1179.48 2117.39,1182.32 2119.46,1185.17 2121.52,1188.02 2123.59,1190.88 2125.66,1193.73 2127.72,1196.6 2129.79,1199.47 \n  2131.86,1202.34 2133.92,1205.21 2135.99,1208.09 2138.05,1210.97 2140.12,1213.86 2142.19,1216.75 2144.25,1219.65 2146.32,1222.55 2148.38,1225.45 2150.45,1228.36 \n  2152.52,1231.27 2154.58,1234.18 2156.65,1237.1 2158.72,1240.03 2160.78,1242.95 2162.85,1245.89 2164.91,1248.82 2166.98,1251.76 2169.05,1254.71 2171.11,1257.65 \n  2173.18,1260.61 2175.25,1263.56 2177.31,1266.52 2179.38,1269.49 2181.44,1272.45 2183.51,1275.43 2185.58,1278.4 2187.64,1281.38 2189.71,1284.37 2191.78,1287.35 \n  2193.84,1290.35 2195.91,1293.34 2197.97,1296.34 2200.04,1299.35 2202.11,1302.36 2204.17,1305.37 2206.24,1308.39 2208.31,1311.41 2210.37,1314.43 2212.44,1317.46 \n  2214.5,1320.49 2216.57,1323.53 2218.64,1326.57 2220.7,1329.62 2222.77,1332.67 2224.84,1335.72 2226.9,1338.78 2228.97,1341.84 2231.03,1344.91 2233.1,1347.98 \n  2235.17,1351.05 2237.23,1354.13 2239.3,1357.21 2241.37,1360.3 2243.43,1363.39 2245.5,1366.48 2247.56,1369.58 2249.63,1372.68 2251.7,1375.79 2253.76,1378.9 \n  2255.83,1382.02 2257.9,1385.13 2259.96,1388.26 2262.03,1391.38 2264.09,1394.52 2266.16,1397.65 2268.23,1400.79 2270.29,1403.94 2272.36,1407.08 2274.43,1410.23 \n  2276.49,1413.39 2278.56,1416.55 2280.62,1419.72 2282.69,1422.88 2284.76,1426.06 2286.82,1429.23 2288.89,1432.41 2290.95,1435.6 \n  \"/>\n<path clip-path=\"url(#clip450)\" d=\"\nM1314.01 354.418 L2279.97 354.418 L2279.97 95.2176 L1314.01 95.2176  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1314.01,354.418 2279.97,354.418 2279.97,95.2176 1314.01,95.2176 1314.01,354.418 \n  \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1338.28,147.058 1483.85,147.058 \n  \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1528.62 139.407 L1528.62 143.389 Q1526.82 142.393 1524.99 141.907 Q1523.18 141.398 1521.33 141.398 Q1517.19 141.398 1514.9 144.037 Q1512.6 146.652 1512.6 151.398 Q1512.6 156.143 1514.9 158.782 Q1517.19 161.398 1521.33 161.398 Q1523.18 161.398 1524.99 160.912 Q1526.82 160.402 1528.62 159.407 L1528.62 163.342 Q1526.84 164.176 1524.92 164.592 Q1523.02 165.009 1520.87 165.009 Q1515.01 165.009 1511.56 161.328 Q1508.11 157.648 1508.11 151.398 Q1508.11 145.055 1511.59 141.421 Q1515.08 137.787 1521.15 137.787 Q1523.11 137.787 1524.99 138.203 Q1526.86 138.597 1528.62 139.407 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1537.12 158.458 L1542 158.458 L1542 164.338 L1537.12 164.338 L1537.12 158.458 M1537.12 139.824 L1542 139.824 L1542 145.703 L1537.12 145.703 L1537.12 139.824 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1585.73 139.407 L1585.73 143.389 Q1583.92 142.393 1582.09 141.907 Q1580.29 141.398 1578.44 141.398 Q1574.29 141.398 1572 144.037 Q1569.71 146.652 1569.71 151.398 Q1569.71 156.143 1572 158.782 Q1574.29 161.398 1578.44 161.398 Q1580.29 161.398 1582.09 160.912 Q1583.92 160.402 1585.73 159.407 L1585.73 163.342 Q1583.95 164.176 1582.03 164.592 Q1580.13 165.009 1577.97 165.009 Q1572.12 165.009 1568.67 161.328 Q1565.22 157.648 1565.22 151.398 Q1565.22 145.055 1568.69 141.421 Q1572.19 137.787 1578.25 137.787 Q1580.22 137.787 1582.09 138.203 Q1583.97 138.597 1585.73 139.407 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1603.18 141.398 Q1599.76 141.398 1597.77 144.083 Q1595.77 146.745 1595.77 151.398 Q1595.77 156.051 1597.74 158.736 Q1599.73 161.398 1603.18 161.398 Q1606.59 161.398 1608.58 158.713 Q1610.57 156.027 1610.57 151.398 Q1610.57 146.791 1608.58 144.106 Q1606.59 141.398 1603.18 141.398 M1603.18 137.787 Q1608.74 137.787 1611.91 141.398 Q1615.08 145.009 1615.08 151.398 Q1615.08 157.764 1611.91 161.398 Q1608.74 165.009 1603.18 165.009 Q1597.6 165.009 1594.43 161.398 Q1591.28 157.764 1591.28 151.398 Q1591.28 145.009 1594.43 141.398 Q1597.6 137.787 1603.18 137.787 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1643.69 148.689 L1643.69 164.338 L1639.43 164.338 L1639.43 148.828 Q1639.43 145.148 1638 143.319 Q1636.56 141.49 1633.69 141.49 Q1630.24 141.49 1628.25 143.69 Q1626.26 145.889 1626.26 149.685 L1626.26 164.338 L1621.98 164.338 L1621.98 138.412 L1626.26 138.412 L1626.26 142.44 Q1627.79 140.102 1629.85 138.944 Q1631.93 137.787 1634.64 137.787 Q1639.11 137.787 1641.4 140.565 Q1643.69 143.319 1643.69 148.689 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1668.71 139.176 L1668.71 143.203 Q1666.91 142.277 1664.96 141.815 Q1663.02 141.352 1660.94 141.352 Q1657.77 141.352 1656.17 142.324 Q1654.59 143.296 1654.59 145.24 Q1654.59 146.722 1655.73 147.578 Q1656.86 148.412 1660.29 149.176 L1661.75 149.5 Q1666.28 150.472 1668.18 152.254 Q1670.1 154.014 1670.1 157.185 Q1670.1 160.796 1667.23 162.902 Q1664.39 165.009 1659.39 165.009 Q1657.3 165.009 1655.03 164.592 Q1652.79 164.199 1650.29 163.388 L1650.29 158.99 Q1652.65 160.217 1654.94 160.842 Q1657.23 161.444 1659.48 161.444 Q1662.49 161.444 1664.11 160.426 Q1665.73 159.384 1665.73 157.509 Q1665.73 155.773 1664.55 154.847 Q1663.39 153.921 1659.43 153.064 L1657.95 152.717 Q1653.99 151.884 1652.23 150.171 Q1650.47 148.435 1650.47 145.426 Q1650.47 141.768 1653.07 139.778 Q1655.66 137.787 1660.43 137.787 Q1662.79 137.787 1664.87 138.134 Q1666.96 138.481 1668.71 139.176 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1676.45 154.106 L1676.45 138.412 L1680.71 138.412 L1680.71 153.944 Q1680.71 157.625 1682.14 159.476 Q1683.58 161.305 1686.45 161.305 Q1689.89 161.305 1691.89 159.106 Q1693.9 156.907 1693.9 153.111 L1693.9 138.412 L1698.16 138.412 L1698.16 164.338 L1693.9 164.338 L1693.9 160.356 Q1692.35 162.717 1690.29 163.875 Q1688.25 165.009 1685.54 165.009 Q1681.08 165.009 1678.76 162.231 Q1676.45 159.453 1676.45 154.106 M1687.16 137.787 L1687.16 137.787 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1727.12 143.389 Q1728.71 140.518 1730.94 139.153 Q1733.16 137.787 1736.17 137.787 Q1740.22 137.787 1742.42 140.634 Q1744.62 143.458 1744.62 148.689 L1744.62 164.338 L1740.33 164.338 L1740.33 148.828 Q1740.33 145.102 1739.01 143.296 Q1737.7 141.49 1734.99 141.49 Q1731.68 141.49 1729.76 143.69 Q1727.83 145.889 1727.83 149.685 L1727.83 164.338 L1723.55 164.338 L1723.55 148.828 Q1723.55 145.078 1722.23 143.296 Q1720.91 141.49 1718.16 141.49 Q1714.89 141.49 1712.97 143.713 Q1711.05 145.912 1711.05 149.685 L1711.05 164.338 L1706.77 164.338 L1706.77 138.412 L1711.05 138.412 L1711.05 142.44 Q1712.51 140.055 1714.55 138.921 Q1716.58 137.787 1719.39 137.787 Q1722.21 137.787 1724.18 139.222 Q1726.17 140.657 1727.12 143.389 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1757.23 160.449 L1757.23 174.199 L1752.95 174.199 L1752.95 138.412 L1757.23 138.412 L1757.23 142.347 Q1758.58 140.032 1760.61 138.921 Q1762.67 137.787 1765.52 137.787 Q1770.24 137.787 1773.18 141.537 Q1776.14 145.287 1776.14 151.398 Q1776.14 157.509 1773.18 161.259 Q1770.24 165.009 1765.52 165.009 Q1762.67 165.009 1760.61 163.898 Q1758.58 162.763 1757.23 160.449 M1771.72 151.398 Q1771.72 146.699 1769.78 144.037 Q1767.86 141.352 1764.48 141.352 Q1761.1 141.352 1759.15 144.037 Q1757.23 146.699 1757.23 151.398 Q1757.23 156.097 1759.15 158.782 Q1761.1 161.444 1764.48 161.444 Q1767.86 161.444 1769.78 158.782 Q1771.72 156.097 1771.72 151.398 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1787.42 131.051 L1787.42 138.412 L1796.19 138.412 L1796.19 141.722 L1787.42 141.722 L1787.42 155.796 Q1787.42 158.967 1788.27 159.87 Q1789.15 160.773 1791.82 160.773 L1796.19 160.773 L1796.19 164.338 L1791.82 164.338 Q1786.89 164.338 1785.01 162.509 Q1783.14 160.657 1783.14 155.796 L1783.14 141.722 L1780.01 141.722 L1780.01 138.412 L1783.14 138.412 L1783.14 131.051 L1787.42 131.051 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1801.79 138.412 L1806.05 138.412 L1806.05 164.338 L1801.79 164.338 L1801.79 138.412 M1801.79 128.319 L1806.05 128.319 L1806.05 133.713 L1801.79 133.713 L1801.79 128.319 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1825.01 141.398 Q1821.58 141.398 1819.59 144.083 Q1817.6 146.745 1817.6 151.398 Q1817.6 156.051 1819.57 158.736 Q1821.56 161.398 1825.01 161.398 Q1828.41 161.398 1830.4 158.713 Q1832.39 156.027 1832.39 151.398 Q1832.39 146.791 1830.4 144.106 Q1828.41 141.398 1825.01 141.398 M1825.01 137.787 Q1830.57 137.787 1833.74 141.398 Q1836.91 145.009 1836.91 151.398 Q1836.91 157.764 1833.74 161.398 Q1830.57 165.009 1825.01 165.009 Q1819.43 165.009 1816.26 161.398 Q1813.11 157.764 1813.11 151.398 Q1813.11 145.009 1816.26 141.398 Q1819.43 137.787 1825.01 137.787 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1865.52 148.689 L1865.52 164.338 L1861.26 164.338 L1861.26 148.828 Q1861.26 145.148 1859.82 143.319 Q1858.39 141.49 1855.52 141.49 Q1852.07 141.49 1850.08 143.69 Q1848.09 145.889 1848.09 149.685 L1848.09 164.338 L1843.81 164.338 L1843.81 138.412 L1848.09 138.412 L1848.09 142.44 Q1849.62 140.102 1851.68 138.944 Q1853.76 137.787 1856.47 137.787 Q1860.94 137.787 1863.23 140.565 Q1865.52 143.319 1865.52 148.689 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1875.1 158.458 L1879.99 158.458 L1879.99 162.439 L1876.19 169.847 L1873.2 169.847 L1875.1 162.439 L1875.1 158.458 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1904.34 129.778 L1909.01 129.778 L1909.01 164.338 L1904.34 164.338 L1904.34 129.778 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1939.69 148.689 L1939.69 164.338 L1935.43 164.338 L1935.43 148.828 Q1935.43 145.148 1933.99 143.319 Q1932.56 141.49 1929.69 141.49 Q1926.24 141.49 1924.25 143.69 Q1922.25 145.889 1922.25 149.685 L1922.25 164.338 L1917.97 164.338 L1917.97 138.412 L1922.25 138.412 L1922.25 142.44 Q1923.78 140.102 1925.84 138.944 Q1927.93 137.787 1930.63 137.787 Q1935.1 137.787 1937.39 140.565 Q1939.69 143.319 1939.69 148.689 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1961.31 128.319 L1961.31 131.861 L1957.23 131.861 Q1954.94 131.861 1954.04 132.787 Q1953.16 133.713 1953.16 136.12 L1953.16 138.412 L1960.17 138.412 L1960.17 141.722 L1953.16 141.722 L1953.16 164.338 L1948.87 164.338 L1948.87 141.722 L1944.8 141.722 L1944.8 138.412 L1948.87 138.412 L1948.87 136.606 Q1948.87 132.278 1950.89 130.31 Q1952.9 128.319 1957.28 128.319 L1961.31 128.319 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1964.87 138.412 L1969.13 138.412 L1969.13 164.338 L1964.87 164.338 L1964.87 138.412 M1964.87 128.319 L1969.13 128.319 L1969.13 133.713 L1964.87 133.713 L1964.87 128.319 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1999.59 148.689 L1999.59 164.338 L1995.33 164.338 L1995.33 148.828 Q1995.33 145.148 1993.9 143.319 Q1992.46 141.49 1989.59 141.49 Q1986.14 141.49 1984.15 143.69 Q1982.16 145.889 1982.16 149.685 L1982.16 164.338 L1977.88 164.338 L1977.88 138.412 L1982.16 138.412 L1982.16 142.44 Q1983.69 140.102 1985.75 138.944 Q1987.83 137.787 1990.54 137.787 Q1995.01 137.787 1997.3 140.565 Q1999.59 143.319 1999.59 148.689 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2008.09 138.412 L2012.35 138.412 L2012.35 164.338 L2008.09 164.338 L2008.09 138.412 M2008.09 128.319 L2012.35 128.319 L2012.35 133.713 L2008.09 133.713 L2008.09 128.319 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2025.47 131.051 L2025.47 138.412 L2034.24 138.412 L2034.24 141.722 L2025.47 141.722 L2025.47 155.796 Q2025.47 158.967 2026.33 159.87 Q2027.21 160.773 2029.87 160.773 L2034.24 160.773 L2034.24 164.338 L2029.87 164.338 Q2024.94 164.338 2023.06 162.509 Q2021.19 160.657 2021.19 155.796 L2021.19 141.722 L2018.06 141.722 L2018.06 138.412 L2021.19 138.412 L2021.19 131.051 L2025.47 131.051 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2062.02 150.31 L2062.02 152.393 L2042.44 152.393 Q2042.72 156.791 2045.08 159.106 Q2047.46 161.398 2051.7 161.398 Q2054.15 161.398 2056.44 160.796 Q2058.76 160.194 2061.03 158.99 L2061.03 163.018 Q2058.74 163.99 2056.33 164.5 Q2053.92 165.009 2051.44 165.009 Q2045.24 165.009 2041.61 161.398 Q2037.99 157.787 2037.99 151.629 Q2037.99 145.264 2041.42 141.537 Q2044.87 137.787 2050.7 137.787 Q2055.93 137.787 2058.97 141.166 Q2062.02 144.523 2062.02 150.31 M2057.76 149.06 Q2057.72 145.565 2055.8 143.481 Q2053.9 141.398 2050.75 141.398 Q2047.18 141.398 2045.03 143.412 Q2042.9 145.426 2042.58 149.083 L2057.76 149.06 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2083.23 132.949 Q2078.13 132.949 2075.12 136.745 Q2072.14 140.541 2072.14 147.092 Q2072.14 153.62 2075.12 157.416 Q2078.13 161.213 2083.23 161.213 Q2088.32 161.213 2091.28 157.416 Q2094.27 153.62 2094.27 147.092 Q2094.27 140.541 2091.28 136.745 Q2088.32 132.949 2083.23 132.949 M2083.23 129.153 Q2090.49 129.153 2094.85 134.037 Q2099.2 138.898 2099.2 147.092 Q2099.2 155.264 2094.85 160.148 Q2090.49 165.009 2083.23 165.009 Q2075.93 165.009 2071.56 160.148 Q2067.21 155.287 2067.21 147.092 Q2067.21 138.898 2071.56 134.037 Q2075.93 129.153 2083.23 129.153 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2110.45 160.449 L2110.45 174.199 L2106.17 174.199 L2106.17 138.412 L2110.45 138.412 L2110.45 142.347 Q2111.79 140.032 2113.83 138.921 Q2115.89 137.787 2118.74 137.787 Q2123.46 137.787 2126.4 141.537 Q2129.36 145.287 2129.36 151.398 Q2129.36 157.509 2126.4 161.259 Q2123.46 165.009 2118.74 165.009 Q2115.89 165.009 2113.83 163.898 Q2111.79 162.763 2110.45 160.449 M2124.94 151.398 Q2124.94 146.699 2122.99 144.037 Q2121.07 141.352 2117.69 141.352 Q2114.31 141.352 2112.37 144.037 Q2110.45 146.699 2110.45 151.398 Q2110.45 156.097 2112.37 158.782 Q2114.31 161.444 2117.69 161.444 Q2121.07 161.444 2122.99 158.782 Q2124.94 156.097 2124.94 151.398 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2140.63 131.051 L2140.63 138.412 L2149.41 138.412 L2149.41 141.722 L2140.63 141.722 L2140.63 155.796 Q2140.63 158.967 2141.49 159.87 Q2142.37 160.773 2145.03 160.773 L2149.41 160.773 L2149.41 164.338 L2145.03 164.338 Q2140.1 164.338 2138.23 162.509 Q2136.35 160.657 2136.35 155.796 L2136.35 141.722 L2133.23 141.722 L2133.23 138.412 L2136.35 138.412 L2136.35 131.051 L2140.63 131.051 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#009af9; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  1338.28,198.898 1483.85,198.898 \n  \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1528.62 191.247 L1528.62 195.229 Q1526.82 194.233 1524.99 193.747 Q1523.18 193.238 1521.33 193.238 Q1517.19 193.238 1514.9 195.877 Q1512.6 198.492 1512.6 203.238 Q1512.6 207.983 1514.9 210.622 Q1517.19 213.238 1521.33 213.238 Q1523.18 213.238 1524.99 212.752 Q1526.82 212.242 1528.62 211.247 L1528.62 215.182 Q1526.84 216.016 1524.92 216.432 Q1523.02 216.849 1520.87 216.849 Q1515.01 216.849 1511.56 213.168 Q1508.11 209.488 1508.11 203.238 Q1508.11 196.895 1511.59 193.261 Q1515.08 189.627 1521.15 189.627 Q1523.11 189.627 1524.99 190.043 Q1526.86 190.437 1528.62 191.247 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1537.12 210.298 L1542 210.298 L1542 216.178 L1537.12 216.178 L1537.12 210.298 M1537.12 191.664 L1542 191.664 L1542 197.543 L1537.12 197.543 L1537.12 191.664 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1585.73 191.247 L1585.73 195.229 Q1583.92 194.233 1582.09 193.747 Q1580.29 193.238 1578.44 193.238 Q1574.29 193.238 1572 195.877 Q1569.71 198.492 1569.71 203.238 Q1569.71 207.983 1572 210.622 Q1574.29 213.238 1578.44 213.238 Q1580.29 213.238 1582.09 212.752 Q1583.92 212.242 1585.73 211.247 L1585.73 215.182 Q1583.95 216.016 1582.03 216.432 Q1580.13 216.849 1577.97 216.849 Q1572.12 216.849 1568.67 213.168 Q1565.22 209.488 1565.22 203.238 Q1565.22 196.895 1568.69 193.261 Q1572.19 189.627 1578.25 189.627 Q1580.22 189.627 1582.09 190.043 Q1583.97 190.437 1585.73 191.247 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1603.18 193.238 Q1599.76 193.238 1597.77 195.923 Q1595.77 198.585 1595.77 203.238 Q1595.77 207.891 1597.74 210.576 Q1599.73 213.238 1603.18 213.238 Q1606.59 213.238 1608.58 210.553 Q1610.57 207.867 1610.57 203.238 Q1610.57 198.631 1608.58 195.946 Q1606.59 193.238 1603.18 193.238 M1603.18 189.627 Q1608.74 189.627 1611.91 193.238 Q1615.08 196.849 1615.08 203.238 Q1615.08 209.604 1611.91 213.238 Q1608.74 216.849 1603.18 216.849 Q1597.6 216.849 1594.43 213.238 Q1591.28 209.604 1591.28 203.238 Q1591.28 196.849 1594.43 193.238 Q1597.6 189.627 1603.18 189.627 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1643.69 200.529 L1643.69 216.178 L1639.43 216.178 L1639.43 200.668 Q1639.43 196.988 1638 195.159 Q1636.56 193.33 1633.69 193.33 Q1630.24 193.33 1628.25 195.53 Q1626.26 197.729 1626.26 201.525 L1626.26 216.178 L1621.98 216.178 L1621.98 190.252 L1626.26 190.252 L1626.26 194.28 Q1627.79 191.942 1629.85 190.784 Q1631.93 189.627 1634.64 189.627 Q1639.11 189.627 1641.4 192.405 Q1643.69 195.159 1643.69 200.529 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1668.71 191.016 L1668.71 195.043 Q1666.91 194.117 1664.96 193.655 Q1663.02 193.192 1660.94 193.192 Q1657.77 193.192 1656.17 194.164 Q1654.59 195.136 1654.59 197.08 Q1654.59 198.562 1655.73 199.418 Q1656.86 200.252 1660.29 201.016 L1661.75 201.34 Q1666.28 202.312 1668.18 204.094 Q1670.1 205.854 1670.1 209.025 Q1670.1 212.636 1667.23 214.742 Q1664.39 216.849 1659.39 216.849 Q1657.3 216.849 1655.03 216.432 Q1652.79 216.039 1650.29 215.228 L1650.29 210.83 Q1652.65 212.057 1654.94 212.682 Q1657.23 213.284 1659.48 213.284 Q1662.49 213.284 1664.11 212.266 Q1665.73 211.224 1665.73 209.349 Q1665.73 207.613 1664.55 206.687 Q1663.39 205.761 1659.43 204.904 L1657.95 204.557 Q1653.99 203.724 1652.23 202.011 Q1650.47 200.275 1650.47 197.266 Q1650.47 193.608 1653.07 191.618 Q1655.66 189.627 1660.43 189.627 Q1662.79 189.627 1664.87 189.974 Q1666.96 190.321 1668.71 191.016 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1676.45 205.946 L1676.45 190.252 L1680.71 190.252 L1680.71 205.784 Q1680.71 209.465 1682.14 211.316 Q1683.58 213.145 1686.45 213.145 Q1689.89 213.145 1691.89 210.946 Q1693.9 208.747 1693.9 204.951 L1693.9 190.252 L1698.16 190.252 L1698.16 216.178 L1693.9 216.178 L1693.9 212.196 Q1692.35 214.557 1690.29 215.715 Q1688.25 216.849 1685.54 216.849 Q1681.08 216.849 1678.76 214.071 Q1676.45 211.293 1676.45 205.946 M1687.16 189.627 L1687.16 189.627 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1727.12 195.229 Q1728.71 192.358 1730.94 190.993 Q1733.16 189.627 1736.17 189.627 Q1740.22 189.627 1742.42 192.474 Q1744.62 195.298 1744.62 200.529 L1744.62 216.178 L1740.33 216.178 L1740.33 200.668 Q1740.33 196.942 1739.01 195.136 Q1737.7 193.33 1734.99 193.33 Q1731.68 193.33 1729.76 195.53 Q1727.83 197.729 1727.83 201.525 L1727.83 216.178 L1723.55 216.178 L1723.55 200.668 Q1723.55 196.918 1722.23 195.136 Q1720.91 193.33 1718.16 193.33 Q1714.89 193.33 1712.97 195.553 Q1711.05 197.752 1711.05 201.525 L1711.05 216.178 L1706.77 216.178 L1706.77 190.252 L1711.05 190.252 L1711.05 194.28 Q1712.51 191.895 1714.55 190.761 Q1716.58 189.627 1719.39 189.627 Q1722.21 189.627 1724.18 191.062 Q1726.17 192.497 1727.12 195.229 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1757.23 212.289 L1757.23 226.039 L1752.95 226.039 L1752.95 190.252 L1757.23 190.252 L1757.23 194.187 Q1758.58 191.872 1760.61 190.761 Q1762.67 189.627 1765.52 189.627 Q1770.24 189.627 1773.18 193.377 Q1776.14 197.127 1776.14 203.238 Q1776.14 209.349 1773.18 213.099 Q1770.24 216.849 1765.52 216.849 Q1762.67 216.849 1760.61 215.738 Q1758.58 214.603 1757.23 212.289 M1771.72 203.238 Q1771.72 198.539 1769.78 195.877 Q1767.86 193.192 1764.48 193.192 Q1761.1 193.192 1759.15 195.877 Q1757.23 198.539 1757.23 203.238 Q1757.23 207.937 1759.15 210.622 Q1761.1 213.284 1764.48 213.284 Q1767.86 213.284 1769.78 210.622 Q1771.72 207.937 1771.72 203.238 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1787.42 182.891 L1787.42 190.252 L1796.19 190.252 L1796.19 193.562 L1787.42 193.562 L1787.42 207.636 Q1787.42 210.807 1788.27 211.71 Q1789.15 212.613 1791.82 212.613 L1796.19 212.613 L1796.19 216.178 L1791.82 216.178 Q1786.89 216.178 1785.01 214.349 Q1783.14 212.497 1783.14 207.636 L1783.14 193.562 L1780.01 193.562 L1780.01 190.252 L1783.14 190.252 L1783.14 182.891 L1787.42 182.891 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1801.79 190.252 L1806.05 190.252 L1806.05 216.178 L1801.79 216.178 L1801.79 190.252 M1801.79 180.159 L1806.05 180.159 L1806.05 185.553 L1801.79 185.553 L1801.79 180.159 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1825.01 193.238 Q1821.58 193.238 1819.59 195.923 Q1817.6 198.585 1817.6 203.238 Q1817.6 207.891 1819.57 210.576 Q1821.56 213.238 1825.01 213.238 Q1828.41 213.238 1830.4 210.553 Q1832.39 207.867 1832.39 203.238 Q1832.39 198.631 1830.4 195.946 Q1828.41 193.238 1825.01 193.238 M1825.01 189.627 Q1830.57 189.627 1833.74 193.238 Q1836.91 196.849 1836.91 203.238 Q1836.91 209.604 1833.74 213.238 Q1830.57 216.849 1825.01 216.849 Q1819.43 216.849 1816.26 213.238 Q1813.11 209.604 1813.11 203.238 Q1813.11 196.849 1816.26 193.238 Q1819.43 189.627 1825.01 189.627 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1865.52 200.529 L1865.52 216.178 L1861.26 216.178 L1861.26 200.668 Q1861.26 196.988 1859.82 195.159 Q1858.39 193.33 1855.52 193.33 Q1852.07 193.33 1850.08 195.53 Q1848.09 197.729 1848.09 201.525 L1848.09 216.178 L1843.81 216.178 L1843.81 190.252 L1848.09 190.252 L1848.09 194.28 Q1849.62 191.942 1851.68 190.784 Q1853.76 189.627 1856.47 189.627 Q1860.94 189.627 1863.23 192.405 Q1865.52 195.159 1865.52 200.529 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1875.1 210.298 L1879.99 210.298 L1879.99 214.279 L1876.19 221.687 L1873.2 221.687 L1875.1 214.279 L1875.1 210.298 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1922.81 191.247 L1922.81 195.229 Q1921 194.233 1919.18 193.747 Q1917.37 193.238 1915.52 193.238 Q1911.38 193.238 1909.08 195.877 Q1906.79 198.492 1906.79 203.238 Q1906.79 207.983 1909.08 210.622 Q1911.38 213.238 1915.52 213.238 Q1917.37 213.238 1919.18 212.752 Q1921 212.242 1922.81 211.247 L1922.81 215.182 Q1921.03 216.016 1919.11 216.432 Q1917.21 216.849 1915.06 216.849 Q1909.2 216.849 1905.75 213.168 Q1902.3 209.488 1902.3 203.238 Q1902.3 196.895 1905.77 193.261 Q1909.27 189.627 1915.33 189.627 Q1917.3 189.627 1919.18 190.043 Q1921.05 190.437 1922.81 191.247 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1930.22 180.159 L1934.48 180.159 L1934.48 216.178 L1930.22 216.178 L1930.22 180.159 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1953.44 193.238 Q1950.01 193.238 1948.02 195.923 Q1946.03 198.585 1946.03 203.238 Q1946.03 207.891 1948 210.576 Q1949.99 213.238 1953.44 213.238 Q1956.84 213.238 1958.83 210.553 Q1960.82 207.867 1960.82 203.238 Q1960.82 198.631 1958.83 195.946 Q1956.84 193.238 1953.44 193.238 M1953.44 189.627 Q1958.99 189.627 1962.16 193.238 Q1965.33 196.849 1965.33 203.238 Q1965.33 209.604 1962.16 213.238 Q1958.99 216.849 1953.44 216.849 Q1947.86 216.849 1944.69 213.238 Q1941.54 209.604 1941.54 203.238 Q1941.54 196.849 1944.69 193.238 Q1947.86 189.627 1953.44 189.627 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1988.92 191.016 L1988.92 195.043 Q1987.12 194.117 1985.17 193.655 Q1983.23 193.192 1981.14 193.192 Q1977.97 193.192 1976.37 194.164 Q1974.8 195.136 1974.8 197.08 Q1974.8 198.562 1975.93 199.418 Q1977.07 200.252 1980.5 201.016 L1981.95 201.34 Q1986.49 202.312 1988.39 204.094 Q1990.31 205.854 1990.31 209.025 Q1990.31 212.636 1987.44 214.742 Q1984.59 216.849 1979.59 216.849 Q1977.51 216.849 1975.24 216.432 Q1973 216.039 1970.5 215.228 L1970.5 210.83 Q1972.86 212.057 1975.15 212.682 Q1977.44 213.284 1979.68 213.284 Q1982.69 213.284 1984.31 212.266 Q1985.93 211.224 1985.93 209.349 Q1985.93 207.613 1984.75 206.687 Q1983.6 205.761 1979.64 204.904 L1978.16 204.557 Q1974.2 203.724 1972.44 202.011 Q1970.68 200.275 1970.68 197.266 Q1970.68 193.608 1973.27 191.618 Q1975.87 189.627 1980.63 189.627 Q1983 189.627 1985.08 189.974 Q1987.16 190.321 1988.92 191.016 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2019.27 202.15 L2019.27 204.233 L1999.68 204.233 Q1999.96 208.631 2002.32 210.946 Q2004.71 213.238 2008.94 213.238 Q2011.4 213.238 2013.69 212.636 Q2016 212.034 2018.27 210.83 L2018.27 214.858 Q2015.98 215.83 2013.57 216.34 Q2011.17 216.849 2008.69 216.849 Q2002.49 216.849 1998.85 213.238 Q1995.24 209.627 1995.24 203.469 Q1995.24 197.104 1998.67 193.377 Q2002.12 189.627 2007.95 189.627 Q2013.18 189.627 2016.21 193.006 Q2019.27 196.363 2019.27 202.15 M2015.01 200.9 Q2014.96 197.405 2013.04 195.321 Q2011.14 193.238 2007.99 193.238 Q2004.43 193.238 2002.28 195.252 Q2000.15 197.266 1999.82 200.923 L2015.01 200.9 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2043.32 194.187 L2043.32 180.159 L2047.58 180.159 L2047.58 216.178 L2043.32 216.178 L2043.32 212.289 Q2041.98 214.603 2039.92 215.738 Q2037.88 216.849 2035.01 216.849 Q2030.31 216.849 2027.35 213.099 Q2024.41 209.349 2024.41 203.238 Q2024.41 197.127 2027.35 193.377 Q2030.31 189.627 2035.01 189.627 Q2037.88 189.627 2039.92 190.761 Q2041.98 191.872 2043.32 194.187 M2028.81 203.238 Q2028.81 207.937 2030.73 210.622 Q2032.67 213.284 2036.05 213.284 Q2039.43 213.284 2041.37 210.622 Q2043.32 207.937 2043.32 203.238 Q2043.32 198.539 2041.37 195.877 Q2039.43 193.192 2036.05 193.192 Q2032.67 193.192 2030.73 195.877 Q2028.81 198.539 2028.81 203.238 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2084.55 180.159 L2084.55 183.701 L2080.47 183.701 Q2078.18 183.701 2077.28 184.627 Q2076.4 185.553 2076.4 187.96 L2076.4 190.252 L2083.41 190.252 L2083.41 193.562 L2076.4 193.562 L2076.4 216.178 L2072.12 216.178 L2072.12 193.562 L2068.04 193.562 L2068.04 190.252 L2072.12 190.252 L2072.12 188.446 Q2072.12 184.118 2074.13 182.15 Q2076.14 180.159 2080.52 180.159 L2084.55 180.159 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2098.16 193.238 Q2094.73 193.238 2092.74 195.923 Q2090.75 198.585 2090.75 203.238 Q2090.75 207.891 2092.72 210.576 Q2094.71 213.238 2098.16 213.238 Q2101.56 213.238 2103.55 210.553 Q2105.54 207.867 2105.54 203.238 Q2105.54 198.631 2103.55 195.946 Q2101.56 193.238 2098.16 193.238 M2098.16 189.627 Q2103.71 189.627 2106.88 193.238 Q2110.05 196.849 2110.05 203.238 Q2110.05 209.604 2106.88 213.238 Q2103.71 216.849 2098.16 216.849 Q2092.58 216.849 2089.41 213.238 Q2086.26 209.604 2086.26 203.238 Q2086.26 196.849 2089.41 193.238 Q2092.58 189.627 2098.16 189.627 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2132.14 194.233 Q2131.42 193.817 2130.56 193.631 Q2129.73 193.423 2128.71 193.423 Q2125.1 193.423 2123.16 195.784 Q2121.24 198.122 2121.24 202.52 L2121.24 216.178 L2116.95 216.178 L2116.95 190.252 L2121.24 190.252 L2121.24 194.28 Q2122.58 191.918 2124.73 190.784 Q2126.88 189.627 2129.96 189.627 Q2130.4 189.627 2130.93 189.696 Q2131.47 189.743 2132.11 189.858 L2132.14 194.233 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2155.96 195.229 Q2157.55 192.358 2159.78 190.993 Q2162 189.627 2165.01 189.627 Q2169.06 189.627 2171.26 192.474 Q2173.46 195.298 2173.46 200.529 L2173.46 216.178 L2169.17 216.178 L2169.17 200.668 Q2169.17 196.942 2167.86 195.136 Q2166.54 193.33 2163.83 193.33 Q2160.52 193.33 2158.6 195.53 Q2156.67 197.729 2156.67 201.525 L2156.67 216.178 L2152.39 216.178 L2152.39 200.668 Q2152.39 196.918 2151.07 195.136 Q2149.75 193.33 2147 193.33 Q2143.74 193.33 2141.81 195.553 Q2139.89 197.752 2139.89 201.525 L2139.89 216.178 L2135.61 216.178 L2135.61 190.252 L2139.89 190.252 L2139.89 194.28 Q2141.35 191.895 2143.39 190.761 Q2145.42 189.627 2148.23 189.627 Q2151.05 189.627 2153.02 191.062 Q2155.01 192.497 2155.96 195.229 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#c271d2; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1338.28,250.738 1483.85,250.738 \n  \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1512.79 251.513 L1512.79 264.175 L1520.29 264.175 Q1524.06 264.175 1525.87 262.624 Q1527.7 261.05 1527.7 257.832 Q1527.7 254.592 1525.87 253.064 Q1524.06 251.513 1520.29 251.513 L1512.79 251.513 M1512.79 237.3 L1512.79 247.717 L1519.71 247.717 Q1523.14 247.717 1524.8 246.444 Q1526.49 245.147 1526.49 242.508 Q1526.49 239.893 1524.8 238.596 Q1523.14 237.3 1519.71 237.3 L1512.79 237.3 M1508.11 233.458 L1520.06 233.458 Q1525.4 233.458 1528.3 235.68 Q1531.19 237.902 1531.19 241.999 Q1531.19 245.17 1529.71 247.045 Q1528.23 248.92 1525.36 249.383 Q1528.81 250.124 1530.71 252.485 Q1532.63 254.823 1532.63 258.342 Q1532.63 262.971 1529.48 265.494 Q1526.33 268.018 1520.52 268.018 L1508.11 268.018 L1508.11 233.458 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1541.54 262.138 L1546.42 262.138 L1546.42 268.018 L1541.54 268.018 L1541.54 262.138 M1541.54 243.504 L1546.42 243.504 L1546.42 249.383 L1541.54 249.383 L1541.54 243.504 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1569.02 242.092 L1573.28 242.092 L1578.6 262.323 L1583.9 242.092 L1588.92 242.092 L1594.25 262.323 L1599.55 242.092 L1603.81 242.092 L1597.02 268.018 L1592 268.018 L1586.42 246.768 L1580.82 268.018 L1575.8 268.018 L1569.02 242.092 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1632.44 253.99 L1632.44 256.073 L1612.86 256.073 Q1613.14 260.471 1615.5 262.786 Q1617.88 265.078 1622.12 265.078 Q1624.57 265.078 1626.86 264.476 Q1629.18 263.874 1631.45 262.67 L1631.45 266.698 Q1629.15 267.67 1626.75 268.18 Q1624.34 268.689 1621.86 268.689 Q1615.66 268.689 1612.02 265.078 Q1608.41 261.467 1608.41 255.309 Q1608.41 248.944 1611.84 245.217 Q1615.29 241.467 1621.12 241.467 Q1626.35 241.467 1629.39 244.846 Q1632.44 248.203 1632.44 253.99 M1628.18 252.74 Q1628.14 249.245 1626.21 247.161 Q1624.32 245.078 1621.17 245.078 Q1617.6 245.078 1615.45 247.092 Q1613.32 249.106 1613 252.763 L1628.18 252.74 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1651.21 254.985 Q1646.05 254.985 1644.06 256.166 Q1642.07 257.346 1642.07 260.194 Q1642.07 262.462 1643.55 263.805 Q1645.06 265.124 1647.63 265.124 Q1651.17 265.124 1653.3 262.624 Q1655.45 260.101 1655.45 255.934 L1655.45 254.985 L1651.21 254.985 M1659.71 253.226 L1659.71 268.018 L1655.45 268.018 L1655.45 264.082 Q1653.99 266.443 1651.82 267.578 Q1649.64 268.689 1646.49 268.689 Q1642.51 268.689 1640.15 266.467 Q1637.81 264.221 1637.81 260.471 Q1637.81 256.096 1640.73 253.874 Q1643.67 251.652 1649.48 251.652 L1655.45 251.652 L1655.45 251.235 Q1655.45 248.295 1653.51 246.698 Q1651.58 245.078 1648.09 245.078 Q1645.87 245.078 1643.76 245.61 Q1641.65 246.143 1639.71 247.207 L1639.71 243.272 Q1642.05 242.37 1644.25 241.93 Q1646.45 241.467 1648.53 241.467 Q1654.15 241.467 1656.93 244.383 Q1659.71 247.3 1659.71 253.226 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1668.48 231.999 L1672.74 231.999 L1672.74 268.018 L1668.48 268.018 L1668.48 231.999 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1685.87 234.731 L1685.87 242.092 L1694.64 242.092 L1694.64 245.402 L1685.87 245.402 L1685.87 259.476 Q1685.87 262.647 1686.72 263.55 Q1687.6 264.453 1690.27 264.453 L1694.64 264.453 L1694.64 268.018 L1690.27 268.018 Q1685.33 268.018 1683.46 266.189 Q1681.58 264.337 1681.58 259.476 L1681.58 245.402 L1678.46 245.402 L1678.46 242.092 L1681.58 242.092 L1681.58 234.731 L1685.87 234.731 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1721.79 252.369 L1721.79 268.018 L1717.53 268.018 L1717.53 252.508 Q1717.53 248.828 1716.1 246.999 Q1714.66 245.17 1711.79 245.17 Q1708.34 245.17 1706.35 247.37 Q1704.36 249.569 1704.36 253.365 L1704.36 268.018 L1700.08 268.018 L1700.08 231.999 L1704.36 231.999 L1704.36 246.12 Q1705.89 243.782 1707.95 242.624 Q1710.03 241.467 1712.74 241.467 Q1717.21 241.467 1719.5 244.245 Q1721.79 246.999 1721.79 252.369 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1763.97 255.078 Q1763.97 250.379 1762.02 247.717 Q1760.1 245.032 1756.72 245.032 Q1753.34 245.032 1751.4 247.717 Q1749.48 250.379 1749.48 255.078 Q1749.48 259.777 1751.4 262.462 Q1753.34 265.124 1756.72 265.124 Q1760.1 265.124 1762.02 262.462 Q1763.97 259.777 1763.97 255.078 M1749.48 246.027 Q1750.82 243.712 1752.86 242.601 Q1754.92 241.467 1757.76 241.467 Q1762.49 241.467 1765.43 245.217 Q1768.39 248.967 1768.39 255.078 Q1768.39 261.189 1765.43 264.939 Q1762.49 268.689 1757.76 268.689 Q1754.92 268.689 1752.86 267.578 Q1750.82 266.443 1749.48 264.129 L1749.48 268.018 L1745.2 268.018 L1745.2 231.999 L1749.48 231.999 L1749.48 246.027 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1787.23 254.985 Q1782.07 254.985 1780.08 256.166 Q1778.09 257.346 1778.09 260.194 Q1778.09 262.462 1779.57 263.805 Q1781.07 265.124 1783.64 265.124 Q1787.19 265.124 1789.32 262.624 Q1791.47 260.101 1791.47 255.934 L1791.47 254.985 L1787.23 254.985 M1795.73 253.226 L1795.73 268.018 L1791.47 268.018 L1791.47 264.082 Q1790.01 266.443 1787.83 267.578 Q1785.66 268.689 1782.51 268.689 Q1778.53 268.689 1776.17 266.467 Q1773.83 264.221 1773.83 260.471 Q1773.83 256.096 1776.75 253.874 Q1779.69 251.652 1785.5 251.652 L1791.47 251.652 L1791.47 251.235 Q1791.47 248.295 1789.52 246.698 Q1787.6 245.078 1784.11 245.078 Q1781.89 245.078 1779.78 245.61 Q1777.67 246.143 1775.73 247.207 L1775.73 243.272 Q1778.07 242.37 1780.26 241.93 Q1782.46 241.467 1784.55 241.467 Q1790.17 241.467 1792.95 244.383 Q1795.73 247.3 1795.73 253.226 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1804.5 231.999 L1808.76 231.999 L1808.76 268.018 L1804.5 268.018 L1804.5 231.999 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1829.45 254.985 Q1824.29 254.985 1822.3 256.166 Q1820.31 257.346 1820.31 260.194 Q1820.31 262.462 1821.79 263.805 Q1823.3 265.124 1825.87 265.124 Q1829.41 265.124 1831.54 262.624 Q1833.69 260.101 1833.69 255.934 L1833.69 254.985 L1829.45 254.985 M1837.95 253.226 L1837.95 268.018 L1833.69 268.018 L1833.69 264.082 Q1832.23 266.443 1830.06 267.578 Q1827.88 268.689 1824.73 268.689 Q1820.75 268.689 1818.39 266.467 Q1816.05 264.221 1816.05 260.471 Q1816.05 256.096 1818.97 253.874 Q1821.91 251.652 1827.72 251.652 L1833.69 251.652 L1833.69 251.235 Q1833.69 248.295 1831.75 246.698 Q1829.82 245.078 1826.33 245.078 Q1824.11 245.078 1822 245.61 Q1819.89 246.143 1817.95 247.207 L1817.95 243.272 Q1820.29 242.37 1822.49 241.93 Q1824.69 241.467 1826.77 241.467 Q1832.39 241.467 1835.17 244.383 Q1837.95 247.3 1837.95 253.226 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1868.27 252.369 L1868.27 268.018 L1864.01 268.018 L1864.01 252.508 Q1864.01 248.828 1862.58 246.999 Q1861.14 245.17 1858.27 245.17 Q1854.82 245.17 1852.83 247.37 Q1850.84 249.569 1850.84 253.365 L1850.84 268.018 L1846.56 268.018 L1846.56 242.092 L1850.84 242.092 L1850.84 246.12 Q1852.37 243.782 1854.43 242.624 Q1856.51 241.467 1859.22 241.467 Q1863.69 241.467 1865.98 244.245 Q1868.27 246.999 1868.27 252.369 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1895.43 243.087 L1895.43 247.069 Q1893.62 246.073 1891.79 245.587 Q1889.99 245.078 1888.13 245.078 Q1883.99 245.078 1881.7 247.717 Q1879.41 250.332 1879.41 255.078 Q1879.41 259.823 1881.7 262.462 Q1883.99 265.078 1888.13 265.078 Q1889.99 265.078 1891.79 264.592 Q1893.62 264.082 1895.43 263.087 L1895.43 267.022 Q1893.64 267.856 1891.72 268.272 Q1889.82 268.689 1887.67 268.689 Q1881.82 268.689 1878.37 265.008 Q1874.92 261.328 1874.92 255.078 Q1874.92 248.735 1878.39 245.101 Q1881.88 241.467 1887.95 241.467 Q1889.92 241.467 1891.79 241.883 Q1893.67 242.277 1895.43 243.087 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1925.01 253.99 L1925.01 256.073 L1905.43 256.073 Q1905.7 260.471 1908.06 262.786 Q1910.45 265.078 1914.69 265.078 Q1917.14 265.078 1919.43 264.476 Q1921.75 263.874 1924.01 262.67 L1924.01 266.698 Q1921.72 267.67 1919.31 268.18 Q1916.91 268.689 1914.43 268.689 Q1908.23 268.689 1904.59 265.078 Q1900.98 261.467 1900.98 255.309 Q1900.98 248.944 1904.41 245.217 Q1907.86 241.467 1913.69 241.467 Q1918.92 241.467 1921.95 244.846 Q1925.01 248.203 1925.01 253.99 M1920.75 252.74 Q1920.7 249.245 1918.78 247.161 Q1916.88 245.078 1913.74 245.078 Q1910.17 245.078 1908.02 247.092 Q1905.89 249.106 1905.56 252.763 L1920.75 252.74 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1933.09 262.138 L1937.97 262.138 L1937.97 266.119 L1934.18 273.527 L1931.19 273.527 L1933.09 266.119 L1933.09 262.138 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1962.32 233.458 L1967 233.458 L1967 268.018 L1962.32 268.018 L1962.32 233.458 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1997.67 252.369 L1997.67 268.018 L1993.41 268.018 L1993.41 252.508 Q1993.41 248.828 1991.98 246.999 Q1990.54 245.17 1987.67 245.17 Q1984.22 245.17 1982.23 247.37 Q1980.24 249.569 1980.24 253.365 L1980.24 268.018 L1975.96 268.018 L1975.96 242.092 L1980.24 242.092 L1980.24 246.12 Q1981.77 243.782 1983.83 242.624 Q1985.91 241.467 1988.62 241.467 Q1993.09 241.467 1995.38 244.245 Q1997.67 246.999 1997.67 252.369 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2019.29 231.999 L2019.29 235.541 L2015.22 235.541 Q2012.93 235.541 2012.02 236.467 Q2011.14 237.393 2011.14 239.8 L2011.14 242.092 L2018.16 242.092 L2018.16 245.402 L2011.14 245.402 L2011.14 268.018 L2006.86 268.018 L2006.86 245.402 L2002.79 245.402 L2002.79 242.092 L2006.86 242.092 L2006.86 240.286 Q2006.86 235.958 2008.87 233.99 Q2010.89 231.999 2015.26 231.999 L2019.29 231.999 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2022.86 242.092 L2027.12 242.092 L2027.12 268.018 L2022.86 268.018 L2022.86 242.092 M2022.86 231.999 L2027.12 231.999 L2027.12 237.393 L2022.86 237.393 L2022.86 231.999 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2057.58 252.369 L2057.58 268.018 L2053.32 268.018 L2053.32 252.508 Q2053.32 248.828 2051.88 246.999 Q2050.45 245.17 2047.58 245.17 Q2044.13 245.17 2042.14 247.37 Q2040.15 249.569 2040.15 253.365 L2040.15 268.018 L2035.87 268.018 L2035.87 242.092 L2040.15 242.092 L2040.15 246.12 Q2041.68 243.782 2043.74 242.624 Q2045.82 241.467 2048.53 241.467 Q2052.99 241.467 2055.29 244.245 Q2057.58 246.999 2057.58 252.369 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2066.07 242.092 L2070.33 242.092 L2070.33 268.018 L2066.07 268.018 L2066.07 242.092 M2066.07 231.999 L2070.33 231.999 L2070.33 237.393 L2066.07 237.393 L2066.07 231.999 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2083.46 234.731 L2083.46 242.092 L2092.23 242.092 L2092.23 245.402 L2083.46 245.402 L2083.46 259.476 Q2083.46 262.647 2084.31 263.55 Q2085.19 264.453 2087.86 264.453 L2092.23 264.453 L2092.23 268.018 L2087.86 268.018 Q2082.93 268.018 2081.05 266.189 Q2079.18 264.337 2079.18 259.476 L2079.18 245.402 L2076.05 245.402 L2076.05 242.092 L2079.18 242.092 L2079.18 234.731 L2083.46 234.731 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2120.01 253.99 L2120.01 256.073 L2100.43 256.073 Q2100.7 260.471 2103.06 262.786 Q2105.45 265.078 2109.68 265.078 Q2112.14 265.078 2114.43 264.476 Q2116.74 263.874 2119.01 262.67 L2119.01 266.698 Q2116.72 267.67 2114.31 268.18 Q2111.91 268.689 2109.43 268.689 Q2103.23 268.689 2099.59 265.078 Q2095.98 261.467 2095.98 255.309 Q2095.98 248.944 2099.41 245.217 Q2102.86 241.467 2108.69 241.467 Q2113.92 241.467 2116.95 244.846 Q2120.01 248.203 2120.01 253.99 M2115.75 252.74 Q2115.7 249.245 2113.78 247.161 Q2111.88 245.078 2108.74 245.078 Q2105.17 245.078 2103.02 247.092 Q2100.89 249.106 2100.56 252.763 L2115.75 252.74 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2141.21 236.629 Q2136.12 236.629 2133.11 240.425 Q2130.12 244.221 2130.12 250.772 Q2130.12 257.3 2133.11 261.096 Q2136.12 264.893 2141.21 264.893 Q2146.3 264.893 2149.27 261.096 Q2152.25 257.3 2152.25 250.772 Q2152.25 244.221 2149.27 240.425 Q2146.3 236.629 2141.21 236.629 M2141.21 232.833 Q2148.48 232.833 2152.83 237.717 Q2157.18 242.578 2157.18 250.772 Q2157.18 258.944 2152.83 263.828 Q2148.48 268.689 2141.21 268.689 Q2133.92 268.689 2129.55 263.828 Q2125.19 258.967 2125.19 250.772 Q2125.19 242.578 2129.55 237.717 Q2133.92 232.833 2141.21 232.833 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2168.43 264.129 L2168.43 277.879 L2164.15 277.879 L2164.15 242.092 L2168.43 242.092 L2168.43 246.027 Q2169.78 243.712 2171.81 242.601 Q2173.87 241.467 2176.72 241.467 Q2181.44 241.467 2184.38 245.217 Q2187.35 248.967 2187.35 255.078 Q2187.35 261.189 2184.38 264.939 Q2181.44 268.689 2176.72 268.689 Q2173.87 268.689 2171.81 267.578 Q2169.78 266.443 2168.43 264.129 M2182.92 255.078 Q2182.92 250.379 2180.98 247.717 Q2179.06 245.032 2175.68 245.032 Q2172.3 245.032 2170.36 247.717 Q2168.43 250.379 2168.43 255.078 Q2168.43 259.777 2170.36 262.462 Q2172.3 265.124 2175.68 265.124 Q2179.06 265.124 2180.98 262.462 Q2182.92 259.777 2182.92 255.078 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2198.62 234.731 L2198.62 242.092 L2207.39 242.092 L2207.39 245.402 L2198.62 245.402 L2198.62 259.476 Q2198.62 262.647 2199.48 263.55 Q2200.36 264.453 2203.02 264.453 L2207.39 264.453 L2207.39 268.018 L2203.02 268.018 Q2198.09 268.018 2196.21 266.189 Q2194.34 264.337 2194.34 259.476 L2194.34 245.402 L2191.21 245.402 L2191.21 242.092 L2194.34 242.092 L2194.34 234.731 L2198.62 234.731 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#c271d2; stroke-linecap:butt; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"\n  1338.28,302.578 1483.85,302.578 \n  \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1512.79 303.353 L1512.79 316.015 L1520.29 316.015 Q1524.06 316.015 1525.87 314.464 Q1527.7 312.89 1527.7 309.672 Q1527.7 306.432 1525.87 304.904 Q1524.06 303.353 1520.29 303.353 L1512.79 303.353 M1512.79 289.14 L1512.79 299.557 L1519.71 299.557 Q1523.14 299.557 1524.8 298.284 Q1526.49 296.987 1526.49 294.348 Q1526.49 291.733 1524.8 290.436 Q1523.14 289.14 1519.71 289.14 L1512.79 289.14 M1508.11 285.298 L1520.06 285.298 Q1525.4 285.298 1528.3 287.52 Q1531.19 289.742 1531.19 293.839 Q1531.19 297.01 1529.71 298.885 Q1528.23 300.76 1525.36 301.223 Q1528.81 301.964 1530.71 304.325 Q1532.63 306.663 1532.63 310.182 Q1532.63 314.811 1529.48 317.334 Q1526.33 319.858 1520.52 319.858 L1508.11 319.858 L1508.11 285.298 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1541.54 313.978 L1546.42 313.978 L1546.42 319.858 L1541.54 319.858 L1541.54 313.978 M1541.54 295.344 L1546.42 295.344 L1546.42 301.223 L1541.54 301.223 L1541.54 295.344 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1569.02 293.932 L1573.28 293.932 L1578.6 314.163 L1583.9 293.932 L1588.92 293.932 L1594.25 314.163 L1599.55 293.932 L1603.81 293.932 L1597.02 319.858 L1592 319.858 L1586.42 298.608 L1580.82 319.858 L1575.8 319.858 L1569.02 293.932 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1632.44 305.83 L1632.44 307.913 L1612.86 307.913 Q1613.14 312.311 1615.5 314.626 Q1617.88 316.918 1622.12 316.918 Q1624.57 316.918 1626.86 316.316 Q1629.18 315.714 1631.45 314.51 L1631.45 318.538 Q1629.15 319.51 1626.75 320.02 Q1624.34 320.529 1621.86 320.529 Q1615.66 320.529 1612.02 316.918 Q1608.41 313.307 1608.41 307.149 Q1608.41 300.784 1611.84 297.057 Q1615.29 293.307 1621.12 293.307 Q1626.35 293.307 1629.39 296.686 Q1632.44 300.043 1632.44 305.83 M1628.18 304.58 Q1628.14 301.085 1626.21 299.001 Q1624.32 296.918 1621.17 296.918 Q1617.6 296.918 1615.45 298.932 Q1613.32 300.946 1613 304.603 L1628.18 304.58 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1651.21 306.825 Q1646.05 306.825 1644.06 308.006 Q1642.07 309.186 1642.07 312.034 Q1642.07 314.302 1643.55 315.645 Q1645.06 316.964 1647.63 316.964 Q1651.17 316.964 1653.3 314.464 Q1655.45 311.941 1655.45 307.774 L1655.45 306.825 L1651.21 306.825 M1659.71 305.066 L1659.71 319.858 L1655.45 319.858 L1655.45 315.922 Q1653.99 318.283 1651.82 319.418 Q1649.64 320.529 1646.49 320.529 Q1642.51 320.529 1640.15 318.307 Q1637.81 316.061 1637.81 312.311 Q1637.81 307.936 1640.73 305.714 Q1643.67 303.492 1649.48 303.492 L1655.45 303.492 L1655.45 303.075 Q1655.45 300.135 1653.51 298.538 Q1651.58 296.918 1648.09 296.918 Q1645.87 296.918 1643.76 297.45 Q1641.65 297.983 1639.71 299.047 L1639.71 295.112 Q1642.05 294.21 1644.25 293.77 Q1646.45 293.307 1648.53 293.307 Q1654.15 293.307 1656.93 296.223 Q1659.71 299.14 1659.71 305.066 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1668.48 283.839 L1672.74 283.839 L1672.74 319.858 L1668.48 319.858 L1668.48 283.839 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1685.87 286.571 L1685.87 293.932 L1694.64 293.932 L1694.64 297.242 L1685.87 297.242 L1685.87 311.316 Q1685.87 314.487 1686.72 315.39 Q1687.6 316.293 1690.27 316.293 L1694.64 316.293 L1694.64 319.858 L1690.27 319.858 Q1685.33 319.858 1683.46 318.029 Q1681.58 316.177 1681.58 311.316 L1681.58 297.242 L1678.46 297.242 L1678.46 293.932 L1681.58 293.932 L1681.58 286.571 L1685.87 286.571 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1721.79 304.209 L1721.79 319.858 L1717.53 319.858 L1717.53 304.348 Q1717.53 300.668 1716.1 298.839 Q1714.66 297.01 1711.79 297.01 Q1708.34 297.01 1706.35 299.21 Q1704.36 301.409 1704.36 305.205 L1704.36 319.858 L1700.08 319.858 L1700.08 283.839 L1704.36 283.839 L1704.36 297.96 Q1705.89 295.622 1707.95 294.464 Q1710.03 293.307 1712.74 293.307 Q1717.21 293.307 1719.5 296.085 Q1721.79 298.839 1721.79 304.209 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1763.97 306.918 Q1763.97 302.219 1762.02 299.557 Q1760.1 296.872 1756.72 296.872 Q1753.34 296.872 1751.4 299.557 Q1749.48 302.219 1749.48 306.918 Q1749.48 311.617 1751.4 314.302 Q1753.34 316.964 1756.72 316.964 Q1760.1 316.964 1762.02 314.302 Q1763.97 311.617 1763.97 306.918 M1749.48 297.867 Q1750.82 295.552 1752.86 294.441 Q1754.92 293.307 1757.76 293.307 Q1762.49 293.307 1765.43 297.057 Q1768.39 300.807 1768.39 306.918 Q1768.39 313.029 1765.43 316.779 Q1762.49 320.529 1757.76 320.529 Q1754.92 320.529 1752.86 319.418 Q1750.82 318.283 1749.48 315.969 L1749.48 319.858 L1745.2 319.858 L1745.2 283.839 L1749.48 283.839 L1749.48 297.867 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1787.23 306.825 Q1782.07 306.825 1780.08 308.006 Q1778.09 309.186 1778.09 312.034 Q1778.09 314.302 1779.57 315.645 Q1781.07 316.964 1783.64 316.964 Q1787.19 316.964 1789.32 314.464 Q1791.47 311.941 1791.47 307.774 L1791.47 306.825 L1787.23 306.825 M1795.73 305.066 L1795.73 319.858 L1791.47 319.858 L1791.47 315.922 Q1790.01 318.283 1787.83 319.418 Q1785.66 320.529 1782.51 320.529 Q1778.53 320.529 1776.17 318.307 Q1773.83 316.061 1773.83 312.311 Q1773.83 307.936 1776.75 305.714 Q1779.69 303.492 1785.5 303.492 L1791.47 303.492 L1791.47 303.075 Q1791.47 300.135 1789.52 298.538 Q1787.6 296.918 1784.11 296.918 Q1781.89 296.918 1779.78 297.45 Q1777.67 297.983 1775.73 299.047 L1775.73 295.112 Q1778.07 294.21 1780.26 293.77 Q1782.46 293.307 1784.55 293.307 Q1790.17 293.307 1792.95 296.223 Q1795.73 299.14 1795.73 305.066 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1804.5 283.839 L1808.76 283.839 L1808.76 319.858 L1804.5 319.858 L1804.5 283.839 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1829.45 306.825 Q1824.29 306.825 1822.3 308.006 Q1820.31 309.186 1820.31 312.034 Q1820.31 314.302 1821.79 315.645 Q1823.3 316.964 1825.87 316.964 Q1829.41 316.964 1831.54 314.464 Q1833.69 311.941 1833.69 307.774 L1833.69 306.825 L1829.45 306.825 M1837.95 305.066 L1837.95 319.858 L1833.69 319.858 L1833.69 315.922 Q1832.23 318.283 1830.06 319.418 Q1827.88 320.529 1824.73 320.529 Q1820.75 320.529 1818.39 318.307 Q1816.05 316.061 1816.05 312.311 Q1816.05 307.936 1818.97 305.714 Q1821.91 303.492 1827.72 303.492 L1833.69 303.492 L1833.69 303.075 Q1833.69 300.135 1831.75 298.538 Q1829.82 296.918 1826.33 296.918 Q1824.11 296.918 1822 297.45 Q1819.89 297.983 1817.95 299.047 L1817.95 295.112 Q1820.29 294.21 1822.49 293.77 Q1824.69 293.307 1826.77 293.307 Q1832.39 293.307 1835.17 296.223 Q1837.95 299.14 1837.95 305.066 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1868.27 304.209 L1868.27 319.858 L1864.01 319.858 L1864.01 304.348 Q1864.01 300.668 1862.58 298.839 Q1861.14 297.01 1858.27 297.01 Q1854.82 297.01 1852.83 299.21 Q1850.84 301.409 1850.84 305.205 L1850.84 319.858 L1846.56 319.858 L1846.56 293.932 L1850.84 293.932 L1850.84 297.96 Q1852.37 295.622 1854.43 294.464 Q1856.51 293.307 1859.22 293.307 Q1863.69 293.307 1865.98 296.085 Q1868.27 298.839 1868.27 304.209 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1895.43 294.927 L1895.43 298.909 Q1893.62 297.913 1891.79 297.427 Q1889.99 296.918 1888.13 296.918 Q1883.99 296.918 1881.7 299.557 Q1879.41 302.172 1879.41 306.918 Q1879.41 311.663 1881.7 314.302 Q1883.99 316.918 1888.13 316.918 Q1889.99 316.918 1891.79 316.432 Q1893.62 315.922 1895.43 314.927 L1895.43 318.862 Q1893.64 319.696 1891.72 320.112 Q1889.82 320.529 1887.67 320.529 Q1881.82 320.529 1878.37 316.848 Q1874.92 313.168 1874.92 306.918 Q1874.92 300.575 1878.39 296.941 Q1881.88 293.307 1887.95 293.307 Q1889.92 293.307 1891.79 293.723 Q1893.67 294.117 1895.43 294.927 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1925.01 305.83 L1925.01 307.913 L1905.43 307.913 Q1905.7 312.311 1908.06 314.626 Q1910.45 316.918 1914.69 316.918 Q1917.14 316.918 1919.43 316.316 Q1921.75 315.714 1924.01 314.51 L1924.01 318.538 Q1921.72 319.51 1919.31 320.02 Q1916.91 320.529 1914.43 320.529 Q1908.23 320.529 1904.59 316.918 Q1900.98 313.307 1900.98 307.149 Q1900.98 300.784 1904.41 297.057 Q1907.86 293.307 1913.69 293.307 Q1918.92 293.307 1921.95 296.686 Q1925.01 300.043 1925.01 305.83 M1920.75 304.58 Q1920.7 301.085 1918.78 299.001 Q1916.88 296.918 1913.74 296.918 Q1910.17 296.918 1908.02 298.932 Q1905.89 300.946 1905.56 304.603 L1920.75 304.58 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1933.09 313.978 L1937.97 313.978 L1937.97 317.959 L1934.18 325.367 L1931.19 325.367 L1933.09 317.959 L1933.09 313.978 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1980.8 294.927 L1980.8 298.909 Q1978.99 297.913 1977.16 297.427 Q1975.36 296.918 1973.5 296.918 Q1969.36 296.918 1967.07 299.557 Q1964.78 302.172 1964.78 306.918 Q1964.78 311.663 1967.07 314.302 Q1969.36 316.918 1973.5 316.918 Q1975.36 316.918 1977.16 316.432 Q1978.99 315.922 1980.8 314.927 L1980.8 318.862 Q1979.01 319.696 1977.09 320.112 Q1975.19 320.529 1973.04 320.529 Q1967.19 320.529 1963.74 316.848 Q1960.29 313.168 1960.29 306.918 Q1960.29 300.575 1963.76 296.941 Q1967.25 293.307 1973.32 293.307 Q1975.29 293.307 1977.16 293.723 Q1979.04 294.117 1980.8 294.927 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1988.2 283.839 L1992.46 283.839 L1992.46 319.858 L1988.2 319.858 L1988.2 283.839 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2011.42 296.918 Q2007.99 296.918 2006 299.603 Q2004.01 302.265 2004.01 306.918 Q2004.01 311.571 2005.98 314.256 Q2007.97 316.918 2011.42 316.918 Q2014.82 316.918 2016.81 314.233 Q2018.81 311.547 2018.81 306.918 Q2018.81 302.311 2016.81 299.626 Q2014.82 296.918 2011.42 296.918 M2011.42 293.307 Q2016.98 293.307 2020.15 296.918 Q2023.32 300.529 2023.32 306.918 Q2023.32 313.284 2020.15 316.918 Q2016.98 320.529 2011.42 320.529 Q2005.84 320.529 2002.67 316.918 Q1999.52 313.284 1999.52 306.918 Q1999.52 300.529 2002.67 296.918 Q2005.84 293.307 2011.42 293.307 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2046.91 294.696 L2046.91 298.723 Q2045.1 297.797 2043.16 297.335 Q2041.21 296.872 2039.13 296.872 Q2035.96 296.872 2034.36 297.844 Q2032.79 298.816 2032.79 300.76 Q2032.79 302.242 2033.92 303.098 Q2035.06 303.932 2038.48 304.696 L2039.94 305.02 Q2044.48 305.992 2046.37 307.774 Q2048.3 309.534 2048.3 312.705 Q2048.3 316.316 2045.43 318.422 Q2042.58 320.529 2037.58 320.529 Q2035.49 320.529 2033.23 320.112 Q2030.98 319.719 2028.48 318.908 L2028.48 314.51 Q2030.84 315.737 2033.13 316.362 Q2035.43 316.964 2037.67 316.964 Q2040.68 316.964 2042.3 315.946 Q2043.92 314.904 2043.92 313.029 Q2043.92 311.293 2042.74 310.367 Q2041.58 309.441 2037.62 308.584 L2036.14 308.237 Q2032.18 307.404 2030.43 305.691 Q2028.67 303.955 2028.67 300.946 Q2028.67 297.288 2031.26 295.298 Q2033.85 293.307 2038.62 293.307 Q2040.98 293.307 2043.06 293.654 Q2045.15 294.001 2046.91 294.696 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2077.25 305.83 L2077.25 307.913 L2057.67 307.913 Q2057.95 312.311 2060.31 314.626 Q2062.69 316.918 2066.93 316.918 Q2069.38 316.918 2071.68 316.316 Q2073.99 315.714 2076.26 314.51 L2076.26 318.538 Q2073.97 319.51 2071.56 320.02 Q2069.15 320.529 2066.68 320.529 Q2060.47 320.529 2056.84 316.918 Q2053.23 313.307 2053.23 307.149 Q2053.23 300.784 2056.65 297.057 Q2060.1 293.307 2065.93 293.307 Q2071.17 293.307 2074.2 296.686 Q2077.25 300.043 2077.25 305.83 M2072.99 304.58 Q2072.95 301.085 2071.03 299.001 Q2069.13 296.918 2065.98 296.918 Q2062.42 296.918 2060.26 298.932 Q2058.13 300.946 2057.81 304.603 L2072.99 304.58 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2101.3 297.867 L2101.3 283.839 L2105.56 283.839 L2105.56 319.858 L2101.3 319.858 L2101.3 315.969 Q2099.96 318.283 2097.9 319.418 Q2095.86 320.529 2092.99 320.529 Q2088.3 320.529 2085.33 316.779 Q2082.39 313.029 2082.39 306.918 Q2082.39 300.807 2085.33 297.057 Q2088.3 293.307 2092.99 293.307 Q2095.86 293.307 2097.9 294.441 Q2099.96 295.552 2101.3 297.867 M2086.79 306.918 Q2086.79 311.617 2088.71 314.302 Q2090.66 316.964 2094.04 316.964 Q2097.42 316.964 2099.36 314.302 Q2101.3 311.617 2101.3 306.918 Q2101.3 302.219 2099.36 299.557 Q2097.42 296.872 2094.04 296.872 Q2090.66 296.872 2088.71 299.557 Q2086.79 302.219 2086.79 306.918 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2142.53 283.839 L2142.53 287.381 L2138.46 287.381 Q2136.17 287.381 2135.26 288.307 Q2134.38 289.233 2134.38 291.64 L2134.38 293.932 L2141.4 293.932 L2141.4 297.242 L2134.38 297.242 L2134.38 319.858 L2130.1 319.858 L2130.1 297.242 L2126.03 297.242 L2126.03 293.932 L2130.1 293.932 L2130.1 292.126 Q2130.1 287.798 2132.11 285.83 Q2134.13 283.839 2138.5 283.839 L2142.53 283.839 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2156.14 296.918 Q2152.72 296.918 2150.73 299.603 Q2148.73 302.265 2148.73 306.918 Q2148.73 311.571 2150.7 314.256 Q2152.69 316.918 2156.14 316.918 Q2159.55 316.918 2161.54 314.233 Q2163.53 311.547 2163.53 306.918 Q2163.53 302.311 2161.54 299.626 Q2159.55 296.918 2156.14 296.918 M2156.14 293.307 Q2161.7 293.307 2164.87 296.918 Q2168.04 300.529 2168.04 306.918 Q2168.04 313.284 2164.87 316.918 Q2161.7 320.529 2156.14 320.529 Q2150.56 320.529 2147.39 316.918 Q2144.24 313.284 2144.24 306.918 Q2144.24 300.529 2147.39 296.918 Q2150.56 293.307 2156.14 293.307 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2190.12 297.913 Q2189.41 297.497 2188.55 297.311 Q2187.72 297.103 2186.7 297.103 Q2183.09 297.103 2181.14 299.464 Q2179.22 301.802 2179.22 306.2 L2179.22 319.858 L2174.94 319.858 L2174.94 293.932 L2179.22 293.932 L2179.22 297.96 Q2180.56 295.598 2182.72 294.464 Q2184.87 293.307 2187.95 293.307 Q2188.39 293.307 2188.92 293.376 Q2189.45 293.423 2190.1 293.538 L2190.12 297.913 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2213.94 298.909 Q2215.54 296.038 2217.76 294.673 Q2219.98 293.307 2222.99 293.307 Q2227.04 293.307 2229.24 296.154 Q2231.44 298.978 2231.44 304.209 L2231.44 319.858 L2227.16 319.858 L2227.16 304.348 Q2227.16 300.622 2225.84 298.816 Q2224.52 297.01 2221.81 297.01 Q2218.5 297.01 2216.58 299.21 Q2214.66 301.409 2214.66 305.205 L2214.66 319.858 L2210.38 319.858 L2210.38 304.348 Q2210.38 300.598 2209.06 298.816 Q2207.74 297.01 2204.98 297.01 Q2201.72 297.01 2199.8 299.233 Q2197.88 301.432 2197.88 305.205 L2197.88 319.858 L2193.6 319.858 L2193.6 293.932 L2197.88 293.932 L2197.88 297.96 Q2199.34 295.575 2201.37 294.441 Q2203.41 293.307 2206.21 293.307 Q2209.04 293.307 2211 294.742 Q2212.99 296.177 2213.94 298.909 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Not bad!","category":"page"},{"location":"examples/Optimal Control/consumption_savings/#Maintenance-Tests","page":"Consumption Savings Problem","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"using Test\n@test termination_status(m) == MOI.LOCALLY_SOLVED\n@test has_values(m)\n@test B_opt isa Vector{<:Real}\n@test c_opt isa Vector{<:Real}","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"Test Passed","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"","category":"page"},{"location":"examples/Optimal Control/consumption_savings/","page":"Consumption Savings Problem","title":"Consumption Savings Problem","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/finite_parameter/#finite_param_manual","page":"Finite Parameters","title":"Finite Parameters","text":"","category":"section"},{"location":"manual/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"A technical manual for finite parameters in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/finite_parameter/#Definition","page":"Finite Parameters","title":"Definition","text":"","category":"section"},{"location":"manual/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"@finite_parameter\nFiniteParameter\nbuild_parameter(::Function, ::Real)\nadd_parameter(::InfiniteModel, ::FiniteParameter, ::String)\nFiniteParameterIndex\nFiniteParameterRef","category":"page"},{"location":"manual/finite_parameter/#InfiniteOpt.@finite_parameter","page":"Finite Parameters","title":"InfiniteOpt.@finite_parameter","text":"@finite_parameter(model::InfiniteModel, value, kwargs...)\n\nDefine and add an anonymous finite parameter to model and return its parameter reference. Its value is equal to value.\n\n@finite_parameter(model::InfiniteModel, param_expr == value_expr, kwargs...)\n\nDefine and add a finite parameter(s) to model and return appropriate parameter reference(s). The parameter(s) has/have value(s) indicated by the value_expr. The expression param_expr can be of the form:\n\nparamname creating a scalar parameter of name paramname\nparamname[...] or [...] creating a container of parameters\n\nThe expression value_expr simply expresses the value of the parameter(s). This is typically a number but could be an array indexed using an index defined in param_expr.\n\nThe recognized keyword arguments in kwargs are the following:\n\nbase_name: Sets the name prefix used to generate parameter names. It corresponds to the parameter name for scalar parameter, otherwise, the parameter names are set to base_name[...] for each index ... of the axes axes.\ncontainer: Specify the container type, defaults to Auto.\n\nExamples\n\njulia> par = @finite_parameter(model, 2)\nnoname\n\njulia> vals = [3, 2];\n\njulia> pars = @finite_parameter(model, [i = 1:2] == vals[i], base_name = \"par\")\n2-element Array{ParameterRef,1}:\n par[1]\n par[2]\n\njulia> @finite_parameter(model, par2 == 42)\npar2\n\n\n\n\n\n","category":"macro"},{"location":"manual/finite_parameter/#InfiniteOpt.FiniteParameter","page":"Finite Parameters","title":"InfiniteOpt.FiniteParameter","text":"FiniteParameter <: ScalarParameter\n\nA DataType for storing finite parameters meant to be nested in expressions and replaced with their values at runtime.\n\nFields\n\nvalue::Float64: The parameter value.\n\n\n\n\n\n","category":"type"},{"location":"manual/finite_parameter/#InfiniteOpt.build_parameter-Tuple{Function, Real}","page":"Finite Parameters","title":"InfiniteOpt.build_parameter","text":"build_parameter(_error::Function, value::Real)::FiniteParameter\n\nReturns a FiniteParameter given the appropriate information. This is analagous to JuMP.build_variable. This is meant to primarily serve as a helper method for @finite_parameter.\n\nExample\n\njulia> build_finite_parameter(error, 1)\nFiniteParameter(1.0)\n\n\n\n\n\n","category":"method"},{"location":"manual/finite_parameter/#InfiniteOpt.add_parameter-Tuple{InfiniteModel, FiniteParameter, String}","page":"Finite Parameters","title":"InfiniteOpt.add_parameter","text":"add_parameter(model::InfiniteModel, p::FiniteParameter,\n              [name::String = \"\"])::GeneralVariableRef\n\nReturns a GeneralVariableRef associated with the parameter p that is  added to model. This adds a parameter to the model in a manner similar to JuMP.add_variable. This is to add parameters with the use of  @finite_parameter.  build_parameter should be used to construct p.\n\nExample\n\njulia> p = build_parameter(error, 42);\n\njulia> param_ref = add_parameter(model, p, \"name\")\nname\n\n\n\n\n\n","category":"method"},{"location":"manual/finite_parameter/#InfiniteOpt.FiniteParameterIndex","page":"Finite Parameters","title":"InfiniteOpt.FiniteParameterIndex","text":"FiniteParameterIndex <: ObjectIndex\n\nA DataType for storing the index of a FiniteParameter.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/finite_parameter/#InfiniteOpt.FiniteParameterRef","page":"Finite Parameters","title":"InfiniteOpt.FiniteParameterRef","text":"FiniteParameterRef <: FiniteRef\n\nA DataType for finite parameters references who are replaced with their values at the transcription step.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::FiniteParameterIndex: Index of the parameter in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/finite_parameter/#Methods","page":"Finite Parameters","title":"Methods","text":"","category":"section"},{"location":"manual/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"Many methods are shared with independent infinite parameters since both  finite and independent infinite parameters are scalar. See the infinite  parameter technical manual for the remainder of the  methods available for finite parameters (i.e., any method typed for  ScalarParameterRefs)","category":"page"},{"location":"manual/finite_parameter/","page":"Finite Parameters","title":"Finite Parameters","text":"parameter_value(::FiniteParameterRef)\nJuMP.set_value(::FiniteParameterRef, ::Real)\nused_by_objective(::FiniteParameterRef)","category":"page"},{"location":"manual/finite_parameter/#InfiniteOpt.parameter_value-Tuple{FiniteParameterRef}","page":"Finite Parameters","title":"InfiniteOpt.parameter_value","text":"parameter_value(pref::FiniteParameterRef)::Float64\n\nReturn the value of a finite parameter reference pref. Errors if it is an infinite parameter.\n\nExample\n\njulia> value(cost)\n42.0\n\n\n\n\n\n","category":"method"},{"location":"manual/finite_parameter/#JuMP.set_value-Tuple{FiniteParameterRef, Real}","page":"Finite Parameters","title":"JuMP.set_value","text":"JuMP.set_value(pref::FiniteParameterRef, value::Real)::Nothing\n\nSet the value of pref so long as it is a finite parameter. Errors if it is an infinite parameter.\n\nExample\n\njulia> set_value(cost, 27)\n\njulia> value(cost)\n27.0\n\n\n\n\n\n","category":"method"},{"location":"manual/finite_parameter/#InfiniteOpt.used_by_objective-Tuple{FiniteParameterRef}","page":"Finite Parameters","title":"InfiniteOpt.used_by_objective","text":"used_by_objective(pref::FiniteParameterRef)::Bool\n\nReturn true if pref is used by the objective function.\n\nExample\n\n\n\n\n\n\n\n","category":"method"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"DocTestFilters = [r\"≥|>=\", r\" == | = \", r\" ∈ | in \", r\" for all | ∀ \", r\"d|∂\", \n                  r\"integral|∫\", r\".*scalar_parameters.jl:781\"]","category":"page"},{"location":"guide/derivative/#deriv_docs","page":"Derivatives","title":"Derivative Operators","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"A guide for derivatives in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/derivative/#Overview","page":"Derivatives","title":"Overview","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Derivative operators commonly arise in many infinite-dimensional problems,  particularly in space-time optimization. InfiniteOpt.jl provides a simple yet  powerful interface to model these objects for derivatives of any order, including  partial derivatives. Derivatives can be used in defining measures and constraints. ","category":"page"},{"location":"guide/derivative/#Basic-Usage","page":"Derivatives","title":"Basic Usage","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Derivative operators can defined a few different ways in InfiniteOpt. To motivate  these, let's first define an InfiniteModel along with some parameters and variables:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> using InfiniteOpt, Distributions;\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10], \n                           derivative_method = OrthogonalCollocation(3));\n\njulia> @infinite_parameter(model, ξ ~ Uniform(-1, 1));\n\njulia> @variable(model, y, Infinite(t, ξ));\n\njulia> @variable(model, q, Infinite(t));","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Notice that we used the derivative_method keyword argument to specify which  numerical method will be used to evaluate any derivatives that depend on that  infinite parameter t. In this case we, specified to use orthogonal collocation  over finite elements using 3 nodes. We'll come back to this just a little further  below to more fully describe the various methods we can use. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"First, let's discuss how to define derivatives in InfiniteOpt.jl. Principally,  this is accomplished via @deriv which will operate on a particular  InfiniteOpt expression (containing parameters, variables, and/or measures) with  respect to infinite parameters specified with their associated orders. Behind the  scenes all the appropriate calculus will be applied, creating derivative variables  as needed. For example, we can define the following:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> d1 = @deriv(y, t)\n∂/∂t[y(t, ξ)]\n\njulia> d2 = @deriv(y, t, ξ)\n∂/∂ξ[∂/∂t[y(t, ξ)]]\n\njulia> d3 = @∂(q, t^2)\n∂/∂t[∂/∂t[q(t)]]\n\njulia> d_expr = @deriv(y * q - 2t, t)\n∂/∂t[y(t, ξ)]*q(t) + ∂/∂t[q(t)]*y(t, ξ) - 2","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Thus, we can define derivatives in a variety of forms according to the problem at  hand. The last example even shows how the product rule is correctly applied. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"note: Note\nFor convenience in making more compact code we provide ∂ and  @∂ as wrappers for deriv and @deriv, respectively.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Also, notice that the appropriate analytic calculus is applied to infinite  parameters. For example, we could also compute:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> @deriv(3t^2 - 2t, t)\n6 t - 2","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Conveniently, @deriv can be called within any measure and constraint. However,  in certain cases we may need to define an initial guess (initial guess trajectory).  This can be accomplished in 2 ways:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Call set_start_value_function  using the individual derivative (e.g., d1 above)\nDefine the derivative using @variable with the Deriv variable type  object and use the start keyword argument.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In either case, a single value can be given or a start value function that will generate a value in accordance with the support values (i.e., following the same  syntax as infinite variables). For example, we can specify the starting value of  d1 to 0 via the following:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> set_start_value_function(d1, 0)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Now let's return to our discussion on derivative evaluation methods. These are the  methods that can/will be invoked to transcript the derivatives when solving the  model. The methods native to InfiniteOpt are described in the table below:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Method Type Needed Boundary Conditions Creates Supports\nFiniteDifference Forward Final & optional Initial No\nFiniteDifference Central Initial & Final No\nFiniteDifference Backward Initial & optional Final No\nOrthogonalCollocation GaussLobatto Initial Yes","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Here the default method is backward finite difference. These are enforced on an  infinite parameter basis (i.e., the parameter the differential operator is taken  with respect to). Thus, in the above examples any derivatives taken with respect to  t will use orthogonal collocation on finite elements since that is what we  specified as our derivative method. More information is provided in the  Derivative Methods Section below. However, we note here that  set_derivative_method can be invoked anytime after parameter definition  to specify/modify the derivative method used. More conveniently, we can call  set_all_derivative_methods:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> set_all_derivative_methods(model, FiniteDifference(Forward()))\n","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"warning: Warning\nInfiniteOpt does not ensure proper boundary conditions are provided by the  user. Thus, it is imperative that the user ensure these are provided appropriately  with the derivative evaluation method that is used. We recommend specifying  such conditions via a constraint that uses Restricted Variables. For  example:@constraint(model, initial_condition, y(0) == 42)","category":"page"},{"location":"guide/derivative/#Advanced-Definition","page":"Derivatives","title":"Advanced Definition","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"This section will detail the inner-workings and more advanced details behind  defining derivatives in InfiniteOpt.","category":"page"},{"location":"guide/derivative/#Manual-Definition","page":"Derivatives","title":"Manual Definition","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"The workflow for derivative definition mirrors that of variable definition as  summarized in the following steps:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Define the variable information via a JuMP.VariableInfo.\nBuild the derivative using build_derivative.\nAdd the derivative to the model via add_derivative.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"To exemplify this process, let's first define appropriate variable information:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> info = VariableInfo(true, 0., true, 42., false, 0., false, 0., false, false);","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"More detailed information on JuMP.VariableInfo is provided in the  Variable Definition Methodology section. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"warning: Warning\nInstances of JuMP.VariableInfo used to define derivatives should have  info.binary = false and info.integer = false, since most derivative  evaluation methods require that derivatives be continuous.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Now that we have our variable information we can make a derivative using  build_derivative:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> d = build_derivative(error, info, y, ξ);\n\njulia> d isa Derivative\ntrue","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Here the argument variable can be an infinite variable, semi-infinite variable,  derivative, or measure that depends on the infinite parameter provided. This will  error to the contrary.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Now we can add the derivative to the model via add_derivative which  will add the Derivative object and return GeneralVariableRef pointing  to it that we can use in InfiniteOpt expressions:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> dref = add_derivative(model, d)\n∂/∂ξ[y(t, ξ)]","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"This will also create any appropriate information based constraints (e.g., lower  bounds).","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Finally, we note that higher order derivatives are made by simply nesting this  process.","category":"page"},{"location":"guide/derivative/#Macro-Definition","page":"Derivatives","title":"Macro Definition","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"There are two macros we provide for defining derivatives:  @variable  that uses the Deriv variable type and @deriv. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"warning: Warning\nThe @derivative_variable macro used by previous versions of InfiniteOpt  is now discontinued in favor of using @variable with the Deriv  variable type object.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"First, @variable simply automates the process described above in a manner  inspired the by the syntax of the variable macros. As such it will support all  the same keywords and constraint syntax used with the variable macros. For  example, we can define the derivative  fracpartial^2 y(t xi)partial t^2 using d1 (defined in the  a Basic Usage section) enforcing a lower bound of 1 with an initial guess of 0 and  assign it to an alias GeneralVariableRef called dydt2:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> @variable(model, dydt2 >= 1, Deriv(d1, t), start = 0)\ndydt2(t, ξ)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"This will also support anonymous definition and multi-dimensional definition.  Please see Macro Variable Definition for more information.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Second, for more convenient definition we use @deriv (or @∂)  as shown in the Basic Usage section above. Unlike @variable this can handle any  InfiniteOpt expression as the argument input. It also can build derivatives  that depend on multiple infinite parameters and/or are taken to higher orders.  This is accomplished via recursive derivative definition, handling the nesting  as appropriate. For example, we can \"define\"  fracpartial^2 y(t xi)partial t^2 again:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> @deriv(d1, t)\ndydt2(t, ξ)\n\njulia> @deriv(y, t^2)\ndydt2(t, ξ)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Notice that the derivative references all point to the same derivative object we  defined up above with its alias name dydt2. This macro can also tackle complex  expressions using the appropriate calculus such as:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> @deriv(∫(y, ξ) * q, t)\n∂/∂t[∫{ξ ∈ [-1, 1]}[y(t, ξ)]]*q(t) + ∂/∂t[q(t)]*∫{ξ ∈ [-1, 1]}[y(t, ξ)]","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Thus, demonstrating the convenience of using @deriv.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"With all this in mind, we recommend using @deriv as the defacto method, but  then using @variable as a convenient way to specify information constraints  and an initial guess value/trajectory. ","category":"page"},{"location":"guide/derivative/#Derivative-Evaluation","page":"Derivatives","title":"Derivative Evaluation","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In this section, we detail how derivatives are evaluated in InfiniteOpt to then  be used in reformulating the model for solution. ","category":"page"},{"location":"guide/derivative/#Theory","page":"Derivatives","title":"Theory","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"To motivate the principles behind numerical derivative evaluation/transcription,  let's first consider the initial value problem:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"fracd y(t)dt = f(t y(t))    y(t_0) = y_0","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"With a finite support set t_0 t_1 dots t_k we can numerically  approximate the value of fracd y(t_n)dt at each time point t_n via  the Euler method (i.e., forward finite difference). We thus obtain a system of  equations:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"beginaligned\n y(t_n+1) = y(t_n) + (t_n+1 - t_n) fracd y(t_n)dt  forall n = 0 dots k-1\n fracd y(t_n)dt = f(t_n y(t_n))  forall n = 0 dots k  \n y(t_0) = y_0\nendaligned","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Thus, we obtain 3 sets of equations: ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"constraint transcriptions\nauxiliary derivative equations \nboundary conditions. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In the case above, we could reduce the number of equations by substituting out the  point derivatives in the constraint transcriptions since we have explicit  relationships in the auxiliary equations. However, this is not possible in general,  such as when we encounter more complex partial differential equations. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Thus, in InfiniteOpt derivatives are treated as variables which can be contained  implicitly in constraints and/or measures. This allows us to support implicit  dependencies and higher order derivatives. This means that when the model is  reformulated, its constraints and measures can be reformulated as normal  (treating any derivative dependencies as variables). We then can apply the  appropriate derivative evaluation technique to derive the necessary set of  auxiliary derivative equations to properly characterize the derivative variables.  This can be formalized as:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"beginaligned\n f_j(y(lambda) Dy(lambda)) leq 0  forall j in J lambda in Lambda \n h_i(y(lambda) Dy(lambda)) == 0  forall i in I lambda in Lambda \n g_k(y(hatlambda) Dy(hatlambda)) == 0  forall k in K hatlambda in hatLambda\nendaligned","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"where y(lambda) and Dy(lambda) denote all the variables and derivatives  in the problem and lambda the denote all the problem's infinite parameters.  With this let the constraints f_j denote the problem constraints which can  contain any variables, parameters, derivatives, and/or measures associated with  the problem. The constraints h_i denote the auxiliary derivative equations  formed by the appropriate numerical method to implicitly define the behavior of  the derivative variables present in f_j. Finally, the necessary boundary  conditions are provided in the constraints g_k.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Note that this general paradigm captures a wide breadth of problems and  derivative evaluation techniques. Higher order derivatives are dealt with naturally  since such techniques can be applied to nested derivative operators recursively.  For example, consider the second-order partial derivative:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"fracpartial^2 y(t xi)partial t^2 = fracpartialpartial tleft(fracpartial y(t xi)partial tright)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"The 2 forms are equivalent thus when we apply the Euler method we obtain the  following auxiliary equations:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"beginaligned\n y(t_n+1 xi) = y(t_n xi) + (t_n+1 - t_n) fracpartial y(t_n xi)partial t  forall xi in mathcalD_xi n = 0 dots k-1\n fracpartial y(t_n+1 xi)partial t = fracpartial y(t_n xi)partial t + (t_n+1 - t_n) fracpartial^2 y(t_n xi)partial t^2  forall xi in mathcalD_xi n = 0 dots k-1\nendaligned","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In the section below we detail the derivative evaluation methods that InfiniteOpt  natively implements.","category":"page"},{"location":"guide/derivative/#Derivative-Methods","page":"Derivatives","title":"Derivative Methods","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"As discussed briefly above in the Basic Usage section, we natively employ 4  derivative methods in InfiniteOpt (see the table in that section for a summary).","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"These methods are defined in association with individual infinite parameters and  will be applied to any derivatives that are taken with respect to that parameter.  These methods are specified via the derivative_method keyword argument in the  @infinite_parameter macro and can also be defined by invoking  set_derivative_method or set_all_derivative_methods:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> set_derivative_method(t, FiniteDifference(Forward()))\n","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In this example, we set t's derivative evaluation method to use forward finite  difference. This will also reset any changes that were made with the old method  (e.g., removing old collocation points). Now let's describe the ins and outs of  these methods.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"The first class of methods pertain to finite difference techniques. The syntax  for specifying these techniques is described in FiniteDifference and  exemplified here:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> FiniteDifference(Forward(), true)\nFiniteDifference{Forward}(Forward(), true)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"where the first argument indicates the type of finite difference we wish to employ  and the second argument indicates if this method should be enforced on boundary  points. By default, we have FiniteDifference(Backward(), true) which is the default  for all infinite parameters. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Forward finite difference (i.e., explicit Euler) is exemplified by approximating first  order derivative fracd y(t)dt via ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"y(t_n+1) = y(t_n) + (t_n+1 - t_n)fracd y(t_n)dt  forall n = 0 1 dots k-1","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Note that in this case, the boundary relation corresponds to n = 0 and would  be included if we set FiniteDifference(Forward(), true) or would excluded if we  let the second argument be false. We recommend, selecting false when an initial  condition is provided. Also, note that a terminal condition should be provided  when using this method since an auxiliary equation for the derivative at the  terminal point cannot be made. Thus, if a terminal condition is not given terminal  point derivative will be a free variable.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Central finite difference is exemplified by approximating the first order derivative  fracd y(t)dt via","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"y(t_n+1) = y(t_n-1) + (t_n+1 - t_n-1)fracd y(t_n)dt  forall n = 1 2 dots k-1","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Note that this form cannot be invoked at n = 0 or n = k and cannot  an equation at either boundary. With this in mind the syntax is FiniteDifference(Central())  where the second argument is omitted since it doesn't apply to this scheme. As a  result both initial and terminal conditions should be specified otherwise the  derivatives at those points will be free variables.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Backward finite difference (i.e., implicit euler) is our last (and default)  finite difference method and is exemplified by approximating the first order  derivative fracd y(t)dt via","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"y(t_n) = y(t_n-1) + (t_n - t_n-1)fracd y(t_n)dt  forall n = 1 2 dots k","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Here the boundary case corresponds to n = k and would be included if we set  FiniteDifference(Backward(), true) (the default) or excluded if we set the second  argument to false. We recommend, selecting false when a terminal condition is  provided. Also, note that an initial condition should always be given otherwise  the derivative at the first point will be free.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Finally, we employ orthogonal collocation on finite elements via the  OrthogonalCollocation object (please refer to it in the manual for  complete syntax details). In general terms, this technique fits an m degree  polynomial to each finite element (i.e., sequential support pair) and this fit is  done via m+1 collocation nodes (supports) which include the finite element  supports along with m-1 additional internal collocation nodes chosen at  orthogonal points to the polynomial. The typical syntax for specifying this method  is OrthogonalCollocation(num_nodes) where num_nodes indicates the number  collocation nodes to be used for each finite element. For example, we can specify  to use 3 collocation nodes (i.e., 1 internal node per finite element) corresponding  to a 2nd degree polynomial via","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> OrthogonalCollocation(3)\nOrthogonalCollocation{GaussLobatto}(3, GaussLobatto())","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Notice that the 2nd attribute is GaussLobatto which indicates that we are using  collocation nodes selected via Lobatto quadrature. This is currently the only  supported technique employed by OrthogonalCollocation although more may be added  in future versions. Please note that an initial condition must be provided otherwise  the corresponding derivative will be free variable. For more information on  orthogonal collocation over finite elements, this  page provides a  good reference.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Other methods can be employed via user-defined extensions. Please visit our  Extensions page for more information.","category":"page"},{"location":"guide/derivative/#User-Invoked-Evaluation","page":"Derivatives","title":"User-Invoked Evaluation","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Typically, derivative evaluation is handled when the model is reformulated in such  a way that the InfiniteModel is unmodified such that modifications and repeated  solutions can be done efficiently and seamlessly. This is also the recommended  workflow. However, we do provide user accessible derivative evaluation methods  that generate the auxiliary derivative equations and add them to the InfiniteModel. This can be useful for visualizing how these techniques work and can be helpful for  user-defined reformulation extensions (i.e., optimizer model extensions).","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"We can build these relations for a particular derivative via evaluate.  For example, let's build evaluation equations for d1:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> d1 \n∂/∂t[y(t, ξ)]\n\njulia> fill_in_supports!(t, num_supports = 3) # add supports first\n\njulia> evaluate(d1)\n\njulia> derivative_constraints(d1)\n2-element Vector{InfOptConstraintRef}:\n 5 ∂/∂t[y(t, ξ)](5, ξ) - y(10, ξ) + y(5, ξ) = 0.0, ∀ ξ ~ Uniform\n 5 ∂/∂t[y(t, ξ)](0, ξ) - y(5, ξ) + y(0, ξ) = 0.0, ∀ ξ ~ Uniform","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Note that we made sure t had supports first over which we could carry out the  evaluation, otherwise an error would have been thrown. Moreover, once the  evaluation was completed we were able to access the auxiliary equations via  derivative_constraints. ","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"We can also, add the necessary auxiliary equations for all the derivatives in the  model if we call evaluate_all_derivatives!:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> fill_in_supports!(ξ, num_supports = 4) # add supports first\n\njulia> evaluate_all_derivatives!(model)\n\njulia> derivative_constraints(dydt2)\n2-element Vector{InfOptConstraintRef}:\n 5 dydt2(5, ξ) - ∂/∂t[y(t, ξ)](10, ξ) + ∂/∂t[y(t, ξ)](5, ξ) = 0.0, ∀ ξ ~ Uniform\n 5 dydt2(0, ξ) - ∂/∂t[y(t, ξ)](5, ξ) + ∂/∂t[y(t, ξ)](0, ξ) = 0.0, ∀ ξ ~ Uniform","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Finally, we note that once derivative constraints have been added to the  InfiniteModel any changes to the respective infinite parameter sets, supports,  or derivative method will necessitate the deletion of these auxiliary constraints  and a warning will be thrown to indicate such:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> derivative_constraints(d1)\n2-element Vector{InfOptConstraintRef}:\n 5 ∂/∂t[y(t, ξ)](5, ξ) - y(10, ξ) + y(5, ξ) = 0.0, ∀ ξ ~ Uniform\n 5 ∂/∂t[y(t, ξ)](0, ξ) - y(5, ξ) + y(0, ξ) = 0.0, ∀ ξ ~ Uniform\n\njulia> add_supports(t, 0.2)\n┌ Warning: Support/method changes will invalidate existing derivative evaluation constraints that have been added to the InfiniteModel. Thus, these are being deleted.\n└ @ InfiniteOpt ~/build/pulsipher/InfiniteOpt.jl/src/scalar_parameters.jl:781\n\njulia> has_derivative_constraints(d1)\nfalse","category":"page"},{"location":"guide/derivative/#Query-Methods","page":"Derivatives","title":"Query Methods","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Here we describe the various query techniques that we can employ on derivatives  in InfiniteOpt.","category":"page"},{"location":"guide/derivative/#Basic-Queries","page":"Derivatives","title":"Basic Queries","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"First, let's overview the basic object inquiries: derivative_argument,  operator_parameter, derivative_method, and name:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> derivative_argument(dydt2) # get the variable the derivative operates on\n∂/∂t[y(t, ξ)]\n\njulia> operator_parameter(dydt2) # get the parameter the operator is taken with respect to\nt\n\njulia> derivative_method(dydt2) # get the numerical derivative evaluation method\nFiniteDifference{Forward}(Forward(), true)\n\njulia> name(dydt2) # get the name if there is one\n\"dydt2\"","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"These all work as exemplified above. We note that derivative_method simply  queries the derivative method associated with the operator parameter.","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Derivatives also inherit all the usage methods employed by infinite variables.  For example:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> is_used(d1)\ntrue\n\njulia> used_by_measure(dydt2)\nfalse\n\njulia> used_by_semi_infinite_variable(d2)\ntrue","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Also, since derivatives are analogous to infinite variables, they inherit many  of the same queries including parameter_refs:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> parameter_refs(d1)\n(t, ξ)\n\njulia> parameter_refs(derivative_argument(d1))\n(t, ξ)","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Since derivatives simply inherit their infinite parameter dependencies from the  argument variable, the above lines are equivalent.","category":"page"},{"location":"guide/derivative/#Variable-Information","page":"Derivatives","title":"Variable Information","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Again, since derivatives are essentially a special case of infinite variables, they  inherit all the same methods for querying variable information. For example,  consider the following queries:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> has_lower_bound(dydt2)\ntrue\n\njulia> lower_bound(dydt2)\n1.0\n\njulia> LowerBoundRef(dydt2)\ndydt2(t, ξ) ≥ 1.0, ∀ t ∈ [0, 10], ξ ~ Uniform\n\njulia> has_upper_bound(dydt2)\nfalse \n\njulia> func = start_value_function(dydt2);","category":"page"},{"location":"guide/derivative/#Model-Queries","page":"Derivatives","title":"Model Queries","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"We can also determine the number of derivatives a model contains and obtain a list  of them via num_derivatives and all_derivatives, respectively:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> num_derivatives(model)\n7\n\njulia> all_derivatives(model)\n7-element Vector{GeneralVariableRef}:\n ∂/∂t[y(t, ξ)]\n ∂/∂ξ[∂/∂t[y(t, ξ)]]\n ∂/∂t[q(t)]\n ∂/∂t[∂/∂t[q(t)]]\n ∂/∂ξ[y(t, ξ)]\n dydt2(t, ξ)\n ∂/∂t[∫{ξ ∈ [-1, 1]}[y(t, ξ)]]","category":"page"},{"location":"guide/derivative/#Modification-Methods","page":"Derivatives","title":"Modification Methods","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"In this section, we'll highlight some of the modification methods that can be  used on derivatives in InfiniteOpt.","category":"page"},{"location":"guide/derivative/#Variable-Information-2","page":"Derivatives","title":"Variable Information","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"As discussed above, derivatives inherit the same variable methods as infinite  variables. Thus we can modify/delete bounds and starting values for derivatives  using the same methods. For example:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> set_lower_bound(dydt2, 0)\n\njulia> lower_bound(dydt2)\n0.0\n\njulia> set_upper_bound(dydt2, 2)\n\njulia> upper_bound(dydt2)\n2.0\n\njulia> fix(dydt2, 42, force = true)\n\njulia> fix_value(dydt2) \n42.0\n\njulia> set_start_value_function(dydt2, (t, xi) -> t + xi)\n\njulia> unfix(dydt2)\n","category":"page"},{"location":"guide/derivative/#Deletion","page":"Derivatives","title":"Deletion","text":"","category":"section"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Finally, the are 2 deletion methods we can employ apart from deleting variable  information. First, we can employ delete_derivative_constraints to  delete any derivative evaluation constraints associated with a particular  derivative:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> delete_derivative_constraints(d2)\n\njulia> has_derivative_constraints(d2)\nfalse","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"Lastly, we can employ delete to delete a particular derivative and all its  dependencies:","category":"page"},{"location":"guide/derivative/","page":"Derivatives","title":"Derivatives","text":"julia> delete(model, d2)\n\njulia> is_valid(model, d2)\nfalse","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"DocTestFilters = [r\"≥|>=\", r\" == | = \", r\" ∈ | in \", r\" for all | ∀ \"]","category":"page"},{"location":"guide/optimize/#opt_docs","page":"Optimization","title":"Optimization","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"A guide for optimizing (solving) InfiniteOpt models. See the respective  technical manual for more details.","category":"page"},{"location":"guide/optimize/#Overview","page":"Optimization","title":"Overview","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Fundamentally, we seek to optimize a given infinite optimization model that  we have defined and this is the very reason why InfiniteOpt was created. Thus,  InfiniteOpt offers a general and intuitive platform to do just this. This  is made up of transforming the InfiniteModel into a standard optimization  problem stored as a JuMP.Model (referred to as the optimizer_model) that is  then optimized via a compatible optimizer. By default this is done via a  TranscriptionModel as described on the previous page. However, user-defined  reformulation strategies can readily be implemented as described in the  Optimizer Models section on the extensions page. ","category":"page"},{"location":"guide/optimize/#Basic-Usage","page":"Optimization","title":"Basic Usage","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"For most users, optimize! is the only  method required to optimize an InfiniteModel. This is exactly analogous  to that of any JuMP.Model and is designed to provide a similar user experience.  Let's first define an InfiniteModel with an appropriate optimizer:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> using InfiniteOpt, Ipopt;\n\njulia> model = InfiniteModel(Ipopt.Optimizer);\n\njulia> set_optimizer_attribute(model, \"print_level\", 0);\n\njulia> @infinite_parameter(model, t in [0, 10], num_supports = 10);\n\njulia> @variable(model, y >= 0, Infinite(t));\n\njulia> @variable(model, z >= 0);\n\njulia> @objective(model, Min, 2z);\n\njulia> @constraint(model, c1, z >= y);\n\njulia> @constraint(model, c2, y(0) == 42);\n\njulia> print(model)\nMin 2 z\nSubject to\n y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n z ≥ 0.0\n c1 : z - y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n y(0) ≥ 0.0\n c2 : y(0) = 42.0","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Now we optimize the model using optimize!:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> optimize!(model);\n\njulia> termination_status(model)\nLOCALLY_SOLVED::TerminationStatusCode = 4","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Now our model has been solved and we can query the solution. How to query the  solution is explained on the Results page.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"If no optimizer has been specified for the InfiniteModel, one can be provided  via set_optimizer:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_optimizer(model, Ipopt.Optimizer)","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"A number of methods also exist to adjust the optimizer settings such as  suppressing output. This is explained below in the  Optimizer Settings section.","category":"page"},{"location":"guide/optimize/#Optimizer-Models","page":"Optimization","title":"Optimizer Models","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"As discussed previously, InfiniteModels contain an optimizer_model field  which stores a transformed finite version of the model in a JuMP.Model that  contains a data object (that stores a mapping between the transformed model and  the infinite model) in the Model.ext dictionary with an associated key. By  default a JuMP.Model using TranscriptionData stored under the key  :TransData is used and is referred to as a TranscriptionModel. The  optimizer model is then what is used to optimize the infinite model and it provides  the information exacted by solution queries mapped back to the infinite  model using the mapping data structure.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"The process for optimizing an InfiniteModel is summarized in the following  steps:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"fully define the InfiniteModel\nbuild the optimizer model via build_optimizer_model!\noptimize the optimizer_model via optimize!.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Here build_optimizer_model! creates a reformulated finite version of the  InfiniteModel, stores it in InfiniteModel.optimizer_model via  set_optimizer_model, and indicates that the optimizer model is ready  via set_optimizer_model_ready. These steps are all automated when  optimize! is invoked on the  InfiniteModel.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"The optimizer_model can be queried/extracted at any time from an InfiniteModel  via optimizer_model. For example, let's extract the optimizer model  from the example above in the basic usage section: ","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> trans_model = optimizer_model(model)\nA JuMP Model\nMinimization problem with:\nVariables: 11\nObjective function type: AffExpr\n`AffExpr`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\n`AffExpr`-in-`MathOptInterface.GreaterThan{Float64}`: 10 constraints\n`VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 11 constraints\nModel mode: AUTOMATIC\nCachingOptimizer state: ATTACHED_OPTIMIZER\nSolver name: Ipopt","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"The JuMP variable(s) stored in the optimizer model that correspond to a  particular InfiniteOpt variable can be queried via  optimizer_model_variable.  Using a TranscriptionModel this equivalent to calling  transcription_variable. Thus, using the going example we get:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> optimizer_model_variable(y) # infinite variable\n10-element Vector{VariableRef}:\n y(support: 1)\n y(support: 2)\n y(support: 3)\n y(support: 4)\n y(support: 5)\n y(support: 6)\n y(support: 7)\n y(support: 8)\n y(support: 9)\n y(support: 10)\n\njulia> optimizer_model_variable(z) # finite variable\nz","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"In like manner, we get the JuMP constraints corresponding to a particular  InfiniteOpt constraint via  optimizer_model_constraint.  Using a TranscriptionModel this equivalent to calling  transcription_constraint. Thus, using going example we get: ","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> optimizer_model_constraint(c1) # infinite constraint\n10-element Vector{ConstraintRef}:\n c1(support: 1) : z - y(support: 1) ≥ 0.0\n c1(support: 2) : z - y(support: 2) ≥ 0.0\n c1(support: 3) : z - y(support: 3) ≥ 0.0\n c1(support: 4) : z - y(support: 4) ≥ 0.0\n c1(support: 5) : z - y(support: 5) ≥ 0.0\n c1(support: 6) : z - y(support: 6) ≥ 0.0\n c1(support: 7) : z - y(support: 7) ≥ 0.0\n c1(support: 8) : z - y(support: 8) ≥ 0.0\n c1(support: 9) : z - y(support: 9) ≥ 0.0\n c1(support: 10) : z - y(support: 10) ≥ 0.0","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"We can also query the expressions via  optimizer_model_expression:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> optimizer_model_expression(z - y^2 + 3) # infinite expression\n10-element Vector{Any}:\n -y(support: 1)² + z + 3\n -y(support: 2)² + z + 3\n -y(support: 3)² + z + 3\n -y(support: 4)² + z + 3\n -y(support: 5)² + z + 3\n -y(support: 6)² + z + 3\n -y(support: 7)² + z + 3\n -y(support: 8)² + z + 3\n -y(support: 9)² + z + 3\n -y(support: 10)² + z + 3","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"note: Note\nLike supports the optimizer_model_[obj] methods also employ the  label::Type{AbstractSupportLabel} = PublicLabel keyword argument that by  default will return variables/expressions/constraints associated with public  supports. The full set (e.g., ones corresponding to internal collocation nodes)  is obtained via label = All.\nThese methods also employ the ndarray::Bool keyword argument that will cause the  output to be formatted as a n-dimensional array where the dimensions  correspond to the infinite parameter dependencies. For example, if we have an  infinite variable y(t, ξ) and we invoke a query method with ndarray = true  then we'll get a matrix whose dimensions correspond to the supports of t and  ξ, respectively. Also, if ndarray = true then label correspond to the  intersection of supports labels in contrast to its default of invoking the union  of the labels.","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"The purpose of this optimizer_model abstraction is to readily enable user-defined  reformulation extensions (e.g., using polynomial chaos expansion theory). However,  this is all handled behind the scenes such that most users can interact with  InfiniteModels like any JuMP.Model.","category":"page"},{"location":"guide/optimize/#opt_settings","page":"Optimization","title":"Optimizer Settings","text":"","category":"section"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"A few optimizer settings can be set in a consistent way agnostic of particular  solver keywords. One such setting is that of suppressing and unsuppressing  optimizer verbose output. This is accomplished via  set_silent and  unset_silent. The syntax is  exemplified below:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_silent(model)\ntrue\n\njulia> unset_silent(model)\nfalse","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"We can also adjust the time limit in a solver independent fashion via  set_time_limit_sec, unset_time_limit_sec, and  time_limit_sec. These methods are illustrated below:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_time_limit_sec(model, 100)\n100\n\njulia> time_limit_sec(model)\n100.0\n\njulia> unset_time_limit_sec(model)","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Other optimizer specific settings can be set via  set_optimizer_attribute. For example, let's set the maximum CPU time  for Ipopt:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_optimizer_attribute(model, \"max_cpu_time\", 60.)\n60.0","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Multiple settings  can be specified via set_optimizer_attributes. For  example, let's specify the tolerance and the maximum number of iterations:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> set_optimizer_attributes(model, \"tol\" => 1e-4, \"max_iter\" => 100)","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Finally, we can query optimizer settings via get_optimizer_attribute.  For example, let's query the maximum number of iterations:","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"julia> get_optimizer_attribute(model, \"max_iter\")\n100","category":"page"},{"location":"guide/optimize/","page":"Optimization","title":"Optimization","text":"Note this only works if the attribute has been previously specified.","category":"page"},{"location":"manual/objective/#obj_manual","page":"Objectives","title":"Objectives","text":"","category":"section"},{"location":"manual/objective/","page":"Objectives","title":"Objectives","text":"A technical manual for objective functions in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/objective/#Queries","page":"Objectives","title":"Queries","text":"","category":"section"},{"location":"manual/objective/","page":"Objectives","title":"Objectives","text":"JuMP.objective_sense(::InfiniteModel)\nJuMP.objective_function_type(::InfiniteModel)\nJuMP.objective_function(::InfiniteModel)\nobjective_has_measures","category":"page"},{"location":"manual/objective/#JuMP.objective_sense-Tuple{InfiniteModel}","page":"Objectives","title":"JuMP.objective_sense","text":"JuMP.objective_sense(model::InfiniteModel)::MOI.OptimizationSense\n\nExtend JuMP.objective_sense to return the objective sense of the infinite model  model.\n\nExample\n\njulia> objective_sense(model)\nMIN_SENSE::OptimizationSense = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.objective_function_type-Tuple{InfiniteModel}","page":"Objectives","title":"JuMP.objective_function_type","text":"JuMP.objective_function_type(model::InfiniteModel)::Type{<:JuMP.AbstractJuMPScalar}\n\nExtend JuMP.objective_function_type to return the objective function type of  infinite model model.\n\nExample\n\njulia> objective_function_type(model)\nGenericAffExpr{Float64,GeneralVariableRef}\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.objective_function-Tuple{InfiniteModel}","page":"Objectives","title":"JuMP.objective_function","text":"JuMP.objective_function(model::InfiniteModel)::JuMP.AbstractJuMPScalar\n\nExtend JuMP.objective_function to return the objective of infinite model  model.\n\nExample\n\njulia> objective_function(model)\n1\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#InfiniteOpt.objective_has_measures","page":"Objectives","title":"InfiniteOpt.objective_has_measures","text":"objective_has_measures(model::InfiniteModel)::Bool\n\nReturn Bool whether the objective function contains any measures.\n\n\n\n\n\n","category":"function"},{"location":"manual/objective/#Modification","page":"Objectives","title":"Modification","text":"","category":"section"},{"location":"manual/objective/","page":"Objectives","title":"Objectives","text":"JuMP.set_objective_function(::InfiniteModel, ::JuMP.AbstractJuMPScalar)\nJuMP.set_objective_function(::InfiniteModel, ::Real)\nJuMP.set_objective_sense(::InfiniteModel, ::MOI.OptimizationSense)\nJuMP.set_objective(::InfiniteModel, ::MOI.OptimizationSense, ::Union{JuMP.AbstractJuMPScalar, Real})\nJuMP.set_objective_coefficient(::InfiniteModel, ::GeneralVariableRef, ::Real)","category":"page"},{"location":"manual/objective/#JuMP.set_objective_function-Tuple{InfiniteModel, AbstractJuMPScalar}","page":"Objectives","title":"JuMP.set_objective_function","text":"JuMP.set_objective_function(model::InfiniteModel,\n                            func::JuMP.AbstractJuMPScalar)::Nothing\n\nExtend JuMP.set_objective_function to set the objective expression of infinite model model. Errors if func contains infinite variables and/or parameters. Also errors if func contains invalid variables.\n\nExample\n\njulia> set_objective_function(model, 2x + 1)\n\njulia> objective_function(model)\n2 x + 1\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.set_objective_function-Tuple{InfiniteModel, Real}","page":"Objectives","title":"JuMP.set_objective_function","text":"JuMP.set_objective_function(model::InfiniteModel, func::Real)::Nothing\n\nExtend JuMP.set_objective_function to set the objective expression of model with a number.\n\nExample\n\njulia> set_objective_function(model, 3)\n\njulia> objective_function(model)\n3\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.set_objective_sense-Tuple{InfiniteModel, MathOptInterface.OptimizationSense}","page":"Objectives","title":"JuMP.set_objective_sense","text":"JuMP.set_objective_sense(model::InfiniteModel,\n                         sense::MOI.OptimizationSense)::Nothing\n\nExtend JuMP.set_objective_sense to set the objective sense of infinite model  model.\n\nExample\n\njulia> set_objective_sense(model, MOI.MIN_SENSE)\n\njulia> objective_sense(model)\nMIN_SENSE::OptimizationSense = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.set_objective-Tuple{InfiniteModel, MathOptInterface.OptimizationSense, Union{Real, AbstractJuMPScalar}}","page":"Objectives","title":"JuMP.set_objective","text":"JuMP.set_objective(model::InfiniteModel, sense::MOI.OptimizationSense,\n                   func::Union{JuMP.AbstractJuMPScalar, Real})::Nothing\n\nExtend JuMP.set_objective to set the objective of infinite model model. Errors if func contains infinite variables and/or parameters, or if it does not belong to the model.\n\nExample\n\njulia> set_objective(model, MOI.MIN_SENSE, 2x + 1)\n\njulia> objective_function(model)\n2 x + 1\n\n\n\n\n\n","category":"method"},{"location":"manual/objective/#JuMP.set_objective_coefficient-Tuple{InfiniteModel, GeneralVariableRef, Real}","page":"Objectives","title":"JuMP.set_objective_coefficient","text":"JuMP.set_objective_coefficient(model::InfiniteModel,\n                               variable::GeneralVariableRef,\n                               coefficient::Real)::Nothing\n\nExtend JuMP.set_objective_coefficient Set the linear objective coefficient  associated with variable to coefficient. Errors if the function type is  unsupported.\n\nExample\n\njulia> @variable(model, x)\nx\n\njulia> @variable(model, y)\ny\n\njulia> @objective(model, x + y)\nx + y\n\njulia> set_objective_coefficient(model, y, 2)\n\njulia> objective_function(model)\nx + 2 y\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#opt_manual","page":"Optimization","title":"Optimization","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"A technical manual for optimizing (solving) InfiniteOpt models. See the  respective guide for more information.","category":"page"},{"location":"manual/optimize/#Optimize","page":"Optimization","title":"Optimize","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"JuMP.optimize!(::InfiniteModel)","category":"page"},{"location":"manual/optimize/#JuMP.optimize!-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.optimize!","text":"JuMP.optimize!(model::InfiniteModel;\n               bridge_constraints::Bool=true, kwargs...])\n\nExtend JuMP.optimize! to optimize infinite models using the internal optimizer model. Will call build_optimizer_model! if the optimizer model isn't up to date. The kwargs correspond to keyword arguments passed to build_optimizer_model! if any are defined.\n\nExample\n\njulia> optimize!(model)\n\njulia> has_values(model)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#Optimizer-Settings","page":"Optimization","title":"Optimizer Settings","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"JuMP.set_optimizer(::InfiniteModel, ::Any)\nJuMP.set_silent(::InfiniteModel)\nJuMP.unset_silent(::InfiniteModel)\nJuMP.set_time_limit_sec(::InfiniteModel, ::Any)\nJuMP.unset_time_limit_sec(::InfiniteModel)\nJuMP.time_limit_sec(::InfiniteModel)\nJuMP.set_optimizer_attribute(::InfiniteModel, ::String, ::Any)\nJuMP.set_optimizer_attribute(::InfiniteModel,::MOI.AbstractOptimizerAttribute,::Any)\nJuMP.set_optimizer_attributes(::InfiniteModel, ::Pair)\nJuMP.get_optimizer_attribute(::InfiniteModel, ::String)\nJuMP.get_optimizer_attribute(::InfiniteModel,::MOI.AbstractOptimizerAttribute)\nJuMP.add_bridge(::InfiniteModel, ::Type{<:MOI.Bridges.AbstractBridge})","category":"page"},{"location":"manual/optimize/#JuMP.set_optimizer-Tuple{InfiniteModel, Any}","page":"Optimization","title":"JuMP.set_optimizer","text":"JuMP.set_optimizer(model::InfiniteModel,\n                   [optimizer_constructor;\n                   bridge_constraints::Bool = true])\n\nExtend JuMP.set_optimizer to set optimizer of infinite models. Specifically, the optimizer of the optimizer model is modified.\n\nExample\n\njulia> set_optimizer(model, Clp.Optimizer)\n\njulia> optimizer_model(model)\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: SolverName() attribute not implemented by the optimizer.\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_silent-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.set_silent","text":"JuMP.set_silent(model::InfiniteModel)\n\nExtend JuMP.set_silent for infinite models to take precedence over any other attribute controlling verbosity and requires the solver to produce no output.\n\nExample\n\njulia> set_silent(model)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.unset_silent-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.unset_silent","text":"JuMP.unset_silent(model::InfiniteModel)\n\nExtend JuMP.unset_silent for infinite models to neutralize the effect of the set_silent function and let the solver attributes control the verbosity.\n\nExample\n\njulia> unset_silent(model)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_time_limit_sec-Tuple{InfiniteModel, Any}","page":"Optimization","title":"JuMP.set_time_limit_sec","text":"JuMP.set_time_limit_sec(model::InfiniteModel, limit)\n\nExtend set_time_limit_sec to set the time limit (in seconds) of the solver. Can be unset using unset_time_limit_sec or with limit set to nothing.\n\nExample\n\njulia> set_time_limit_sec(model, 100)\n100\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.unset_time_limit_sec-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.unset_time_limit_sec","text":"JuMP.unset_time_limit_sec(model::InfiniteModel)\n\nExtend unset_time_limit_sec to unset the time limit of the solver. Can be set  using set_time_limit_sec.\n\nExample\n\njulia> unset_time_limit_sec(model)\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.time_limit_sec-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.time_limit_sec","text":"JuMP.time_limit_sec(model::InfiniteModel)\n\nExtend time_limit_sec to get the time limit (in seconds) of the solve used by  the optimizer model (nothing if unset). Can be set using set_time_limit_sec.\n\nExample\n\njulia> time_limit_sec(model)\n100\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_optimizer_attribute-Tuple{InfiniteModel, String, Any}","page":"Optimization","title":"JuMP.set_optimizer_attribute","text":"JuMP.set_optimizer_attribute(model::InfiniteModel, name::String, value)\n\nExtend set_optimizer_attribute to specify a solver-specific attribute  identified by name to value.\n\nExample\n\njulia> set_optimizer_attribute(model, \"SolverSpecificAttributeName\", true)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_optimizer_attribute-Tuple{InfiniteModel, MathOptInterface.AbstractOptimizerAttribute, Any}","page":"Optimization","title":"JuMP.set_optimizer_attribute","text":"JuMP.set_optimizer_attribute(model::InfiniteModel,\n                             attr::MOI.AbstractOptimizerAttribute,\n                             value)\n\nExtend set_optimizer_attribute to set the solver-specific attribute attr in  model to value.\n\nExample\n\njulia> set_optimizer_attribute(model, MOI.Silent(), true)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.set_optimizer_attributes-Tuple{InfiniteModel, Pair}","page":"Optimization","title":"JuMP.set_optimizer_attributes","text":"JuMP.set_optimizer_attributes(model::InfiniteModel, pairs::Pair...)\n\nExtend set_optimizer_attributes to set multiple solver attributes given a  list of attribute => value pairs. Calls  set_optimizer_attribute(model, attribute, value) for each pair.\n\nExample\n\njulia> model = Model(Ipopt.Optimizer);\n\njulia> set_optimizer_attributes(model, \"tol\" => 1e-4, \"max_iter\" => 100)\n\nis equivalent to:\n\njulia> set_optimizer_attribute(model, \"tol\", 1e-4);\n\njulia> set_optimizer_attribute(model, \"max_iter\", 100);\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.get_optimizer_attribute-Tuple{InfiniteModel, String}","page":"Optimization","title":"JuMP.get_optimizer_attribute","text":"JuMP.get_optimizer_attribute(model::InfiniteModel, name::String)\n\nExtend get_optimizer_attribute to return the value associated with the  solver-specific attribute named name.\n\nExample julia-repl julia> get_optimizer_attribute(model, \"tol\") 0.0001`\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.get_optimizer_attribute-Tuple{InfiniteModel, MathOptInterface.AbstractOptimizerAttribute}","page":"Optimization","title":"JuMP.get_optimizer_attribute","text":"JuMP.get_optimizer_attribute(model::InfiniteModel,\n                             attr::MOI.AbstractOptimizerAttribute)\n\nExtend get_optimizer_attribute to return the value of the solver-specific  attribute attr in model.\n\nExample julia-repl julia> get_optimizer_attribute(model, MOI.Silent()) true`\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.add_bridge-Tuple{InfiniteModel, Type{var\"#s40\"} where var\"#s40\"<:MathOptInterface.Bridges.AbstractBridge}","page":"Optimization","title":"JuMP.add_bridge","text":"JuMP.add_bridge(model::InfiniteModel,\n                BridgeType::Type{<:MOI.Bridges.AbstractBridge})\n\nExtend JuMP.add_bridge to add BridgeType to the list of bridges that can be used by the optimizer model to transform unsupported constraints into an equivalent formulation using only constraints supported by the optimizer.\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#Optimizer-Queries","page":"Optimization","title":"Optimizer Queries","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"JuMP.solver_name(model::InfiniteModel)\nJuMP.backend(model::InfiniteModel)\nJuMP.mode(model::InfiniteModel)\nJuMP.bridge_constraints(::InfiniteModel)","category":"page"},{"location":"manual/optimize/#JuMP.solver_name-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.solver_name","text":"JuMP.solver_name(model::InfiniteModel)\n\nExtend solver_name to return the name of the solver being used if there is an  optimizer selected and it has a name attribute. Otherwise, an error is thrown.\n\nExample\n\njulia> solver_name(model)\n\"Gurobi\"\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.backend-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.backend","text":"JuMP.backend(model::InfiniteModel)\n\nExtend backend to return the MathOptInterface backend associated with the  optimizer model. Note this will be empty if the optimizer model has not been  build yet.\n\nExample\n\njulia> moi_model = backend(model);\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.mode-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.mode","text":"JuMP.mode(model::InfiniteModel)\n\nExtend mode to return the MathOptInterface mode the optimizer model is in.\n\nExample\n\njulia> mode(model)\nAUTOMATIC::ModelMode = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#JuMP.bridge_constraints-Tuple{InfiniteModel}","page":"Optimization","title":"JuMP.bridge_constraints","text":"JuMP.bridge_constraints(model::InfiniteModel)::Bool\n\nExtend JuMP.bridge_constraints to return if an infinite model model has an optimizer model where the optimizer is set and unsupported constraints are automatically bridged to equivalent supported constraints when an appropriate transformation is available.\n\nExample\n\njulia> bridge_constraints(model)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#Optimizer-Model-API","page":"Optimization","title":"Optimizer Model API","text":"","category":"section"},{"location":"manual/optimize/","page":"Optimization","title":"Optimization","text":"optimizer_model\nset_optimizer_model\noptimizer_model_key(::InfiniteModel)\noptimizer_model_key(::JuMP.Model)\nbuild_optimizer_model!(::InfiniteModel)\nbuild_optimizer_model!\nclear_optimizer_model_build!(::InfiniteModel)\nclear_optimizer_model_build!(::JuMP.Model)\nInfiniteOpt.add_infinite_model_optimizer\noptimizer_model_variable(::GeneralVariableRef)\noptimizer_model_variable\nsupports(::Union{DecisionVariableRef, MeasureRef})\nInfiniteOpt.variable_supports\noptimizer_model_expression(::JuMP.AbstractJuMPScalar)\noptimizer_model_expression\nsupports(::JuMP.AbstractJuMPScalar)\nInfiniteOpt.expression_supports\nInfiniteOpt.optimizer_model_constraint(::InfOptConstraintRef)\noptimizer_model_constraint\nsupports(::InfOptConstraintRef)\nInfiniteOpt.constraint_supports\noptimizer_model_ready\nset_optimizer_model_ready","category":"page"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model","page":"Optimization","title":"InfiniteOpt.optimizer_model","text":"optimizer_model(model::InfiniteModel)::JuMP.Model\n\nReturn the JuMP model stored in model that is used to solve it.\n\nExample\n\njulia> opt_model = optimizer_model(model)\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.set_optimizer_model","page":"Optimization","title":"InfiniteOpt.set_optimizer_model","text":"set_optimizer_model(inf_model::InfiniteModel, opt_model::JuMP.Model;\n                    inherit_optimizer::Bool = true)\n\nSpecify the JuMP model that is used to solve inf_model. This is intended for internal use and extensions. Note that opt_model should contain extension data to allow it to map to inf_model in a manner similar to TranscriptionModel. inherit_optimizer indicates whether add_infinite_model_optimizer should be invoked on the new optimizer mode to inherit the optimizer constuctor and attributes currently stored in inf_model.\n\nExample\n\njulia> set_optimizer_model(model, TranscriptionModel())\n\njulia> optimizer_model(model)\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_key-Tuple{InfiniteModel}","page":"Optimization","title":"InfiniteOpt.optimizer_model_key","text":"optimizer_model_key(model::InfiniteModel)::Any\n\nReturn the extension key used in the optimizer model of model. Errors if optimizer_model.ext contains more than one key. This is intended for internal use and extensions. For extensions this is used to dispatch to the appropriate optmizer model functions such as extensions to build_optimizer_model!.\n\nExample\n\njulia> optimizer_model_key(model)\n:TransData\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_key-Tuple{Model}","page":"Optimization","title":"InfiniteOpt.optimizer_model_key","text":"optimizer_model_key(model::JuMP.Model)::Any\n\nReturn the extension key used in the optimizer model model. Errors if model.ext contains more than one key. This is intended for internal use and extensions. For extensions this is used to dispatch to the appropriate optmizer model functions such as extensions to build_optimizer_model!. This is intended as an internal method. See  optimizer_model_key  for the public method\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.build_optimizer_model!-Tuple{InfiniteModel}","page":"Optimization","title":"InfiniteOpt.build_optimizer_model!","text":"build_optimizer_model!(model::InfiniteModel; [kwargs...])\n\nBuild the optimizer model stored in model such that it can be treated as a normal JuMP model. Specifically, translate the variables and constraints stored in model into ones that are stored in the optimizer model and can be solved. This is provided generally to accomodate extensions that use custom optimizer model types in accordance with optimizer_model_key. However, it may be useful in certain applications when the user desires to force a build without calling optimize!. Extensions will need to implement their own version of the function build_optimizer_model!(model::InfiniteModel, key::Val{ext_key_name}; kwargs...).\n\nExample\n\njulia> build_optimizer_model!(model)\n\njulia> optimizer_model_ready(model)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.build_optimizer_model!","page":"Optimization","title":"InfiniteOpt.build_optimizer_model!","text":"build_optimizer_model!(model::InfiniteModel, key::Val{ext_key_name};\n                       [kwargs...])\n\nBuild the optimizer model stored in model such that it can be treated as a normal JuMP model, where the Model.ext field contains a key that points to a datastructure that appropriately maps the data between the two models. The key argument should be be typed to Val{ext_key_name}. This should also use clear_optimizer_model_build! to empty the out the current optimizer model. Ultimately, set_optimizer_model should be called to insert the build optimizer model into model and set_optimizer_model_ready should be used to update the optimizer model's status.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.clear_optimizer_model_build!-Tuple{InfiniteModel}","page":"Optimization","title":"InfiniteOpt.clear_optimizer_model_build!","text":"clear_optimizer_model_build!(model::InfiniteModel)::JuMP.Model\n\nEmpty the optimizer model using appropriate calls of Base.empty!. This effectively resets model.optimizer_model except the optimizer, its attributes, and an an emptied optimizer model data struct are maintained. This is intended as an internal method for use by build_optimizer_model!.\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.clear_optimizer_model_build!-Tuple{Model}","page":"Optimization","title":"InfiniteOpt.clear_optimizer_model_build!","text":"clear_optimizer_model_build!(model::JuMP.Model)::JuMP.Model\n\nEmpty the optimizer model using appropriate calls of Base.empty!. This effectively resets model except the optimizer, its attributes, and an an emptied optimizer model data struct are maintained. This is intended as an internal method for use by build_optimizer_model!.\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.add_infinite_model_optimizer","page":"Optimization","title":"InfiniteOpt.add_infinite_model_optimizer","text":"add_infinite_model_optimizer(opt_model::JuMP.Model, inf_model::InfiniteModel)\n\nParse the current optimizer and its attributes associated with inf_model and load them into opt_model. This is intended to be used as an internal method for set_optimizer_model.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_variable-Tuple{GeneralVariableRef}","page":"Optimization","title":"InfiniteOpt.optimizer_model_variable","text":"optimizer_model_variable(vref::GeneralVariableRef; \n                         [label::Type{<:AbstractSupportLabel} = PublicLabel, \n                         ndarray::Bool = false,\n                         kwargs...])\n\nReturn the reformulation variable(s) stored in the optimizer model that correspond to vref. Also errors if no such variable can be found in the optimizer model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of optimizer_model_variable. Errors if such an extension has not been written. \n\nBy default only the variables associated with public supports are returned, the  full set can be accessed via label = All. Moreover, infinite variables are  returned as a list corresponding to their supports. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the variable has multiple  infinite parameter dependencies. The corresponding supports are obtained via  supports using the same keyword arguments.\n\nExample\n\njulia> optimizer_model_variable(x) # infinite variable\n2-element Array{VariableRef,1}:\n x(support: 1)\n x(support: 2)\n\njulia> optimizer_model_variable(z) # finite variable\nz\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_variable","page":"Optimization","title":"InfiniteOpt.optimizer_model_variable","text":"optimizer_model_variable(vref::GeneralVariableRef, key::Val{ext_key_name};\n                         [kwargs...])\n\nReturn the reformulation variable(s) stored in the optimizer model that correspond to vref. This needs to be defined for extensions that implement a custom optimizer model type. Principally, this is accomplished by typed the key argument to Val{ext_key_name}. Keyword arguments can be added as needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.supports-Tuple{Union{MeasureRef, DecisionVariableRef}}","page":"Optimization","title":"InfiniteOpt.supports","text":"supports(vref::DecisionVariableRef; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel, \n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the supports associated with vref in the optimizer model. Errors if InfiniteOpt.variable_supports has not been extended for the optimizer model type or if vref is not be reformulated in the optimizer model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of variable_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  variables are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the variable has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(vref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\nsupports(expr::JuMP.AbstractJuMPScalar; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel,\n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the support associated with expr. Errors if expr is not associated with the constraint mappings stored in optimizer_model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of expression_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  expressions are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(cref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.variable_supports","page":"Optimization","title":"InfiniteOpt.variable_supports","text":"variable_supports(optimizer_model::JuMP.Model, vref,\n                  key::Val{ext_key_name}; \n                  [kwargs...])::Vector\n\nReturn the supports associated with the mappings of vref in optimizer_model. This dispatches off of key which permits optimizer model extensions. This should throw an error if vref is not associated with the variable mappings stored in optimizer_model. Keyword arguments can be added as needed. Note that no extension is necessary for point or finite variables. \n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_expression-Tuple{AbstractJuMPScalar}","page":"Optimization","title":"InfiniteOpt.optimizer_model_expression","text":"optimizer_model_expression(expr::JuMP.AbstractJuMPScalar; \n                           [label::Type{<:AbstractSupportLabel} = PublicLabel,\n                           ndarray::Bool = false, \n                           kwargs...])\n\nReturn the reformulation expression(s) stored in the optimizer model that correspond to expr. Also errors if no such expression can be found in the optimizer model (meaning one or more of the underlying variables have not been transcribed).\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of optimizer_model_expression. Errors if such an extension has not been written. \n\nBy default only the expressions associated with public supports are returned, the  full set can be accessed via label = All. Moreover, infinite expressions are  returned as a list corresponding to their supports. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies. The corresponding supports are obtained via  supports using the same keyword arguments.\n\nExample\n\njulia> optimizer_model_expression(my_expr) # finite expression\nx(support: 1) - y\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_expression","page":"Optimization","title":"InfiniteOpt.optimizer_model_expression","text":"optimizer_model_expression(expr, key::Val{ext_key_name}; [kwargs...])\n\nReturn the reformulation expression(s) stored in the optimizer model that correspond to expr. This needs to be defined for extensions that implement a custom optimizer model type. Principally, this is accomplished by typed the key argument to Val{ext_key_name}. Keyword arguments can be added as needed. Note that if expr is a GeneralVariableRef this just dispatches to optimizer_model_variable.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.supports-Tuple{AbstractJuMPScalar}","page":"Optimization","title":"InfiniteOpt.supports","text":"supports(expr::JuMP.AbstractJuMPScalar; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel,\n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the support associated with expr. Errors if expr is not associated with the constraint mappings stored in optimizer_model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of expression_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  expressions are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the expression has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(cref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.expression_supports","page":"Optimization","title":"InfiniteOpt.expression_supports","text":"expression_supports(optimizer_model::JuMP.Model, expr,\n                    key::Val{ext_key_name}; [kwargs...])\n\nReturn the supports associated with the mappings of expr in optimizer_model. This dispatches off of key which permits optimizer model extensions. This should throw an error if expr is not associated with the variable mappings stored in optimizer_model. Keyword arguments can be added as needed. Note that if expr is a GeneralVariableRef this just dispatches to variable_supports.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_constraint-Tuple{InfOptConstraintRef}","page":"Optimization","title":"InfiniteOpt.optimizer_model_constraint","text":"optimizer_model_constraint(cref::InfOptConstraintRef; \n                           [label::Type{<:AbstractSupportLabel} = PublicLabel, \n                           ndarray::Bool = false,\n                           kwargs...])\n\nReturn the reformulation constraint(s) stored in the optimizer model that correspond to cref. Errors if no such constraint can be found in the optimizer model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of optimizer_model_constraint. Errors if such an extension has not been written. \n\nBy default only the constraints associated with public supports are returned, the  full set can be accessed via label = All. Moreover, infinite constraints are  returned as a list corresponding to their supports. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies. The corresponding supports are obtained via  supports using the same keyword arguments.\n\nExample\n\njulia> optimizer_model_constraint(c1) # finite constraint\nc1 : x(support: 1) - y <= 3.0\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_constraint","page":"Optimization","title":"InfiniteOpt.optimizer_model_constraint","text":"optimizer_model_constraint(cref::InfOptConstraintRef,\n                           key::Val{ext_key_name}; [kwargs...])\n\nReturn the reformulation constraint(s) stored in the optimizer model that correspond to cref. This needs to be defined for extensions that implement a custom optimizer model type. Principally, this is accomplished by typed the key argument to Val{ext_key_name}. Keyword arguments can be added as needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.supports-Tuple{InfOptConstraintRef}","page":"Optimization","title":"InfiniteOpt.supports","text":"supports(cref::InfOptConstraintRef; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel,\n         ndarray::Bool = false,\n         kwargs...])\n\nReturn the support associated with cref. Errors if cref is not associated with the constraint mappings stored in optimizer_model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ in accordance with their implementation of constraint_supports. Errors if such an extension has not been written. \n\nBy default only the public supports are returned, the  full set can be accessed via label = All. Moreover, the supports of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nExample\n\njulia> supports(cref)\n2-element Array{Tuple{Float64},1}:\n (0.0,)\n (1.0,)\n\n\n\n\n\n","category":"method"},{"location":"manual/optimize/#InfiniteOpt.constraint_supports","page":"Optimization","title":"InfiniteOpt.constraint_supports","text":"constraint_supports(optimizer_model::JuMP.Model, \n                    cref::InfOptConstraintRef,\n                    key::Val{ext_key_name}; [kwargs...])\n\nReturn the supports associated with the mappings of cref in optimizer_model. This dispatches off of key which permits optimizer model extensions. This should throw an error if cref is not associated with the variable mappings stored in optimizer_model. Keyword arguments can be added as needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.optimizer_model_ready","page":"Optimization","title":"InfiniteOpt.optimizer_model_ready","text":"optimizer_model_ready(model::InfiniteModel)::Bool\n\nReturn Bool if the optimizer model is up to date with model.\n\nExample\n\njulia> optimizer_model_ready(model)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"manual/optimize/#InfiniteOpt.set_optimizer_model_ready","page":"Optimization","title":"InfiniteOpt.set_optimizer_model_ready","text":"set_optimizer_model_ready(model::InfiniteModel, status::Bool)\n\nSet the status of the optimizer model to whether it is up to date or not. Note is more intended as an internal function, but is useful for extensions.\n\nExample\n\njulia> set_optimizer_model_ready(model, true)\n\njulia> optimizer_model_ready(model)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"DocTestFilters = [r\"≤|<=\", r\"≥|>=\", r\" == | = \", r\" ∈ | in \", r\"MathOptInterface|MOI\", \n                  r\" for all | ∀ \", r\"d|∂\"]","category":"page"},{"location":"guide/transcribe/#transcription_docs","page":"Model Transcription","title":"Model Transcription","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"A guide for transcribing infinite models in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/transcribe/#Overview","page":"Model Transcription","title":"Overview","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"All infinite models need to be reformulated in such a way that they can be solved  using traditional optimization methods. Typically, this involves discretization  of the infinite domain via particular parameter support points. By default,  InfiniteOpt employs this methodology via the use of transcription models (which  comprise the optimizer_model as discussed in the  Infinite Models section). InfiniteOpt is built  modularly to readily accept other user defined techniques and this is discussed  in further detail on the Extensions page. This page will detail  transcription models based in InfiniteOpt.TranscriptionOpt which provide the  default transcription (reformulation) capabilities of InfiniteOpt.","category":"page"},{"location":"guide/transcribe/#Basic-Usage","page":"Model Transcription","title":"Basic Usage","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Most users will not need to employ the capabilities of TranscriptionOpt directly  since they are employed implicitly with the call of  optimize! on an infinite model. This  occurs since TranscriptionModels are the default optimizer model type that is  employed. ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"However, some users may wish to use TranscriptionOpt to extract a fully  discretized/transcribed version of an infinite model that is conveniently output  as a typical JuMP model and can then be treated as such. This is principally  accomplished via build_optimizer_model!. To illustrate how this is done,  let's first define a basic infinite model with a simple support structure for the  sake of example:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> using InfiniteOpt\n\njulia> inf_model = InfiniteModel();\n\njulia> @infinite_parameter(inf_model, t in [0, 10], supports = [0, 5, 10])\nt\n\njulia> @variable(inf_model, y >= 0, Infinite(t))\ny(t)\n\njulia> @variable(inf_model, z, Bin)\nz\n\njulia> @objective(inf_model, Min, 2z + support_sum(y, t))\n2 z + support_sum{t}[y(t)]\n\njulia> @constraint(inf_model, initial, y(0) == 1)\ninitial : y(0) = 1.0\n\njulia> @constraint(inf_model, constr, y^2 - z <= 42)\nconstr : y(t)² - z ≤ 42.0, ∀ t ∈ [0, 10]\n\njulia> print(inf_model)\nMin 2 z + support_sum{t}[y(t)]\nSubject to\n y(t) ≥ 0.0, ∀ t ∈ [0, 10]\n z binary\n y(0) ≥ 0.0\n initial : y(0) = 1.0\n constr : y(t)² - z ≤ 42.0, ∀ t ∈ [0, 10]","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now we can make JuMP model containing the transcribed version of inf_model  via build_optimizer_model! and then extract it via  optimizer_model:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> build_optimizer_model!(inf_model)\n\njulia> trans_model = optimizer_model(inf_model)\nA JuMP Model\nMinimization problem with:\nVariables: 4\nObjective function type: AffExpr\n`AffExpr`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\n`QuadExpr`-in-`MathOptInterface.LessThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.ZeroOne`: 1 constraint\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\njulia> print(trans_model)\nMin 2 z + y(support: 1) + y(support: 2) + y(support: 3)\nSubject to\n initial(support: 1) : y(support: 1) = 1.0\n constr(support: 1) : y(support: 1)² - z ≤ 42.0\n constr(support: 2) : y(support: 2)² - z ≤ 42.0\n constr(support: 3) : y(support: 3)² - z ≤ 42.0\n y(support: 1) ≥ 0.0\n y(support: 2) ≥ 0.0\n y(support: 3) ≥ 0.0\n z binary","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"note: Note\nPrevious versions of InfiniteOpt, employed a TranscriptionModel(model::InfiniteModel)  constructor to build transcription models independently of the optimizer model.  This has functionality has been removed in favor of internal optimizer model  based builds for efficiency reasons and to properly manage MOI optimizer  attributes.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Thus, we have a transcribed JuMP model. To be precise this is actually a  TranscriptionModel which is a JuMP.Model with some extra data stored in the  ext field that retains the mapping between the transcribed variables/constraints  and their infinite counterparts. Notice, that multiple finite variables  have been introduced to discretize y(t) at supports 1, 2, and 3 which correspond  to 0, 5, and 10 as can be queried by supports:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> supports(y)\n3-element Vector{Tuple}:\n (0.0,)\n (5.0,)\n (10.0,)","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Also, notice how the constraints are transcribed in accordance with these supports  except the initial condition which naturally is only invoked for the first support  point. Furthermore, the transcription variable(s) of any variable associated with  the infinite model can be determined via transcription_variable:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> transcription_variable(y)\n3-element Vector{VariableRef}:\n y(support: 1)\n y(support: 2)\n y(support: 3)\n\njulia> transcription_variable(trans_model, z)\nz","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Similarly, the transcription constraints associated with infinite model constraints  can be queried via transcription_constraint and the associated supports  and infinite parameters can be found via supports and parameter_refs:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> transcription_constraint(initial)\ninitial(support: 1) : y(support: 1) = 1.0\n\njulia> transcription_constraint(constr)\n3-element Vector{ConstraintRef}:\n constr(support: 1) : y(support: 1)² - z ≤ 42.0\n constr(support: 2) : y(support: 2)² - z ≤ 42.0\n constr(support: 3) : y(support: 3)² - z ≤ 42.0\n\njulia> supports(constr)\n3-element Vector{Tuple}:\n (0.0,)\n (5.0,)\n (10.0,)\n\njulia> parameter_refs(constr)\n(t,)","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Note the parameter reference tuple corresponds to the support tuples. ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"note: Note\nMethod that query the transcription surrogates (e.g., transcription_variable)  and the respective supports via supports also accept the keyword argument  label to specify which that transcription objects are desired in accordance  to the support labels that are inherited from and/or are equal to label. By  default, this will return any supports that are public (i.e., will hide anything  solely associated with internal supports). The full query response can always  be obtained via label = All.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now we have a transcribed JuMP model that can be optimized via traditional  JuMP methods whose variables and constraints can be accessed using the methods  mentioned above.","category":"page"},{"location":"guide/transcribe/#Transcription-Theory","page":"Model Transcription","title":"Transcription Theory","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"A given infinite-dimensional optimization problem is parameterized according to  infinite parameters following our abstraction. In general, most solution strategies  transcribe the problem according to certain finite parameter values (supports) and  thus represent the problem in terms of these supports (e.g., using discrete time  points in dynamic optimization). This methodology can be generalized into the  following steps:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"define supports for each infinite parameter if not already defined,\nadd any additional support needed for derivative evaluation,\nexpand any measures according to their underlying numerical representation ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"using transcribed infinite variables as appropriate,","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"replace any remaining infinite variables/derivatives with transcribed  variables supported over each unique combination of the underlying parameter  supports,\nreplace any remaining infinite constraints with transcribed ones supported over ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"all the unique support combinations stemming from the infinite parameters they     depend on,","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"and add on the transcribed versions of the auxiliary derivative evaluation ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"equations. ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"For example, let's consider a space-time optimization problem of the form:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"beginaligned\n\tmin_y(t) g(t x)  int_0^10 y^2(t) dt \n\ttextst  y(0) = 1 \n\t int_x in -1 1^2 fracpartial g(t x)partial t dx = 42  forall t in 0 10 \n   3g(t x) + 2y^2(t) leq 2  forall t in T  x in -1 1^2 \nendaligned","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Thus, we have an optimization problem whose decision space is infinite with  respect to time t and position x. Now let's transcript it following the  above steps. First, we need to specify the infinite parameter supports and for  simplicity let's choose the following sparse sets:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"t in 0 10\nx in -1 -1^T -1 1^T 1 -1^T 1 1^T.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"To handle the derivative fracpartial g(t x)partial t, we'll use    backward finite difference so no additional supports will need to be added.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now we expand the two integrals (measures) via a finite approximation using only  the above supports and term coefficients of 1 (note this is not numerically  correct but is done for conciseness in example). Doing this, we obtain the  form:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"beginaligned\n\tmin_y(t) g(t x)  y^2(0) + y^2(10) \n\ttextst  y(0) = 1 \n   g(0 x) = 0 \n\t fracpartial g(t -1 -1)partial t + fracpartial g(t -1 1)partial t + fracpartial g(t 1 -1)partial t + fracpartial g(t 1 1)partial t = 42  forall t in 0 10 \n   3g(t x) + 2y^2(t) leq 2  forall t in T  x in -1 1^2 \nendaligned","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Notice that the infinite variable y(t) in the objective measure has been  replaced with finite transcribed variables y(0) and y(10). Also, the  infinite derivative fracpartial g(t x)partial t was replaced with   partially transcribed variables in the second constraint in accordance with the  measure over the positional domain x.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now we need to transcribe the remaining infinite and semi-infinite variables  with finite variables and duplicate the remaining infinite constraints accordingly.  This means that the second constraint needs to be transcribed over the time domain  and the third constraint needs to be transcribed for each unique combination  of the time and position supports. Applying this transcription yields: ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"beginaligned\n\tmin_y(t) g(t x)  y^2(0) + y^2(10) \n\ttextst  y(0) = 1 \n   g(0 -1 -1) = 0 \n   g(0 -1 1) = 0 \n   g(0 1 -1) = 0 \n   g(0 1 1) = 0 \n\t fracpartial g(0 -1 -1)partial t + fracpartial g(0 -1 1)partial t + fracpartial g(0 1 -1)partial t + fracpartial g(0 1 1)partial t = 42\n   fracpartial g(10 -1 -1)partial t + fracpartial g(10 -1 1)partial t + fracpartial g(10 1 -1)partial t + fracpartial g(10 1 1)partial t = 42\n   3g(0 -1 -1) + 2y^2(0) leq 2 \n   3g(0 -1 1) + 2y^2(0) leq 2 \n   vdots \n   3g(10 1 1) + 2y^2(10) leq 2\nendaligned","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now that the variables and constraints are are transcribed, all that remains is  to add relations to define the behavior of the transcribed partial derivatives.  We can accomplish this via backward finite difference which will just add one  infinite equation in this case this we only have 2 supports in the time domain  is then transcribed over the spatial domain to yield:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"beginaligned\n g(10 -1 -1) = g(0 -1 -1) + 10fracpartial g(10 -1 -1)partial t \n g(10 -1 1) = g(0 -1 1) + 10fracpartial g(10 -1 1)partial t \n g(10 1 -1) = g(0 1 -1) + 10fracpartial g(10 1 -1)partial t \n g(10 1 1) = g(0 1 1) + 10fracpartial g(10 1 1)partial t\nendaligned","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Now the problem is fully transcribed (discretized) and can be solved as a  standard optimization problem. Note that with realistic measure evaluation  schemes more supports might be added to the support sets and these will need to  be incorporated when transcribing variables and constraints.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"It is easy to imagine how the above procedure can get quite involved to do manually,  but this is precisely what InfiniteOpt automates behind the scenes. Let's  highlight this by repeating the same example using InfiniteOpt (again using  the incorrect simple representation for the integrals for conciseness).","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"using InfiniteOpt\n\n# Initialize model\ninf_model = InfiniteModel()\n\n# Define parameters and supports\n@infinite_parameter(inf_model, t in [0, 10], supports = [0, 10])\n@infinite_parameter(inf_model, x[1:2] in [-1, 1], supports = [-1, 1], independent = true)\n\n# Define variables\n@variable(inf_model, y, Infinite(t))\n@variable(inf_model, g, Infinite(t, x))\n\n# Set the objective (using support_sum for the integral given our simple example)\n# Note: In real problems integral should be used\n@objective(inf_model, Min, support_sum(y^2, t))\n\n# Define the constraints\n@constraint(inf_model, y(0) == 1)\n@constraint(inf_model, g(0, x) == 0)\n@constraint(inf_model, support_sum(deriv(g, t), x) == 42) # support_sum for simplicity\n@constraint(inf_model, 3g + y^2 <= 2)\n\n# Print the infinite model\nprint(inf_model)\n\n# output\nMin support_sum{t}[y(t)²]\nSubject to\n y(0) = 1.0\n g(0, [x[1], x[2]]) = 0.0, ∀ x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]\n support_sum{x}[∂/∂t[g(t, x)]] = 42.0, ∀ t ∈ [0, 10]\n y(t)² + 3 g(t, x) ≤ 2.0, ∀ t ∈ [0, 10], x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Thus, we obtain the infinite problem in InfiniteOpt. As previously noted,  transcription would be handled automatically behind the scenes when the model is  optimized. However, we can directly extract the transcribed version by building a  TranscriptionModel:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> build_optimizer_model!(inf_model)\n\njulia> trans_model = optimizer_model(inf_model);\n\njulia> print(trans_model)\nMin y(support: 1)² + y(support: 2)²\nSubject to\n y(support: 1) = 1.0\n g(support: 1) = 0.0\n g(support: 3) = 0.0\n g(support: 5) = 0.0\n g(support: 7) = 0.0\n ∂/∂t[g(t, x)](support: 1) + ∂/∂t[g(t, x)](support: 3) + ∂/∂t[g(t, x)](support: 5) + ∂/∂t[g(t, x)](support: 7) = 42.0\n ∂/∂t[g(t, x)](support: 2) + ∂/∂t[g(t, x)](support: 4) + ∂/∂t[g(t, x)](support: 6) + ∂/∂t[g(t, x)](support: 8) = 42.0\n g(support: 1) - g(support: 2) + 10 ∂/∂t[g(t, x)](support: 2) = 0.0\n g(support: 3) - g(support: 4) + 10 ∂/∂t[g(t, x)](support: 4) = 0.0\n g(support: 5) - g(support: 6) + 10 ∂/∂t[g(t, x)](support: 6) = 0.0\n g(support: 7) - g(support: 8) + 10 ∂/∂t[g(t, x)](support: 8) = 0.0\n y(support: 1)² + 3 g(support: 1) ≤ 2.0\n y(support: 2)² + 3 g(support: 2) ≤ 2.0\n y(support: 1)² + 3 g(support: 3) ≤ 2.0\n y(support: 2)² + 3 g(support: 4) ≤ 2.0\n y(support: 1)² + 3 g(support: 5) ≤ 2.0\n y(support: 2)² + 3 g(support: 6) ≤ 2.0\n y(support: 1)² + 3 g(support: 7) ≤ 2.0\n y(support: 2)² + 3 g(support: 8) ≤ 2.0","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"This precisely matches what we found analytically. Note that the unique support  combinations are determined automatically and are represented visually as  support: #. The precise support values can be looked up via supports:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> supports(y)\n2-element Vector{Tuple}:\n (0.0,)\n (10.0,)\n\njulia> supports(g)\n8-element Vector{Tuple}:\n (0.0, [-1.0, -1.0])\n (10.0, [-1.0, -1.0])\n (0.0, [1.0, -1.0])\n (10.0, [1.0, -1.0])\n (0.0, [-1.0, 1.0])\n (10.0, [-1.0, 1.0])\n (0.0, [1.0, 1.0])\n (10.0, [1.0, 1.0])\n\njulia> supports(g, ndarray = true) # format it as an n-dimensional array (t by x[1] by x[2])\n2×2×2 Array{Tuple, 3}:\n[:, :, 1] =\n (0.0, [-1.0, -1.0])   (0.0, [1.0, -1.0])\n (10.0, [-1.0, -1.0])  (10.0, [1.0, -1.0])\n\n[:, :, 2] =\n (0.0, [-1.0, 1.0])   (0.0, [1.0, 1.0])\n (10.0, [-1.0, 1.0])  (10.0, [1.0, 1.0])","category":"page"},{"location":"guide/transcribe/#TranscriptionOpt","page":"Model Transcription","title":"TranscriptionOpt","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"InfiniteOpt.TranscriptionOpt is a sub-module which principally implements  TranscriptionModels and its related access/modification methods. Thus,  this section will detail what these are and how they work.","category":"page"},{"location":"guide/transcribe/#TranscriptionModels","page":"Model Transcription","title":"TranscriptionModels","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"A TranscriptionModel is simply a JuMP.Model whose ext field contains  TranscriptionData which acts to map the transcribed model back to the  original infinite model (e.g., map the variables and constraints). Such models  are constructed via a default version of  build_optimizer_model!  which wraps build_transcription_model!:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> model1 = TranscriptionModel() # make an empty model\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\n\njulia> build_optimizer_model!(inf_model); \n\njulia> model2 = optimizer_model(inf_model) # generate from an InfiniteModel\nA JuMP Model\nMinimization problem with:\nVariables: 4\nObjective function type: AffExpr\n`AffExpr`-in-`MathOptInterface.EqualTo{Float64}`: 1 constraint\n`QuadExpr`-in-`MathOptInterface.LessThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.ZeroOne`: 1 constraint\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Note that the all the normal JuMP.Model arguments can be used with both  constructor when making an empty model and they are simply inherited from those   specified in the InfiniteModel. The call to build_optimizer_model! is the backbone  behind infinite model transcription and is what encapsulates all of the methods to  transcribe measures, variables, derivatives, and constraints. This is also the  method that enables the use of optimize!.","category":"page"},{"location":"guide/transcribe/#Queries","page":"Model Transcription","title":"Queries","text":"","category":"section"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"In this section we highlight a number of query methods that pertain to  TranscriptionModels and their mappings. First, if the optimizer_model of an  InfiniteModel is a TranscriptionModel it can be extracted via  transcription_model:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> transcription_model(inf_model)\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Here we observe that such a model is currently empty and hasn't been populated  yet. Furthermore, we check that a Model is an TranscriptionModel via  is_transcription_model: ","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> is_transcription_model(optimizer_model(inf_model))\ntrue\n\njulia> is_transcription_model(Model())\nfalse","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"We can also extract the raw TranscriptionData object from a  TranscriptionModel via transcription_data.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> transcription_data(trans_model);","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Next we can retrieve the JuMP variable(s) for a particular InfiniteOpt  variable via transcription_variable. For finite variables, this will  be a one to one mapping, and for infinite variables a list of supported variables  will be returned in the order of the supports. Following the initial example in  the basic usage section, this is done:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> build_optimizer_model!(inf_model); trans_model = optimizer_model(inf_model);\n\njulia> transcription_variable(trans_model, y)\n3-element Vector{VariableRef}:\n y(support: 1)\n y(support: 2)\n y(support: 3)\n\njulia> transcription_variable(trans_model, z)\nz","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Note that if the TranscriptionModel is stored as the current optimizer_model  then the first argument (specifying the TranscriptionModel can be omitted). Thus,   in this case the first argument can be omitted as it was above, but is shown for  completeness.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Similarly, the parameter supports corresponding to the transcription variables  (in the case of transcribed infinite variables) can be queried via  supports:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> supports(y)\n3-element Vector{Tuple}:\n (0.0,)\n (5.0,)\n (10.0,)","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"note: Note\nNote that like supports the transcription_[obj] methods also employ the  label::Type{AbstractSupportLabel} = PublicLabel keyword argument that by  default will return variables/expressions/constraints associated with public  supports. The full set (e.g., ones corresponding to internal collocation nodes)  is obtained via label = All. \nThese methods also employ the ndarray::Bool keyword argument that will cause the  output to be formatted as a n-dimensional array where the dimensions  correspond to the infinite parameter dependencies. For example, if we have an  infinite variable y(t, ξ) and we invoke a query method with ndarray = true  then we'll get a matrix whose dimensions correspond to the supports of t and  ξ, respectively. Also, if ndarray = true then label correspond to the  intersection of supports labels in contrast to its default of invoking the union  of the labels.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"Likewise, transcription_constraint and  supports(@ref) can be used with constraints to find their transcribed   equivalents in the JuMP model and determine their supports.","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"We can also do this with measures and expressions:","category":"page"},{"location":"guide/transcribe/","page":"Model Transcription","title":"Model Transcription","text":"julia> meas = support_sum(y^2, t)\nsupport_sum{t}[y(t)²]\n\njulia> build_optimizer_model!(inf_model)\n\njulia> transcription_variable(meas)\ny(support: 1)² + y(support: 2)² + y(support: 3)²\n\njulia> supports(meas)\n()\n\njulia> transcription_expression(y^2 + z - 42)\n3-element Vector{Any}:\n y(support: 1)² + z - 42\n y(support: 2)² + z - 42\n y(support: 3)² + z - 42\n\njulia> supports(y^2 + z - 42)\n3-element Vector{Tuple}:\n (0.0,)\n (5.0,)\n (10.0,)\n\njulia> parameter_refs(y^2 + z - 42)\n(t,)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"DocTestFilters = [r\" ∈ | in \", r\"E|𝔼\", r\"integral|∫\"]","category":"page"},{"location":"guide/measure/#measure_docs","page":"Measures","title":"Measure Operators","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"A guide for measure operators in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/measure/#Overview","page":"Measures","title":"Overview","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Measure operators are objects that capture the evaluation of an expression with respect  to parameters, which is a distinct feature of optimization problems with  infinite decision spaces. In dynamic optimization measures can represent integral  terms such as the total cost over time, and in stochastic optimization measures  can represent integrals over the uncertain parameters, such as expectations. In  InfiniteOpt, measures are general operators that can be uni-variate or   multi-variate. Natively we employ measure abstractions that employ discretization   schemes, which evaluate the expression at a set of points over the parameter space and  approximates the measures based on the expression values at these points. However,  we support the use of alternative measure operator paradigms.","category":"page"},{"location":"guide/measure/#measure_basic_usage","page":"Measures","title":"Basic Usage","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"First, we consider a dynamic optimization problem with the time parameter t  from 0 to 10. We also consider a state variable y(t) and a control variable  u(t) that are parameterized by t:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> @infinite_parameter(model, t in [0, 10], supports = [0, 5, 10])\nt\n\njulia> @variable(model, y, Infinite(t))\ny(t)\n\njulia> @variable(model, u, Infinite(t))\nu(t)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Now suppose we want to evaluate the integral int_2^8y(t)^2 + u(t)^2 dt.  We can construct a measure to represent this integral using the  integral function","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref1 = integral(y^2 + u^2, t, 2, 8)\n∫{t ∈ [2, 8]}[y(t)² + u(t)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The four positional arguments of integral are the integrand expression,   the parameter of integration, the lower bound, and the upper bound, respectively.  Specifying the integrand expression and the parameter of integration is required.  If the lower and upper bounds are not specified, then the integration will  be over the entire domain, which is 0 10 in this case.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The integral function uses trapezoid rule as the default discretization scheme  for univariate parameters in finite IntervalDomains. In addition, the user can also  use quadrature methods for univariate parameters in all IntervalDomains by setting  the keyword argument eval_method as Quadrature():","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref2 = integral(y^2 + u^2, t, eval_method = Quadrature())\n∫{t ∈ [0, 10]}[y(t)² + u(t)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The integral function also allows for specifying other keyword arguments that  correspond to the chosen evaluation method. For example, when using  FEGaussLobatto as the evaluation method we can specify the number of  discretization points per finite element via num_nodes. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref3 = ∫(y^2 + u^2, t, eval_method = FEGaussLobatto(), num_nodes = 3)\n∫{t ∈ [0, 10]}[y(t)² + u(t)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Notice here how we used ∫ in place of integral as a convenient wrapper.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Two other explicit measure type methods include expect for expectations  and support_sum for summing an expression over the support points of  selected infinite parameters. The syntax for these is analogous to that of integral  except that there are no lower/upper bounds. For example, we can define the following  expectation of a random expression:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> m = InfiniteModel();\n\njulia> @infinite_parameter(m, ξ ~ Normal(), num_supports = 100);\n\njulia> @variable(m, x, Infinite(ξ));\n\njulia> expect_x = expect(x^2, ξ)\n𝔼{ξ}[x(ξ)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"note: Note\nFor integrals, expectations, and support sums involving moderate to large  expressions, the macro versions @integral, @expect, and  @support_sum should be used instead of their functional equivalents  for better performance.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"note: Note\nFor convenience in compact representation we can use ∫, @∫,  𝔼, and @𝔼 as wrappers for integral,  @integral, expect, and @expect, respectively.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Other measure paradigms can be implemented via measure as described in  the sections further below.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Depending on the type of measures created, support points may be generated  at the time of creating the measures. In these cases, the new support points  will be added to the support list of the integrated parameter.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Once a measure is created, the evaluation of that measure is stored in a  measure data object. Users can query the measure data object using the  measure_data function as follows ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> meas_data = measure_data(mref2);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Natively in InfiniteOpt, two types of measure data objects are used to store the measure  data information depending on the nature of the measures created: DiscreteMeasureData and  FunctionalDiscreteMeasureData. For more details on the measure data object,  refer to Measure Data Generation.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Similarly, one can also query the expression the measure operates on using  measure_function:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> measure_function(mref3)\ny(t)² + u(t)²","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In addition to eval_method, the integral function  also accepts weight_func as keyword argument, which dictates the weight function  of the measure. Now suppose we want to create multiple measures that share the   same keyword argument values that are different from the defaults. We don't have  to input the keyword argument values every time we construct a new measure.  Instead, we can modify the default values of measure keyword arguments, and  construct measures using the new default values. To do that, we use the functions  set_uni_integral_defaults and set_multi_integral_defaults. We  can in turn reset these via clear_uni_integral_defaults and  clear_multi_integral_defaults. Adding new keyword arguments will be  useful if users want to extend the measure functions with their custom  representation/evaluation schemes that need to take additional arguments somehow.  See Extensions for more details.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"We can also use the pdf keyword argument for [expect] over interval domains  which allows us to specify the density function we would like to use. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Now we can add measures to the constraints and objective functions in our  model. For more detailed information, please review the information below.","category":"page"},{"location":"guide/measure/#Theoretical-Abstraction","page":"Measures","title":"Theoretical Abstraction","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In InfiniteOpt, measures denote operators M_ell that operate on some infinite  expression y over the infinite domain mathcalD_ell associated with  the infinite parameter ell:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"M_elly  mathcalD_-ell mapsto mathbbR^n_y","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Such a paradigm can capture a wide variety of mathematical operators commonly  encountered in infinite-dimensional programming such as integrals, expectations,  risk measures, and chance constraints.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Currently, InfiniteOpt natively contains programmatic objects for measures that  can be represented as integrals of the form:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"int_tau in mathcalT f(tau)w(tau) dtau","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"where tau is a (possibly multivariate) infinite parameter, f(tau) is an  expression parameterized by tau, w(tau) is a weight function, and  mathcalT is a subset of the domain of tau. The measures approximate  the integrals by taking a discretization scheme","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"int_tau in mathcalT f(tau)w(tau) dtau approx sum_i=1^N alpha_i f(tau_i) w(tau_i)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"where tau_i are the grid points where the expression f(tau) is  evaluated, and N is the total number of points taken.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"This is the abstraction behind both DiscreteMeasureData and  FunctionalDiscreteMeasureData which are the native measure data types  in InfiniteOpt. The Measure Data Generation section below details how  these can be implemented to enable schemes that fit this mathematical paradigm, but  lie out of the realm of the supported features behind integral, expect, and  support_sum.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"More complex measure paradigms can also be implemented by creating concrete  subtype of AbstractMeasureData as detailed in  Measure Data Section on our extensions page.","category":"page"},{"location":"guide/measure/#Measure-Data-Generation","page":"Measures","title":"Measure Data Generation","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The general measure function takes two arguments: the argument expression and  a measure data object that contains the details of the measure representation.  Measure data objects can be constructed using DiscreteMeasureData,  where the parameter of integration, the coefficients alpha_i, and the  support points need to be defined explicitly. For example, if we want to  evaluate a function at each integer time point between 0 and 10, we  can construct the following measure data object to record this discretization  scheme:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> md_t = DiscreteMeasureData(t, ones(10), [i for i in 1:10]);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The arguments of DiscreteMeasureData are parameter, coefficients, and  supports. The default weight function is w(tau) = 1 for  any tau, which can be overwritten by the keyword argument weight_function.  The weight_function should take a function that returns a number for any  value that is well defined for the integrated infinite parameter. The data type  is DiscreteMeasureData, which is a subtype of the abstract data type  AbstractMeasureData.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"With DiscreteMeasureData, a measure can be generated in a custom and  quick manner. For example, using the measure data above, we can define a measure  for y^2 as follows:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref = measure(y^2, md_t)\nmeasure{t}[y(t)²]","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In the same way, we can define measure data for multi-variate infinite parameters.  For example, we can define a discretization scheme for a 2D position parameter  x in 0 1 times 0 1 as follows:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> @infinite_parameter(model, x[1:2] in [0, 1])\n2-element Vector{GeneralVariableRef}:\n x[1]\n x[2]\n\njulia> md_x = DiscreteMeasureData(x, 0.25 * ones(4), [[0.25, 0.25], [0.25, 0.75], [0.75, 0.25], [0.75, 0.75]]);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"where md_x cuts the domain into four 0.5-by-0.5 squares, and evaluates the  integrand on the center of these squares. Note that for multivariate parameters,   each support point should be an AbstractArray that stores the value at each dimension. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In addition to the intuitive [DiscreteMeasureData], another type of measure data   object is FunctionalDiscreteMeasureData. This type captures measure data  where the support points are not known at the time of measure data creation. Instead of   storing the specific support and coefficient values, FunctionalDiscreteMeasureData  stores the minimum number of supports required for the measure, and a coefficient function  that maps supports to coefficients. When the measure is built on a FunctionalDiscreteMeasureData   is evaluated (expanded), supports will be generated based on the functions stored in   the data object. The method of support generation is recorded as a label in the  measure object. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"For example, suppose we want to uniformly generate at least 20 Monte Carlo samples   over the interval that t is in. A build-in label UniformGrid can be used to  signify the use of this method. A FunctionalDiscreteMeasureData can be created as follows:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> coeff_f(supports) = [(10 - 0) / length(supports) for i in supports]\ncoeff_f (generic function with 1 method)\n\njulia> fmd_t = FunctionalDiscreteMeasureData(t, coeff_f, 20, UniformGrid);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"For more details see FunctionalDiscreteMeasureData. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Our higher-level measure methods, such as integral, do not require  explicit construction of the measure data object and instead serve as wrappers  that construct the appropriate data object and then call measure.","category":"page"},{"location":"guide/measure/#Evaluation-Methods","page":"Measures","title":"Evaluation Methods","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The integral function calls generate_integral_data under the hood  to construct the measure data object. generate_integral_data takes as  positional arguments the integrated parameter, lower bound, upper bound, and method, and returns  a measure data object of type AbstractMeasureData.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"generate_integral_data applies multiple dispatch to encode different  support generation methods depending on the input eval_method. Each dispatch is distinguished by  the method, which takes a concrete subtype of AbstractIntegralMethod.  Each dispatch of generate_integral_data implements the specified method and returns  the resulting measure data, which will be used by @integral to create the measure.  A table of available method options in our package is listed below.  Each method is limited on the dimension of parameter and/or the type of domain  that it can apply for. For the details of what each method type means, refer to the corresponding  docstrings.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Evaluation Method Uni/Multi-Variate? Weight Function Domain Type\nAutomatic() Both 1 Any\nUniTrapezoid() Both 1 IntervalDomain\nUniMCSampling() Univariate 1 Finite IntervalDomain\nUniIndepMCSampling() Univariate 1 Finite IntervalDomain\nQuadrature() Univariate 1 IntervalDomain\nGaussLegendre() Univariate 1 Finite IntervalDomain\nGaussRadau() Univariate 1 Finite IntervalDomain\nGaussJacobi(α, β) Univariate (1-x)^alpha (1+x)^beta Finite IntervalDomain\nGaussLobatto() Univariate 1 Finite IntervalDomain\nFEGaussLobatto() Univariate 1 Finite IntervalDomain\nGaussChebyshev(1) Univariate frac1sqrt1-x^2 Finite IntervalDomain\nGaussChebyshev(2) Univariate sqrt1-x^2 Finite IntervalDomain\nGaussChebyshev(3) Univariate sqrt(1+x)(1-x) Finite IntervalDomain\nGaussChebyshev(4) Univariate sqrt(1-x)(1+x) Finite IntervalDomain\nGaussLaguerre() Univariate e^-x Semi-infinite IntervalDomain\nGaussHermite() Univariate e^-x^2 Infinite IntervalDomain\nMultiMCSampling() Multivariate 1 Finite IntervalDomain\nMultiIndepMCSampling() Multivariate 1 Finite IntervalDomain","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The eval method FEGaussLobatto creates finite elements by decomposing over the  supports that have been added to the integral parameter and then approximates the  integral over each finite element via Lobatto quadrature using num_nodes.  All other Gauss quadrature methods do not incorporate any existing supports nor  do they decompose the integral into finite elements, but instead generate their  quadrature node points over the entire integral domain. See the  A Note on Support Management Section for more information. This method  will take in the user supports, and create generative supports along each interval  and match them with corresponding coefficients. Here is a depiction of such what  FEGaussLobatto does. ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"(Image: lobatto)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"int_x_1^x_3 f(x) dx = int_x_1^x_2 f(x) dx + int_x_2^x_3 f(x) dx","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"approx sum_i=1^n alpha_ai f(tau_ai) + sum_i=1^n alpha_bi f(tau_bi)","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"= sum_i=1^n (alpha_ai f(tau_ai) + alpha_bi f(tau_bi))","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"where tau_ai and tau_bi are the discrete nodes for the two intervals ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"and alpha_ai and alpha_bi are the coefficients.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> mref_lob = integral(y^2 + u^2, t, num_nodes = 3, eval_method = FEGaussLobatto())\n∫{t ∈ [0, 10]}[y(t)² + u(t)²]\n\njulia> expand(mref_lob)\n0.8333333333333333 y(0)² + 0.8333333333333333 u(0)² + 3.333333333333333 y(2.5)² + 3.333333333333333 u(2.5)² + 1.6666666666666665 y(5)² + 1.6666666666666665 u(5)² + 3.333333333333333 y(7.5)² + 3.333333333333333 u(7.5)² + 0.8333333333333333 y(10)² + 0.8333333333333333 u(10)²\n","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"We set num_nodes = 3 to define the number of nodes (supports) that will be used  at each finite element for the integral approximation. Note that this is inclusive  of the finite element supports, so the number of generative (internal) supports  added to each finite element is num_nodes - 2.  ","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In summary, we natively support trapezoid rule, Gaussian quadrature methods for  univariate parameters, and Monte Carlo sampling for both univariate and  multivariate infinite parameters. For extension purposes, users may define their  own generate_integral_data to encode custom evaluation methods. See  Extensions for more details.","category":"page"},{"location":"guide/measure/#A-Note-on-Support-Management","page":"Measures","title":"A Note on Support Management","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"There is a difference in how supports are considered using UniTrapezoid()/FEGaussLobatto() vs. the other schemes. Namely, the other schemes will NOT incorporate other supports  specified elsewhere in the model. Consider the following example with 3 equidistant  supports and an integral objective function that uses UniTrapezoid() (the default):","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"# Create a model, with one variable and an infinite parameter with a given number of supports\nm = InfiniteModel()\n@infinite_parameter(m, t in [0, 2], num_supports = 3)\n@variable(m, u, Infinite(t))\n\n# Create an objective function with the default trapezoid integration\n@objective(m, Min, integral(u^2, t))\n\n# Get the transcribed model to check how the supports are taken into account\nbuild_optimizer_model!(m)\ntrans_m = optimizer_model(m);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"If we look at how many supports there are, how the variable u is transcribed,  and how the objective function of the transcribed model looks like, we notice that  the same supports are used in both the objective function and the transcribed  variable:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> supports(t) \n3-element Vector{Float64}:\n 0.0\n 1.0\n 2.0\n\njulia> transcription_variable(u)  \n3-element Vector{VariableRef}:\n u(support: 1)\n u(support: 2)\n u(support: 3)\n\njulia> objective_function(trans_m) \n0.5 u(support: 1)² + u(support: 2)² + 0.5 u(support: 3)²","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Thus, the integral incorporates the 3 supports generated outside of the integral  declaration.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Then we readjust the model to use Gauss-Legendre quadrature via GaussLegendre()  that uses 2 quadrature nodes:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"# Set the new objective and update the TranscriptionModel\nset_objective_function(m, integral(u^2, t, eval_method = GaussLegendre(), num_nodes = 2))\nbuild_optimizer_model!(m)\ntrans_m = optimizer_model(m);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Now let's look again at the number of supports, the transcription of u, and the  new objective function:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> supports(t) \n5-element Vector{Float64}:\n 0.0\n 0.42264973081\n 1.0\n 1.57735026919\n 2.0\n\njulia> transcription_variable(u)  \n5-element Vector{VariableRef}:\n u(support: 1)\n u(support: 2)\n u(support: 3)\n u(support: 4)\n u(support: 5)\n\njulia> objective_function(trans_m) \nu(support: 2)² + u(support: 4)²","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"The supports used in the objective function are different from the supports used  in the transcription of u. The integral objective function has been transcribed  using the 2 quadrature supports, but does not include the other supports since  they cannot be incorporated into the Gaussian quadrature approximation. Whereas,  u is defined over all the supports and thus certain realizations of u will  excluded from the objective function which will affect the behavior of the  optimization and lead to unexpected results.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"However, this behavior is avoided if we let the integral add the supports and  not add supports elsewhere (for convenience we'll use set_uni_integral_defaults):","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"# Define a new model, parameter, and variable\nm = InfiniteModel()\n@infinite_parameter(m, t in [0, 2])\n@variable(m, u, Infinite(t))\n\n# Update the integral default keyword arguments for convenience \nset_uni_integral_defaults(eval_method = GaussLegendre(), num_nodes = 2)\n\n# Set the objective with our desired integral\n@objective(m, Min, integral(u^2, t))\n\n# Build the transcribed model \nbuild_optimizer_model!(m)\ntrans_m = optimizer_model(m);","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Then we get the supports are consistent for u and the integral:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> supports(t) \n2-element Vector{Float64}:\n 0.42264973081\n 1.57735026919\n\njulia> transcription_variable(u)  \n2-element Vector{VariableRef}:\n u(support: 1)\n u(support: 2)\n\njulia> objective_function(trans_m) \nu(support: 1)² + u(support: 2)²","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Therefore, using quadratures other than UniTrapezoid() or FEGaussLobatto()  requires careful analysis if there are user-defined supports in the problem. ","category":"page"},{"location":"guide/measure/#Expansion","page":"Measures","title":"Expansion","text":"","category":"section"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In a model, each measure records the integrand expression and an evaluation  scheme that details the discretization scheme to approximate the integral.  The model will not expand the measures until the transcription stage, at which  a JuMP.AbstractJuMPScalar is created for each measure to represent how  the measure is modeled in a transcription model based on the stored  discretization scheme (see Model Transcription for  details on transcription). Additional point variables will be created in the  expansion process if the measure is evaluated at infinite parameter points that  do not have corresponding point variables yet.","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"Sometimes for extension purposes, one might want to expand a specific measure  before reaching the transcription stage. Alternatively, one might want to use  custom reformulation instead of the transcription encoded in this package, in  which expanding measures will also be useful. This can be done using the expand  function, which takes a MeasureRef object and returns a JuMP.AbstractJuMPScalar  based on the AbstractMeasureData. For example, suppose we want to  integrate y^2 in t, with two supports t = 25 and t = 75.  We can set up and expand this measure as follows:","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"julia> tdata = DiscreteMeasureData(t, [5, 5], [2.5, 7.5]);\n\njulia> mref4 = measure(y^2, tdata)\nmeasure{t}[y(t)²]\n\njulia> expanded_measure = expand(mref4)\n5 y(2.5)² + 5 y(7.5)²\n\njulia> typeof(expanded_measure)\nGenericQuadExpr{Float64, GeneralVariableRef}","category":"page"},{"location":"guide/measure/","page":"Measures","title":"Measures","text":"In the expand call, two point variables, y(2.5) and y(7.5), are created  because they are not defined in the model before the expand call. One can use  the expand_all_measures! function to expand all measures in a model,  which simply applies the expand to all measures stored in the model. ","category":"page"},{"location":"manual/domains/#infinite_domains_manual","page":"Infinite Domains","title":"Infinite Domains","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"A technical manual for infinite domains in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/domains/#Domain-Types","page":"Infinite Domains","title":"Domain Types","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"AbstractInfiniteDomain\nInfiniteScalarDomain\nIntervalDomain\nUniDistributionDomain\nInfiniteArrayDomain\nMultiDistributionDomain\nCollectionDomain","category":"page"},{"location":"manual/domains/#InfiniteOpt.AbstractInfiniteDomain","page":"Infinite Domains","title":"InfiniteOpt.AbstractInfiniteDomain","text":"AbstractInfiniteDomain\n\nAn abstract type for domains that characterize infinite parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.InfiniteScalarDomain","page":"Infinite Domains","title":"InfiniteOpt.InfiniteScalarDomain","text":"InfiniteScalarDomain <: AbstractInfiniteDomain\n\nAn abstract type for infinite domains that are one-dimensional.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.IntervalDomain","page":"Infinite Domains","title":"InfiniteOpt.IntervalDomain","text":"IntervalDomain <: InfiniteScalarDomain\n\nA DataType that stores the lower and upper interval bounds for infinite parameters that are continuous over a certain that interval. This is for use with a IndependentParameter.\n\nFields\n\nlower_bound::Float64 Lower bound of the infinite parameter.\nupper_bound::Float64 Upper bound of the infinite parameter.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.UniDistributionDomain","page":"Infinite Domains","title":"InfiniteOpt.UniDistributionDomain","text":"UniDistributionDomain{T <: Distributions.UnivariateDistribution} <: InfiniteScalarDomain\n\nA DataType that stores the distribution characterizing an infinite parameter that is random. This is for use with a IndependentParameter.\n\nFields\n\ndistribution::T Distribution of the random parameter.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.InfiniteArrayDomain","page":"Infinite Domains","title":"InfiniteOpt.InfiniteArrayDomain","text":"InfiniteArrayDomain <: AbstractInfiniteDomain\n\nAn abstract type for multi-dimensional infinite domains.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.MultiDistributionDomain","page":"Infinite Domains","title":"InfiniteOpt.MultiDistributionDomain","text":"MultiDistributionDomain{T <: NonUnivariateDistribution} <: InfiniteArrayDomain\n\nA DataType that stores the distribution characterizing a collection of infinite parameters that follows its form. This is for use with DependentParameters.\n\nFields\n\ndistribution::T Distribution of the random parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.CollectionDomain","page":"Infinite Domains","title":"InfiniteOpt.CollectionDomain","text":"CollectionDomain{T <: InfiniteScalarDomain} <: InfiniteArrayDomain\n\nA DataType that stores a collection of InfiniteScalarDomains characterizing a collection of infinite parameters that follows its form. This is for use with DependentParameters.\n\nFields\n\ndomains::Array{T} The collection of scalar domains.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#Domain-Methods","page":"Infinite Domains","title":"Domain Methods","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"collection_domains\nJuMP.has_lower_bound(::AbstractInfiniteDomain)\nJuMP.lower_bound(::AbstractInfiniteDomain)\nJuMP.set_lower_bound(::AbstractInfiniteDomain, ::Real)\nJuMP.has_upper_bound(::AbstractInfiniteDomain)\nJuMP.upper_bound(::AbstractInfiniteDomain)\nJuMP.set_upper_bound(::AbstractInfiniteDomain, ::Real)","category":"page"},{"location":"manual/domains/#InfiniteOpt.collection_domains","page":"Infinite Domains","title":"InfiniteOpt.collection_domains","text":"collection_domains(domain::AbstractInfiniteDomain)\n\nReturn the array of domains associated with a CollectionDomain. Error if the input domain is not a CollectionDomain.\n\n\n\n\n\n","category":"function"},{"location":"manual/domains/#JuMP.has_lower_bound-Tuple{AbstractInfiniteDomain}","page":"Infinite Domains","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(domain::AbstractInfiniteDomain)::Bool\n\nReturn Bool indicating if domain has a lower bound that can be determined. This should be extended for user-defined infinite domains. It defaults to false for unrecognized domain types.\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> has_lower_bound(domain)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.lower_bound-Tuple{AbstractInfiniteDomain}","page":"Infinite Domains","title":"JuMP.lower_bound","text":"JuMP.lower_bound(domain::AbstractInfiniteDomain)::Union{Real, Vector{<:Real}}\n\nReturn the lower bound of domain if one exists. This should be extended for user-defined infinite domains if appropriate. Errors if JuMP.has_lower_bound returns false. Extensions are enabled by JuMP.has_lower_bound(domain) and JuMP.lower_bound(domain).\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> lower_bound(domain)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.set_lower_bound-Tuple{AbstractInfiniteDomain, Real}","page":"Infinite Domains","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(domain::AbstractInfiniteDomain,\n                     lower::Union{Real, Vector{<:Real}})::AbstractInfiniteDomain\n\nSet and return the lower bound of domain if such an operation makes sense. Errors if the type of domain does not support this operation or has not been extended. User-defined domain types should extend this if appropriate.\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> set_lower_bound(domain, 0.5)\n[0.5, 1]\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.has_upper_bound-Tuple{AbstractInfiniteDomain}","page":"Infinite Domains","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(domain::AbstractInfiniteDomain)::Bool\n\nReturn Bool indicating if domain has a upper bound that can be determined. This should be extended for user-defined infinite domains. It defaults to false for unrecognized domain types.\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> has_upper_bound(domain)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.upper_bound-Tuple{AbstractInfiniteDomain}","page":"Infinite Domains","title":"JuMP.upper_bound","text":"JuMP.upper_bound(domain::AbstractInfiniteDomain)::Union{Real, Vector{<:Real}}\n\nReturn the upper bound of domain if one exists. This should be extended for user-defined infinite domains if appropriate. Errors if JuMP.has_upper_bound returns false. Extensions are enabled by JuMP.has_upper_bound(domain) and JuMP.upper_bound(domain).\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> upper_bound(domain)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#JuMP.set_upper_bound-Tuple{AbstractInfiniteDomain, Real}","page":"Infinite Domains","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(domain::AbstractInfiniteDomain,\n                     upper::Real)::AbstractInfiniteDomain\n\nSet and return the upper bound of domain if such an aoperation makes sense. Errors if the type of domain does not support this operation or has not been extended. User-defined domain types should extend this if appropriate.\n\nExample\n\njulia> domain = InfiniteDomain(0, 1);\n\njulia> set_upper_bound(domain, 0.5)\n[0, 0.5]\n\n\n\n\n\n","category":"method"},{"location":"manual/domains/#Support-Point-Labels","page":"Infinite Domains","title":"Support Point Labels","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"AbstractSupportLabel\nAll\nPublicLabel\nUserDefined\nUniformGrid\nSampleLabel\nMCSample\nWeightedSample\nMixture\nUniqueMeasure\nInfiniteOpt.generate_unique_label\nMeasureBound\nInternalLabel\nInfiniteOpt.MeasureToolbox.InternalGaussLobatto","category":"page"},{"location":"manual/domains/#InfiniteOpt.AbstractSupportLabel","page":"Infinite Domains","title":"InfiniteOpt.AbstractSupportLabel","text":"AbstractSupportLabel\n\nAn abstract type for support label types. These are used to distinguish different  kinds of supports that are added to infinite parameters.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.All","page":"Infinite Domains","title":"InfiniteOpt.All","text":"All <: AbstractSupportLabel\n\nThis support label is unique in that it isn't associated with a particular set of  supports, but rather is used used to indicate that all supports should be used.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.PublicLabel","page":"Infinite Domains","title":"InfiniteOpt.PublicLabel","text":"PublicLabel <: AbstractSupportLabel\n\nAn abstract type used to denote that labels that should be given to the user by  default.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.UserDefined","page":"Infinite Domains","title":"InfiniteOpt.UserDefined","text":"UserDefined <: PublicLabel\n\nA support label for supports that are supplied by the user directly to an infinite  parameter. \n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.UniformGrid","page":"Infinite Domains","title":"InfiniteOpt.UniformGrid","text":"UniformGrid <: PublicLabel\n\nA support label for supports that are generated uniformly accross a given interval.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.SampleLabel","page":"Infinite Domains","title":"InfiniteOpt.SampleLabel","text":"SampleLabel <: PublicLabel\n\nAn abstract type for labels of supports that are generated via some sampling technique.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.MCSample","page":"Infinite Domains","title":"InfiniteOpt.MCSample","text":"MCSample <: SampleLabel\n\nA support label for supports that are generated via Monte Carlo Sampling.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.WeightedSample","page":"Infinite Domains","title":"InfiniteOpt.WeightedSample","text":"WeightedSample <: SampleLabel\n\nA support label for supports that are generated by sampling from a statistical  distribution.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.Mixture","page":"Infinite Domains","title":"InfiniteOpt.Mixture","text":"Mixture <: PublicLabel\n\nA support label for multi-dimensional supports that are generated from a variety  of methods.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.UniqueMeasure","page":"Infinite Domains","title":"InfiniteOpt.UniqueMeasure","text":"UniqueMeasure{S::Symbol} <: PublicLabel\n\nA support label for supports that are provided from the DiscreteMeasureData  associated with a measure where a unique label is generated to distinguish those  supports. This is done by invoking generate_unique_label.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.generate_unique_label","page":"Infinite Domains","title":"InfiniteOpt.generate_unique_label","text":"generate_unique_label()::Type{UniqueMeasure}\n\nGenerate and return a unique support label for measures.\n\n\n\n\n\n","category":"function"},{"location":"manual/domains/#InfiniteOpt.MeasureBound","page":"Infinite Domains","title":"InfiniteOpt.MeasureBound","text":"MeasureBound <: PublicLabel\n\nA support label for supports that are generated using the upper and lower bounds for FunctionalDiscreteMeasureData.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.InternalLabel","page":"Infinite Domains","title":"InfiniteOpt.InternalLabel","text":"InternalLabel <: AbstractSupportLabel\n\nAn abstract type for support labels that are associated with supports that should  not be reported to the user by default.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#InfiniteOpt.MeasureToolbox.InternalGaussLobatto","page":"Infinite Domains","title":"InfiniteOpt.MeasureToolbox.InternalGaussLobatto","text":"InternalGaussLobatto <: InfiniteOpt.InternalLabel\n\nA support label Gauss Lobatto points that are used as generative supports.\n\n\n\n\n\n","category":"type"},{"location":"manual/domains/#Support-Point-Methods","page":"Infinite Domains","title":"Support Point Methods","text":"","category":"section"},{"location":"manual/domains/","page":"Infinite Domains","title":"Infinite Domains","text":"supports_in_domain\ngenerate_supports\nInfiniteOpt.generate_support_values","category":"page"},{"location":"manual/domains/#InfiniteOpt.supports_in_domain","page":"Infinite Domains","title":"InfiniteOpt.supports_in_domain","text":"supports_in_domain(supports::Union{Real, Vector{<:Real}, Array{<:Real, 2}},\n                domain::AbstractInfiniteDomain)::Bool\n\nUsed to check if supports are in the domain of domain. Returns true if supports are in domain of domain and returns false otherwise. This is primarily an internal method for performing checks but can be extended for user-defined domain types. Extending this is optional, but recommended where possible. Note by fallback, this returns true for unrecognized domain types such that an error won't be thrown.\n\n\n\n\n\n","category":"function"},{"location":"manual/domains/#InfiniteOpt.generate_supports","page":"Infinite Domains","title":"InfiniteOpt.generate_supports","text":"generate_supports(domain::AbstractInfiniteDomain\n                  [method::Type{<:AbstractSupportLabel}];\n                  [num_supports::Int = DefaultNumSupports,\n                  sig_digits::Int = DefaultSigDigits]\n                  )::Tuple{Array{<:Real}, DataType}\n\nGenerate num_supports support values with sig_digits significant digits in accordance with domain and return them along with the correct generation label(s). IntervalDomains generate supports uniformly with label UniformGrid and distribution domains generate them randomly accordingly to the underlying distribution. Moreover, method indicates the generation method that should be used. These methods correspond to parameter support labels. Current labels that can be used as generation methods include (but may not be defined for certain domain types):\n\nMCSample: Uniformly distributed Monte Carlo samples.\nWeightedSample: Monte Carlo samples that are weighted by an underlying PDF.\nUniformGrid: Samples that are generated uniformly over the domain.\n\nExtensions that employ user-defined infinite domain types and/or methods should extend generate_support_values to enable this. Errors if the domain type and /or methods are unrecognized. This is intended as an internal method to be used by methods such as generate_and_add_supports!.\n\n\n\n\n\n","category":"function"},{"location":"manual/domains/#InfiniteOpt.generate_support_values","page":"Infinite Domains","title":"InfiniteOpt.generate_support_values","text":"generate_support_values(domain::AbstractInfiniteDomain,\n                        [method::Type{MyMethod} = MyMethod];\n                        [num_supports::Int = DefaultNumSupports,\n                        sig_digits::Int = DefaultSigDigits]\n                        )::Tuple{Array{<:Real}, Symbol}\n\nA multiple dispatch method for generate_supports. This will return a tuple where the first element are the supports and the second is their label. This can be extended for user-defined infinite domains and/or generation methods. When defining a new domain type the default method dispatch should make method an optional argument (making it the default). Otherwise, other method dispatches for a given domain must ensure that method is positional argument without a default value (contrary to the definition above). Note that the  method must be a subtype of either PublicLabel or InternalLabel.\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#inf_par_manual","page":"Infinite Parameters","title":"Infinite Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"A technical manual for infinite parameters in InfiniteOpt. See the respective  guide for more information.","category":"page"},{"location":"manual/parameter/#Definition","page":"Infinite Parameters","title":"Definition","text":"","category":"section"},{"location":"manual/parameter/#Macro","page":"Infinite Parameters","title":"Macro","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"@infinite_parameter","category":"page"},{"location":"manual/parameter/#InfiniteOpt.@infinite_parameter","page":"Infinite Parameters","title":"InfiniteOpt.@infinite_parameter","text":"@infinite_parameter(model::InfiniteModel, kwargs...)\n\nAdd anonymous infinite parameter to the model model described by the keyword arguments kw_args and returns the parameter reference.\n\n@infinite_parameter(model::InfiniteModel, expr, kwargs...)\n\nAdd an infinite parameter to the model model described by the expression expr, and the keyword arguments kw_args. (Note that in the following the symbol in  can be used instead of ∈) The expression expr can be of the form:\n\nparamexpr creating parameters described by paramexpr.\nparamexpr ∈ [lb, ub] creating parameters described by paramexpr characterized  by a continuous interval domain with lower bound lb and upper bound ub.\nparamexpr ~ dist creating parameters described by paramexpr characterized  by the Distributions.jl distribution object dist.\nparamexpr ∈ domain creating parameters described by paramexpr characterized  by the AbstractInfiniteDomain object domain.\n\nThe expression paramexpr can be of the form:\n\nparamname creating a scalar parameter of name paramname\nparamname[...] or [...] creating a container of parameters\n\nThe recognized keyword arguments in kwargs are the following:\n\nbase_name: Sets the name prefix used to generate parameter names. It corresponds to the parameter name for scalar parameter, otherwise, the parameter names are set to base_name[...] for each index ... of the axes axes.\ndomain: The InfiniteDomain characterizing the parameters see subtypes of           AbstractInfiniteDomain.\ndistribution: Sets the Distributions.jl distribution object that   characterizes the parameters (specified instead of a domain).\nsupports: Sets the support points for the parameters.\nnum_supports: Specifies the number of supports to be automatically generated.                 Note that supports takes precedence. Defaults to 0.\nderivative_method: Specify the numerical method to evaluate derivatives that                       are taken with respect to the parameter.\nsig_digits: Specifies the number of significant digits that should be used               in automatic support generation. Defaults to DefaultSigDigits.\nindependent: Specifies if the each parameter is independent from each other or not. Defaults to false.\ncontainer: Specify the container type. Defaults to Auto\n\nExamples\n\njulia> @infinite_parameter(m, x in [0, 1])\nx\n\njulia> @infinite_parameter(m, y[i = 1:2] ~ MvNormal(ones(2)), num_supports = 10)\n2-element Array{GeneralVariableRef,1}:\n y[1]\n y[2]\n\njulia> z = @infinite_parameter(m, [[\"a\", \"b\"]], distribution = Normal(),\n                               independent = true)\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, [\"a\", \"b\"]\nAnd data, a 2-element Array{GeneralVariableRef,1}:\n noname[a]\n noname[b]\n\n\n\n\n\n","category":"macro"},{"location":"manual/parameter/#Independent-Parameters","page":"Infinite Parameters","title":"Independent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"InfOptParameter\nScalarParameter\nIndependentParameter\nbuild_parameter(::Function, ::InfiniteScalarDomain)\nadd_parameter(::InfiniteModel, ::IndependentParameter, ::String)\nScalarParameterData\nIndependentParameterIndex\nIndependentParameterRef","category":"page"},{"location":"manual/parameter/#InfiniteOpt.InfOptParameter","page":"Infinite Parameters","title":"InfiniteOpt.InfOptParameter","text":"InfOptParameter <: JuMP.AbstractVariable\n\nAn abstract type for all parameters used in InfiniteOpt.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.ScalarParameter","page":"Infinite Parameters","title":"InfiniteOpt.ScalarParameter","text":"ScalarParameter <: InfOptParameter\n\nAn abstract type for scalar parameters used in InfiniteOpt.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.IndependentParameter","page":"Infinite Parameters","title":"InfiniteOpt.IndependentParameter","text":"IndependentParameter{T <: InfiniteScalarDomain,\n                     M <: AbstractDerivativeMethod,\n                     I <: AbstractGenerativeInfo} <: ScalarParameter\n\nA DataType for storing independent scalar infinite parameters.\n\nFields\n\ndomain::T: The infinite domain that characterizes the parameter.\nsupports::DataStructures.SortedDict{Float64, Set{DataType}}: The support points  used to discretize the parameter and their associated type labels stored as  DataTypess which should be a subtype of AbstractSupportLabel.\nsig_digits::Int: The number of significant digits used to round the support values.\nderivative_method::M: The derivative evaluation method used for derivatives that  are conducted with respect to this parameter.\ngnerative_supp_info::I: The info associated with any generative supports that will   need to be generated for measures and/or derivatives based on existing supports. \n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.build_parameter-Tuple{Function, InfiniteScalarDomain}","page":"Infinite Parameters","title":"InfiniteOpt.build_parameter","text":"build_parameter(\n    _error::Function, domain::InfiniteScalarDomain;\n    [num_supports::Int = 0,\n    supports::Union{Real, Vector{<:Real}} = Float64[],\n    sig_digits::Int = DefaultSigDigits,\n    derivative_method::AbstractDerivativeMethod = DefaultDerivativeMethod]\n)::IndependentParameter\n\nReturns a IndependentParameter given the appropriate information. This is analagous to JuMP.build_variable. Errors if supports violate the bounds associated with domain. This is meant to primarily serve as a helper method for @infinite_parameter. Here derivative_method  specifies the numerical evalution method that will be applied to derivatives that  are taken with respect to this infinite parameter.\n\nExample\n\njulia> param = build_parameter(error, IntervalDomain(0, 3), supports = Vector(0:3));\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.add_parameter-Tuple{InfiniteModel, IndependentParameter, String}","page":"Infinite Parameters","title":"InfiniteOpt.add_parameter","text":"add_parameter(model::InfiniteModel, p::IndependentParameter,\n              [name::String = \"\"])::GeneralVariableRef\n\nReturns a GeneralVariableRef associated with the parameter p that is added  to model. This adds a parameter to the model in a manner similar to  JuMP.add_variable. This is used to add parameters with the use of  @infinite_parameter.  build_parameter  should be used to construct p.\n\nExample\n\njulia> p = build_parameter(error, IntervalDomain(0, 3), supports = Vector(0:3));\n\njulia> param_ref = add_parameter(model, p, \"name\")\nname\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.ScalarParameterData","page":"Infinite Parameters","title":"InfiniteOpt.ScalarParameterData","text":"ScalarParameterData{P <: ScalarParameter} <: AbstractDataObject\n\nA mutable DataType for storing ScalarParameters and their data.\n\nFields\n\nparameter::P: The scalar parameter.\nobject_num::Int: The location of the corresponding ObjectIndex in   InfiniteModel.param_object_indices (given by InfiniteModel.last_object_num).\nparameter_num::Int: Given by InfiniteModel.last_param_num (updated when                       prior parameters are deleted)\nname::String: The name used for printing.\nparameter_func_indices::Vector{ParameterFunctionIndex}: Indices of dependent  infinite parameter functions.\ninfinite_var_indices::Vector{InfiniteVariableIndex}: Indices of dependent  infinite variables.\nderivative_indices::Vector{DerivativeIndex}: Indices of dependent derivatives.\nmeasure_indices::Vector{MeasureIndex}: Indices of dependent measures.\nconstraint_indices::Vector{InfOptConstraintIndex}: Indices of dependent constraints.\nin_objective::Bool: Is this used in objective? This should be true only for finite parameters.\ngenerative_measures::Vector{MeasureIndex}: Indices of measures that use parameter.generative_supp_info.\nhas_internal_supports::Bool: Does this parameter have internal supports?\nhas_generative_supports::Bool: Have any generative supports been added?\nhas_deriv_constrs::Bool: Have any derivative evaluation constraints been added                             to the infinite model associated with this parameter?\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.IndependentParameterIndex","page":"Infinite Parameters","title":"InfiniteOpt.IndependentParameterIndex","text":"IndependentParameterIndex <: ObjectIndex\n\nA DataType for storing the index of a IndependentParameter.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.IndependentParameterRef","page":"Infinite Parameters","title":"InfiniteOpt.IndependentParameterRef","text":"IndependentParameterRef <: DispatchVariableRef\n\nA DataType for independent infinite parameters references that parameterize infinite variables.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::IndependentParameterIndex: Index of the parameter in model.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#Dependent-Parameters","page":"Infinite Parameters","title":"Dependent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"DependentParameters\nadd_parameters\nMultiParameterData\nDependentParametersIndex\nDependentParameterIndex\nDependentParameterRef","category":"page"},{"location":"manual/parameter/#InfiniteOpt.DependentParameters","page":"Infinite Parameters","title":"InfiniteOpt.DependentParameters","text":"DependentParameters{T <: InfiniteArrayDomain, \n                    M <: NonGenerativeDerivativeMethod} <: InfOptParameter\n\nA DataType for storing a collection of dependent infinite parameters.\n\nFields\n\ndomain::T: The infinite domain that characterizes the parameters.\nsupports::Dict{Vector{Float64}, Set{DataType}}: Support dictionary where keys             are supports and the values are the set of labels for each support.\nsig_digits::Int: The number of significant digits used to round the support values.\nderivative_methods::Vector{M}: The derivative evaluation methods associated with  each parameter.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.add_parameters","page":"Infinite Parameters","title":"InfiniteOpt.add_parameters","text":"add_parameters(model::InfiniteModel,\n               params::DependentParameters,\n               names::Vector{String}\n               )::Vector{GeneralVariableRef}\n\nAdd params to model and return an appropriate container of the dependent infinite parameter references. This is intended as an internal method for use with @infinite_parameter. However, if desired users can use this to add a DependentParameters object to model. Here, names denote the name  of each parameter. \n\nExample\n\njulia> using Distributions\n\njulia> dist = MvNormal(ones(3)); # 3 dimensional\n\njulia> domain = MultiDistributionDomain(dist); # 3 dimensional\n\njulia> params = DependentParameters(domain, Dict{Vector{Float64}, Set{DatatType}}(), 10);\n\njulia> prefs = add_parameters(model, params, [\"par1\", \"par2\", \"par3\"])\n3-element Array{GeneralVariableRef,1}:\n par1\n par2\n par3\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#InfiniteOpt.MultiParameterData","page":"Infinite Parameters","title":"InfiniteOpt.MultiParameterData","text":"MultiParameterData{P <: DependentParameters} <: AbstractDataObject\n\nA mutable DataType for storing DependentParameters and their data.\n\nFields\n\nparameters::P: The parameter collection.\nobject_num::Int: The location of the corresponding ObjectIndex in  InfiniteModel.param_object_indices (given by InfiniteModel.last_object_num).\nparameter_nums::UnitRange{Int}: Given by InfiniteModel.last_param_num                                   (updated when prior parameters are deleted)\nnames::Vector{String}: The names used for printing each parameter.\nparameter_func_indices::Vector{ParameterFunctionIndex}: Indices of  dependent infinite parameter functions.\ninfinite_var_indices::Vector{InfiniteVariableIndex}: Indices of  dependent infinite variables.\nderivative_indices::Vector{Vector{DerivativeIndex}}: Indices of dependent derivatives.\nmeasure_indices::Vector{Vector{MeasureIndex}}: Indices of dependent measures.\nconstraint_indices::Vector{Vector{InfOptConstraintIndex}}: Indices of dependent constraints.\nhas_internal_supports::Bool: Does this parameter have internal supports?\nhas_deriv_constrs::Bool: Have any derivative evaluation constraints been added                             to the infinite model associated with this parameter?\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.DependentParametersIndex","page":"Infinite Parameters","title":"InfiniteOpt.DependentParametersIndex","text":"DependentParametersIndex <: ObjectIndex\n\nA DataType for storing the index of a DependentParameters object.\n\nFields\n\nvalue::Int64: The index value.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.DependentParameterIndex","page":"Infinite Parameters","title":"InfiniteOpt.DependentParameterIndex","text":"DependentParameterIndex <: AbstractInfOptIndex\n\nA DataType for storing the index of an indiviudal parameter in a DependentParameters object.\n\nFields\n\nobject_index::DependentParametersIndex: The index of the parameter collection.\nparam_index::Int: The index of the individual parameter in the above object.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.DependentParameterRef","page":"Infinite Parameters","title":"InfiniteOpt.DependentParameterRef","text":"DependentParameterRef <: DispatchVariableRef\n\nA DataType for dependent infinite parameter references that parameterize infinite variables.\n\nFields\n\nmodel::InfiniteModel: Infinite model.\nindex::DependentParameterIndex: Index of the dependent parameter.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#Queries","page":"Infinite Parameters","title":"Queries","text":"","category":"section"},{"location":"manual/parameter/#General","page":"Infinite Parameters","title":"General","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"parameter_by_name(::InfiniteModel,::String)\nnum_parameters\nall_parameters","category":"page"},{"location":"manual/parameter/#InfiniteOpt.parameter_by_name-Tuple{InfiniteModel, String}","page":"Infinite Parameters","title":"InfiniteOpt.parameter_by_name","text":"parameter_by_name(model::InfiniteModel,\n                  name::String)::Union{GeneralVariableRef, Nothing}\n\nReturn the parameter reference assoociated with a parameter name. Errors if multiple parameters have the same name. Returns nothing if no such name exists.\n\nExample\n\njulia> parameter_by_name(model, \"t\")\nt\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.num_parameters","page":"Infinite Parameters","title":"InfiniteOpt.num_parameters","text":"num_parameters(model::InfiniteModel,\n               [type::Type{InfOptParameter} = InfOptParameter])::Int\n\nReturn the number of InfiniteOpt parameters assigned to model. By default, the total number of infinite and finite parameters is returned. The amount of a particular type is obtained by specifying the concrete parameter type of InfOptParameter via type. Type options include:\n\nInfOptParameter: all parameters\nScalarParameter: all scalar parameters\nInfiniteParameter: all infinite parameters\nFiniteParameter: all finite parameters\nIndependentParameter: all independent infinite parameters\nDependentParameters: all dependent infinite parameters\n\nExample\n\njulia> num_parameters(model)\n3\n\njulia> num_parameters(model, IndependentParameter)\n2\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#InfiniteOpt.all_parameters","page":"Infinite Parameters","title":"InfiniteOpt.all_parameters","text":"all_parameters(model::InfiniteModel,\n               type::Type{InfOptParameter} = InfOptParameter\n               )::Vector{GeneralVariableRef}\n\nReturn a list of all the InfiniteOpt parameters assigned to model. By default, all of the infinite and finite parameters is returned. The search is reduced to a particular type is obtained by specifying the concrete parameter type of InfOptParameter via type. Type options include:\n\nInfOptParameter: all parameters\nScalarParameter: all scalar parameters\nInfiniteParameter: all infinite parameters\nFiniteParameter: all finite parameters\nIndependentParameter: all independent infinite parameters\nDependentParameters: all dependent infinite parameters\n\nExamples\n\njulia> all_parameters(model)\n4-element Array{GeneralVariableRef,1}:\n t\n x[1]\n x[2]\n alpha\n\njulia> all_parameters(model, FiniteParameter)\n1-element Array{GeneralVariableRef,1}:\n alpha\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#Independent-Parameters-2","page":"Infinite Parameters","title":"Independent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"JuMP.name(::ScalarParameterRef)\ninfinite_domain(::IndependentParameterRef)\nJuMP.has_lower_bound(::IndependentParameterRef)\nJuMP.lower_bound(::IndependentParameterRef)\nJuMP.has_upper_bound(::IndependentParameterRef)\nJuMP.upper_bound(::IndependentParameterRef)\nhas_supports(::IndependentParameterRef)\nnum_supports(::IndependentParameterRef)\nsupports(::IndependentParameterRef)\nhas_internal_supports(::Union{IndependentParameterRef, DependentParameterRef})\nsignificant_digits(::IndependentParameterRef)\nderivative_method(::IndependentParameterRef)\nis_used(::ScalarParameterRef)\nused_by_infinite_variable(::IndependentParameterRef)\nused_by_parameter_function(::IndependentParameterRef)\nused_by_measure(::ScalarParameterRef)\nused_by_constraint(::ScalarParameterRef)","category":"page"},{"location":"manual/parameter/#JuMP.name-Tuple{ScalarParameterRef}","page":"Infinite Parameters","title":"JuMP.name","text":"JuMP.name(pref::Union{IndependentParameterRef, FiniteParameterRef})::String\n\nExtend the JuMP.name function to accomodate infinite parameters. Returns the  name string associated with pref.\n\nExample\n\njulia> name(t)\n\"t\"\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.infinite_domain-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(pref::IndependentParameterRef)::InfiniteScalarDomain\n\nReturn the infinite domain associated with pref.\n\nExample\n\njulia> infinite_domain(t)\n[0, 1]\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.has_lower_bound-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(pref::IndependentParameterRef)::Bool\n\nExtend the JuMP.has_lower_bound function to accomodate infinite parameters. Return true if the domain associated with pref has a defined lower bound or if a lower bound can be found. Extensions with user-defined infinite domain types should extend JuMP.has_lower_bound(domain::NewType).\n\nExample\n\njulia> has_lower_bound(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.lower_bound-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.lower_bound","text":"JuMP.lower_bound(pref::IndependentParameterRef)::Real\n\nExtend the JuMP.lower_bound function to accomodate infinite parameters. Returns the lower bound associated with the infinite domain. Errors if such a bound is not well-defined.\n\nExample\n\njulia> lower_bound(t)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.has_upper_bound-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(pref::IndependentParameterRef)::Bool\n\nExtend the JuMP.has_upper_bound function to accomodate infinite parameters. Return true if the domain associated with pref has a defined upper bound or if a upper bound can be found. Extensions with user-defined domains should extend JuMP.has_upper_bound(domain::NewType).\n\nExample\n\njulia> has_upper_bound(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.upper_bound-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.upper_bound","text":"JuMP.upper_bound(pref::IndependentParameterRef)::Real\n\nExtend the JuMP.upper_bound function to accomodate infinite parameters. Returns the upper bound associated with the infinite domain. Errors if such a bound is not well-defined. Extensions with user-defined domain types should extend JuMP.has_upper_bound(domain::NewType) and JuMP.upper_bound(domain::NewType) if appropriate.\n\nExample\n\njulia> upper_bound(t)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.has_supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.has_supports","text":"has_supports(pref::IndependentParameterRef)::Bool\n\nReturn true if pref has supports or false otherwise.\n\nExample\n\njulia> has_supports(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.num_supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.num_supports","text":"num_supports(pref::IndependentParameterRef; \n             [label::Type{<:AbstractSupportLabel} = PublicLabel])::Int\n\nReturn the number of support points associated with pref. By default, only the  number of public supports are counted. The full amount can be determined by setting  label = All. Moreover, the amount of labels that satisfy label is obtained  using an AbstractSupportLabel.\n\nExample\n\njulia> num_supports(t)\n2\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.supports","text":"supports(pref::IndependentParameterRef; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel])::Vector{Float64}\n\nReturn the support points associated with pref. Errors if there are no supports. Users can query just support points generated by a certain method using the keyword argument label. By default, the function returns all public support points regardless of the associated label. The full collection is given by setting  label = All. Moreover, the amount of labels that satisfy label is obtained  using an AbstractSupportLabel.\n\nExample\n\njulia> supports(t)\n2-element Array{Float64,1}:\n 0.0\n 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.has_internal_supports-Tuple{Union{DependentParameterRef, IndependentParameterRef}}","page":"Infinite Parameters","title":"InfiniteOpt.has_internal_supports","text":"has_internal_supports(pref::Union{IndependentParameterRef, DependentParameterRef})::Bool\n\nIndicate if pref has internal supports that will be hidden from the user by  default. \n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.significant_digits-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.significant_digits","text":"significant_digits(pref::IndependentParameterRef)::Int\n\nReturn the number of significant digits enforced on the supports of pref.\n\nExample\n\njulia> significant_digits(t)\n12\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.derivative_method-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.derivative_method","text":"derivative_method(pref::IndependentParameterRef)::AbstractDerivativeMethod\n\nReturns the numerical derivative evaluation method employed with pref when it  is used as an operator parameter in a derivative.\n\nExample\n\njulia> derivative_method(pref) \nFiniteDifference(Backward, true)\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.is_used-Tuple{ScalarParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.is_used","text":"is_used(pref::Union{IndependentParameterRef, FiniteParameterRef})::Bool\n\nReturn true if pref is used in the model or false otherwise.\n\nExample\n\njulia> is_used(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_infinite_variable-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_infinite_variable","text":"used_by_infinite_variable(pref::IndependentParameterRef)::Bool\n\nReturn true if pref is used by an infinite variable or false otherwise.\n\nExample\n\njulia> used_by_infinite_variable(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_parameter_function-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_parameter_function","text":"used_by_parameter_function(pref::IndependentParameterRef)::Bool\n\nReturn true if pref is used by an infinite parameter function or false otherwise.\n\nExample\n\njulia> used_by_parameter_function(t)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_measure-Tuple{ScalarParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(pref::Union{IndependentParameterRef, FiniteParameterRef})::Bool\n\nReturn true if pref is used by a measure or false otherwise.\n\nExample\n\njulia> used_by_measure(t)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_constraint-Tuple{ScalarParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(pref::Union{IndependentParameterRef, FiniteParameterRef})::Bool\n\nReturn true if pref is used by a constraint or false otherwise.\n\nExample\n\njulia> used_by_constraint(t)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Dependent-Parameters-2","page":"Infinite Parameters","title":"Dependent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"JuMP.name(::DependentParameterRef)\ninfinite_domain(::DependentParameterRef)\ninfinite_domain(::AbstractArray{<:DependentParameterRef})\nJuMP.has_lower_bound(::DependentParameterRef)\nJuMP.lower_bound(::DependentParameterRef)\nJuMP.has_upper_bound(::DependentParameterRef)\nJuMP.upper_bound(::DependentParameterRef)\nhas_supports(::DependentParameterRef)\nhas_supports(::AbstractArray{<:DependentParameterRef})\nnum_supports(::DependentParameterRef)\nnum_supports(::AbstractArray{<:DependentParameterRef})\nsupports(::DependentParameterRef)\nsupports(::AbstractArray{<:DependentParameterRef})\nsignificant_digits(::DependentParameterRef)\nderivative_method(::DependentParameterRef)\nis_used(::DependentParameterRef)\nused_by_infinite_variable(::DependentParameterRef)\nused_by_parameter_function(::DependentParameterRef)\nused_by_measure(::DependentParameterRef)\nused_by_constraint(::DependentParameterRef)","category":"page"},{"location":"manual/parameter/#JuMP.name-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.name","text":"JuMP.name(pref::DependentParameterRef)::String\n\nExtend JuMP.name to return the names of infinite dependent parameters.\n\nExample\n\njulia> name(pref)\n\"par_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.infinite_domain-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(pref::DependentParameterRef)::InfiniteScalarDomain\n\nReturn the infinite domain associated with the particular infinite dependent parameter pref if valid. Errors if the underlying DependentParameters object does not use a CollectionDomain.\n\nExample\n\njulia> infinite_domain(x[1])\n[-1, 1]\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.infinite_domain-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.infinite_domain","text":"infinite_domain(prefs::AbstractArray{<:DependentParameterRef})::InfiniteArrayDomain\n\nReturn the infinite domain associated with the container of infinite dependent parameters prefs. Errors if the container prefs is incomplete.\n\nExample\n\njulia> infinite_domain(x)\nZeroMeanDiagNormal(\ndim: 2\nμ: [0.0, 0.0]\nΣ: [1.0 0.0; 0.0 1.0]\n)\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.has_lower_bound-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.has_lower_bound","text":"JuMP.has_lower_bound(pref::DependentParameterRef)::Bool\n\nExtend the JuMP.has_lower_bound function to accomodate a single dependent infinite parameter. Return true if the domain associated with pref has a defined lower bound or if a lower bound can be found. Extensions with user-defined scalar infinite domain types should extend JuMP.has_lower_bound(domain::NewType).\n\nExample\n\njulia> has_lower_bound(x[1])\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.lower_bound-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.lower_bound","text":"JuMP.lower_bound(pref::DependentParameterRef)::Number\n\nExtend the JuMP.lower_bound function to accomodate a single dependent infinite parameter. Returns the lower bound associated with the infinite domain. Errors if such a bound is not well-defined.\n\nExample\n\njulia> lower_bound(x[1])\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.has_upper_bound-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.has_upper_bound","text":"JuMP.has_upper_bound(pref::DependentParameterRef)::Bool\n\nExtend the JuMP.has_upper_bound function to accomodate a single dependent infinite parameter. Return true if the domain associated with pref has a defined upper bound or if a upper bound can be found. Extensions with user-defined scalar infinite domain types should extend JuMP.has_upper_bound(domain::NewType).\n\nExample\n\njulia> has_upper_bound(x[1])\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.upper_bound-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"JuMP.upper_bound","text":"JuMP.upper_bound(pref::DependentParameterRef)::Number\n\nExtend the JuMP.upper_bound function to accomodate a single dependent infinite parameter. Returns the upper bound associated with the infinite domain. Errors if such a bound is not well-defined.\n\nExample\n\njulia> upper_bound(x[1])\n0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.has_supports-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.has_supports","text":"has_supports(pref::DependentParameterRef)::Bool\n\nReturn true if pref has supports or false otherwise.\n\nExample\n\njulia> has_supports(x[1])\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.has_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.has_supports","text":"has_supports(prefs::AbstractArray{<:DependentParameterRef})::Bool\n\nReturn true if prefs have supports or false otherwise. Errors if not all of the infinite dependent parameters are from the same object.\n\nExample\n\njulia> has_supports(x)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.num_supports-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.num_supports","text":"num_supports(pref::DependentParameterRef; \n             [label::Type{<:AbstractSupportLabel} = PublicLabel])::Int\n\nReturn the number of support points associated with a single dependent infinite parameter pref. Specify a subset of supports via label to only count the supports with label. By default only the amount of public supports are given, but  the full amount is obtained via label == All.\n\nExample\n\njulia> num_supports(x[1])\n2\n\njulia> num_supports(x[1], label = MCSample)\n0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.num_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.num_supports","text":"num_supports(prefs::AbstractArray{<:DependentParameterRef};\n             [label::Type{<:AbstractSupportLabel} = PublicLabel])::Int\n\nReturn the number of support points associated with dependent infinite parameters prefs. Errors if not all from the same underlying object. Specify a subset of supports via label to only count the supports with label. By default only the amount of public supports are given, but the full amount is  obtained via label == All.\n\nExample\n\njulia> num_supports(x)\n2\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.supports-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.supports","text":"supports(pref::DependentParameterRef; \n         [label::Type{<:AbstractSupportLabel} = PublicLabel])::Vector{Float64}\n\nReturn the support points associated with pref. A subset of supports can be returned via label to return just the supports associated with label. By  default only the public supports are given, but the full set is  obtained via label == All.\n\nExample\n\njulia> supports(x[1])\n2-element Array{Float64,1}:\n 0.0\n 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.supports","text":"supports(prefs::AbstractArray{<:DependentParameterRef};\n         [label::Type{<:AbstractSupportLabel} = PublicLabel]\n         )::Union{Vector{<:AbstractArray{<:Real}}, Array{Float64, 2}}\n\nReturn the support points associated with prefs. Errors if not all of the infinite dependent parameters are from the same object. This will return a matrix if prefs is Vector, otherwise a vector of arrays is returned where each  array is a support point matching the format of prefs. A subset of supports can be returned via label to return just the supports associated with label. By  default only the public supports are given, but the full set is  obtained via  label == All.\n\nExample\n\njulia> supports(x) # columns are supports\n2×2 Array{Float64,2}:\n 0.0  1.0\n 0.0  1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.significant_digits-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.significant_digits","text":"significant_digits(pref::DependentParameterRef)::Int\n\nReturn the number of significant digits enforced on the supports of pref.\n\nExample\n\njulia> significant_digits(x[1])\n12\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.derivative_method-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.derivative_method","text":"derivative_method(pref::DependentParameterRef)::NonGenerativeDerivativeMethod\n\nReturns the numerical derivative evaluation method employed with pref when it  is used as an operator parameter in a derivative.\n\nExample\n\njulia> derivative_method(pref) \nFiniteDifference\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.is_used-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.is_used","text":"is_used(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used in the model.\n\nExample\n\njulia> is_used(pref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_infinite_variable-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_infinite_variable","text":"used_by_infinite_variable(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used by an infinite variable.\n\nExample\n\njulia> used_by_infinite_variable(pref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_parameter_function-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_parameter_function","text":"used_by_parameter_function(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used by an infinite parameter function.\n\nExample\n\njulia> used_by_parameter_function(pref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_measure-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_measure","text":"used_by_measure(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used by a measure.\n\nExample\n\njulia> used_by_measure(pref)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.used_by_constraint-Tuple{DependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.used_by_constraint","text":"used_by_constraint(pref::DependentParameterRef)::Bool\n\nReturn a Bool indicating if the dependent infinite parameter pref is used by a constraint.\n\nExample\n\njulia> used_by_constraint(pref)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Modification","page":"Infinite Parameters","title":"Modification","text":"","category":"section"},{"location":"manual/parameter/#General-2","page":"Infinite Parameters","title":"General","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"fill_in_supports!(::InfiniteModel)","category":"page"},{"location":"manual/parameter/#InfiniteOpt.fill_in_supports!-Tuple{InfiniteModel}","page":"Infinite Parameters","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(model::InfiniteModel; [num_supports::Int = DefaultNumSupports,\n                  modify::Bool = true])::Nothing\n\nAutomatically generate support points for all infinite parameters in model. This calls fill_in_supports! for each parameter in the model. See fill_in_supports! for more information. Errors if one of the infinite domain types is unrecognized. Note that no supports will be added to a particular parameter if it already has some and modify = false.\n\nExample\n\njulia> fill_in_supports!(model, num_supports = 4)\n\njulia> supports(t)\n4-element Array{Float64,1}:\n 0.0\n 0.333\n 0.667\n 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Independent-Parameters-3","page":"Infinite Parameters","title":"Independent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"JuMP.set_name(::ScalarParameterRef, ::String)\nset_infinite_domain(::IndependentParameterRef,::InfiniteScalarDomain)\nJuMP.set_lower_bound(::IndependentParameterRef, ::Real)\nJuMP.set_upper_bound(::IndependentParameterRef,::Real)\nadd_supports(::IndependentParameterRef,::Union{Real, Vector{<:Real}})\nset_supports(::IndependentParameterRef, ::Vector{<:Real})\ndelete_supports(::IndependentParameterRef)\ngenerate_and_add_supports!(::IndependentParameterRef,::AbstractInfiniteDomain)\nfill_in_supports!(::IndependentParameterRef)\nJuMP.delete(::InfiniteModel, ::IndependentParameterRef)","category":"page"},{"location":"manual/parameter/#JuMP.set_name-Tuple{ScalarParameterRef, String}","page":"Infinite Parameters","title":"JuMP.set_name","text":"JuMP.set_name(pref::ScalarParameterRef, name::String)\n\nExtend the JuMP.set_name function to accomodate infinite parameters. Set a new  base name to be associated with pref.\n\nExample\n\njulia> set_name(t, \"time\")\n\njulia> name(t)\n\"time\"\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_infinite_domain-Tuple{IndependentParameterRef, InfiniteScalarDomain}","page":"Infinite Parameters","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(pref::IndependentParameterRef,\n                 domain::InfiniteScalarDomain)::Nothing\n\nReset the infinite domain of pref with another InfiniteScalarDomain. An error will  be thrown if pref is being used by some measure.\n\nExample\n\njulia> set_infinite_domain(t, IntervalDomain(0, 2))\n\njulia> infinite_domain(t)\n[0, 2]\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.set_lower_bound-Tuple{IndependentParameterRef, Real}","page":"Infinite Parameters","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(pref::IndependentParameterRef, lower::Real)::Nothing\n\nExtend the JuMP.set_lower_bound function to accomodate infinite parameters. Updates the infinite domain lower bound if such an operation is supported. Set extensions that seek to employ this should extend JuMP.set_lower_bound(domain::NewType, lower::Number).\n\nExample\n\njulia> set_lower_bound(t, -1)\n\njulia> lower_bound(t)\n-1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.set_upper_bound-Tuple{IndependentParameterRef, Real}","page":"Infinite Parameters","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(pref::IndependentParameterRef, lower::Real)::Nothing\n\nExtend the JuMP.set_upper_bound function to accomodate infinite parameters. Updates the infinite domain upper bound if and only if it is an IntervalDomain. Errors otherwise. Extensions with user-defined infinite domains should extend JuMP.set_upper_bound(domain::NewType, upper::Number) if appropriate.\n\nExample\n\njulia> set_upper_bound(t, 2)\n\njulia> upper_bound(t)\n2.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.add_supports-Tuple{IndependentParameterRef, Union{Real, Vector{var\"#s40\"} where var\"#s40\"<:Real}}","page":"Infinite Parameters","title":"InfiniteOpt.add_supports","text":"add_supports(pref::IndependentParameterRef,\n             supports::Union{Real, Vector{<:Real}};\n             [label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nAdd additional support points for pref with identifying label label.\n\nExample\n\njulia> add_supports(t, 0.5)\n\njulia> supports(t)\n3-element Array{Float64,1}:\n 0.0\n 0.5\n 1.0\n\njulia> add_supports(t, [0.25, 1])\n\njulia> supports(t)\n4-element Array{Float64,1}:\n 0.0\n 0.25\n 0.5\n 1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_supports-Tuple{IndependentParameterRef, Vector{var\"#s40\"} where var\"#s40\"<:Real}","page":"Infinite Parameters","title":"InfiniteOpt.set_supports","text":"set_supports(pref::IndependentParameterRef, supports::Vector{<:Real};\n             [force::Bool = false,\n             label::Type{<:AbstractSupportLabel} = UserDefined]\n             )::Nothing\n\nSpecify the support points for pref. Errors if the supports violate the bounds associated with the infinite domain. Warns if the points are not unique. If force this will overwrite exisiting supports otherwise it will error if there are existing supports.\n\nExample\n\njulia> set_supports(t, [0, 1])\n\njulia> supports(t)\n2-element Array{Int64,1}:\n 0\n 1\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.delete_supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.delete_supports","text":"delete_supports(pref::IndependentParameterRef; \n                [label::Type{<:AbstractSupportLabel} = All])::Nothing\n\nDelete the support points for pref. If label != All then delete label and  any supports that solely depend on it.\n\nExample\n\njulia> delete_supports(t)\n\njulia> supports(t)\nERROR: Parameter t does not have supports.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.generate_and_add_supports!-Tuple{IndependentParameterRef, AbstractInfiniteDomain}","page":"Infinite Parameters","title":"InfiniteOpt.generate_and_add_supports!","text":"generate_and_add_supports!(pref::IndependentParameterRef,\n                           domain::AbstractInfiniteDomain,\n                           [method::Type{<:AbstractSupportLabel}];\n                           [num_supports::Int = DefaultNumSupports])::Nothing\n\nGenerate supports for independent parameter pref via generate_support_values and add them to pref. This is intended as an extendable internal method for fill_in_supports!. Most extensions that empoy user-defined infinite domains can typically enable this by extending generate_support_values. Errors if the infinite domain type is not recognized.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.fill_in_supports!-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(pref::IndependentParameterRef;\n                  [num_supports::Int = DefaultNumSupports])::Nothing\n\nAutomatically generate support points for a particular independent parameter pref. Generating num_supports for the parameter. The supports are generated uniformly if the underlying infinite domain is an IntervalDomain or they are generating randomly accordingly to the distribution if the domain is a UniDistributionDomain. Will add nothing if there are supports and modify = false. Extensions that use user defined domain types should extend generate_and_add_supports! and/or generate_support_values as needed. Errors if the infinite domain type is not recognized.\n\nExample\n\njulia> fill_in_supports!(x, num_supports = 4)\n\njulia> supports(x)\n4-element Array{Number,1}:\n 0.0\n 0.333\n 0.667\n 1.0\n\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.delete-Tuple{InfiniteModel, IndependentParameterRef}","page":"Infinite Parameters","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel, pref::ScalarParameterRef)::Nothing\n\nExtend JuMP.delete to delete scalar parameters and their dependencies. All variables, constraints, and measure functions that depend on pref are updated to exclude it. Errors if the parameter is used by an infinite variable or if it is contained in an  AbstractMeasureData DataType that is employed by a measure since the measure becomes invalid otherwise. Thus, measures that contain this dependency must be deleted first. Note that parameter_refs needs to be extended to allow deletion of parameters when custom AbstractMeasureData datatypes are used.\n\nExample\n\njulia> delete(model, x)\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Dependent-Parameters-3","page":"Infinite Parameters","title":"Dependent Parameters","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"JuMP.set_name(::DependentParameterRef, ::String)\nset_infinite_domain(::DependentParameterRef,::InfiniteScalarDomain)\nset_infinite_domain(::AbstractArray{<:DependentParameterRef},::InfiniteArrayDomain)\nJuMP.set_lower_bound(::DependentParameterRef,::Real)\nJuMP.set_upper_bound(::DependentParameterRef,::Real)\nadd_supports(::AbstractArray{<:DependentParameterRef},::Vector{<:AbstractArray{<:Real}})\nset_supports(::AbstractArray{<:DependentParameterRef},::Vector{<:AbstractArray{<:Real}})\ndelete_supports(::AbstractArray{<:DependentParameterRef})\ngenerate_and_add_supports!(::AbstractArray{<:DependentParameterRef},::InfiniteArrayDomain)\nfill_in_supports!(::AbstractArray{<:DependentParameterRef})\nJuMP.delete(::InfiniteModel,::AbstractArray{<:DependentParameterRef})","category":"page"},{"location":"manual/parameter/#JuMP.set_name-Tuple{DependentParameterRef, String}","page":"Infinite Parameters","title":"JuMP.set_name","text":"JuMP.set_name(pref::DependentParameterRef, name::String)::Nothing\n\nExtend JuMP.set_name to set names of dependent infinite parameters.\n\nExample\n\njulia> set_name(vref, \"par_name\")\n\njulia> name(vref)\n\"para_name\"\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_infinite_domain-Tuple{DependentParameterRef, InfiniteScalarDomain}","page":"Infinite Parameters","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(pref::DependentParameterRef,\n                 domain::InfiniteScalarDomain)::Nothing\n\nSpecify the scalar infinite domain of the dependent infinite parameter pref to domain if pref is part of a CollectionDomain, otherwise an error is thrown. Note this will reset/delete all the supports contained in the underlying DependentParameters object. Also, errors if pref is used by a measure.\n\nExample\n\njulia> set_infinite_domain(x[1], IntervalDomain(0, 2))\n\njulia> infinite_domain(x[1])\n[0, 2]\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_infinite_domain-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}, InfiniteArrayDomain}","page":"Infinite Parameters","title":"InfiniteOpt.set_infinite_domain","text":"set_infinite_domain(prefs::AbstractArray{<:DependentParameterRef},\n                 domain::InfiniteArrayDomain)::Nothing\n\nSpecify the multi-dimensional infinite domain of the dependent infinite parameters prefs to domain. Note this will reset/delete all the supports contained in the underlying DependentParameters object. This will error if the not all of the dependent infinite parameters are included, if any of them are used by measures.\n\nExample\n\njulia> set_infinite_domain(x, CollectionDomain([IntervalDomain(0, 1), IntervalDomain(0, 2)]))\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.set_lower_bound-Tuple{DependentParameterRef, Real}","page":"Infinite Parameters","title":"JuMP.set_lower_bound","text":"JuMP.set_lower_bound(pref::DependentParameterRef, lower::Real)::Nothing\n\nExtend the JuMP.set_lower_bound function to accomodate a single dependent infinite parameter. Updates the infinite domain lower bound if such an operation is supported. Infinite scalar domain extensions that seek to employ this should extend JuMP.set_lower_bound(domain::NewType, lower::Number). This will call set_infinite_domain and will error if this is not well-defined. Note that existing supports will be deleted.\n\nExample\n\njulia> set_lower_bound(t, -1)\n\njulia> lower_bound(t)\n-1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.set_upper_bound-Tuple{DependentParameterRef, Real}","page":"Infinite Parameters","title":"JuMP.set_upper_bound","text":"JuMP.set_upper_bound(pref::DependentParameterRef, upper::Real)::Nothing\n\nExtend the JuMP.set_upper_bound function to accomodate a single dependent infinite parameter. Updates the infinite domain upper bound if such an operation is supported. Infinite scalar domain extensions that seek to employ this should extend JuMP.set_upper_bound(domain::NewType, upper::Number). This will call set_infinite_domain and will error if this is not well-defined. Note that existing supports will be deleted.\n\nExample\n\njulia> set_upper_bound(t, -1)\n\njulia> upper_bound(t)\n-1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.add_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}, Vector{var\"#s39\"} where var\"#s39\"<:(AbstractArray{var\"#s38\", N} where {var\"#s38\"<:Real, N})}","page":"Infinite Parameters","title":"InfiniteOpt.add_supports","text":"add_supports(prefs::AbstractArray{<:DependentParameterRef},\n             supports::Vector{<:AbstractArray{<:Real}};\n             [label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nAdd additional support points for prefs. Errors if the supports violate the domain of the infinite domain, if the dimensions don't match up properly, if prefs and supports have different indices, or not all of the prefs are from the same dependent infinite parameter container.\n\n    add_supports(prefs::Vector{DependentParameterRef},\n                 supports::Array{<:Real, 2};\n                 [label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nSpecify the supports for a vector prefs of dependent infinite parameters. Here rows of supports correspond to prefs and the columns correspond to the supports. This is more efficient than the above method and will error for the same reasons.\n\nExample\n\njulia> add_supports(x, [[1], [1]])\n\njulia> supports(x)\n2×2 Array{Float64,2}:\n 0.0  1.0\n 0.0  1.0\n\njulia> add_supports(x, ones(2, 1) * 0.5)\n\njulia> supports(t)\n2×3 Array{Float64,2}:\n 0.0  1.0  0.5\n 0.0  1.0  0.5\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.set_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}, Vector{var\"#s39\"} where var\"#s39\"<:(AbstractArray{var\"#s38\", N} where {var\"#s38\"<:Real, N})}","page":"Infinite Parameters","title":"InfiniteOpt.set_supports","text":"set_supports(prefs::AbstractArray{<:DependentParameterRef},\n             supports::Vector{<:AbstractArray{<:Real}};\n             [force::Bool = false,\n             label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nSpecify the support points for prefs. Errors if the supports violate the domain of the infinite domain, if the dimensions don't match up properly, if prefs and supports have different indices, not all of the prefs are from the same dependent infinite parameter container, there are existing supports and force = false. Note that it is strongly preferred to use add_supports if possible to avoid destroying measure dependencies.\n\n    set_supports(prefs::Vector{DependentParameterRef},\n                 supports::Array{<:Real, 2};\n                 [force::Bool = false,\n                 label::Type{<:AbstractSupportLabel} = UserDefined])::Nothing\n\nSpecify the supports for a vector prefs of dependent infinite parameters. Here rows of supports correspond to prefs and the columns correspond to the supports. This is more efficient than the above method and will error for the same reasons.\n\nExample\n\njulia> set_supports(y, [[0, 1], [0, 1]])\n\njulia> set_supports(x, [0 1; 0 1])\n\njulia> supports(x)\n2×2 Array{Float64,2}:\n 0.0  1.0\n 0.0  1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.delete_supports-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.delete_supports","text":"delete_supports(prefs::AbstractArray{<:DependentParameterRef};\n                [label::Type{<:AbstractSupportLabel} = All])::Nothing\n\nDelete the support points for prefs. Errors if any of the parameters are used by a measure or if not all belong to the same set of dependent parameters. If label != All then that label is removed along with any supports that solely  contain that label.\n\nExample\n\njulia> delete_supports(w)\n\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.generate_and_add_supports!-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}, InfiniteArrayDomain}","page":"Infinite Parameters","title":"InfiniteOpt.generate_and_add_supports!","text":"generate_and_add_supports!(prefs::AbstractArray{<:DependentParameterRef},\n                           domain::InfiniteArrayDomain,\n                           [method::Type{<:AbstractSupportLabel}];\n                           [num_supports::Int = DefaultNumSupports])::Nothing\n\nGenerate supports for prefs via generate_support_values and add them to pref. This is intended as an extendable internal method for fill_in_supports!. Most extensions that employ user-defined infinite domains can typically enable this by extending generate_support_values. However, in some cases it may be necessary to extend this when more complex operations need to take place then just adding supports to a set of infinite parameters. Errors if the infinite domain type is not recognized.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.fill_in_supports!-Tuple{AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"InfiniteOpt.fill_in_supports!","text":"fill_in_supports!(prefs::AbstractArray{<:DependentParameterRef};\n                  [num_supports::Int = DefaultNumSupports,\n                   modify::Bool = true])::Nothing\n\nAutomatically generate support points for a container of dependent infinite parameters prefs. Generating up to num_supports for the parameters in accordance with generate_and_add_supports!. Will add nothing if there are supports and modify = false. Extensions that use user defined domain types should extend generate_and_add_supports! and/or generate_support_values as needed. Errors if the infinite domain type is not recognized.\n\nExample\n\njulia> fill_in_supports!(x, num_supports = 4)\n\njulia> supports(x)\n2×4 Array{Float64,2}:\n 0.0  0.333  0.667  1.0\n 0.0  0.333  0.667  1.0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#JuMP.delete-Tuple{InfiniteModel, AbstractArray{var\"#s40\", N} where {var\"#s40\"<:DependentParameterRef, N}}","page":"Infinite Parameters","title":"JuMP.delete","text":"JuMP.delete(model::InfiniteModel,\n            prefs::AbstractArray{<:DependentParameterRef})::Nothing\n\nExtend JuMP.delete to delete dependent infinite parameters and their dependencies. All variables, constraints, and measure functions that depend on prefs are updated to exclude them. Errors if the parameters are contained in an AbstractMeasureData datatype that is employed by a measure since the measure becomes invalid otherwise. Thus, measures that contain this dependency must be deleted first. Note that parameter_refs needs to be extended to allow deletion of parameters when custom AbstractMeasureData datatypes are used. Note that any dependent infinite variables will have their start values reset to the default via reset_start_value_function.\n\nExample\n\njulia> print(model)\nMin measure(g(t, x)*t + x) + z\nSubject to\n z ≥ 0.0\n g(t, x) + z ≥ 42.0, ∀ t ∈ [0, 6], x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]\n g(0.5, x) = 0, x[1] ∈ [-1, 1], x[2] ∈ [-1, 1]\n\njulia> delete(model, x)\n\njulia> print(model)\nMin measure(g(t)*t) + z\nSubject to\n g(t) + z ≥ 42.0, ∀ t ∈ [0, 6]\n g(0.5) = 0\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#Generative-Supports","page":"Infinite Parameters","title":"Generative Supports","text":"","category":"section"},{"location":"manual/parameter/","page":"Infinite Parameters","title":"Infinite Parameters","text":"AbstractGenerativeInfo\nNoGenerativeSupports\nUniformGenerativeInfo\nhas_generative_supports(::IndependentParameterRef)\nsupport_label(::AbstractGenerativeInfo)\ngenerative_support_info(::IndependentParameterRef)\nmake_generative_supports\nadd_generative_supports","category":"page"},{"location":"manual/parameter/#InfiniteOpt.AbstractGenerativeInfo","page":"Infinite Parameters","title":"InfiniteOpt.AbstractGenerativeInfo","text":"AbstractGenerativeInfo\n\nAn abstract type for storing information about generating supports that are made  based on existing supports as required by certain measures and/or derivatives  that depend on a certain independent infinite parameter. Such as the case with  internal collocation supports.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.NoGenerativeSupports","page":"Infinite Parameters","title":"InfiniteOpt.NoGenerativeSupports","text":"NoGenerativeSupports <: AbstractGenerativeInfo\n\nA DataType to signify that no generative supports will be generated for the  measures and/or the derivatives. Has no fields.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.UniformGenerativeInfo","page":"Infinite Parameters","title":"InfiniteOpt.UniformGenerativeInfo","text":"UniformGenerativeInfo <: AbstractGenerativeInfo\n\nA DataType for generative supports that will be generated in a uniform manner  over finite elements (i.e., in between the existing supports). These generative  supports are described by the support_basis which lie in a nominal domain [0, 1].  The constructor is of the form:\n\n    UniformGenerativeInfo(support_basis::Vector{<:Real}, label::DataType, \n                          [lb::Real = 0, ub::Real = 1])\n\nwhere the support_basis is defined over [lb, ub].\n\nFields\n\nsupport_basis::Vector{Float64}: The basis of generative supports defined in   [0, 1] that will be transformed for each finite element.\nlabel::DataType: The unique label to be given to each generative support.\n\n\n\n\n\n","category":"type"},{"location":"manual/parameter/#InfiniteOpt.has_generative_supports-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.has_generative_supports","text":"has_generative_supports(pref::IndependentParameterRef)::Bool\n\nReturn whether generative supports have been added to pref in accordance  with its generative support info.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.support_label-Tuple{AbstractGenerativeInfo}","page":"Infinite Parameters","title":"InfiniteOpt.support_label","text":"support_label(info::AbstractGenerativeInfo)::DataType\n\nReturn the support label to be associated with generative supports produced in  accordance with info. This is intended an internal method that should be  extended for user defined types of AbstractGenerativeInfo.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.generative_support_info-Tuple{IndependentParameterRef}","page":"Infinite Parameters","title":"InfiniteOpt.generative_support_info","text":"generative_support_info(pref::IndependentParameterRef)::AbstractGenerativeInfo\n\nReturn the generative support information associated with pref.\n\n\n\n\n\n","category":"method"},{"location":"manual/parameter/#InfiniteOpt.make_generative_supports","page":"Infinite Parameters","title":"InfiniteOpt.make_generative_supports","text":"make_generative_supports(info::AbstractGenerativeInfo,\n                         pref::IndependentParameterRef,\n                         existing_supps::Vector{Float64}\n                         )::Vector{Float64}\n\nGenerate the generative supports for pref in accordance with info and the  existing_supps that pref has. The returned supports should not include  existing_supps. This is intended as internal method to enable  add_generative_supports and should be extended for any user defined  info types that are created to enable new measure and/or derivative evaluation  techniques that require the creation of generative supports.\n\n\n\n\n\n","category":"function"},{"location":"manual/parameter/#InfiniteOpt.add_generative_supports","page":"Infinite Parameters","title":"InfiniteOpt.add_generative_supports","text":"add_generative_supports(pref::IndependentParameterRef)::Nothing\n\nCreate generative supports for pref if needed in accordance with its  generative support info using make_generative_supports and add them to  pref. This is intended as an internal function, but can be useful user defined  optimizer model extensions that utlize our support system.\n\n\n\n\n\nadd_generative_supports(prefs; [kwargs...])\n\nDefine add_generative_supports for general variable references. It relies on add_generative_supports being defined for the underlying DispatchVariableRef, otherwise an ArgumentError is thrown. See the underlying docstrings for more information. Note that this is a auto generated wrapper and the underlying method may or may not use kwargs.\n\n\n\n\n\n","category":"function"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"EditURL = \"https://github.com/pulsipher/InfiniteOpt.jl/blob/master/docs/src/examples/Stochastic Optimization/farmer.jl\"","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Two-Stage-Stochastic-Program","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/#Introduction","page":"Two-Stage Stochastic Program","title":"Introduction","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"First let's consider a standard two-stage stochastic program. Such problems consider 1st stage variables x in X subseteq mathbbR^n_x which denote upfront (here-and-now) decisions made before any realization of the random parameters xi in mathbbR^n_xi is observed, and 2nd stage variables y(xi) in mathbbR^n_y which denote recourse (wait-and-see) decisions that are made in response to realizations of xi. Moreover, the objective seeks to optimize 1st stage costs f_1(x) and second stage costs f_2(x y(xi)) which are evaluated over the uncertain domain via a risk measure R_xicdot (e.g., the expectation mathbbE_xicdot). Putting this together, we obtain the two-stage stochastic program:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"beginaligned\n    min_x y(xi)  f_1(x) + R_xif_2(x y(xi)) \n    textst   g_i(x y(xi)) = 0  i in I\n     h_j(x y(xi)) leq 0  j in J\n      x in X\nendaligned","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"where g_i(x y(xi))  i in I denote 2nd stage equality constraints, h_j(x y(xi))  j in J are 2nd stage inequality constraints, and X denotes the set of feasible 1st stage decisions.","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Formulation","page":"Two-Stage Stochastic Program","title":"Formulation","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"For an example, we consider the classic farmer problem. Here the farmer must allocate farmland x_c for each crop c in C with random yields per acre xi_c such that he minimizes expenses (i.e., maximizes profit) while fulfilling contractual demand d_c. If needed he can purchase crops from other farmers to satisfy his contracts. He can also sell extra crop yield that exceeds his contractual obligations. Thus, here we have 1st stage variables x_c and 2nd stage variables of crops sold w_c(xi) and crops purchased y_c(xi). Putting this together using the expectation mathbbE_xicdot as our risk measure we obtain:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"beginaligned\n    undersetx y(xi) w(xi)textmin  sum_c in C alpha_c x_c + mathbbE_xileftsum_c in Cbeta_c y_c(xi) - lambda_c w_c(xi)right \n    textst   sum_c in C x_c leq barx\n     xi_c x_c + y_c(xi) - w_c(xi) geq d_c  c in C \n     0 leq x_c leq barx  c in C \n     0 leq y_c(xi) leq bary_c  c in C \n     0 leq w_c(xi) leq barw_c  c in C \n     xi_c in Xi_c  c in C\nendaligned","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"where alpha_c are production costs, beta_c are the purchase prices, lambda_c are the selling prices, barx is the total acreage, bary_c are purchases limits, barw_c are selling limits, and Xi_c are the underlying distributions.","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Problem-Setup","page":"Two-Stage Stochastic Program","title":"Problem Setup","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"First let's import the necessary packages:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"using InfiniteOpt, Distributions, Ipopt","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Next let's specify the problem data:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"num_scenarios = 10 # small amount for example\nC = 1:3\nα = [150, 230, 260] # land cost\nβ = [238, 210, 0]   # purchasing cost\nλ = [170, 150, 36]  # selling price\nd = [200, 240, 0]   # contract demand\nxbar = 500          # total land\nwbar3 = 6000        # no upper bound on the other crops\nybar3 = 0           # no upper bound on the other crops\nΞ = [Uniform(0, 5), Uniform(0, 5), Uniform(10, 30)]; # the distributions\n","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Problem-Definition","page":"Two-Stage Stochastic Program","title":"Problem Definition","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Let's start by setting up the infinite model that uses Ipopt as the optimizer that will ultimately be used to solve the transcribed variant:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"model = InfiniteModel(Ipopt.Optimizer)\nset_optimizer_attribute(model, \"print_level\", 0);\n","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Now let's define the infinite parameters using @infinite_parameter:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@infinite_parameter(model, ξ[c in C] ~ Ξ[c], num_supports = num_scenarios)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:3\nAnd data, a 3-element Vector{GeneralVariableRef}:\n ξ[1]\n ξ[2]\n ξ[3]","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Now let's define all of the decision variables using @variables:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@variables(model, begin\n    # 1st stage variables\n    0 <= x[C] <= xbar\n    # 2nd stage variables\n    0 <= y[C], Infinite(ξ)\n    0 <= w[C], Infinite(ξ)\nend)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Next, the objective is defined using @objective and 𝔼:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@objective(model, Min, sum(α[c] * x[c] for c in C) +\n                       𝔼(sum(β[c] * y[c] - λ[c] * w[c] for c in C), ξ))","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"150 x[1] + 230 x[2] + 260 x[3] + 𝔼{ξ}[238 y[1](ξ) - 170 w[1](ξ) + 210 y[2](ξ) - 150 w[2](ξ) - 36 w[3](ξ)]","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Finally, all we need to do is define the constraints using @constraints:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@constraints(model, begin\n    # capacity constraint\n    sum(x[c] for c in C) <= xbar\n    # balances\n    [c in C], ξ[c] * x[c] + y[c] - w[c] >= d[c]\n    # crop limits\n    w[3] <= wbar3\n    y[3] <= ybar3\nend)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Problem-Solution","page":"Two-Stage Stochastic Program","title":"Problem Solution","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"With the model defined, let's optimize and get the results","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"optimize!(model)\nx_opt = value.(x)\nprofit = -objective_value(model)\n\nprintln(\"Land Allocations: \", [round(x_opt[k], digits = 2) for k in keys(x_opt)])\nprintln(\"Expected Profit: \\$\", round(profit, digits = 2))","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Land Allocations: [48.56, 214.77, 236.67]\nExpected Profit: $57099.53\n","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"We did it!","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#CVaR-Objective","page":"Two-Stage Stochastic Program","title":"CVaR Objective","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"An interesting modification to the above problem would be to use a CVaR risk measure instead of an expectation. This also can be readily achieved via InfiniteOpt. The CVaR measure is defined:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"CVaR_epsilon(X) = undersett in mathbbRtextinfleftt + frac11-epsilon mathbbEtextmax(0 X - t) right","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"where epsilon is the confidence level. Inserting this into the formulation, we now obtain:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"beginaligned\n    undersetx y(xi) w(xi) t q(xi)textmin  sum_c in C alpha_c x_c + t + frac11-epsilon mathbbE_xiq(xi) \n    textst  sum_c in C x_c leq barx\n     xi_c x_c + y_c(xi) - w_c(xi) geq d_c  c in C \n     0 leq x_c leq barx  c in C \n     0 leq y_c(xi) leq bary_c  c in C \n     0 leq w_c(xi) leq barw_c  c in C \n     xi_c in Xi_c  c in C \n     q(xi) geq sum_c in Cbeta_c y_c(xi) - lambda_c w_c(xi) - t \n     q(xi) geq 0\nendaligned","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"where q(xi) is introduced to handle the max operator. Let's update and resolve our InfiniteOpt model using epsilon = 095:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Define the additional variables:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@variables(model, begin\n    t\n    q >= 0, Infinite(ξ)\nend)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Redefine the objective:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@objective(model, Min, sum(α[c] * x[c] for c in C) + t + 1 / (1 - 0.95) * 𝔼(q, ξ))","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"150 x[1] + 230 x[2] + 260 x[3] + t + 19.999999999999982 𝔼{ξ}[q(ξ)]","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Add the max constraint:","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"@constraint(model, q >= sum(β[c] * y[c] - λ[c] * w[c] for c in C) - t)","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"q(ξ) - 238 y[1](ξ) + 170 w[1](ξ) - 210 y[2](ξ) + 150 w[2](ξ) + 36 w[3](ξ) + t ≥ 0.0, ∀ ξ[1] ~ Uniform, ξ[2] ~ Uniform, ξ[3] ~ Uniform","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Optimize and get the results","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"optimize!(model)\nx_opt = value.(x)\ny_opt = value.(y)\nw_opt = value.(w)\nprofit = -sum(α[c] * x_opt[c] for c in C) - 1 / num_scenarios *\n            sum(β[c] * y_opt[c][k] - λ[c] * w_opt[c][k] for c in C, k in 1:num_scenarios)\n\nprintln(\"Land Allocations: \", [round(x_opt[k], digits = 2) for k in keys(x_opt)])\nprintln(\"Expected Profit: \\$\", round(profit, digits = 2))","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Land Allocations: [28.58, 0.0, 471.42]\nExpected Profit: $-27187.13\n","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"That's it!","category":"page"},{"location":"examples/Stochastic Optimization/farmer/#Maintenance-Tests","page":"Two-Stage Stochastic Program","title":"Maintenance Tests","text":"","category":"section"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"These are here to ensure this example stays up to date.","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"using Test\n@test termination_status(model) == MOI.LOCALLY_SOLVED\n@test x_opt isa JuMPC.DenseAxisArray{<:Real}\n@test profit isa Real","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"Test Passed","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"","category":"page"},{"location":"examples/Stochastic Optimization/farmer/","page":"Two-Stage Stochastic Program","title":"Two-Stage Stochastic Program","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img class=\"display-light-only\" src=\"assets/full_logo.png\" alt=\"InfiniteOpt logo\"/>\n<img class=\"display-dark-only\" src=\"assets/full_logo-dark.png\" alt=\"InfiniteOpt logo\"/>","category":"page"},{"location":"","page":"Home","title":"Home","text":"A JuMP extension for expressing and solving infinite-dimensional optimization  problems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nInfiniteOpt v0.5 introduces general nonlinear modeling to InfiniteOpt!  Thus, the possibilities for applications is vast. Please see  Nonlinear Expressions for more information.","category":"page"},{"location":"#What-is-InfiniteOpt?","page":"Home","title":"What is InfiniteOpt?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt.jl provides a general mathematical abstraction to express and solve  infinite-dimensional optimization problems (i.e., problems with decision  functions). Such problems stem from areas such as space-time programming and  stochastic programming. InfiniteOpt is meant to facilitate intuitive model  definition, automatic transcription into solvable models, permit a wide range  of user-defined extensions/behavior, and more. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"It builds upon JuMP to add support for many complex modeling objects which  include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Infinite parameters (e.g., time, space, uncertainty, etc.)\nFinite parameters (similar to ParameterJuMP)\nInfinite variables (e.g., y(t x))\nDerivatives (e.g., fracpartial y(t x)partial t)\nMeasures (e.g., int_t in mathcalD_ty(tx) dt, mathbbEy(xi))\nMore","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nInfiniteOpt is intended to be used for infinite-dimensional optimization  problems. Finite problems (e.g., directly modeling a discrete time model)  should instead be modeled using JuMP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Moreover, InfiniteOpt decouples the infinite-dimensional formulations from the  finite transformations typically used to solve them. This readily enables diverse  techniques be used to solve these types of problems. By default, we employ  direct transcription (i.e., discretization) transformations whose features  include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Efficient implementations that scale linearly!\nDiverse integral approximations (e.g., quadratures, sampling)\nDiverse derivative approximations (e.g., finite difference, orthogonal  collocation)\nSophisticated support point management system\nCompatible with all JuMP-supported solvers","category":"page"},{"location":"","page":"Home","title":"Home","text":"Accepted infinite/finite problem forms currently include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Variables\nContinuous and semi-continuous\nBinary\nInteger and semi-integer\nSemi-definite\nDerivatives\nOrdinary derivative operators (of any order)\nPartial derivative operators (of any order)\nMeasures\nUnivariate and multivariate integrals \nUnivariate and multivariate expectations \nArbitrary measure operators (via general measure API)\nObjectives\nLinear\nQuadratic (convex and non-convex)\nGeneral nonlinear\nConstraints\nLinear\nQuadratic (convex and non-convex)\nGeneral nonlinear\nConic\nSemi-definite\nIndicator","category":"page"},{"location":"#Infinite-Dimensional-Optimization-with-InfiniteOpt.jl","page":"Home","title":"Infinite-Dimensional Optimization with InfiniteOpt.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See our YouTube overview of infinite-dimensional programming and InfiniteOpt.jl's  capabilities from JuliaCon 2021:  (Image: youtube)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt.jl is a registered Julia package and can be added simply by  inputting the following in the package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.6) pkg> add InfiniteOpt","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please visit our Installation Guide for more details and information on how to get started.","category":"page"},{"location":"#First-Steps","page":"Home","title":"First Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt is extension of JuMP, thus new users should start by  familiarizing themselves with how to use JuMP first. See  JuMP's documentation to learn more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once you're familiar with JuMP check out our Quick Start Guide to get  started. From there we provide extensive documentation to help you along, please  see How to Use the Documentation for more info.","category":"page"},{"location":"#How-to-Use-the-Documentation","page":"Home","title":"How to Use the Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt is intended to serve both as a high-level interface for  infinite-dimensional optimization and as a highly customizable/extendable  platform for implementing advanced techniques. With this in mind, we provide the  User Guide sections to walk through the ins and outs of InfiniteOpt. Each  page in the User Guide typically contains the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"An Overview section describing the purpose of the page.\nA Basic Usage section to guide using InfiniteOpt at a high level.\nOther sections offering more in-depth information/guidance beyond basic usage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We also provide a technical manual in the API Manual sections which are  comprised of the docstrings of all the public methods and types that comprise  InfiniteOpt. These detail the technical aspects of each function, method, macro,  and composite type.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Details, instructions, templates, and tutorials on how to write user-defined  extensions in InfiniteOpt are provided on the Extensions page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, case study examples are provided in the Examples sections.","category":"page"},{"location":"#Questions","page":"Home","title":"Questions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For additional help please visit and post in our  Discussion Forum.","category":"page"},{"location":"#Contribution","page":"Home","title":"Contribution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"InfiniteOpt is a powerful tool with a broad scope lending to a large realm of  possible feature additions and enhancements. So, we are thrilled to support  anyone who would like to contribute to this project in any way big or small.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For small documentation fixes (such as typos or wording clarifications) please  do the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Click on Edit on GitHub at the top of the documentation page\nMake the desired changes\nSubmit a pull request","category":"page"},{"location":"","page":"Home","title":"Home","text":"For other contributions, please visit our  Developers Guide for step by step instructions and to  review our style guide.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: DOI)  (Image: DOI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you use InfiniteOpt.jl in your research, we would greatly appreciate your  citing it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{pulsipher2022unifying,\n      title = {A unifying modeling abstraction for infinite-dimensional optimization},\n      journal = {Computers & Chemical Engineering},\n      volume = {156},\n      year = {2022},\n      issn = {0098-1354},\n      doi = {https://doi.org/10.1016/j.compchemeng.2021.107567},\n      url = {https://www.sciencedirect.com/science/article/pii/S0098135421003458},\n      author = {Joshua L. Pulsipher and Weiqi Zhang and Tyler J. Hongisto and Victor M. Zavala},\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"A pre-print version is freely available though ArXiv.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We acknowledge our support from the Department of Energy under grant  DE-SC0014114.","category":"page"},{"location":"manual/result/#result_manual","page":"Results","title":"Results","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"A technical manual for querying optimized InfiniteOpt models. See the  respective guide for more information.","category":"page"},{"location":"manual/result/#Statuses","page":"Results","title":"Statuses","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.termination_status(::InfiniteModel)\nJuMP.raw_status(::InfiniteModel)\nJuMP.primal_status(::InfiniteModel)\nJuMP.dual_status(::InfiniteModel)","category":"page"},{"location":"manual/result/#JuMP.termination_status-Tuple{InfiniteModel}","page":"Results","title":"JuMP.termination_status","text":"JuMP.termination_status(model::InfiniteModel)\n\nExtend JuMP.termination_status  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.raw_status-Tuple{InfiniteModel}","page":"Results","title":"JuMP.raw_status","text":"JuMP.raw_status(model::InfiniteModel)\n\nExtend JuMP.raw_status  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.primal_status-Tuple{InfiniteModel}","page":"Results","title":"JuMP.primal_status","text":"JuMP.primal_status(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.primal_status  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.dual_status-Tuple{InfiniteModel}","page":"Results","title":"JuMP.dual_status","text":"JuMP.dual_status(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.dual_status  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#General","page":"Results","title":"General","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.solve_time(::InfiniteModel)\nJuMP.simplex_iterations(::InfiniteModel)\nJuMP.barrier_iterations(::InfiniteModel)\nJuMP.node_count(::InfiniteModel)\nJuMP.result_count(::InfiniteModel)","category":"page"},{"location":"manual/result/#JuMP.solve_time-Tuple{InfiniteModel}","page":"Results","title":"JuMP.solve_time","text":"JuMP.solve_time(model::InfiniteModel)\n\nExtend JuMP.solve_time  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.simplex_iterations-Tuple{InfiniteModel}","page":"Results","title":"JuMP.simplex_iterations","text":"JuMP.simplex_iterations(model::InfiniteModel)\n\nExtend JuMP.simplex_iterations  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.barrier_iterations-Tuple{InfiniteModel}","page":"Results","title":"JuMP.barrier_iterations","text":"JuMP.barrier_iterations(model::InfiniteModel)\n\nExtend JuMP.barrier_iterations  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.node_count-Tuple{InfiniteModel}","page":"Results","title":"JuMP.node_count","text":"JuMP.node_count(model::InfiniteModel)\n\nExtend JuMP.node_count  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.result_count-Tuple{InfiniteModel}","page":"Results","title":"JuMP.result_count","text":"JuMP.result_count(model::InfiniteModel)\n\nExtend result_count to return the number of results available to query after a  call to optimize!.\n\nExample\n\njulia> result_count(model)\n1\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#Objective","page":"Results","title":"Objective","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.objective_bound(::InfiniteModel)\nJuMP.objective_value(::InfiniteModel)\nJuMP.dual_objective_value(::InfiniteModel)","category":"page"},{"location":"manual/result/#JuMP.objective_bound-Tuple{InfiniteModel}","page":"Results","title":"JuMP.objective_bound","text":"JuMP.objective_bound(model::InfiniteModel)\n\nExtend JuMP.objective_bound  for InfiniteModels in accordance with that reported by its optimizer  model. Errors if such a query is not supported or if the optimizer model  hasn't be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.objective_value-Tuple{InfiniteModel}","page":"Results","title":"JuMP.objective_value","text":"JuMP.objective_value(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.objective_value  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.dual_objective_value-Tuple{InfiniteModel}","page":"Results","title":"JuMP.dual_objective_value","text":"JuMP.dual_objective_value(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.dual_objective_value  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#Variables","page":"Results","title":"Variables","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.has_values(::InfiniteModel)\nJuMP.value(::GeneralVariableRef)\nJuMP.reduced_cost(::GeneralVariableRef)\nJuMP.optimizer_index(::GeneralVariableRef)\nInfiniteOpt.map_value\nInfiniteOpt.map_reduced_cost\nInfiniteOpt.map_optimizer_index","category":"page"},{"location":"manual/result/#JuMP.has_values-Tuple{InfiniteModel}","page":"Results","title":"JuMP.has_values","text":"JuMP.has_values(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.has_values  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.value-Tuple{GeneralVariableRef}","page":"Results","title":"JuMP.value","text":"JuMP.value(vref::GeneralVariableRef; [result::Int = 1, \n           label::Type{<:AbstractSupportLabel} = PublicLabel,\n           ndarray::Bool = false, kwargs...])\n\nExtend JuMP.value to return the value(s) of vref in accordance with its  reformulation variable(s) stored in the optimizer model and the result index  result of the most recent solution obtained. Use JuMP.has_values to check if a result exists before asking for values. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the values associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the values of infinite  variables are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the variable has multiple  infinite parameter dependencies.\n\nTo provide context for the results it may be helpful to also query the variable's parameter_refs and supports which will have a one-to-one correspondence with the value(s). It may also be helpful to query via optimizer_model_variable to retrieve the variables(s) that these values are based on. These functions should  all be called with the same keyword arugments for consistency.\n\nFor extensions, this only works if optimizer_model_variable has been extended correctly and/or map_value has been extended for variables.\n\nExample\n\njulia> value(z)\n42.0\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.reduced_cost-Tuple{GeneralVariableRef}","page":"Results","title":"JuMP.reduced_cost","text":"JuMP.reduced_cost(vref::GeneralVariableRef)\n\nExtend JuMP.reduced_cost. This returns the reduced cost(s) of a variable. This  will be a vector of scalar values for an infinite variable or will be a scalar  value for finite variables. \n\nExample\n\njulia> reduced_cost(x)\n12.81\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.optimizer_index-Tuple{GeneralVariableRef}","page":"Results","title":"JuMP.optimizer_index","text":"JuMP.optimizer_index(vref::GeneralVariableRef; \n                     [label::Type{<:AbstractSupportLabel} = PublicLabel,\n                     ndarray::Bool = false, kwargs...])\n\nExtend JuMP.optimizer_index to return the MathOptInterface index(es) of  vref in accordance with its reformulation variable(s) stored in the optimizer  model.\n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the optimizer indices associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the indices of infinite  variables are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the variable has multiple  infinite parameter dependencies.\n\nIt may also be helpful to query via optimizer_model_variable to retrieve the variables(s) that these indices are based on. These should use the  same keyword arguments for consistency.\n\nFor extensions, this only works if optimizer_model_variable has been extended correctly and/or map_optimizer_index has been extended for variables.\n\nExample\n\njulia> optimizer_index(x)\n4-element Array{MathOptInterface.VariableIndex,1}:\n MathOptInterface.VariableIndex(2)\n MathOptInterface.VariableIndex(3)\n MathOptInterface.VariableIndex(4)\n MathOptInterface.VariableIndex(5)\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#InfiniteOpt.map_value","page":"Results","title":"InfiniteOpt.map_value","text":"map_value([ref/expr], key::Val{ext_key_name}, result::Int; kwargs...)\n\nMap the value(s) of ref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. Here ref need refer to methods for both variable references and constraint references. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable, optimizer_model_expression, and/or optimizer_model_constraint. Such as is the case with reformuations that do not have a direct mapping between variables and/or constraints in the original infinite form. Otherwise, optimizer_model_variable, optimizer_model_expression, and optimizer_model_constraint are used to make these mappings by default where kwargs are passed on these functions. Here  result is the result index used in value.\n\n\n\n\n\n","category":"function"},{"location":"manual/result/#InfiniteOpt.map_reduced_cost","page":"Results","title":"InfiniteOpt.map_reduced_cost","text":"map_reduced_cost(vref::GeneralVariableRef, key::Val{ext_key_name}, \n                  result::Int; kwargs...)\n\nMap the reduced cost(s) of vref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable. Such as is the case with reformulations  that do not have a direct mapping between variables in the original infinite form. Otherwise, optimizer_model_variable, is used to make these mappings by default where kwargs are passed on these functions. Here  result is the result index used in value.\n\n\n\n\n\n","category":"function"},{"location":"manual/result/#InfiniteOpt.map_optimizer_index","page":"Results","title":"InfiniteOpt.map_optimizer_index","text":"map_optimizer_index(ref, key::Val{ext_key_name}; kwargs...)\n\nMap the MathOptInterface index(es) of ref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. Here ref need refer to methods for both variable references and constraint references. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable and optimizer_model_constraint. Such as is the case with reformuations that do not have a direct mapping between variables and/or constraints in the original infinite form. Otherwise, optimizer_model_variable and optimizer_model_constraint are used to make these mappings by default where kwargs are passed on as well.\n\n\n\n\n\n","category":"function"},{"location":"manual/result/#Constraints","page":"Results","title":"Constraints","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.has_duals(::InfiniteModel)\nJuMP.value(::InfOptConstraintRef)\nJuMP.optimizer_index(::InfOptConstraintRef)\nJuMP.dual(::InfOptConstraintRef)\nJuMP.shadow_price(::InfOptConstraintRef)\nInfiniteOpt.map_dual","category":"page"},{"location":"manual/result/#JuMP.has_duals-Tuple{InfiniteModel}","page":"Results","title":"JuMP.has_duals","text":"JuMP.has_duals(model::InfiniteModel; [result::Int = 1])\n\nExtend JuMP.has_duals  for InfiniteModels in accordance with that reported by its optimizer  model and the result index result of the most recent solution obtained.  Errors if such a query is not supported or if the optimizer model hasn't  be solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.value-Tuple{InfOptConstraintRef}","page":"Results","title":"JuMP.value","text":"JuMP.value(cref::InfOptConstraintRef; [result::Int = 1,\n           label::Type{<:AbstractSupportLabel} = PublicLabel,\n           ndarray::Bool = false, kwargs...])\n\nExtend JuMP.value to return the value(s) of cref in accordance with its  reformulation constraint(s) stored in the optimizer model and the result index  result of the most recent solution obtained. Use  JuMP.has_values to check if a result  exists before asking for values. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the values associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the values of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nTo provide context for the results it may be helpful to also query the constraint's parameter_refs and supports which will have a one-to-one correspondence with the value(s). It may also be helpful to query via optimizer_model_constraint to retrieve the constraint(s) that these values are based on. By default, only the  values corresponding to public supports are returned. These functions should  all be called with the same keyword arugments for consistency.\n\nFor extensions, this only works if optimizer_model_constraint has been extended correctly and/or map_value has been extended for constraints. \n\nExample\n\njulia> value(c1)\n4-element Array{Float64,1}:\n -0.0\n 20.9\n 20.9\n 20.9\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.optimizer_index-Tuple{InfOptConstraintRef}","page":"Results","title":"JuMP.optimizer_index","text":"JuMP.optimizer_index(cref::InfOptConstraintRef; \n                     [label::Type{<:AbstractSupportLabel} = PublicLabel,\n                     ndarray::Bool = false, kwargs...])\n\nExtend JuMP.optimizer_index to return the MathOptInterface index(es) of  cref in accordance with its reformulation constraints(s) stored in the  optimizer model. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the optimizer indices associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the indices of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nIt may also be helpful to query via optimizer_model_constraint to retrieve the constraints(s) that these indices are based on. The same keyword  arguments should be used for consistency.\n\nFor extensions, this only works if optimizer_model_constraint has been extended correctly and/or map_optimizer_index has been extended for constraints.\n\nExample\n\njulia> optimizer_index(c1)\n4-element Array{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}},1}:\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(1)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(2)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(3)\n MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64},MathOptInterface.GreaterThan{Float64}}(4)\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.dual-Tuple{InfOptConstraintRef}","page":"Results","title":"JuMP.dual","text":"JuMP.dual(cref::InfOptConstraintRef; [result::Int = 1, \n          label::Type{<:AbstractSupportLabel} = PublicLabel,\n          ndarray::Bool = false, kwargs...])\n\nExtend JuMP.dual to return the dual(s) of cref in accordance with its  reformulation constraint(s) stored in the optimizer model and the result index  result of the most recent solution obtained. Use  JuMP.has_duals to check if a result  exists before asking for duals. \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the duals associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the duals of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nIt may also be helpful to query via optimizer_model_constraint to retrieve the constraint(s) that these duals are based on. Calling parameter_refs and supports may also be insightful. Be sure to use the same keyword arguments for consistency.\n\nFor extensions, this only works if optimizer_model_constraint has been extended correctly and/or map_dual has been extended for constraints.\n\nExample\n\njulia> dual(c1)\n4-element Array{Float64,1}:\n -42.0\n -42.0\n 32.3\n 0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#JuMP.shadow_price-Tuple{InfOptConstraintRef}","page":"Results","title":"JuMP.shadow_price","text":"JuMP.shadow_price(cref::InfOptConstraintRef; \n                  [label::Type{<:AbstractSupportLabel} = PublicLabel,\n                  ndarray::Bool = false, kwargs...])\n\nExtend JuMP.shadow_price to return the shadow price(s) of cref in accordance  with its reformulation constraint(s) stored in the optimizer model. Use  JuMP.has_duals to check if a result  exists before asking for the shadow price (it uses the duals). \n\nThe keyword arugments label and ndarray are what TranscriptionOpt employ  and kwargs denote extra ones that user extensions may employ.\n\nBy default only the shadow prices associated with public supports are returned, the  full set can be accessed via label = All. Moreover, the prices of infinite  constraints are returned as a list. However, a n-dimensional array  can be obtained via ndarray = true which is handy when the constraint has multiple  infinite parameter dependencies.\n\nIt may also be helpful to query via optimizer_model_constraint to  retrieve the constraint(s) that these shadow prices are based on. Calling  parameter_refs and supports may also be insightful. Be sure to use the same  keyword arguments for consistency.\n\nFor extensions, this only works if optimizer_model_constraint has been  extended correctly and/or map_dual has been extended for constraints. \n\nExample\n\njulia> shadow_price(c1)\n4-element Array{Float64,1}:\n 42.0\n 42.0\n -32.3\n -0.0\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#InfiniteOpt.map_dual","page":"Results","title":"InfiniteOpt.map_dual","text":"map_dual(cref::InfOptConstraintRef, key::Val{ext_key_name}, result::Int; \n         kwargs...)\n\nMap the dual(s) of cref to its counterpart in the optimizer model type that is distininguished by its extension key key as type Val{ext_key_name}. Here ref need refer to methods for both variable references and constraint references. This only needs to be defined for reformulation extensions that cannot readily extend optimizer_model_variable and optimizer_model_constraint. Such as is the case with reformuations that do not have a direct mapping between variables and/or constraints in the original infinite form. Otherwise, optimizer_model_variable and optimizer_model_constraint are used to make these mappings by default where kwargs are also pass on to. Here result is  the result index that is used in dual. \n\n\n\n\n\n","category":"function"},{"location":"manual/result/#Expressions","page":"Results","title":"Expressions","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.value(::Union{JuMP.GenericAffExpr{<:Any, <:GeneralVariableRef}, JuMP.GenericQuadExpr{<:Any, <:GeneralVariableRef}})","category":"page"},{"location":"manual/result/#JuMP.value-Tuple{Union{GenericAffExpr{var\"#s40\", var\"#s39\"} where {var\"#s40\", var\"#s39\"<:GeneralVariableRef}, GenericQuadExpr{var\"#s38\", var\"#s37\"} where {var\"#s38\", var\"#s37\"<:GeneralVariableRef}}}","page":"Results","title":"JuMP.value","text":"value(ex::GenericAffExpr, var_value::Function)\n\nEvaluate ex using var_value(v) as the value for each variable v.\n\n\n\n\n\nvalue(ex::GenericQuadExpr, var_value::Function)\n\nEvaluate ex using var_value(v) as the value for each variable v.\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#LP-Sensitivity","page":"Results","title":"LP Sensitivity","text":"","category":"section"},{"location":"manual/result/","page":"Results","title":"Results","text":"JuMP.lp_sensitivity_report(::InfiniteModel)\nInfOptSensitivityReport ","category":"page"},{"location":"manual/result/#JuMP.lp_sensitivity_report-Tuple{InfiniteModel}","page":"Results","title":"JuMP.lp_sensitivity_report","text":"JuMP.lp_sensitivity_report(model::InfiniteModel; \n                           [atol::Float64 = 1e-8])::InfOptSensitivityReport\n\nExtends JuMP.lp_sensitivity_report to generate and return an LP sensitivity  report in accordance with the optimizer model. See  InfOptSensitivityReport for syntax details on how to query it. atol  denotes the optimality tolerance and should match that used by the solver to  compute the basis. Please refer to JuMP's documentation for more technical  information on interpretting the output of the report.\n\nExample\n\njulia> report = lp_sensitivity_report(model);\n\njulia> report[x]\n(0.0, 0.5)\n\n\n\n\n\n","category":"method"},{"location":"manual/result/#InfiniteOpt.InfOptSensitivityReport","page":"Results","title":"InfiniteOpt.InfOptSensitivityReport","text":"InfOptSensitivityReport\n\nA wrapper DataType for JuMP.SensitivityReports in InfiniteOpt.  These are generated based on the optimizer model and should be made via the use of  lp_sensitivity_report. Once  made these can be indexed to get the sensitivies with respect to variables and/or  constraints. The indexing syntax for these is: \n\nreport[ref::[GeneralVariableRef/InfOptConstraintRef]; \n       [label::Type{<:AbstractSupportLabel} = PublicLabel,\n       ndarray::Bool = false, kwargs...]]\n\nThis is enabled in user-defined optimizer model extensions by appropriately  extending optimizer_model_variable and optimizer_model_constraint.\n\nFields\n\nopt_report::JuMP.SensitivityReport: The LP sensitivity captured from the optimizer model.\n\n\n\n\n\n","category":"type"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"DocTestFilters = [r\"≤|<=\", r\" == | = \", r\" ∈ | in \", r\" for all | ∀ \"]","category":"page"},{"location":"guide/variable/#var_docs","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"A guide for variables in InfiniteOpt. See the respective  technical manual for more details.","category":"page"},{"location":"guide/variable/#Overview","page":"Variables","title":"Overview","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Decision variables are at the very core of InfiniteOpt as its name alludes to mathematical programs that entail infinite decision spaces (i.e., contain infinite decision variables). Principally, 4 variable types are employed: infinite, semi-infinite, point, and finite. Infinite variables encompass any  decision variable that is parameterized by an infinite parameter(s) (e.g.,  space-time variables and stochastic recourse variables). Semi-infinite variables  denote infinite variables where certain infinite parameters are restricted to  point values. Point variables are infinite variables at a particular point.  Finally, finite variables are decisions that are made irrespective of the  infinite domain (e.g., first stage variables and design variables).","category":"page"},{"location":"guide/variable/#Basic-Usage","page":"Variables","title":"Basic Usage","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Infinite, semi-infinite, point, and finite variables are summarized in the  following table:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Name Variable Type Object Description Example\nInfinite Infinite decision functions y(t x xi)\nSemi-Infinite SemiInfinite partially evaluated decision functions y(t_0 x xi)\nPoint Point fully evaluated decision functions y(t_0 x_0 xi_k)\nFinite NA classical decision variables z","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Infinite, semi-infinite, point, and finite variables are defined via  @variable  (inherited from JuMP) with their respective variable type  object arguments: Infinite, SemiInfinite, and Point  (finite variables don't use a variable type object).","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"warning: Warning\nThe variable nomenclature used by previous versions of InfiniteOpt has  been updated for enhanced clarity and long term longevity. Note that  finite variables were previously called hold variables. Also, the  @infinite_variable, @point_variable, and @hold_variable macros are now  discontinued in favor of using @variable for all decision variable  types.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Let's first setup a simple space-time model with infinite parameters time t and spatial position x:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> using InfiniteOpt\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10])\nt\n\njulia> @infinite_parameter(model, x[1:2] in [-1, 1], independent = true)\n2-element Vector{GeneralVariableRef}:\n x[1]\n x[2]","category":"page"},{"location":"guide/variable/#Infinite-Variables","page":"Variables","title":"Infinite Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Now let's define a time dependent infinite variable y(t) with a lower bound of 0:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y >= 0, Infinite(t))\ny(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This creates a Julia variable y that points to the decision variable y(t) that is stored in model which is added to include a lower bound of 0. Another useful case is that of defining an array of variables w that depend on both position and time:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, w[i = 1:3], Infinite(t, x), start = [0, 2, 1][i])\n3-element Vector{GeneralVariableRef}:\n w[1](t, x)\n w[2](t, x)\n w[3](t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus we create a Julia array variable w whose elements w[i] point to their respective infinite variables w[i](t, x) stored in model. Note that the i used in the array definition can be used to index attributes assigned to each variable in the array. In this case, we used i to assign different initial guess values for each variable via the start keyword argument.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Moreover, for infinite variables a function can be given to determine the start values over a range of support points (e.g., a guess trajectory). This is discussed further below in the Macro Definition section.","category":"page"},{"location":"guide/variable/#Semi-Infinite-Variables","page":"Variables","title":"Semi-Infinite Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Now let's restrict the above infinite variables w[i](t, x) to a particular  time via semi-infinite variables:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, w0[i = 1:3], SemiInfinite(w[i], 0, x))\n3-element Vector{GeneralVariableRef}:\n w0[1]\n w0[2]\n w0[3]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus we create a Julia array variable w0 whose elements w0[i] point to their respective semi-infinite variables w[i](0, x) stored in model. Alternatively,  we can make a semi-infinite variable via our restriction syntax:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> [w[i](0, x) for i in 1:3]\n3-element Vector{GeneralVariableRef}:\n w0[1]\n w0[2]\n w0[3]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"These are often useful to define semi-infinite variables directly in constraint  expressions. See Restricted Variables to learn about symbolic inline  definition of semi-infinite variables.","category":"page"},{"location":"guide/variable/#Point-Variables","page":"Variables","title":"Point Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Now let's add some point variables. These allow us to consider an infinite variable evaluated at a certain infinite parameter point. For example, let's define a point variable for y(0) with the alias y0 that is fixed at a value of 0:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y0 == 0, Point(y, 0))\ny0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Here we create a Julia variable y0 which points to the point variable y(0). Notice that in the second argument we specify the infinite variable indexed at the appropriate parameter value(s). Point variables automatically inherit attributes of the infinite variable (e.g., bounds, start values, etc.), but these are overwritten with properties specified for the point variable. In this case the lower bound inherited from y(t) is overwritten by instead fixing y(0) to a value of 0.  ","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Alternatively, we can use the convenient restriction syntax:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> y(0)\ny0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Again this is very useful when embedded directly in constraint expressions  (e.g., when defining boundary conditions). See Restricted Variables to  learn about symbolic inline definition of point variables.","category":"page"},{"location":"guide/variable/#Finite-Variables","page":"Variables","title":"Finite Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Finally, we can add finite variables to our model. These denote variables that hold a single value over the infinite domain or some portion of it (e.g., design variables, first stage variables, etc.). Let's add a finite variable 0 leq d leq 42 that is an integer variable and defined over all infinite domains (i.e., time and space):","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, 0 <= d <= 42, Int)\nd","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This creates a Julia variable d that points to the finite variable d which has a lower bound of 0, an upper bound of 42, and is an integer variable. Thus, finite  variables are equivalent to those employed in JuMP.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Now we have defined variables that we can use in the objective, measures, and constraints. Please note that the above tutorial only shows a small portion of the capabilities and options available in defining variables. A full description is provided in the documentation below.","category":"page"},{"location":"guide/variable/#Variable-Definition-Methodology","page":"Variables","title":"Variable Definition Methodology","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Defining/initializing a variable (what happens behind the scenes of the variable  macros) principally involves the following steps:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Define the variable information pertaining to JuMP.VariableInfo (e.g.,  bounds, indicate if it is integer, etc.)\nConstruct a concrete subtype of InfOptVariableType to specify the  desired type and its required additional information if appropriate\nBuild the variable object via JuMP.build_variable\nAdd the variable object to an InfiniteModel and assign a name via  JuMP.add_variable\nCreate a GeneralVariableRef that points to the variable object  stored in the model","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nThis methodology is presented for those wanting to learn more about the ins  and outs of variable definition. We recommend that all variables be created  via @variable. See Macro Variable Definition.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The JuMP.VariableInfo data structure stores the following variable information:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"has_lb::Bool: Specifies a Bool it has a lower bound\nlower_bound::Real: Specifies lower bound value\nhas_ub::Bool: Specifies a Bool it has a upper bound\nupper_bound::Real: Specifies upper bound value\nhas_fix::Bool: Specifies a Bool it is fixed\nfixed_value::Real: Specifies the fixed value\nhas_start::Bool: Specifies a Bool it has a start value\nstart::Union{Real, Function}: Specifies the start guess value, this can be a                                 function for infinite variables that intakes a                                 support and maps it to a guess value (allowing                                 to specify guess trajectories)\nbinary: Specifies Bool if it is binary\ninteger: Specifies Bool if it is integer.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, the user specifies this information to prepare such an object:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> info = VariableInfo(true, 0., true, 42., false, 0., false, 0., false, true);","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Here we specified a lower bound of 0, an upper bound of 42, and that it is integer valued.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The variable type objects (InfOptVariableType subtypes) are used with  build_variable to specify the desired variable type along with any additional  information needed for that type. For example, let's build an infinite variable  y(t) that has an lower bound of 0, an upper bound of 42, and is integer valued:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @infinite_parameter(model, t in [0, 10])\nt\n\njulia> info = VariableInfo(true, 0, true, 42, false, 0, false, 0, false, true);\n\njulia> inf_var = build_variable(error, info, Infinite(t));","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, we create an InfiniteVariable object with the desired properties.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Once a variable has been built, it needs to be added to our model and a Julia variable should be defined to reference it. Variables are added via add_variable which adds a variable object to the model, assigns a name to the variable, adds any constraints associated with the JuMP.VariableInfo, and returns an appropriate variable reference variable (a GeneralVariableRef). For example, let's add inf_var to model:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> var_ref = add_variable(model, inf_var, \"y\")\ny(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, we have added an infinite variable y that is parameterized by t with the variable information mentioned above and now have a GeneralVariableRef called var_ref that can be used in defining our infinite model.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Note that the use of GeneralVariableRefs and the corresponding concrete subtypes of DispatchVariableRefs is discussed on the Expressions page.","category":"page"},{"location":"guide/variable/#Macro-Variable-Definition","page":"Variables","title":"Macro Variable Definition","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The @variable  macro automates the variable definition process discussed above in the  Variable Definition Methodology section via a straightforward symbolic  syntax. The only key difference is that non-anonymous macro calls will register  variable names to ensure they are not repeated. Anonymous macro calls forgo this  step and exactly follow the process described above. This section will highlight  the details of using this macro which is the recommended way to define variables.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"tip: Tip\nJuMP's documentation on variables  is a good place to start since InfiniteOpt simply extends JuMP to  accommodate our additional variable types.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We directly build upon  JuMP.@variable  to create all of our decision variable types. To illustrate this via example,  let's setup a model with a variety of infinite parameters t in 010,  x in -1 1^3, and xi in mathcalN(0 1):","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> using InfiniteOpt, Distributions\n\njulia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 10]);\n\njulia> @infinite_parameter(model, x[1:3] in [-1, 1], independent = true);\n\njulia> @infinite_parameter(model, ξ ~ Normal());","category":"page"},{"location":"guide/variable/#Variable-Types","page":"Variables","title":"Variable Types","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We specify the variable type by providing a subtype of InfOptVariableType  as an extra positional argument:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y, Infinite(t, x, ξ)) # explicit infinite variable\ny(t, x, ξ)\n\njulia> @variable(model, ys, SemiInfinite(y, 0, x, ξ)) # explicit semi-infinite variable\nys\n\njulia> @variable(model, yp, Point(y, 0, [1, 1, 1], 0)) # explicit point variable\nyp\n\njulia> @variable(model, z) # explicit finite variable\nz","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For anonymous definition, we use the variable_type keyword argument instead:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia>  y = @variable(model, variable_type = Infinite(t, x, ξ)) # anon infinite variable\nnoname(t, x, ξ)\n\njulia> ys = @variable(model, variable_type = SemiInfinite(y, 0, x, ξ)) # anon semi-infinite variable\nnoname(0, [x[1], x[2], x[3]], ξ)\n\njulia> yp = @variable(model, variable_type = Point(y, 0, [1, 1, 1], 0)) # anon point variable\nnoname(0, [1, 1, 1], 0)\n\njulia> z = @variable(model) # anon finite variable\nnoname","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Please refer to Infinite, SemiInfinite, and Point  for more information.","category":"page"},{"location":"guide/variable/#Variable-Names","page":"Variables","title":"Variable Names","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Variable inherit their names from the symbolic literal given with explicit  definitions:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, myname, Infinite(t))\nmyname(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This creates an infinite variable with name \"myname\" that is added to model  and creates a Julia variable myname that stores a GeneralVariableRef  which points to the infinite variable in model.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can overwrite the inherited name using the base_name keyword argument:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, myjlvar, Infinite(t), base_name = \"myname\")\nmyname(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This creates an infinite variable with name \"myname\" that is added to model  and creates a Julia variable myjlvar that stores a GeneralVariableRef  which points to the infinite variable in model.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"This syntax is particularly useful for anonymous variables to have meaningful  names:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> myjlvar = @variable(model, variable_type = Infinite(t), base_name = \"myname\")\nmyname(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"See the Queries and Modification sections further below for more information on  how to query/modify variable names.","category":"page"},{"location":"guide/variable/#Variable-Bounds","page":"Variables","title":"Variable Bounds","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can specify variable bounds in like manner to JuMP variables. Let's  demonstrate this with infinite variables: ","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y_lb >= 0, Infinite(t, x)) # add w/ lower bound\ny_lb(t, x)\n\njulia> @variable(model, y_ub <= 10, Infinite(t, x)) # add w/ upper bound\ny_ub(t, x)\n\njulia> @variable(model, 0 <= y_bd <= 10, Infinite(t, x)) # add w/ bounds\ny_bd(t, x)\n\njulia> @variable(model, y_fix == 42, Infinite(t, x)) # add w/ fixed value \ny_fix(t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"warning: Warning\nWhen creating a variable with only a single bound and the value of the bound  is not an explicit numeric literal, the name of the variable must appear on  the left-hand side. Otherwise, the macro will error.@variable(model, 0 <= y, Infinite(t)) # okay\n\na = 0\n@variable(model, a <= y, Infinite(t)) # bad \n@variable(model, y >= a, Infinite(t)) # okay","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For anonymous definition, we use the lower_bound and upper_bound. Let's use  finite variables for example:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> z_lb = @variable(model, lower_bound = 0, base_name = \"z_lb\") # add w/ lower bound\nz_lb\n\njulia> z_ub = @variable(model, upper_bound = 10, base_name = \"z_ub\") # add w/ upper bound\nz_ub\n\njulia> z_bd = @variable(model, lower_bound = 0, upper_bound = 10, \n                        base_name = \"z_bd\") # add w/ bounds\nz_bd\n\njulia> z_fix = @variable(model, lower_bound = 10, upper_bound = 10, \n                         base_name = \"z_fix\") # ~add w/ fixed value \nz_fix","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Note that there isn't a keyword for fixing variables. Instead  fix should be used. ","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"See the Queries and Modification sections further below for more information on  how to query/modify variable bounds.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nPoint variables inherit all the bounds of their respective infinite variables  by default. This can be overwritten by specifying different ones at creation.@variable(model, y >= 0, Infinite(t, x)) # has lower bound\n@variable(model, yp == 0, Point(w, 0, [0, 0, 0])) # forces the point to be fixed","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nBounds cannot be specified on creation for semi-infinite variables. Note that  they will inherit these from the infinite variable they depend on. Additional  bound be created by directly adding constraints. For example:@variable(model, y >= 0, Infinite(t, x)) # has lower bound\n@variable(model, ys, SemiInfinite(w, 0, x)) # inherits the lower bound\n@constraint(model, ys <= 10) # add upper bound to ys","category":"page"},{"location":"guide/variable/#Variable-Integrality","page":"Variables","title":"Variable Integrality","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can constrain the integrality of decision variables in like manner to JuMP  using the Bin and Int positional arguments for explicit macro definition:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y_bin, Infinite(t, x), Bin) # add as binary variable\ny_bin(t, x)\n\njulia> @variable(model, y_int, Infinite(t, x), Int) # add as integer variable\ny_int(t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For anonymous definition, we use the binary and integer keyword arguments:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> y_bin = @variable(model, variable_type = Infinite(t, x), binary = true)\nnoname(t, x)\n\njulia> y_int = @variable(model, variable_type = Infinite(t, x), integer = true)\nnoname(t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Moreover, we can add bounds as needed to constrain the domain of integer variables:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, 0 <= y_int2 <= 10, Infinite(t, x), Int)\ny_int2(t, x)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"See the Queries and Modification sections further below for more information on  how to query/modify variable integralities.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nPoint variables inherit the integrality of their respective infinite variables  by default. This can be overwritten by specifying different ones at creation.@variable(model, y, Infinite(t, x), Bin) # is binary\n@variable(model, yp, Point(w, 0, [0, 0, 0]), Int) # is integer","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nIntegrality cannot be specified for semi-infinite variables. Note that  they will inherit these from the infinite variable they depend on. ```","category":"page"},{"location":"guide/variable/#Variable-Start-Values","page":"Variables","title":"Variable Start Values","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Optimization solvers often benefit from giving initial guesses for the optimal  decision variable values. Following JuMP vernacular, these are called start  values. We use the keyword start to specify these at variable creation:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, z_start, start = 42)\nz_start","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Moreover, infinite variables can accept a function that specifies the start  value of over the range of its infinite parameters (e.g., a function that provides  an initial guess trajectory). For example, consider the difference between these  two infinite variables:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, y_uniform, Infinite(t), start = 0) # start with y(t) = 0\ny_uniform(t)\n\njulia> @variable(model, y_sin, Infinite(t), start = sin) # start with y(t) = sin(t)\ny_sin(t)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Note that such start functions must be able to accept parameter values as  arguments that exactly match the format of the infinite parameters given in  Infinite(params...).","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"note: Note\nStart values be specified for semi-infinite variables. Note that  they will inherit these from the infinite variable they depend on.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"See the Queries and Modification sections further below for more information on  how to query/modify variable names.","category":"page"},{"location":"guide/variable/#Variable-Containers","page":"Variables","title":"Variable Containers","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Optimization problems often involve multi-dimensional decision variables. Luckily,  JuMP provides a versatile syntax for specifying collections (i.e., containers)  of variables. See  JuMP's container documentation  for a thorough tutorial on the syntax. It uses Arrays, DenseAxisArrays, and  SparseAxisArrays to contain the variable references created. Here  DenseAxisArrays and SparseAxisArrays allow the use of nontraditional indices  (i.e., can use indices that are not sequential integers).","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"To illustrate what this means, consider the two equivalent ways to define  a 3-dimensional vector of variables with indices [1, 2, 3]:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> s = [0, 2, 1];\n\njulia> var_refs = @variable(model, [i = 1:3], start = s[i], base_name = \"z\")\n3-element Vector{GeneralVariableRef}:\n z[1]\n z[2]\n z[3]\n\njulia> var_refs = Vector{GeneralVariableRef}(undef, 3);\n\njulia> for i in eachindex(var_refs)\n          var_refs[i] = @variable(model, start = s[i], base_name = \"z\")\n       end","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Moreover, here are a few illustrative examples:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, z_dense[2:4])\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 2:4\nAnd data, a 3-element Vector{GeneralVariableRef}:\n z_dense[2]\n z_dense[3]\n z_dense[4]\n\njulia> @variable(model, z_named[[:A, :C, :Z]])\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, [:A, :C, :Z]\nAnd data, a 3-element Vector{GeneralVariableRef}:\n z_named[A]\n z_named[C]\n z_named[Z]\n\njulia> @variable(model, z_sparse[i = 1:2, j = 1:2; i + j <= 3])\nJuMP.Containers.SparseAxisArray{GeneralVariableRef, 2, Tuple{Int64, Int64}} with 3 entries:\n  [1, 1]  =  z_sparse[1,1]\n  [1, 2]  =  z_sparse[1,2]\n  [2, 1]  =  z_sparse[2,1]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The variable macro will by default automatically detect which container type  should be used. However, the user can specify a particular container type using  the container keyword. For example, if we want to use indices a:b where  a = 1 and b = 3, a DenseAxisArray will be used by default, but we can  force it to be a regular Array:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> a = 1; b = 3;\n\njulia> var_refs1 = @variable(model, [a:b], base_name = \"z\")\n1-dimensional DenseAxisArray{GeneralVariableRef,1,...} with index sets:\n    Dimension 1, 1:3\nAnd data, a 3-element Vector{GeneralVariableRef}:\n z[1]\n z[2]\n z[3]\n\njulia> var_refs2 = @variable(model, [a:b], base_name = \"z\", container = Array)\n3-element Vector{GeneralVariableRef}:\n z[1]\n z[2]\n z[3]","category":"page"},{"location":"guide/variable/#Variable-Sets","page":"Variables","title":"Variable Sets","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Like JuMP variables, we can constrain variables on creation to lie in  particular sets. This allows us to make semi-definite variables, cone constrained  variables, and more. ","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For example:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variable(model, z_psd[1:2, 1:2], PSD) # positive semi-definite variable matrix\n2×2 LinearAlgebra.Symmetric{GeneralVariableRef, Matrix{GeneralVariableRef}}:\n z_psd[1,1]  z_psd[1,2]\n z_psd[1,2]  z_psd[2,2]\n\njulia> @variable(model, z_cone[1:3] in SecondOrderCone()) # 2nd order cone variables\n3-element Vector{GeneralVariableRef}:\n z_cone[1]\n z_cone[2]\n z_cone[3]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Typically, variable sets can be defined symbolically using the syntax  var in set. For anonymous variables, the set keyword argument must be used:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> z_cone = @variable(model, [1:3], set = SecondOrderCone())\n3-element Vector{GeneralVariableRef}:\n noname\n noname\n noname","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For more a thorough tutorial please see  JuMP's semi-definite documentation  and/or JuMP's variables constrained on creation documentation.","category":"page"},{"location":"guide/variable/#Anonymous-Variables","page":"Variables","title":"Anonymous Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Above we talked showed the syntax for both explicit and anonymous variable  creation. Anonymous creation is typically helpful in the following situations:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"defining multiple variables with the same name\ncreating variables in user defined extensions\nusing nontraditional naming","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For anonymous variables, the only accepted positional arguments are the model  and the container expression [indices...]. Everything else must be specified  via keyword arguments kwargs... as shown in the subsections above.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"@variable(model, [indices...], kwargs...)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For more information, see  JuMP's anonymous variable documentation.","category":"page"},{"location":"guide/variable/#The-@variables-Macro","page":"Variables","title":"The @variables Macro","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"When using many @variable calls, we can instead use  @variables to  enhance the readability:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> @variables(model, begin\n           y1, Infinite(t, x)\n           y2[i=1:2] >= i, Infinite(t), (start = i, base_name = \"Y_$i\")\n           z2, Bin\n       end)\n","category":"page"},{"location":"guide/variable/#Restricted-Variables","page":"Variables","title":"Restricted Variables","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"To define point and semi-infinite variables, we can also use restrict  for convenient inline definitions.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For example, let's consider restricting the infinite variable y(t, x):","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> model = InfiniteModel();\n\njulia> @infinite_parameter(model, t in [0, 1]);\n\njulia> @infinite_parameter(model, x[1:2] in [-1, 1]);\n\njulia> @variable(model, y, Infinite(t, x))\ny(t, x)\n\njulia> pt = restrict(y, 0, [-1, 1]) # make point variable y(0, [-1, 1])\ny(0, [-1, 1])\n\njulia> semi = restrict(y, 0, x) # make semi-infinite variable y(0, x)\ny(0, [x[1], x[2]])","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can also, even more conveniently, treat the infinite variable as a function  to accomplish this in a more intuitive syntax:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> pt = y(0, [-1, 1]) # make point variable y(0, [-1, 1])\ny(0, [-1, 1])\n\njulia> semi = y(0, x) # make semi-infinite variable y(0, x)\ny(0, [x[1], x[2]])","category":"page"},{"location":"guide/variable/#Queries","page":"Variables","title":"Queries","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"InfiniteOpt contains a large suite of methods to query information about variables. This suite is comprised of extensions to all current JuMP query methods and many more that are specific to InfiniteOpt. A number of the more commonly used ones are explained in this section, but all of the available methods are explained in the technical manual.","category":"page"},{"location":"guide/variable/#General-Information","page":"Variables","title":"General Information","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Here we describe some methods used to query general variable information such as the name. Variable names can be extracted via name which returns the name of a variable. The index of a variable (where it is stored  in the infinite model) is accessed via  index and the infinite model it  belongs to is given by  owner_model. These methods are demonstrated below:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> name(y)\n\"y\"\n\njulia> index(y)\nInfiniteVariableIndex(2)\n\njulia> model_where_stored = owner_model(y);","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Also, num_variables is useful in returning the total number of decision variables currently stored in an infinite model:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> num_variables(model)\n61\n\njulia> num_variables(model, PointVariable)\n2","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Similarly, all_variables returns a list of all the variables currently added to the model.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Finally, variable_by_name can be employed to return the appropriate GeneralVariableRef based off  of the variable name if it is unique. Returns nothing if such a name cannot be  found and errors if it is not unique. For example, we can request the reference  associated with \"y_ub\":","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> variable_by_name(model, \"y_ub\")\ny_ub(t, x)","category":"page"},{"location":"guide/variable/#Variable-Constraint-Info","page":"Variables","title":"Variable Constraint Info","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"As described above, variables in InfiniteOpt can have constraints associated with them like JuMP variables. These constraints include:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"lower bounds\nupper bounds\nfixed values\nbinary valued\ninteger valued.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, a number of methods exist to query information about these constraints.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"First, the [has/is]_[variable constraint type] methods indicate whether or  not a variable has that particular constraint type. For example, to query if a  variable y_lb has a lower bound we can use has_lower_bound:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> has_lower_bound(y_bd)\ntrue","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, y_bd does have a lower bound. The other methods are has_upper_bound, is_fixed, is_binary, and is_integer.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Next, the [ConstraintType]Ref methods return an appropriate explicit type InfOptConstraintRef that points to the constraint (errors if no such constraint exists). For example, the upper bound constraint of y_bd can be obtained via UpperBoundRef:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> UpperBoundRef(y_bd)\ny_bd(t, x) ≤ 10.0, ∀ t ∈ [0, 10], x[1] ∈ [-1, 1], x[2] ∈ [-1, 1], x[3] ∈ [-1, 1]","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The other methods are LowerBoundRef, FixRef, BinaryRef, and IntegerRef.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Finally, variable constraints that entail values (i.e., lower bounds, upper bounds, and fixed values) have their values queried via the appropriate method. For example, the lower bound value of y_bd is obtained via lower_bound:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> lower_bound(y_bd)\n0.0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Note these methods error when no such constraint is associated with the variable. The other methods are upper_bound and fix_value.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"The start value can also be queried via  start_value where nothing  is returned if not start value is specified:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> start_value(var_refs[1])\n0.0\n\njulia> start_value(yp)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For infinite and semi-infinite variables, the start_value_function  should be used instead:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> start_value_function(y_sin)\nsin (generic function with 18 methods)","category":"page"},{"location":"guide/variable/#Variable-Use","page":"Variables","title":"Variable Use","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"InfiniteOpt defines a number of methods to track if and how variables are used in an infinite model. For example, used_by_constraint is used to determine if a variable is used by a constraint. For example, let's see if y_bd is used by a constraint:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> used_by_constraint(y_bd)\ntrue","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Other methods include used_by_measure and used_by_objective. For infinite variables, used_by_point_variable can also be used in a similar manner.","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Finally, in general is_used can be used to determine if a variable is used at all in the infinite model or not. For  example, if we check yp using is_used we find that it isn't:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> is_used(yp)\nfalse","category":"page"},{"location":"guide/variable/#Type-Specific","page":"Variables","title":"Type Specific","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"InfiniteOpt also employs a few methods for specific variable types that return information pertaining to that particular variable type. For infinite variables  and semi-infinite variables, parameter_refs returns the tuple of infinite parameters that the variable depends on. For example, consider y(t, x):","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> parameter_refs(y)\n(t, GeneralVariableRef[x[1], x[2], x[3]], ξ)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For point variables, infinite_variable_ref and parameter_values return the infinite variable it depends on and the infinite parameter point values, respectively. For example, consider the point variable yp:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> infinite_variable_ref(yp)\ny(t, x, ξ)\n\njulia> parameter_values(yp)\n(0.0, [1.0, 1.0, 1.0], 0.0)","category":"page"},{"location":"guide/variable/#Modification","page":"Variables","title":"Modification","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"InfiniteOpt employs a wide variety of methods to modify/delete variables. These are comprised of JuMP extensions and methods native only to InfiniteOpt. This section will highlight some of the more commonly used ones. All of the methods/macros are detailed in the technical manual.","category":"page"},{"location":"guide/variable/#Deletion","page":"Variables","title":"Deletion","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Like JuMP v0.19+, InfiniteOpt fully supports deletion throughout its data types. Any variable and its dependencies can be deleted via delete. Thus, when  delete is invoked any bound/type constraints associated with the variable will  be removed and it will be removed from any other constraints, measures, and/or  objectives. For example, if we delete y(t, x, ξ) it will be removed along with  its  bounds and the point variable yp will also be removed since it is a  dependent:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> delete(model, y)\n\njulia> is_valid(model, yp)\nfalse","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Another class of deletion methods correspond to variable constraints. For example, delete_lower_bound is used to delete a lower bound associated with a variable if it has one. Let's illustrate this by deleting the lower bound of y_bd:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> delete_lower_bound(y_bd)\n\njulia> has_lower_bound(y_bd)\nfalse","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Other similar methods are delete_upper_bound, unfix, unset_binary, and unset_integer.","category":"page"},{"location":"guide/variable/#Variable-Constraints","page":"Variables","title":"Variable Constraints","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Another class of methods seek to add/modify variable constraints such as bounds. For example, set_lower_bound specifies the lower bound of a variable. We can add a lower bound of 0 to z by:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> set_lower_bound(z, 0)\n\njulia> lower_bound(z)\n0.0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Thus, adding a lower bound to z. Furthermore, we can later modify the lower bound using the same method:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> set_lower_bound(z, -2)\n\njulia> lower_bound(z)\n-2.0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Other similar methods are set_upper_bound, fix, set_binary, and set_integer.","category":"page"},{"location":"guide/variable/#Start-Values","page":"Variables","title":"Start Values","text":"","category":"section"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"We can update the start value of a variable using  set_start_value. For example:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> set_start_value(z, 0)\n\njulia> start_value(z)\n0.0","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"For infinite variables, this should be done using  set_start_value_function. FOr example:","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"julia> set_start_value_function(myname, sin)\n\njulia> start_value_function(myname)\nsin (generic function with 18 methods)","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"Again note that such start functions must be able to accept parameter values as  arguments that exactly match the format of the infinite parameters given in  Infinite(params...).","category":"page"},{"location":"guide/variable/","page":"Variables","title":"Variables","text":"A number of other techniques exist for the various variable types can be found in  the manual below.","category":"page"}]
}
